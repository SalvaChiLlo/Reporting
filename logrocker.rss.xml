
  <rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:georss="http://www.georss.org/georss"
    xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">
  
    <channel>
      <title>LogRocker Engineering Blog</title>
      <atom:link href="https://raw.githubusercontent.com/SalvaChiLlo/Reporting/main/logrocker.rss.xml" rel="self" type="application/rss+xml" />
      <link>https://LogRocker.engineering/</link>
      <description>The official blog of the LogRocker Engineering team.</description>
      <lastBuildDate>Sat, 29 Apr 2023 20:14:47 +0000</lastBuildDate>
      <language>en-US</language>
      <sy:updatePeriod>hourly</sy:updatePeriod>
      <sy:updateFrequency>
    1	</sy:updateFrequency>
  
  
      <image>
        <url>https://i0.wp.com/LogRocker.engineering/wp-content/uploads/2019/01/cropped-LogRocker_icon.jpg?fit=32%2C32&#038;ssl=1</url>
        <title>LogRocker Engineering Blog</title>
        <link>https://LogRocker.engineering/</link>
        <width>32</width>
        <height>32</height>
      </image>

		<item>
			<title>Building custom maps with React Native Mapbox - LogRocket Blog</title>
			<link>https://blog.logrocket.com/building-custom-maps-react-native-mapbox/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/building-custom-maps-react-native-mapbox/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<title>Building custom maps with React Native Mapbox - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/">Building custom maps with React Native Mapbox - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168173 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react-native" id="post-168173">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/andrewbaisden/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/andrewbaisden/">
Andrew Baisden <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I’m a full-stack developer from London. Programming is one of my passions in life. A majority of my most recent skills have been self-taught. I find this is one of the best ways to learn because you can go at your own pace.</span>
</div>
</div>
<h1 class="posttitle">Building custom maps with React Native Mapbox</h1>
<p>
<span class="post-date"><time class="post-date">
April 27, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1854</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="486" src="https://blog.logrocket.com/wp-content/uploads/2023/04/react-native-mapbox.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="React Native Mapbox"                /> <article class="article-post">
<p>Mapbox is a technology startup that provides developers and organizations with configurable and high-performance mapping, geospatial, and location-based services. It provides a suite of tools and APIs for developing interactive maps, geocoding, navigation, routing, and other location-based applications.</p>
<p><a href="https://www.mapbox.com/">Mapbox</a> is based on open data and open source software, allowing developers to access and utilize maps, add unique styles, and integrate location features into their apps, websites, and other digital goods. Vector tiles power Mapbox’s maps, allowing for rapid loading and seamless interactions.</p>
<p>In this article, we’ll build a React Native mobile app with a Mapbox integration using the <a href="https://github.com/rnmapbox/maps">Mapbox Maps SDK for React Native</a> and the popular React Native command-line tool <a href="https://docs.expo.dev/get-started/installation/">Expo CLI</a>.</p>
<p>I’ll use a Mac for development, however, you could also use either Windows, Linux, or a physical Android or iOS device. However, iOS development and deployment require macOS, so just bear that in mind if you ever plan on publishing apps to the Apple App Store. You can create Android apps on macOS, Windows, and Linux.</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#project-setup">Project setup</a></li>
<li><a href="#eas-build-setup">EAS Build setup</a></li>
<li><a href="#customizing-mapbox-app">Customizing our Mapbox app</a>
<ul >
<li><a href="#adding-custom-markers-pop-ups">Adding custom markers and pop-ups</a></li>
<li><a href="#mapview"><code>MapView</code></a></li>
<li><a href="#camera">Camera</a></li>
<li><a href="#point-annotation"><code>PointAnnotation</code></a></li>
<li><a href="#displaying-user-location">Displaying a user’s location</a></li>
</ul>
</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>The <a href="https://www.mapbox.com/">Mapbox</a> package requires <a href="https://github.com/rnmapbox/maps/blob/main/plugin/install.md">custom native code</a>, so if you’re developing on iOS, then you’ll need an <a href="https://developer.apple.com/">Apple Developer Account</a>. Apple Developer accounts aren’t free; you have to enroll and pay an annual fee to develop iOS apps; at the time of writing, the fee is less than $100.</p>
<p>Install and set up the following tools and services:</p>
<ul>
<li><a href="https://developer.apple.com/">Apple Developer account</a></li>
<li><a href="https://docs.expo.dev/get-started/installation/">Expo CLI</a></li>
<li><a href="https://nodejs.org/en">Node and npm</a>: I used Node v18.15.0 (LTS)</li>
<li><a href="https://www.mapbox.com/">Mapbox account</a></li>
<li><a href="https://expo.dev/client">Expo Go Mobile App</a></li>
</ul>
<p>If you plan on developing apps for Android or testing on an Android simulator, then you’ll need to install and set up <a href="https://developer.android.com/studio">Android Studio</a> on your computer beforehand. Additionally, testing on an iOS physical device requires <a href="https://developer.apple.com/documentation/xcode/enabling-developer-mode-on-a-device">Enabling Developer Mode on a device</a>.</p>
<h2 id="project-setup">Project setup</h2>
<p>Now, let’s set up our project. Navigate into a directory using the command line and then <a href="https://blog.logrocket.com/native-routing-expo-react-native/">initiate the commands below to scaffold an Expo project</a>:</p>
<pre class="language-bash hljs">npx create-expo-app mapbox-app
cd mapbox-app
</pre>
<p>Next, install the Mapbox package:</p>
<pre class="language-bash hljs">npm i @rnmapbox/maps
</pre>
<p>Open the project in the IDE of your choice and add the following code to the bottom of the <code>app.json</code> file:</p>
<pre class="language-javascript hljs">{
  "expo": {
    "plugins": [
      [
        "@rnmapbox/maps",
        {
          "RNMapboxMapsImpl": "mapbox",
          "RNMapboxMapsDownloadToken": "sk.ey...qg"
        }
      ]
    ]
  }
}
</pre>
<p>Now, you’ll need to create an access token that will replace the <code>"sk.ey...qg"</code> string in the <code>json</code> file under the <code>RNMapboxMapsDownloadToken</code>. Sign into your Mapbox account and find the <code>Tokens</code> page in the menu:</p>
<p><img             class="aligncenter wp-image-168189 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/react-mapbox-access-token-create-token.jpeg" alt="React Mapbox Access Token Create Token" width="730" height="190"    /><noscript><img               class="aligncenter wp-image-168189 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/react-mapbox-access-token-create-token.jpeg" alt="React Mapbox Access Token Create Token" width="730" height="190"  /></noscript></p>
<p>Create a token with the configurations in the following image. It’s important that you select <code>DOWNLOADS:READ</code>; when you’re building with Expo, this allows the token to download Mapbox into the Expo project:</p>
<p><img             class="aligncenter wp-image-168190 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/create-access-token-react-mapbox-expo.jpeg" alt="Create Access Token React Mapbox Expo" width="730" height="835"    /><noscript><img               class="aligncenter wp-image-168190 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/create-access-token-react-mapbox-expo.jpeg" alt="Create Access Token React Mapbox Expo" width="730" height="835"  /></noscript></p>
<p>Copy and paste your newly created token in the <code>app.json</code> file in the key-value pair, like in the following example:</p>
<pre class="language-javascript hljs">{
  "expo": {
    "plugins": [
      [
        "@rnmapbox/maps",
        {
          "RNMapboxMapsImpl": "mapbox",
          "RNMapboxMapsDownloadToken": "put your access token here"
        }
      ]
    ]
  }
}
</pre>
<p>Now, to see if everything is working and properly configured, we’ll create a simple map in our application. Copy and paste the following code into your <code>app.js</code> file:</p>
<pre class="language-javascript hljs">import 'expo-dev-client';

import React from 'react';

import { StyleSheet, View } from 'react-native';

import Mapbox from '@rnmapbox/maps';

Mapbox.setAccessToken('put your public access token here');

const App = () => {
  return (
    &lt;View style={styles.page}>
      &lt;View style={styles.container}>
        &lt;Mapbox.MapView style={styles.map} />
      &lt;/View>
    &lt;/View>
  );
};

export default App;

const styles = StyleSheet.create({
  page: {
    flex: 1,

    justifyContent: 'center',

    alignItems: 'center',
  },

  container: {
    height: 300,

    width: 300,
  },

  map: {
    flex: 1,
  },
});
</pre>
<p>In our <code>app.js</code> file, we require another access token for Mapbox. Go back to your Mapbox account, copy and paste your default public token, and replace the string in the code in the <code>app.js</code> file:</p>
<pre class="language-javascript hljs">Mapbox.setAccessToken('put your public access token here');
</pre>
<h2 id="eas-build-setup">EAS Build setup</h2>
<p><a href="https://docs.expo.dev/build/introduction/">EAS Build</a> is a hosted service that we can use to build app binaries in Expo and React Native projects.</p>
<p>To manage your native projects, EAS Builds are recommended. EAS Build provides a seamless experience, particularly if you’re unfamiliar with Xcode and Android Studio builds, or you don’t have them installed locally on your PC.</p>
<p>First, we have to set up our project to <a href="https://docs.expo.dev/development/create-development-builds/">create development builds</a>. It’s recommended to install the EAS CLI globally as follows:</p>
<pre class="language-bash hljs">npm install -g eas-cli
</pre>
<p>Make sure that you’re inside of the root folder for the <code>mapbox-app</code> project. Run the command below to initialize a development build:</p>
<pre class="language-bash hljs">npx expo install expo-dev-client expo-location
</pre>
<p>Add the following code inside of the newly created <code>eas.json</code> file. We’re adding a new object for the <code>development-simulator</code>:</p>
<pre class="language-javascript hljs">{
  "build": {
    "development-simulator": {
      "developmentClient": true,
      "distribution": "internal",
      "ios": {
        "simulator": true
      }
    }
  }
}
</pre>
<p>Run the command below to create the development build on an iOS Simulator, then go through the steps:</p>
<pre class="language-javascript hljs">eas build --profile development-simulator --platform ios
</pre>
<p>This step can take a long time to complete while it builds everything. You can check the progress by clicking on the <strong>Build details:</strong> link in the command line:</p>
<p><img             class="aligncenter wp-image-168191 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/create-ios-simulator-progress-bar.jpeg" alt="Create ios Simulator Progress Bar" width="730" height="62"    /><noscript><img               class="aligncenter wp-image-168191 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/create-ios-simulator-progress-bar.jpeg" alt="Create ios Simulator Progress Bar" width="730" height="62"  /></noscript></p>
<p><img             class="aligncenter wp-image-168192 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-simulator-build-complete-start-expo.jpeg" alt="Ios Simulator Build Complete Start Expo" width="730" height="789"    /><noscript><img               class="aligncenter wp-image-168192 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/ios-simulator-build-complete-start-expo.jpeg" alt="Ios Simulator Build Complete Start Expo" width="730" height="789"  /></noscript></p>
<p>Wait for the build to complete, then start your Expo project with the development server command. Open it with iOS, and you should see the iOS Simulator with a map on the screen:</p>
<pre class="language-bash hljs">npx expo start --dev-client
</pre>
<p>To make your app run on a physical iOS or Android device, you can <a href="https://docs.expo.dev/develop/development-builds/create-a-build/?redirected">follow the steps under the <strong>On a device</strong> section</a>.</p>
<h2 id="customizing-mapbox-app">Customizing our Mapbox app</h2>
<h3 id="adding-custom-markers-pop-ups">Adding custom markers and pop-ups</h3>
<p>We can create custom markers to represent a point on our map. First, let’s learn about three Mapbox structures, <code><a href="https://docs.mapbox.com/android/maps/api/10.0.0-beta.12/-mapbox%20-maps%20-android/com.mapbox.maps/-map-view/">MapView</a></code>, <a href="https://docs.mapbox.com/help/glossary/camera/">camera</a>, and <a href="https://docs.mapbox.com/android/maps/guides/annotations/annotations/"><code>PointAnnotation</code></a>.</p>
<h3 id="mapview"><code>MapView</code></h3>
<p><code>MapView</code> is an embeddable map interface that we can use to show all of the map data. In our codebase, we use the <code>Mapbox.MapView</code> class as the main wrapper component.</p>
<h3 id="camera">camera</h3>
<p>With Mapbox maps, the camera represents the map’s field of view. The viewport of the camera is governed by numerous elements, including the centre, zoom level, pitch, and bearing.</p>
<h3 id="point-annotation"><code>PointAnnotation</code></h3>
<p><code>PointAnnotation</code> essentially puts a point on our map, which is determined by the coordinates we set in the state value <code>const [coordinates] = useState([-5, 55]);</code>. <code>PointAnnotation</code> uses longitude and latitude to determine where the point should be placed on the map.</p>
<p>Now, replace the code in the <code>App.js</code> file with the following. Don’t forget to save your access token because you’ll need to add it to the new code at the top:</p>
<pre class="language-javascript hljs">import 'expo-dev-client';

import React, { useState } from 'react';

import { StyleSheet, View } from 'react-native';

import Mapbox from '@rnmapbox/maps';

Mapbox.setAccessToken('put your token here');

const App = () => {
  const [calloutVisible, setCalloutVisible] = useState(false);

  const [coordinates] = useState([-5, 55]);

  const onMarkerPress = () => {
    setCalloutVisible(true);
  };

  const loadAnnotationUK = () => {
    return (
      &lt;Mapbox.PointAnnotation
        key="annotationUK"
        id="annotationUK"
        coordinate={[0.1, 51.5]}
        onSelected={onMarkerPress}
      >
        &lt;View
          style={{
            height: 20,

            width: 20,

            backgroundColor: 'green',

            borderColor: 'black',

            borderWidth: 2,

            borderRadius: 50,
          }}
        >&lt;/View>

        &lt;Mapbox.Callout
          title="Welcome to London!"
          contentStyle={{ borderRadius: 5 }}
        >&lt;/Mapbox.Callout>
      &lt;/Mapbox.PointAnnotation>
    );
  };

  return (
    &lt;View style={styles.page}>
      &lt;View style={styles.container}>
        &lt;Mapbox.MapView style={styles.map}>
          &lt;Mapbox.Camera zoomLevel={4} centerCoordinate={coordinates} />

          &lt;Mapbox.PointAnnotation id="uk" coordinate={coordinates} />

          &lt;View>{loadAnnotationUK()}&lt;/View>
        &lt;/Mapbox.MapView>
      &lt;/View>
    &lt;/View>
  );
};

export default App;

const styles = StyleSheet.create({
  page: {
    flex: 1,

    justifyContent: 'center',

    alignItems: 'center',
  },

  container: {
    height: '100%',

    width: '100%',
  },

  map: {
    flex: 1,
  },
});
</pre>
<p>We create a function for a custom pointer with a callout that is displayed when you click on it. We’ve also made the map full-screen so it is no longer cropped in the middle.</p>
<p>Reload the application by hitting the <strong>R</strong> button in the command line for the Expo app, and it will update. Now, you should see a full-screen map with a custom pointer marker on London, UK. Clicking on it will bring up a callout box.</p>
<h3 id="displaying-user-location">Displaying a user’s location</h3>
<p>It’s very common to display a user’s location inside of a map application, so let’s run through a quick demo. We’ll use the <a href="https://docs.expo.dev/versions/latest/sdk/location/"><code>expo-location</code></a> package to detect a user’s location.</p>
<p>Whenever you install a new package in Expo, you’ll have to rebuild the application over again using the <code>eas build --profile development-simulator --platform iOS</code> command or the Android command. It can be quite time-consuming, however, the steps below outline the build process for developing mobile apps with EAS.</p>
<p>Replace the code in the <code>App.js</code> file with the following code. Like we did before, transfer over your token as well:</p>
<pre class="language-javascript hljs">import 'expo-dev-client';

import React, { useState, useEffect } from 'react';

import { StyleSheet, View } from 'react-native';

import Mapbox from '@rnmapbox/maps';

import * as Location from 'expo-location';

Mapbox.setAccessToken('put your token here');

const App = () => {
  const [location, setLocation] = useState(null);

  useEffect(() => {
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();

      if (status !== 'granted') {
        console.error('Permission to access location was denied');

        return;
      }

      const currentLocation = await Location.getCurrentPositionAsync({});

      setLocation(currentLocation.coords);
    })();
  }, []);

  return (
    &lt;View style={styles.container}>
      {location &amp;&amp; (
        &lt;Mapbox.MapView style={styles.map} styleURL={Mapbox.StyleURL.Street}>
          &lt;Mapbox.Camera
            zoomLevel={15}
            centerCoordinate={[location.longitude, location.latitude]}
            animationMode="flyTo"
            animationDuration={2000}
          />

          &lt;Mapbox.PointAnnotation
            id="userLocation"
            coordinate={[location.longitude, location.latitude]}
            title="Your location"
          />
        &lt;/Mapbox.MapView>
      )}
    &lt;/View>
  );
};

export default App;

const styles = StyleSheet.create({
  container: {
    flex: 1,

    backgroundColor: '#fff',
  },

  map: {
    flex: 1,
  },
});
</pre>
<p>Reload the application, open it again in the iOS Simulator, and you should see a dialogue that asks you to allow <code>"mapbox-app"</code> and use the location. Allow it, and the map should load a location on the simulated iPhone.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>You can choose your own location or use one listed by using the iOS Simulator menu, which lets you handle permissions when requesting a user’s location on iOS. It’s possible to spoof a location and create a virtual one.</p>
<p>See the screenshots below for an example of how to do this. With the help of Google Maps or a search engine, you can find the longitude and latitude of any location on earth:</p>
<p><img             class="aligncenter wp-image-168193 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/find-latitude-longitude-google.jpeg" alt="Find Latitude Longitude Google" width="730" height="539"    /><noscript><img               class="aligncenter wp-image-168193 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/find-latitude-longitude-google.jpeg" alt="Find Latitude Longitude Google" width="730" height="539"  /></noscript></p>
<p><img             class="aligncenter wp-image-168195 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/simulate-custom-location-react-native-mapbox.jpeg" alt="Simulate Custom Location React Native Mapbox" width="730" height="414"    /><noscript><img               class="aligncenter wp-image-168195 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/simulate-custom-location-react-native-mapbox.jpeg" alt="Simulate Custom Location React Native Mapbox" width="730" height="414"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>React Native Mapbox provides a strong and versatile method for introducing interactive and visually appealing maps into your mobile applications. By utilizing Mapbox’s vast ecosystem along with React Native’s cross-platform capabilities, developers can create feature-rich, location-based experiences suited to their specific needs.</p>
<p>In this article, we’ve discussed the advantages of utilizing React Native Mapbox, including its customizability and compatibility with both iOS and Android platforms. By implementing Mapbox APIs, developers can accomplish a seamless integration of mapping services with the React Native environment.</p>
<p>Lastly, don’t forget to take advantage of the thriving development communities that surround both React Native and Mapbox. There are many tools, tutorials, and examples available to assist you in overcoming obstacles and learning best practices for designing custom maps for your applications.</p>
<p>With the strong combination of React Native and Mapbox at your disposal, the possibilities for developing compelling, location-based experiences are nearly unlimited. So, go ahead and let your imagination run wild to create personalized maps that actually stand out and bring value to your users.</p>
<p>I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168173" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168173" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168173" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/andrewbaisden/">
Andrew Baisden <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I’m a full-stack developer from London. Programming is one of my passions in life. A majority of my most recent skills have been self-taught. I find this is one of the best ways to learn because you can go at your own pace.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react-native/">#react native</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/what-is-requirements-gathering-template-examples/" rel="prev">What is requirements gathering? Template and examples</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/" rel="next">Exploring the best GraphQL data visualization tools</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/building-custom-maps-react-native-mapbox/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Exploring the best GraphQL data visualization tools - LogRocket Blog</title>
			<link>https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<title>Exploring the best GraphQL data visualization tools - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/">Exploring the best GraphQL data visualization tools - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168424 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-graphql" id="post-168424">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/samson-omojola/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/samson-omojola/">
Samson Omojola <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an experienced software engineer. I love creating applications with responsive, beautiful, intuitive, state-of-the-art designs. I'm skilled in HTML, CSS, JavaScript, Ionic, React, PHP, Laravel, and Flutter.</span>
</div>
</div>
<h1 class="posttitle">Exploring the best GraphQL data visualization tools</h1>
<p>
<span class="post-date"><time class="post-date">
April 27, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2861</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/Exploring-best-GraphQL-data-visualization-tools.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Exploring The Best Graphql Data Visualization Tools"                /> <article class="article-post">
<p>GraphQL is a popular, powerful query tool for APIs. It provides developers with an efficient and flexible way to access and manipulate data in our databases.</p>
<p>With its increasing popularity, many developers are seeking new ways to better understand and visualize their GraphQL data. There are a number of visualization tools that satisfy this need efficiently.</p>
<p>In this article, we will discuss using GraphQL Voyager, GraphiQL, and Altair for data visualization, exploring how you can use these tools to enhance your workflow and gain deeper insights into your data. We will cover:</p>
<ul>
<li><a href="#use-cases-graphql-data-visualizers">Use cases for GraphQL data visualizer</a></li>
<li><a href="#exploring-data-graphql-voyager">Exploring data with GraphQL Voyager</a></li>
<li><a href="#graphql-voyager-caveats-consider">GraphQL Voyager caveats to consider</a></li>
<li><a href="#using-powerful-graphiql-features-construct-queries">Using powerful GraphiQL features to construct queries</a></li>
<li><a href="#important-considerations-using-graphiql">Important considerations while using GraphiQL</a></li>
<li><a href="#using-graphql-altair-work-apis">Using GraphQL Altair to work with APIs</a></li>
<li><a href="#considerations-graphql-altair">Considerations to keep in mind for GraphQL Altair</a></li>
</ul>
<h2 id="use-cases-graphql-data-visualizers">Use cases for GraphQL data visualizers</h2>
<p>GraphQL data visualizers are useful tools for various scenarios, including:</p>
<ul>
<li>Debugging GraphQL APIs</li>
<li>Collaborating with teams</li>
<li>Optimizing performance</li>
<li>Understanding API dependencies</li>
<li>Testing GraphQL APIs</li>
</ul>
<p>Let’s explore each of these use cases in more detail now.</p>
<p>GraphQL data visualizers can help developers <a href="https://blog.logrocket.com/debugging-graphql-apis-insomnia/">debug their GraphQL APIs</a> by giving them visual representations of the data they fetch from their servers. These data visualization tools show you how your queries work and which data they call so you can easily identify any mistakes or errors in your query.</p>
<p>You can also use GraphQL data visualizers to highlight performance issues in your queries and show you how you can optimize said queries. With GraphQL data visualization tools, it’s easy to debug your APIs and ensure that your app works as expected.</p>
<p>In a team setting, different members bring various skills from different areas of focus. A GraphQL data visualizer can help team members communicate better and leverage the team’s collective expertise more efficiently by allowing them to visualize the API and its components.</p>
<p>By visualizing a GraphQL API, developers can identify performance bottlenecks and inefficiencies in query execution. They can then optimize queries to improve response times and overall application performance.</p>
<p>In complex systems with multiple APIs and microservices, a GraphQL visualizer can help developers visualize dependencies between different services, making it easier to identify and resolve issues or bottlenecks.</p>
<p>Data visualization tools also help in testing GraphQL Apis by providing a good view of expected responses and identifying issues with queries.</p>
<h2 id="exploring-data-graphql-voyager">Exploring data with GraphQL Voyager</h2>
<p>One of the most popular and open source data visualization tools for GraphQL is <a href="https://ivangoncharov.github.io/graphql-voyager/">GraphQL Voyager</a>.</p>
<p>GraphQL Voyager provides an interactive visual representation of your GraphQL schema and allows you to look through your API by visually browsing its object types, fields, and relationships.</p>
<p>With its simple and user-friendly interface, you can zoom into and out of your schema easily, search for particular fields, and see data types.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h3>GraphQL Voyager demo</h3>
<p>GraphQL Voyager works by parsing a GraphQL schema and generating a visual representation of its types and fields.</p>
<p>The tool uses the GraphQL introspection query to obtain the schema, making it compatible with any GraphQL server that supports this query. Once the schema is obtained, GraphQL Voyager generates the interactive graph that visualizes the schema.</p>
<p>Let’s explore an example of GraphQL Voyager in action.</p>
<p>Navigate to the <a href="https://ivangoncharov.github.io/graphql-voyager/">live demo of GraphQL Voyager on GitHub</a> to see APIs represented as interactive graphs. For this example, we’ll analyze the Star Wars API.</p>
<p>Click on the “Change Schema” button on the top left side of the screen and select Star Wars:</p>
<p><img             class="aligncenter size-full wp-image-168426 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img1-GraphQL-Voyager-select-Star-Wars-preset.png" alt="Graphql Voyager Interface Showing Popup Window To Select Preset Scheme With Star Wars Api Highlighted" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168426" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img1-GraphQL-Voyager-select-Star-Wars-preset.png" alt="Graphql Voyager Interface Showing Popup Window To Select Preset Scheme With Star Wars Api Highlighted" width="730" height="351"  /></noscript></p>
<p>You’ll see a graphical representation of the schema in the center of the screen. Familiarize yourself with the interface.</p>
<p>The pane on the left side of the screen lists all the object types in the Star Wars schema. The pane on the right side of the screen shows information about the currently selected type or field.</p>
<p>This schema is based on the Star Wars universe and includes object types for characters, films, planets, and other entities from the Star Wars saga. Each type is depicted as a node in the graph.</p>
<p>You can click on a node to view the type details, which include the type name, description, and the fields it contains. The lines you see on the interface represent the relationships between different types and fields in the schema.</p>
<p>In GraphQL, types are connected to each other through their fields, and these connections are represented as edges in the visualization. The edges are directed, meaning that they point from the type that declares the field to the type that the field returns:</p>
<p><img             class="aligncenter size-full wp-image-168427 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img2-GraphQL-Voyager-types-connected-fields-directed-edges.png" alt="Graphql Voyager Interface Showing Arrows Pointing From Type Declaring Field To Type Returned By Field" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168427" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img2-GraphQL-Voyager-types-connected-fields-directed-edges.png" alt="Graphql Voyager Interface Showing Arrows Pointing From Type Declaring Field To Type Returned By Field" width="730" height="351"  /></noscript></p>
<h3>Select a type to explore</h3>
<p>To explore a type in your schema, you can click on its name in the left pane. This will highlight the type in the graphical representation and display its information in the right pane.</p>
<p>As an example, select <code>Film</code>. The <code>Film</code> object type represents a film in the Star Wars universe. It has fields like <code>title</code>, <code>episodeID</code>, <code>openingCrawl</code>, <code>characters</code>, etc.</p>
<p>In GraphQL Voyager, fields are used to define the data that can be queried for a given type. You can explore the fields in <code>Film</code> by clicking on them in the left-side pane.</p>
<p>Once you have selected a field to explore, you can view its details, which include the field name, description, and the arguments it takes. You can also view the type of data returned by the field. Also, it highlights the fields in the right pane.</p>
<h3>View relationships between types</h3>
<p>You can explore relationships between types by clicking on the links between types in the graphical representation. This will highlight the related types and display information about the relationship in the right pane.</p>
<h3>Search for types and fields</h3>
<p>If you have a large schema with many types and fields, you can use the search box at the top of the screen to search for specific types and fields. Just type in a few letters of the name of the type or field you’re looking for, and GraphQL Voyager will filter the list of types and fields accordingly:</p>
<p><img             class="aligncenter size-full wp-image-168428 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img3-GraphQL-Voyager-search-bar.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Left To Search Bar" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168428" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img3-GraphQL-Voyager-search-bar.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Left To Search Bar" width="730" height="351"  /></noscript></p>
<h3>Filtering your search</h3>
<p>GraphQL Voyager offers various options to help you refine your search further:</p>
<p><img             class="aligncenter size-full wp-image-168429 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img4-GraphQL-Voyager-refine-search-options.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Down To Filter Options To Refine Search" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168429" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img4-GraphQL-Voyager-refine-search-options.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Down To Filter Options To Refine Search" width="730" height="351"  /></noscript></p>
<p>The “Sort by Alphabet” setting allows you to sort the nodes — i.e., types — in the schema alphabetically. By default, the nodes are sorted by the order in which they appear in the schema, but using this option can make it easier to find a specific node in a large schema.</p>
<p>Relay is a framework developed by Facebook for building data-driven React applications. If your schema includes Relay-specific types and fields, you can use the “Skip Relay” setting to exclude them from the visualization. This can be useful if you are not using Relay in your application and want to simplify the visualization.</p>
<p>The “Skip deprecated” setting allows you to exclude deprecated fields and types from the visualization. Deprecated fields and types are marked with a strikethrough in the visualization, but excluding them entirely can make the visualization easier to read.</p>
<p>By default, GraphQL Voyager only shows the top-level fields of each type in the visualization. Enabling the “Show leaf fields” setting will also show any “leaf” fields, which are fields that do not have any subfields. This can make it easier to see all the fields available on a type at a glance.</p>
<h2 id="graphql-voyager-caveats-consider">GraphQL Voyager caveats to consider</h2>
<p>It’s important to consider compatibility when working with GraphQL Voyager. This data visualization tool relies on introspection queries to generate its visual representation of the schema. If the GraphQL server doesn’t support introspection, Voyager won’t work.</p>
<p>When it comes to performance, Voyager generates a visual representation of the entire schema, which can be a challenge for large and complex schemas. Make sure you monitor performance metrics and optimize queries as needed.</p>
<h2 id="using-powerful-graphiql-features-construct-queries">Using powerful GraphiQL features to construct queries</h2>
<p><a href="https://github.com/graphql/graphiql">GraphiQL is an interactive web-based IDE</a> that provides a user-friendly interface for writing and executing GraphQL queries.</p>
<p>The GraphiQL IDE is widely used by developers, as it allows you to explore and visualize your GraphQL schema by displaying the useable types and fields, as well as their documentation. With its built-in support explorer, you can easily view the information you need to write your queries.</p>
<p>One of the most useful features of GraphiQL is its power to provide real-time feedback on the GraphQL queries that are constructed.</p>
<p>As a user types a query into GraphiQL, it will immediately highlight any syntax errors and provide autocomplete suggestions for fields and arguments. This makes it easy to quickly write complex queries without having to remember the right syntax for each field.</p>
<p>Let’s go ahead and explore the GraphiQL interface with the <a href="http://graphql.org/swapi-graphql">Star Wars API (SWAPI)</a> as an example.</p>
<p>SWAPI is a public API that provides data about Star Wars movies, characters, planets, and more. We will use GraphiQL to explore SWAPI and demonstrate some of the key features of the GraphiQL interface.</p>
<p>The GraphiQL interface has two main sections — the query editor and the results pane:</p>
<p><img             class="aligncenter size-full wp-image-168430 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img5-GraphiQL-interface.png" alt="Graphiql Interface Showing Query Editor Panel On Left And Result Pane On Right With Smaller Labels For Other Interface Elements" width="730" height="349"    /><noscript><img               class="aligncenter size-full wp-image-168430" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img5-GraphiQL-interface.png" alt="Graphiql Interface Showing Query Editor Panel On Left And Result Pane On Right With Smaller Labels For Other Interface Elements" width="730" height="349"  /></noscript></p>
<p>The query editor section is where we construct our GraphQL queries. The results pane displays the results of our queries in real-time. In the results pane, we can find the data that is returned by the API. <a href="https://blog.logrocket.com/handling-graphql-errors-like-a-champ-with-unions-and-interfaces/">Errors or warnings that are generated by our queries</a> appear there as well.</p>
<p>Now let’s start with a simple query that retrieves information about all Star Wars films. To construct this, we will use the <code>allFilms</code> field and retrieve three fields under it. Run the query below in the editor:</p>
<pre class="language-graphql hljs">{
    allFilms{
      totalCount
      films{
        director
      }
    }
}
</pre>
<p>Click the “play” button after pasting. This will transport the query to the SWAPI API, and display the results in the results pane. As you can see, the results pane displays the data that is returned by the API:</p>
<p><img             class="aligncenter size-full wp-image-168431 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img6-GraphiQL-results-pane.png" alt="Graphiql Interface Showing Data Returned By Api In Results Pane On Right" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168431" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img6-GraphiQL-results-pane.png" alt="Graphiql Interface Showing Data Returned By Api In Results Pane On Right" width="730" height="351"  /></noscript></p>
<h3>Using autocomplete in GraphiQL</h3>
<p>One of the most powerful features of GraphiQL is its autocomplete functionality. As you type a query into the query editor, GraphiQL will provide autocomplete suggestions for fields and arguments. This way, you can create queries quickly without needing to remember the precise syntax for each field.</p>
<p>You can try creating a query that retrieves information about Luke Skywalker to test how autocomplete operates. As you start to type, GraphiQL will display autocomplete suggestions for available fields and arguments:</p>
<pre class="language-graphql hljs">query {
  person(personID: 1) {
    name
    birthYear
    homeworld {
      name
    }
    species {
      name
    }
  }
}
</pre>
<p>The GraphiQL interface includes a number of buttons, features, and settings that allow you to customize GraphQL queries and view the data that is returned by the API. Here are some of the features you’ll find on the GraphiQL interface:</p>
<p><img             class="aligncenter size-full wp-image-168432 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img7-GraphiQL-interface-features.png" alt="Graphiql Interface Showing Query Editor Panel On Left, Result Pane On Right, Icon To Open Documentation Explorer Indicated With Arrow And Label At Top Left, Icon To Open Query History Indicated With Arrow And Label Underneath, And Query Variables Panel Indicated With Small Label At Bottom Left" width="730" height="349"    /><noscript><img               class="aligncenter size-full wp-image-168432" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img7-GraphiQL-interface-features.png" alt="Graphiql Interface Showing Query Editor Panel On Left, Result Pane On Right, Icon To Open Documentation Explorer Indicated With Arrow And Label At Top Left, Icon To Open Query History Indicated With Arrow And Label Underneath, And Query Variables Panel Indicated With Small Label At Bottom Left" width="730" height="349"  /></noscript></p>
<p>The query editor is the main text editor in the GraphiQL interface where you can write and edit your GraphQL queries. The editor program provides syntax highlighting, autocompletion, and error highlighting, making it easy to construct and debug complex queries.</p>
<p>The “play” button is one of the most important features on the GraphiQL interface, this button executes the GraphQL query that is currently in the query editor. When the Play button is clicked, your query is sent to the API and the results are displayed in the results pane.</p>
<p>The query variables panel allows you to define variables that can be used in your GraphQL queries. Variables can be defined with different data types and can be either required or optional.</p>
<p>As previously mentioned, the results panel displays the information that is returned by the GraphQL API in response to the query. The results are displayed in JSON format and can be expanded or collapsed to view nested data.</p>
<p>The query history feature allows you to save and manage your GraphQL queries. Saved queries can be easily retrieved and executed with a single click.</p>
<p>The settings panel allows you to customize the behavior of GraphiQL. The settings include options for enabling or disabling query validation, enabling or disabling schema introspection, and changing the theme of the interface:</p>
<p><img             class="aligncenter size-full wp-image-168433 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img8-GraphiQL-settings-panel.png" alt="Graphiql Interface With Settings Panel Open In Popup" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168433" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img8-GraphiQL-settings-panel.png" alt="Graphiql Interface With Settings Panel Open In Popup" width="730" height="351"  /></noscript></p>
<p>Finally, the documentation explorer feature provides support for the GraphQL API, including descriptions of types, fields, and arguments. This feature allows users to quickly and easily search for information about the API and its model.</p>
<h2 id="important-considerations-using-graphiql">Important considerations while using GraphiQL</h2>
<p>Security is important in modern development. GraphiQL is a tool for debugging and exploring GraphQL APIs, but it’s not intended for production use. Ensure that proper security measures are in place when you’re interacting with sensitive data.</p>
<p>Additionally, like GraphQL Voyager, GraphiQL also relies on introspection queries to generate its interface. If the GraphQL server doesn’t support introspection, GraphiQL won’t work.</p>
<h2 id="using-graphql-altair-work-apis">Using GraphQL Altair to work with APIs</h2>
<p>GraphQL Altair is a powerful GraphQL client that provides a user-friendly interface for working with GraphQL APIs. It’s an open source project that allows developers to easily interact with GraphQL APIs, making it easier to test, debug, and optimize queries.</p>
<p>Altair’s interface is divided into several panels that allow you to perform various tasks. Here are the key features of the Altair interface:</p>
<p><img             class="aligncenter size-full wp-image-168434 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img9-GraphQL-Altair-interface-features.png" alt="Graphql Altair Interface With Features Labeled In Orange" width="730" height="297"    /><noscript><img               class="aligncenter size-full wp-image-168434" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img9-GraphQL-Altair-interface-features.png" alt="Graphql Altair Interface With Features Labeled In Orange" width="730" height="297"  /></noscript></p>
<p>The endpoint panel allows you to enter the endpoint URL of the GraphQL API you want to connect to. Once you enter the URL, you can click the “Send Request” button to connect to the API and start working with its schema.</p>
<p>The query editor panel allows you to construct your GraphQL queries, mutations, and subscriptions. Altair provides you with syntax highlighting, code auto-completion, and error highlighting to make it easier to write valid GraphQL queries.</p>
<p>The panel labeled “VARIABLES” allows you to define variables that can be used in your GraphQL queries. You can create variables with different data types, and Altair will automatically generate the right input fields in the query editor:</p>
<p><img             class="aligncenter size-full wp-image-168435 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img10-GraphQL-Altair-variables-panel.png" alt="Graphql Altair Interface With User Shown Typing Into Variables Panel At Bottom Left" width="730" height="302"    /><noscript><img               class="aligncenter size-full wp-image-168435" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img10-GraphQL-Altair-variables-panel.png" alt="Graphql Altair Interface With User Shown Typing Into Variables Panel At Bottom Left" width="730" height="302"  /></noscript></p>
<p>Altair also has a feature for setting headers that allows you to add custom headers to your GraphQL requests. You can define headers for authentication, caching, or other purposes:</p>
<p><img             class="aligncenter size-full wp-image-168436 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img11-GraphQL-Altair-custom-headers.png" alt="Graphql Altair Interface With Popup Panel For Setting Custom Headers For Graphql Requests" width="730" height="298"    /><noscript><img               class="aligncenter size-full wp-image-168436" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img11-GraphQL-Altair-custom-headers.png" alt="Graphql Altair Interface With Popup Panel For Setting Custom Headers For Graphql Requests" width="730" height="298"  /></noscript></p>
<p>The response panel displays the response from the GraphQL API you sent your query. You receive the response in either a JSON or a tree view format.</p>
<p>If you select “Docs” at the top right of your screen, to the left of the “Send Request” button, you should see a panel that provides a graphical representation of the GraphQL schema of the API you are working with. You can use this panel to explore the various types, fields, and relationships in the schema:</p>
<p><img             class="aligncenter size-full wp-image-168437 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img12-GraphQL-Altair-docs-panel.png" alt="Graphql Altair With Panel Opened After Selecting Docs At Top Right Of Screen To View Graphical Representation Of Graphql Schema For Currently Used Api" width="730" height="299"    /><noscript><img               class="aligncenter size-full wp-image-168437" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img12-GraphQL-Altair-docs-panel.png" alt="Graphql Altair With Panel Opened After Selecting Docs At Top Right Of Screen To View Graphical Representation Of Graphql Schema For Currently Used Api" width="730" height="299"  /></noscript></p>
<p>The “Settings” panel allows you to customize the appearance and behavior of Altair. You can tinker with settings such as theme, font size, and query timeout.</p>
<p><img             class="aligncenter size-full wp-image-168439 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img13-GraphQL-Altair-settings-panel.png" alt="Graphql Altair Interface With Popup Panel For Settings" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168439" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img13-GraphQL-Altair-settings-panel.png" alt="Graphql Altair Interface With Popup Panel For Settings" width="730" height="351"  /></noscript></p>
<p>Altair keeps a history of all the queries you have executed, making it easy to revisit previous queries and results. It also provides real-time validation of your GraphQL queries, helping you to highlight errors and syntax issues as you write your queries.</p>
<p>Finally, Altair also provides an easy way to export your GraphQL queries as code snippets in various programming languages.</p>
<h3>Demo of GraphQL Altair features</h3>
<p>To see how Altair works, we can use any online demo of GraphQL Altair with the <a href="https://countries.trevorblades.com/">Trevorblades API</a>.</p>
<p>Open the <a href="https://altair.sirmuel.design/">GraphQL Altair demo page</a>. In the “Endpoint” panel on the left-hand side of the page, paste the following endpoint URL:</p>
<pre class="language-graphql hljs">https://countries.trevorblades.com/
</pre>
<p>Next, click on the “Send Request” button to connect to the Trevorblades API endpoint. If everything is set up correctly, you should see the schema of the API displayed in the right-side panel.</p>
<p>To test a query, mutation, or subscription, click on the “Query” button at the top of the page. This will open the query editor, where you can enter your GraphQL query.</p>
<p>Next, enter a GraphQL query for the <code>countries</code> API in the editor. For example, you can try the following query to get information about all the countries in the API:</p>
<pre class="language-graphql hljs"> query {
      countries {
        code
        name
        currency
      }
    }
</pre>
<p>After you have entered your query, click on the “Send Request” button to execute it. The results of your query will be displayed in the response pane beside the query editor.</p>
<h2 id="considerations-graphql-altair">Considerations to keep in mind for GraphQL Altair</h2>
<p>Altair has a slightly steeper learning curve than Voyager or GraphiQL, as it offers a greater range of features and customization options. This means you may need to invest time in learning the interface and functionality of Altair before you can fully benefit from it.</p>
<p>Furthermore, Altair requires additional dependencies to be installed, such as the Altair GraphQL client library. Ensure that you have the necessary dependencies installed and configured correctly to avoid any issues or errors.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When it comes to visualizing data for GraphQL, there are several great options available.</p>
<p>GraphQL Voyager offers a visually stunning representation of your GraphQL schema, while GraphiQL provides a straightforward and user-friendly interface. Altair, on the other hand, offers advanced features for debugging and testing your GraphQL queries.</p>
<p>Ultimately, the best data visualizer for GraphQL depends on your specific needs and preferences. Whether you’re looking for a simple and intuitive tool or a more advanced debugging and testing environment, there’s a data visualizer out there that’s right for you.</p>
<p>No matter which tool you choose, it’s important to remember that data visualization is a crucial part of working with GraphQL. By using a high-quality data visualizer, you can gain deeper insights into your data, identify potential issues more easily, and streamline your development process.</p>
<p>Don’t be afraid to try out different options and find the one that works best for you!</p><div class="code-block code-block-24" >
<div class="blog-plug inline-plug graphql-plug"><h2>Monitor failed and slow GraphQL requests in production</h2>While GraphQL has some features for debugging requests and responses, making sure GraphQL reliably serves resources to your production app is where things get tougher. If you’re interested in ensuring network requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/graphql-signup" target="_blank">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer"><img src="https://files.readme.io/69aa835-Image_2019-11-09_at_1.28.05_PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://files.readme.io/69aa835-Image_2019-11-09_at_1.28.05_PM.png"/></noscript><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic GraphQL requests to quickly understand the root cause. In addition, you can track Apollo client state and inspect GraphQL queries' key-value pairs.</p>LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-25 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-25 .fadeOut {
    opacity:0 !important;
}

.code-block-25 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<script>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </script>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168424" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168424" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168424" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/samson-omojola/">
Samson Omojola <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an experienced software engineer. I love creating applications with responsive, beautiful, intuitive, state-of-the-art designs. I'm skilled in HTML, CSS, JavaScript, Ionic, React, PHP, Laravel, and Flutter.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/graphql/">#graphql</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/" rel="prev">Building custom maps with React Native Mapbox</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/stakeholder-analysis-template-examples-frameworks/" rel="next">What is stakeholder analysis? Template, examples, frameworks</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Hybrid rendering in Astro: A step-by-step guide - LogRocket Blog</title>
			<link>https://blog.logrocket.com/hybrid-rendering-astro-guide/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/hybrid-rendering-astro-guide/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<title>Hybrid rendering in Astro: A step-by-step guide - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/">Hybrid rendering in Astro: A step-by-step guide - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168326 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-js-libraries" id="post-168326">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emanuelsuriano/">
Emanuel Suriano <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Hi 👋 I build stuff with JavaScript 💻 Once a month I write an article ✍️ and sometimes I give talks 💬</span>
</div>
</div>
<h1 class="posttitle">Hybrid rendering in Astro: A step-by-step guide</h1>
<p>
<span class="post-date"><time class="post-date">
April 28, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
<span class="wordcount">4372</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro-guide.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Hybrid rendering in Astro: A step-by-step guide"                /> <article class="article-post">
<p>Astro 2.0 has brought a game-changing feature to the world of web development: hybrid rendering. With hybrid rendering, developers can prerender certain pages while retaining their deployed server, giving them the best of both worlds. By building pages ahead of time, prerendering enables these pages to load instantly, improving the user experience and overall performance of your web application.</p>
<p>In this article, we’ll take a hands-on approach and explore how to implement hybrid rendering in Astro by building a demo project. We’ll cover the tips, tricks, and best practices for mastering this powerful feature, as well as delve into the benefits of prerendering pages for improved scalability and SEO optimization. So, if you’re ready to level up your web development skills with Astro’s hybrid rendering, let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#why-need-hybrid-rendering">Why do we need hybrid rendering?</a></li>
<li><a href="#build-process-astro">What does the build process look like in Astro?</a>
<ul >
<li><a href="#branch-option-1-static-output">Branch option 1: Static output</a></li>
<li><a href="#branch-option-2-server-output">Branch option 2: Server output</a></li>
<li><a href="#branch-option-3-server-output-hybrid-rendering">Branch option 3: Server output (hybrid rendering)</a></li>
</ul>
</li>
<li><a href="#benefits-hybrid-rendering">Benefits of hybrid rendering</a>
<ul >
<li><a href="#improved-render-performance-popular-pages">Improved render performance of popular pages</a></li>
<li><a href="#adding-api-existing-static-sites">Adding an API to existing static sites</a></li>
<li><a href="#improved-build-performance-large-sites">Improved build performance of large sites</a></li>
</ul>
</li>
<li><a href="#implement-hybrid-rendering-astro">How to implement hybrid rendering in Astro</a>
<ul >
<li><a href="#why-ecommerce-website-example">Why we chose an ecommerce website example</a></li>
<li><a href="#project-description">Project description</a></li>
<li><a href="#rendering-landing-page">Rendering the Landing page</a></li>
<li><a href="#rendering-about-page">Rendering the About page</a></li>
<li><a href="#rendering-shop-page">Rendering the Shop page</a></li>
<li><a href="#rendering-product-page">Rendering the Product page</a></li>
</ul>
</li>
<li><a href="#deploying-astro-site">Deploying our Astro site</a></li>
</ul>
<h2 id="why-need-hybrid-rendering">Why do we need hybrid rendering?</h2>
<p>In the year since its 1.0 release, Astro has become a popular choice among web developers looking for a fast, simple, and flexible way to build websites. With its ability to generate static pages using static site generation (SSG) and server-side rendering (SSR), Astro has quickly become a go-to tool for developers who want the best of both worlds.</p>
<p>Static websites offer incredible performance, thanks to pre-generated HTML and assets that are served to users directly from a CDN. This makes them fast, scalable, and easy to deploy.</p>
<p>However, they lack the ability to generate HTML on-demand for each request. This means that they can’t handle dynamic content such as user authentication, shopping carts, and real-time updates without relying on client-side JavaScript.</p>
<p>On the other hand, server-side rendering (SSR) enables web applications to generate HTML on-demand for each request, making it possible to serve dynamic content and handle complex user interactions. However, SSR can be slow and resource-intensive, especially for high-traffic applications.</p>
<p>To address this challenge, <a href="https://astro.build/blog/astro-2/">Astro introduced hybrid rendering</a> in version 2.0, enabling developers to choose between SSG and SSR build output depending on the needs of their web application. This provides flexibility to generate pre-rendered HTML for static pages while still allowing for dynamic content using client-side JavaScript.</p>
<h2 id="build-process-astro">What does the build process look like in Astro?</h2>
<p>Astro’s build process happens in multiple stages, beginning with a server-side JavaScript bundle generated by Vite. The output of this bundle includes:</p>
<ul>
<li>Server-side JavaScript used to render HTML</li>
<li>A client manifest that uses static analysis to collect the components needed for client-side interactivity</li>
<li>CSS and other assets for the client</li>
</ul>
<p>From here, there are three possible branches, depending on the output configuration set in the Astro config file.</p>
<h3 id="branch-option-1-static-output">Branch option 1: Static output</h3>
<p>If the output is configured to be <code>static</code>, Astro will execute the server-side JavaScript and write the output to <code>.html</code> files. The server-side JavaScript is then discarded.</p>
<p>This creates a set of pre-rendered HTML files that can be served directly to the user from a CDN or web server. This approach offers incredible performance, but lacks the ability to generate HTML on-demand for each request.</p>
<figure id="attachment_168328"   class="wp-caption aligncenter"><img             class="size-full wp-image-168328 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/static-output-hybrid-rendering-astro.png" alt="Static output in Astro" width="730" height="381"    /><noscript><img               class="size-full wp-image-168328" src="http://blog.logrocket.com/wp-content/uploads/2023/04/static-output-hybrid-rendering-astro.png" alt="Static output in Astro" width="730" height="381"  /></noscript><figcaption id="caption-attachment-168328" class="wp-caption-text">Static output in Astro. Source: <a href="https://astro.build/blog/hybrid-rendering/">Astro</a></figcaption></figure>
<h3 id="branch-option-2-server-output">Branch option 2: Server output</h3>
<p>If the output is configured to be <code>server</code>, Astro passes the server-side JavaScript to an adapter for further processing. Adapters ensure that your server-side JavaScript is compatible with a particular hosting provider’s JavaScript runtime.</p>
<p>The final output in this case is not a set of <code>.html</code> files, but the JavaScript code necessary to render HTML on the server-side.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<figure id="attachment_168327"   class="wp-caption aligncenter"><img             class="size-full wp-image-168327 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Server hybrid rendering in Astro" width="730" height="443"    /><noscript><img               class="size-full wp-image-168327" src="http://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Server hybrid rendering in Astro" width="730" height="443"  /></noscript><figcaption id="caption-attachment-168327" class="wp-caption-text">Server output in Astro. Source: <a href="https://astro.build/blog/hybrid-rendering/">Astro</a></figcaption></figure>
<h3 id="branch-option-3-server-output">Branch option 3: Server output (hybrid rendering)</h3>
<p>The build process for hybrid rendering is a combination of the <code>static</code> and <code>server</code> output. During the initial bundling process, a new static analysis step determines which pages should be prerendered, which allows routes to be split into separate chunks based on when they should be rendered.</p>
<p>Much like the original static process, the prerendered chunk is executed and the output is written to <code>.html</code> files, which are then served statically. Meanwhile, the server chunk is passed to an adapter for further processing and is ultimately deployed as a Serverless or <a href="https://blog.logrocket.com/demystifying-edge-functions/">Edge Function</a>, depending on your adapter.</p>
<figure id="attachment_168327"   class="wp-caption aligncenter"><img             class="size-full wp-image-168327 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Hybrid rendering in Astro" width="730" height="443"    /><noscript><img               class="size-full wp-image-168327" src="http://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Hybrid rendering in Astro" width="730" height="443"  /></noscript><figcaption id="caption-attachment-168327" class="wp-caption-text">Static output in Astro. Source: <a href="https://astro.build/blog/hybrid-rendering/">Astro</a></figcaption></figure>
<h2 id="benefits-hybrid-rendering">Benefits of hybrid rendering</h2>
<p>Hybrid rendering is a game-changer for web developers, as it unlocks a host of new possibilities for building fast, scalable, and dynamic web applications. By mixing static and dynamic content together, developers can take advantage of the best of both worlds, improving the render and build performance of their web applications, and adding new functionality such as APIs to existing static sites.</p>
<p>Here are some of the benefits of using hybrid rendering in Astro:</p>
<h3 id="improved-render-performance-popular-pages">Improved render performance of popular pages</h3>
<p>With hybrid rendering, developers can choose to prerender the most popular pages of their website, ensuring that they load instantly for users. This is especially important for websites with high traffic or large numbers of visitors. By prerendering these pages ahead of time, developers can reduce server load and improve the user experience for their visitors.</p>
<p>The most used approach is to prerender landing pages, which usually receive most of the visits. This will give the fastest experience to any visitor “landing” on your website for the first time.</p>
<h3 id="adding-api-existing-static-sites">Adding an API to existing static sites</h3>
<p>One of the biggest limitations of static websites is the lack of server-side processing, which can make it challenging to add dynamic functionality such as APIs. However, with hybrid rendering in Astro, developers can add an API to their existing static sites, enabling them to add complex functionality such as user authentication, shopping carts, and real-time updates.</p>
<h3 id="improved-build-performance-large-sites">Improved build performance of large sites</h3>
<p>For large websites with many pages, building and deploying can become a time-consuming and resource-intensive task. With hybrid rendering, developers can choose to prerender only the pages that need it and leave the rest as static pages. This can significantly reduce build times and make it easier to manage and deploy large websites.</p>
<p>Following the example from above, sometimes we don’t want (or need) to prerender all our routes because this process is very time consuming, and therefore not so scalable in big projects. With hybrid rendering, we can still prerender only the pages that we want while the rest and any new pages would render as server routes, keeping the build time short while maintaining a great user experience.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>In summary, hybrid rendering is a powerful feature that offers a range of benefits for web developers. By mixing static and dynamic content together, developers can build fast, scalable, and dynamic web applications that are optimized for both SEO and user experience.</p>
<h2 id="implement-hybrid-rendering-astro">How to implement hybrid rendering in Astro</h2>
<p>To get started with hybrid rendering in Astro, we must first enable SSR (server-side rendering) features in development mode by setting the <code>output</code> configuration option to <code>'server'</code> in the <code>astro.config.mjs</code> file:</p>
<pre class="language-bash hljs">import { defineConfig } from 'astro/config';

export default defineConfig({
  output: 'server'
});
</pre>
<p>Once SSR is enabled, any page or server endpoint that supports exporting variables can opt in to prerendering. These files will be statically rendered at build time, similar to the default static output mode.</p>
<p>To opt in to prerendering for a specific file, add the following line of code to the top of the file:</p>
<pre class="language-javascript hljs">export const prerender = true;
</pre>
<p>Repeat this process for any additional pages or server endpoints that you want to enable for prerendering.</p>
<p>Finally, build your Astro project as you normally would:</p>
<pre class="language-bash hljs">> astro build
</pre>
<p>This will generate a mix of static and dynamic content in your project output, which can be served by your server. By taking advantage of hybrid rendering, you can improve the render and build performance of your web applications, and add new functionality such as APIs to your existing static sites.</p>
<h3 id="why-ecommerce-website-example">Why we chose an ecommerce website example</h3>
<p>Building an ecommerce website serves as a great example to test the feature of hybrid rendering. Let me explain why:</p>
<ul>
<li>The product, category, and search results pages usually require server-side rendering (SSR) because they need dynamic content from the server, such as product details, prices, and availability</li>
<li>Pages such as the home, about, and contact pages can be pre-rendered using static site generation (SSG) because they typically contain static content that doesn’t frequently change</li>
</ul>
<p>To speed things along, we are going to use the free, open source <a href="https://astro.build/themes/details/astro-ecommerce/">Astro Ecommerce</a> demo site made by <a href="https://www.creative-tim.com/">Creative Tim</a>.</p>
<figure id="attachment_168333"   class="wp-caption aligncenter"><img             class="size-full wp-image-168333 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/astro-ecommerce-demo-site.png" alt="Our ecommerce site example, from &lt;a href=&quot;https://www.creative-tim.com/&quot;>Creative Tim&lt;/a>" width="730" height="383"    /><noscript><img               class="size-full wp-image-168333" src="http://blog.logrocket.com/wp-content/uploads/2023/04/astro-ecommerce-demo-site.png" alt="Our ecommerce site example, from &lt;a href=&quot;https://www.creative-tim.com/&quot;>Creative Tim&lt;/a>" width="730" height="383"  /></noscript><figcaption id="caption-attachment-168333" class="wp-caption-text">Our ecommerce site example, from <a href="https://www.creative-tim.com/">Creative Tim</a></figcaption></figure>
<p>Inside the repository <a href="https://github.com/creativetimofficial/astro-ecommerce">astro-ecommerce</a>, we can find the following description for the project:</p>
<blockquote><p>Introducing Astro Ecommerce, the ultimate starter template for your e-commerce web project. Built on Astro’s next-gen island architecture, Astro Ecommerce offers a sleek and modern design with a wide range of components and features to help you create a stunning online store.</p></blockquote>
<p>To keep this demo short, I intentionally decided to leave the components of the starter as they are so that we can focus more on the process of hybrid rendering.</p>
<h3 id="project-description">Project description</h3>
<p>The project is going to consist of four pages:</p>
<ol>
<li>Landing page (hybrid): The first page visitors see, which captures attention and encourages exploration</li>
<li>About Page (SSG): Provides information about your company, mission, and values. Builds trust with your audience</li>
<li>Shop Page (SSR): Where visitors browse products and make purchases. Makes the shopping experience seamless and enjoyable</li>
<li>Product Page (SSR): Provides detailed information about a specific product and persuades the visitor to make a purchase</li>
</ol>
<p>To simulate a “real” ecommerce site, I used <a href="https://dummyjson.com/">DummyJSON</a> to get a list of products and categories. To get the list of products, we can directly call <code>https://dummyjson.com/products</code> API.</p>
<p>The output looks like this:</p>
<pre class="language-json hljs">{
  "products": [
    {
      "id": 1,
      "title": "iPhone 9",
      "description": "An apple mobile which is nothing like apple",
      "price": 549,
      "discountPercentage": 12.96,
      "rating": 4.69,
      "stock": 94,
      "brand": "Apple",
      "category": "smartphones",
      "thumbnail": "...",
      "images": ["...", "...", "..."]
    },
    {...},
    {...},
    {...}
    // 30 items
  ],
  "total": 100,
  "skip": 0,
  "limit": 30
}
</pre>
<p>Here is the list of all the APIs that we’ll use in the project:</p>
<pre class="language-typescript hljs">export interface ProductList {
  products: Product[];
  total: number;
  skip: number;
  limit: number;
}

export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  discountPercentage: number;
  rating: number;
  stock: number;
  brand: string;
  category: string;
  thumbnail: string;
  images: string[];
}

const toJson = (res: Response) => {
  if (res.status === 404) {
    return undefined;
  }

  return res.json();
};

export const fetchProducts = (category?: string): Promise&lt;ProductList> => {
  const categoryPath = category ? `/category/${category}` : '';
  return fetch(`https://dummyjson.com/products${categoryPath}`).then(toJson);
};

export const fetchSalesProducts = async (): Promise&lt;Product[]> => {
  const allProducts = await fetchProducts();
  return allProducts.products.filter(
    ({ discountPercentage }) => discountPercentage > 10,
  );
};

export const fetchCategories = (): Promise&lt;string[]> =>
  fetch('https://dummyjson.com/products/categories').then(toJson);

export const fetchProduct = (id: string): Promise&lt;Product> =>
  fetch(`https://dummyjson.com/products/${id}`).then(toJson);

export const fetchCategoryImage = async (category: string) => {
  const { products } = await fetchProducts(category);
  return products[0].thumbnail;
};

// DummyJSON doesn't provide any testimonials or reviews API, this one is going to be locally mocked.
export const fetchTestimonials = () =>
  Promise.resolve([
    {
      text: "I recently purchased a dress from this online store and was blown away by the quality and fit. It was even better than I expected and I received so many compliments when I wore it. I'll definitely be back for more!",
      source: 'Sarah D.',
    },
    {
      text: 'I was hesitant to order a piece of furniture online, but the team at this online store made the process so easy and hassle-free. The item arrived on time and in perfect condition, and it looks amazing in my home. I highly recommend this store for their excellent customer service and high-quality products.',
      source: 'John P.',
    },

    {
      text: "I'm always on the lookout for the latest tech gadgets, and this online store has an amazing selection. I ordered a new smartwatch and it arrived quickly and was exactly what I was looking for. The prices are also very competitive, so I know I'm getting a great deal. I'm already browsing their site for my next purchase!",
      source: 'Emily R.',
    },
  ]);
</pre>
<h3 id="rendering-landing-page">Rendering the Landing page</h3>
<p>Let’s go page by page, starting with the Landing page, which we defined at <code>/pages/index.astro</code>. It displays general information about the store, the main shopping categories, and a list of customer reviews.</p>
<p>All of the page information comes from the API module defined above. This page uses hybrid rendering because the content won’t change frequently.</p>
<figure id="attachment_168331"   class="wp-caption aligncenter"><img             class="size-full wp-image-168331 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ecommerce-site-creative-tim.png" alt="The Landing page" width="730" height="1117"    /><noscript><img               class="size-full wp-image-168331" src="http://blog.logrocket.com/wp-content/uploads/2023/04/ecommerce-site-creative-tim.png" alt="The Landing page" width="730" height="1117"  /></noscript><figcaption id="caption-attachment-168331" class="wp-caption-text">The Landing page</figcaption></figure>
<pre class="language-javascript hljs">---
import humanize from 'humanize-string';

import Layout from '../layouts/Layout.astro';

// Components from the starter
import Testimonials from '../components/Testimonials.astro';
import CardCategory from '../components/products/cardCategory';
import PromoSectionLarge from '../components/promo/promoSectionLarge';

// Data coming from DummyJSON
import {
  fetchCategories,
  fetchCategoryImage,
  fetchTestimonials,
} from '../api/products';

// Setting SSG for this page!
export const prerender = true;

const categories = (await fetchCategories()).slice(0, 4);
const images = await Promise.all(categories.map(fetchCategoryImage));
const testimonials = await fetchTestimonials();
---

&lt;Layout title="Landing Page">
  &lt;main>
    &lt;PromoSectionLarge
      title="Welcome to our online store!"
      full_description="Satisfy all your shopping needs with our extensive range of high-quality products, carefully curated to offer the latest trends and timeless classics. Whether you're looking for stylish clothing, must-have accessories, beautiful home decor, or the latest tech gadgets, we have everything you need to elevate your lifestyle and express your unique style."
      pageHeaderBgImg="https://images.unsplash.com/photo-1441123285228-1448e608f3d5?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2670&amp;q=80"
      pageHeaderMinVh="90vh"
    />

    &lt;div class="container my-5">
      &lt;div class="d-flex justify-content-between align-items-center mb-4">
        &lt;h4>Shop by category&lt;/h4>
        &lt;a class="text-primary text-sm font-weight-bold" href="/shop"
          >Browse all categories {'>'}&lt;/a
        >
      &lt;/div>
      &lt;div class="row mb-5">
        {
          categories.map((category, i) => (
            &lt;div class="col-md-6 col-lg-3">
              &lt;a href={`/shop?category=${category}`}>
                &lt;CardCategory
                  thumb_src={images[i]}
                  title={humanize(category)}
                />
              &lt;/a>
            &lt;/div>
          ))
        }
      &lt;/div>

      &lt;PromoSectionLarge
        title="Featured products"
        full_description="Take a look at our featured products to see what's new and popular right now."
        pageHeaderBgImg="https://images.unsplash.com/photo-1558769132-cb1aea458c5e?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2274&amp;q=80"
        pageHeaderMinVh="50vh"
        pageHeaderRadius="1rem"
      />

      &lt;div class="mt-5 mb-10">
        &lt;Testimonials testimonials={testimonials} />
      &lt;/div>
    &lt;/div>
  &lt;/main>
&lt;/Layout>
</pre>
<h3 id="rendering-about-page">Rendering the About page</h3>
<p>Let’s move on to the About page, defined at <code>/pages/about.astro</code>. It’s quite similar to the Landing page but even simpler, given that no information is required from external services. All of this page’s content is provided within the same page (and this can be improved by adding a CMS layer to the project).</p>
<p>Without hybrid rendering, the server must compute this page on every visit, when that is clearly not needed. By setting hybrid rendering for this page, we can process it at build time and serve the static site to our users, improving the speed drastically.</p>
<figure id="attachment_168334"   class="wp-caption aligncenter"><img             class="size-full wp-image-168334 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/about-us-ecommerce-site.png" alt="The About page" width="730" height="795"    /><noscript><img               class="size-full wp-image-168334" src="http://blog.logrocket.com/wp-content/uploads/2023/04/about-us-ecommerce-site.png" alt="The About page" width="730" height="795"  /></noscript><figcaption id="caption-attachment-168334" class="wp-caption-text">The About page</figcaption></figure>
<pre class="language-javascript hljs">---
import Layout from '../layouts/Layout.astro';

// Components from the starter
import IncentiveLarge from '../components/incentives/IncentiveLarge.astro';
import ProductFeature from '../components/products/productFeature';

export const prerender = true;

const features = {
  Quality: `We carefully select and curate our products to ensure that they meet the
    highest standards of quality and craftsmanship. We believe that our customers
    deserve the best, and we are committed to delivering it.`,
  Sustainability: `We believe in doing our part to protect the planet, which is why
    we work with suppliers who prioritize eco-friendly and sustainable production methods.
    We believe that we can make a positive impact on the world by making conscious choices
    about the products we offer and the way we do business.`,
  ['Customer Service']: `We are passionate about providing exceptional customer service and support.
    Our team is always here to help with any questions or concerns you may have, and we are committed
    to making sure that you have a positive experience every time you shop with us.`,
  Innovation: `We are always exploring new ways to improve and enhance our online store. We believe
    that innovation is key to staying ahead of the curve and providing our customers with the best
    possible shopping experience.`,
};
---

&lt;Layout title="Landing Page">
  &lt;main>
    &lt;div class="container my-5">
      &lt;ProductFeature
        title="About us"
        full_description={`
          At Astro E-commerce, we are dedicated to providing our customers with the best possible
          shopping experience. We believe that shopping should be easy, convenient, and enjoyable,
          and we strive to make that a reality for everyone who visits our site.
        `}
        images={[
          {
            src: 'https://images.unsplash.com/photo-1511556820780-d912e42b4980?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1287&amp;q=80',
            alt: 'photo of bag, sneakers, and sunglasses on beige surface',
          },
          {
            src: 'https://images.unsplash.com/photo-1627384113743-6bd5a479fffd?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80',
            alt: 'black and gold calvin klein perfume bottle',
          },
          {
            src: 'https://images.unsplash.com/photo-1522682078546-47888fe04e81?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80',
            alt: 'red and yellow Biscuits neon light signage hanged on gray brick wall',
          },
          {
            src: 'https://images.unsplash.com/photo-1524678606370-a47ad25cb82a?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80',
            alt: 'white corded headphones',
          },
        ]}
        featuresDetails={features}
      />

      &lt;div class="my-10">
        &lt;IncentiveLarge
          title="We build our business on customer service"
          description={`
            Our company provides exceptional customer service with a dedicated team ready to assist
            you with any questions or concerns. We offer prompt and courteous support for placing
            an order, tracking a shipment, or resolving any product issues. Contact us by phone,
            email, or live chat during regular business hours. Thank you for choosing us, and we
            look forward to providing you with a great customer experience.
          `}
          items={[
            {
              icon: 'fa-sync-alt',
              title: 'Exchange',
              description: `Try something new without worry with our exchange policy. If you're not satisfied with your
                purchase, you can exchange it within a specified timeframe. `,
            },
            {
              icon: 'fa-shipping-fast',
              title: 'Free Shipping',
              description:
                'Enjoy free shipping on all orders and save money while making shopping more convenient.',
            },
            {
              icon: 'fa-user',
              title: '10 Years Warranty',
              description: `Rest easy with the knowledge that your purchase comes with a 10-year warranty.
                This gives you peace of mind and reassurance that your investment is wise.`,
            },
          ]}
        />
      &lt;/div>
    &lt;/div>
  &lt;/main>
&lt;/Layout>
</pre>
<h3 id="rendering-shop-page">Rendering the Shop page</h3>
<p>It can’t be an ecommerce without a Shop page, which we defined at <code>/pages/shop.astro</code>. Here, the user can query all the products available and filter by category.</p>
<p>This page can’t be treated as a static page, otherwise we’ll be forced to generate every possible result of a search with every combination of our different filters in advance. That’s a lot of unnecessary work! Plus, it doesn’t account for the chance that any time a product changes any attribute (price, quantity, category, etc.) we’d have to regenerate the results again.</p>
<figure id="attachment_168335"   class="wp-caption aligncenter"><img             class="size-full wp-image-168335 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/shop-page-ecommerce-site.png" alt="The Shop page" width="730" height="676"    /><noscript><img               class="size-full wp-image-168335" src="http://blog.logrocket.com/wp-content/uploads/2023/04/shop-page-ecommerce-site.png" alt="The Shop page" width="730" height="676"  /></noscript><figcaption id="caption-attachment-168335" class="wp-caption-text">The Shop page</figcaption></figure>
<pre class="language-javascript hljs">---
import humanize from 'humanize-string';
import Layout from '../layouts/Layout.astro';

// Components from the starter
import CardProduct from '../components/products/cardProduct';

import { fetchProducts, fetchCategories } from '../api/products';

// Get selected category from query params
const currentCategory = Astro.url.searchParams.get('category') || '';

const categories = await fetchCategories();
const { products } = await fetchProducts(currentCategory);
---

&lt;Layout title="Shop">
  &lt;div class="container mt-5">
    &lt;div class="row">
      &lt;div class="mt-4 d-flex justify-content-between align-items-center">
        &lt;h6 class="mb-0">Select a category:&lt;/h6>
      &lt;/div>
      &lt;div class="d-flex flex-wrap text-center my-4">
        {
          categories.map((category, i) => {
            const checked = currentCategory === category;
            const route = checked ? '' : `category=${category}`;
            return (
              &lt;div class="mb-3 me-3">
                &lt;div class="form-check">
                  &lt;input
                    class="form-check-input rounded-2"
                    type="radio"
                    name="flexRadioDefault"
                    checked={checked}
                    id={`check-` + category}
                    onclick={`window.location.assign('?${route}')`}
                  />
                  &lt;label class="cursor-pointer" for={`check-` + category}>
                    {humanize(category)}
                  &lt;/label>
                &lt;/div>
              &lt;/div>
            );
          })
        }
      &lt;/div>
    &lt;/div>
    &lt;div class="row">
      {
        products.map((product) => (
          &lt;div class="col-md-6 col-lg-3">
            &lt;CardProduct
              thumb_src={product.thumbnail}
              thumb_alt={product.title}
              title={product.title}
              description={product.description}
              price={product.price}
              position="center"
              href={`/product/${product.id}`}
            />
          &lt;/div>
        ))
      }
    &lt;/div>
  &lt;/div>
&lt;/Layout>
</pre>
<h3 id="rendering-product-page">Rendering the Product page</h3>
<p>Lastly, we have the Product page, located at <code>/pages/product/[id].astro</code>. This page is defined as a <a href="https://docs.astro.build/en/core-concepts/routing/#dynamic-routes">Dynamic route</a>, where we can read the value for <code>id</code> defined in the URL. Once we obtain the <code>id</code>, we can fetch product details and other products that belong to the same category, to be displayed in a <strong>Related products</strong> section.</p>
<p>If we want to generate this page statically, we have to generate one page for each product in our ecommerce site, increasing the build time in a linear progression against the amount of available products — again, a lot of unnecessary work.</p>
<p>Therefore, because we want to build a project that scales over time, we should render this website on every request of the user with SSR.</p>
<figure id="attachment_168336"   class="wp-caption aligncenter"><img             class="size-full wp-image-168336 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/product-page-ecommerce-site.png" alt="The Product page" width="730" height="671"    /><noscript><img               class="size-full wp-image-168336" src="http://blog.logrocket.com/wp-content/uploads/2023/04/product-page-ecommerce-site.png" alt="The Product page" width="730" height="671"  /></noscript><figcaption id="caption-attachment-168336" class="wp-caption-text">The Product page</figcaption></figure>
<pre class="language-javascript hljs">---
import humanize from 'humanize-string';
import Layout from '../../layouts/Layout.astro';

// Componens from the starter
import ProductOverviewGallery from '../../components/products/productOverviewGallery';
import CardProduct from '../../components/products/cardProduct';

import { fetchProduct, fetchProducts } from '../../api/products';

// reading id from the url
const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/404');
}

const product = await fetchProduct(id);
if (!product) {
  return Astro.redirect('/404');
}

const { products: categoryProducts } = await fetchProducts(product.category);
const relatedProducts = categoryProducts.filter(
  (related) => related.id !== product.id,
);

const data = {
  Brand: product.brand,
  'Original price': `Discount applied: ${product.discountPercentage}%.
  The original price was: $
  ${Math.floor(product.price / (1 - product.discountPercentage / 100))}`,
  Category: humanize(product.category),
  Stock: `${product.stock} available`,
};
---

&lt;Layout title="Shop">
  &lt;div class="container mt-5">
    &lt;div class="my-5">
      &lt;ProductOverviewGallery
        colors={[]}
        images={product.images.map((src) => ({ src, alt: product.title }))}
        title={product.title}
        full_description={product.description}
        price={product.price}
        rating={product.rating}
        reviews={Math.floor(product.discountPercentage)}
        data={data}
      />
    &lt;/div>

    &lt;div class="row">
      &lt;h5 class="mb-4">Customers also purchased&lt;/h5>
      {
        relatedProducts.map((related) => (
          &lt;div class="col-md-6 col-lg-3">
            &lt;CardProduct
              thumb_src={related.thumbnail}
              thumb_alt={related.title}
              color={related.brand}
              title={related.title}
              price={related.price}
              position="left"
              href={`/product/${related.id}`}
            />
          &lt;/div>
        ))
      }
    &lt;/div>
  &lt;/div>
&lt;/Layout>
</pre>
<h2 id="deploying-astro-site">Deploying our Astro site</h2>
<p>In order to deploy an SSR website in Astro, we need to install a plugin for the deployment service that we want to use. For this case, I opted for <a href="https://vercel.com/">Vercel</a>, and we need to install the integration of <code>@astrojs/vercel</code>.</p>
<p>When building the website, we can see how Astro shows a special step when prerendering the Landing and About pages:</p>
<pre class="language-bash hljs">➜  astro-ecommerce-hybrid-rendering git:(main) ✗ yarn build
yarn run v1.22.19
$ astro check &amp;&amp; tsc --noEmit &amp;&amp; astro build
astro check
07:30:02 PM [content] No content directory found. Skipping type generation.
✔  Getting diagnostics for Astro files in /Users/emanuel.suriano/Git/astro-ecommerce-hybrid-rendering/…
Result (10 files): 
- 0 errors
- 0 warnings
- 0 hints

07:30:09 PM [content] No content directory found. Skipping type generation.
07:30:09 PM [build] output target: server
07:30:09 PM [build] deploy adapter: @astrojs/vercel/serverless
07:30:09 PM [build] Collecting build info...
07:30:09 PM [build] Completed in 194ms.
07:30:09 PM [build] Building server entrypoints...
07:30:17 PM [build] Completed in 7.82s.

 building client 
Completed in 0.93s.

 prerendering static routes 
▶ src/pages/index.astro
  └─ /index.html (+2.02s)
▶ src/pages/about.astro
  └─ /about/index.html (+0.89s)
Completed in 2.96s.

 finalizing server assets 

07:30:21 PM [build] Rearranging server assets...
07:30:22 PM [build] Server built in 12.91s
07:30:22 PM [build] Complete!
✨  Done in 21.87s.
</pre>
<p>Something interesting to take a look at is how the <code>output</code> folder looks after the build finishes. Vercel requires a structure where all the static content is included inside a folder called <code>static</code>, while the server routes are defined inside the <code>functions</code> folder. For the case of our demo application, the file structure looks this:</p>
<pre class="language-bash">➜  output git:(main) ✗ tree -l 10 --ignore 'node_modules'

▁ /astro-ecommerce-hybrid-rendering/.vercel/output
├── config.json
├── functions
|  └── render.func
|     ├── dist
|     ├── package.json
|     └── src
|        └── pages
|           ├── product
|           |  └── [id].astro
|           └── shop.astro
└── static
   ├── _astro
   ├── about
   |  └── index.html
   ├── data.json
   ├── favicon.svg
   ├── header-blue-purple.jpg
   └── index.html

directory: 53 file: 144

ignored: directory (1)
</pre>
<p>Feel free to <a href="https://astro-ecommerce-hydrid-rendering.vercel.app/">check out the application running in Vercel</a>. You can <a href="https://github.com/EmaSuriano/astro-ecommerce-hydrid-rendering/tree/main">find all the source code in GitHub</a>, under the repository <code>astro-ecommerce-hybrid-rendering</code>.</p>
<h2>Last words</h2>
<p>Hybrid rendering in Astro offers developers the best of both worlds when it comes to building fast, scalable, and dynamic web applications. By combining the benefits of static site generation (SSG) and server-side rendering (SSR), developers can improve performance, reduce server load, and provide a better user experience.</p>
<p>With the ability to prerender popular pages, improve build performance, and add APIs to existing static sites, hybrid rendering is one of the best features in the latest Astro release.</p>
<p>I hope this article has been helped you gain a better understanding of Astro 2.0 and its hybrid rendering capabilities. Whether you’re a seasoned web developer or just starting out, Astro 2.0 is something to keep in mind. Its intuitive syntax, fast rendering speeds, and versatile toolset make it a valuable asset for any web project.</p><div class="code-block code-block-28" >
<div class="blog-plug inline-plug js-libraries-plug"><h2>Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?</h2><p>There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.</p>
<p><a href="https://lp.logrocket.com/blg/javascript-signup">LogRocket</a> is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively. </p><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.
</p><p>Build confidently — <a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-30 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-30 .fadeOut {
    opacity:0 !important;
}

.code-block-30 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<script>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </script>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168326" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168326" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168326" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emanuelsuriano/">
Emanuel Suriano <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Hi 👋 I build stuff with JavaScript 💻 Once a month I write an article ✍️ and sometimes I give talks 💬</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/js-libraries/">#js libraries</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/implementing-first-principles-thinking-into-your-team/" rel="prev">Implementing first principles thinking into your team</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/best-product-management-certification-programs/" rel="next">Top 15 product management certification programs</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/hybrid-rendering-astro-guide/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Using Camome to design highly customizable UIs - LogRocket Blog</title>
			<link>https://blog.logrocket.com/using-camome-design-highly-customizable-uis/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/using-camome-design-highly-customizable-uis/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<title>Using Camome to design highly customizable UIs - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/">Using Camome to design highly customizable UIs - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166987 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-css tag-react" id="post-166987">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/judemiracle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/judemiracle/">
Jude Miracle <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer passionate about the Web3 ecosystem and love to spend time learning and tinkering with new tools and technologies.</span>
</div>
</div>
<h1 class="posttitle">Using Camome to design highly customizable UIs</h1>
<p>
<span class="post-date"><time class="post-date">
April 28, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">11 min read</span>
<span class="wordcount">3355</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/using-camome-design-highly-customizable-ui.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Using Camome To Design Highly Customizable UIs"                /> <article class="article-post">
<p>To ensure an efficient and effective development process, it is crucial for developers to select a UI library or framework that provides a balance of pre-made components and customization choices.</p>
<p>Although many UI libraries and frameworks provide pre-made styles and components, some may not provide enough flexibility for customization due to their rigid styles and patterns. To be able to easily modify the default styles, design decisions, and patterns, customization is necessary. This means being able to adjust the styles and components to fit the unique needs of a project.</p>
<p>In this tutorial, we’ll introduce you to Camome UI, a frontend framework for React and CSS. We will use this flexible framework to demonstrate how to design highly customizable user interfaces.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-camome-ui">What is Camome UI?</a></li>
<li><a href="#key-features-camome-ui">Key features of Camome UI</a></li>
<li><a href="#camome-ui-design-system">Camome UI design system</a></li>
<li><a href="#exploring-camome-ui-components">Exploring Camome UI components</a></li>
<li><a href="#getting-started-camome-ui">Getting started with Camome UI</a></li>
<li><a href="#building-user-interface-using-camome-ui">Building a user interface using Camome UI</a></li>
<li><a href="#creating-navbar">Creating our Navbar</a></li>
<li><a href="#customizing-user-interface-camome-ui">Customizing our user interface with Camome UI</a></li>
<li><a href="#camome-ui-vs-tailwind-css">Camome UI vs. Tailwind CSS</a></li>
</ul>
<h2 id="what-camome-ui">What is Camome UI?</h2>
<p>Camome UI is an easy-to-use UI framework for React and CSS that allows users to create website user interfaces. Camome UI is built on top of CSS Modules; this allows users to create various styles of components by leveraging the full power of CSS without using run-time JavaScript. This approach helps improve the performance of the user interface and provides greater flexibility in design options.</p>
<p>Camome UI comes with highly reusable components that are intended to blend in with standard design websites, but they can also be highly customized to suit any style for your site.</p>
<h2 id="key-features-camome-ui">Key features of Camome UI</h2>
<p>The following principles were kept in mind when developing Camome UI:</p>
<h3 id="accessibility">Accessibility</h3>
<p>When developing components, accessibility is critical. Camome UI states that it may not be perfect at accessibility, but that they are giving serious attention to it.</p>
<p>The <code>aria-labelledby</code> and <code>aria-describedby</code> values are followed by Camome UI input components when using the <code>&lt;Formfield /></code> component.</p>
<p>The <code>Switch</code> component is built using CSS alone but it is provided keyboard navigation and focus management. By using the <code>&lt;details /></code> element, Accordion automatically supports opening and closing without client-side JavaScript.</p>
<h3 id="theming-dark-mode">Theming and dark mode</h3>
<p>Implementing dark mode with Camome UI is flexible and straightforward because it comes by default.</p>
<p>To enable light and dark themes in your app, you must specify the <code>data-theme</code> attribute:</p>
<pre>&lt;!DOCTYPE html>
&lt;html data-theme="&lt;light or dark>">
  &lt;!-- Content -->
&lt;/html>
</pre>
<p>The light and dark themes are then styled as follows in <code>theme.css</code>:</p>
<pre>@layer cmm.theme {
  :root[data-theme="light"] {
    --cmm-color-primary-font: var(--cmm-color-primary-7);
    --cmm-color-primary-emphasis: var(--cmm-color-primary-6);
    {...}
  }
  /* And dark theme as well... */
}
</pre>
<p>It can also be customized as follows in your own CSS file:</p>
<pre>:root[data-theme="dark"] .your-class {
  /* Your styles for dark theme... */
}
</pre>
<p>It can also be customized independently.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h3 id="light-bundle-size">Light bundle size</h3>
<p>Keeping JavaScript usage to a minimum on your pages is crucial for a fast user experience. A Camome UI component like <code>Button</code> costs 1.42KB when imported from <code>@camome/core/Button</code> (including CSS), and an additional 4KB from the global CSS.</p>
<h3 id="integration-easy-ejection">Integration and easy ejection</h3>
<p>Camome UI is framework agnostic. It offers guides for integrating with some frontend frameworks including Astro, Next.js, and, Vite.</p>
<p>Camome UI can also be used as a CSS framework similar to Bootstrap, despite being primarily designed as a React library, by importing bundled CSS. Other frameworks, such as Vue or Svelte, can be easily supported by simply binding class names. It also allows <a href="https://camome.net/docs/guide/headless-integration">Integration with headless UI libraries</a> such as Headless UI, React Aria, Radix Primitives, and Reach UI for building complex UIs such as Menu, Dialog, and Tab:</p>
<pre>&lt;head>
  &lt;link
    href="https://unpkg.com/@camome/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e192989295848ca18d8095849295">[email protected]</a>/dist/theme.css"
    rel="stylesheet"
  />
  &lt;link
    href="https://unpkg.com/@camome/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3b5854495e7b575a4f5e484f">[email protected]</a>/dist/components.css"
    rel="stylesheet"
  />
&lt;/head>
&lt;body>
  &lt;button class="Button Button--primary Button--soft">Click me&lt;/button>
&lt;/body>
</pre>
<p>Camome UI is also entirely composed of React components, CSS Modules, and <code>theme.css</code>, making it simple to inject into your codebase.</p>
<h3 id="css-first-no-javascript-runtime">CSS first and no JavaScript runtime</h3>
<p>No JavaScript runtime means that JavaScript codes are not executed in both the browser’s runtime environment and the Node runtime environment. This is done because no event handlers or <code>useEffect</code> are used and instead, CSS Modules are used for styling and can also be used as a pure CSS framework.</p>
<h3 id="style-override">Style override</h3>
<p>Camome UI offers CSS <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@layer">Cascade Layers</a> to ensure that your customized CSS styles always prevail due to one disadvantage of CSS Modules: the difficulty of overriding styles.</p>
<p>With Camome UI, you don’t need to always include <code>!important</code> to your styles or worry about the order or specificity when overriding styles because all styles outside the <code>@layer</code> block override the styles enclosed within the <code>@layer</code> block.</p>
<h2 id="camome-ui-design-system">Camome UI design system</h2>
<p>Before we dive into using Camome UI to design user interfaces, let’s look at the Camome design system. The Camome UI design system is divided into sections covering Color palette, Typography, and Misc.</p>
<h3 id="color-palette">Color palette</h3>
<p>The color palette for the Camome UI design system is a collection of colors used to create user interfaces that are aesthetically pleasing and enjoyable to use while promoting consistency. The color palette is broken down into three categories: Shade, Semantic, and Template. Shade is the most primitive.</p>
<p>Semantic can be used generally anywhere; for example, <code>font.base</code> is used to add white or gray to your fonts using <code>font.onEmphasis</code>:</p>
<pre>h1 {
  color: var(--cmm-color-font-base);
}
</pre>
<p>Templates are used for specific UI patterns. For example, a button has several templates that may be changed using the variant property’s <code>solid</code>, <code>soft</code>, or <code>outline</code> options:</p>
<pre>button:hover {
  background: var(--cmm-primary-solid-bgHover);
}
</pre>
<h3 id="typography">Typography</h3>
<p>Typography includes the styles for setting font family, font size, and font weight:</p>
<pre>&lt;style>
 h1{
  font-family: var(--cmm-font-family-base) // font family
  font-size: var(--cmm-font-size-sm) // font size
  font-weight: var(--cmm-font-weight-bold) // font weight
  }
&lt;/style>

&lt;body>
  &lt;h1>Hello World!&lt;/h1>
&lt;/body>
</pre>
<h3 id="misc">Misc</h3>
<p>Misc includes the styles for setting shadows and radius:</p>
<pre>&lt;style>
 button{
  border-radiue: var(--cmm-radius-2xl);
  box-shadow: var(--cmm-shadow-xl);
  }
&lt;/style>

&lt;body>
  &lt;button>Click Here&lt;/button>
&lt;/body>
</pre>
<h2 id="exploring-camome-ui-components">Exploring Camome UI components</h2>
<p>Camome UI components are pre-built elements that look the same no matter where they are placed on the webpage. They adhere to patterns that are only effective when the proper class names and modifiers are used.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h3 id="buttons">Buttons</h3>
<p>To add a Camome UI button component, you just need to specify the <code>Button</code> class to the <code>button</code> element:</p>
<pre>&lt;button class="Button">Button&lt;/button>
</pre>
<p>This will create a default Camome UI button. We can extend the button with additional classes to specify its color scheme, type, state, and variations.</p>
<p>The class names <code>Button--solid</code>, <code>Button--outline</code>, <code>Button--ghost</code>, and <code>Button--soft</code> can be used to identify the button variations. Class names are <code>Button--primary</code>, <code>Button--neutral</code>, <code>Button--success</code>, and <code>Button--danger</code>.</p>
<p>You specify the different states of your button, such as loading or disabled, by specifying <code>role="status"</code> and <code>disabled="true"</code> respectively:</p>
<pre>// Loading state
&lt;button class="Button Button--solid Button--primary Button--md">
  &lt;span class="Button__startDecorator">
    &lt;div role="status" class="Spinner Spinner--sm">
      &lt;svg>...&lt;/svg>
      &lt;span class="visually-hidden">Loading...&lt;/span>
    &lt;/div>
  &lt;/span>
  Saving...
&lt;/button>

// disabled
&lt;button class="Button" disabled="true">
  Solid
&lt;/button>
</pre>
<p>We can also provide <code>Button--sm</code>, <code>Button--md</code> or <code>Button--large</code> to change the button’s size:</p>
<pre>&lt;button class="Button Button--sm">Small&lt;/button>
</pre>
<h3 id="kbd">KBD</h3>
<p>The <code>&lt;kbd></code> tag denotes text representing a keyboard button or shortcut. This tag can also be used for voice input or any other text input device.</p>
<p>The text content is displayed by default in a monospace font. To create the UI of a keyboard button, your code should look similar to this:</p>
<pre>&lt;div>
  &lt;kbd class="Kbd">⌘&lt;/kbd>
  &lt;span>+&lt;/span>
  &lt;kbd class="Kbd">K&lt;/kbd>
&lt;/div>
</pre>
<p>For example, you can add styles to increase the font size; simply set the <code>font-size</code> property to change size:</p>
<pre>&lt;div >
  &lt;kbd class="Kbd">Ctrl&lt;/kbd>
  +
  &lt;kbd class="Kbd">Alt&lt;/kbd>
  +
  &lt;kbd class="Kbd">Delete&lt;/kbd>
&lt;/div>
</pre>
<h3 id="message-alert">Message and alert</h3>
<p>The Camome UI <code>Message</code> component is used to highlight important information. The <code>Message</code> component can be added by specifying the <code>Message</code> class name. This will automatically produce a <code>message</code>. By adding the <code>Message-info</code>, <code>Message-warn</code>, <code>Message-error</code>, or <code>Message-success</code> classes, we can give the message different variations:</p>
<pre>&lt;div class="Message Message-info">
  &lt;span class="Message__icon">
    &lt;svg>...&lt;/svg>
  &lt;/span>
  &lt;div class="Message__title" id=":R0:">This is a title&lt;/div>
  &lt;div class="Message__content">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.
  &lt;/div>
&lt;/div>
</pre>
<p><code>Alert</code> is similar to <code>Message</code>; all you need is to specify the <code>role="alert"</code> attribute:</p>
<pre>&lt;div role='alert' class="Message Message--info">
  &lt;span class="Message__icon">
    &lt;svg>...&lt;/svg>
  &lt;/span>
  &lt;div class="Message__content">This is an alert message&lt;/div>
&lt;/div>
</pre>
<h3 id="tooltip">Tooltip</h3>
<p>Tooltips show the user additional information about a page element or feature. Use the class name <code>Tooltip__target</code> and the <code>role="tooltip"</code> attribute to target the element, and the <code>data-placement</code> attribute to specify the position of the tooltip:</p>
<pre>&lt;div class="Tooltip__target">
  &lt;button class="Button Button--solid Button--primary Button--sm">Top&lt;/button>
  &lt;div role="tooltip" class="Tooltip__content" data-placement="top">
    This is a tooltip
  &lt;/div>
&lt;/div>
</pre>
<h2 id="getting-started-camome-ui">Getting started with Camome UI</h2>
<p>Camome UI can be added to your project in different ways with different frameworks. It can be added to your project using <a href="https://camome.net/docs/guide/installation#install"><code>npm</code></a>, <a href="https://camome.net/docs/guide/installation#install"><code>yarn</code></a>, or <a href="https://camome.net/docs/guide/installation#install"><code>pnpm</code></a>. After that, you will also need to configure plugins or loaders for webpack or Rollup if you are using Next.js, Astro, or Vite because Camome UI is written in JavaScript and <a href="https://github.com/css-modules/css-modules">CSS Modules</a> in <a href="https://sass-lang.com/">Sass</a> as they cannot be directly imported from JavaScript.</p>
<p>Look at the integration <a href="https://camome.net/docs/integrations">guide</a> to learn how to set it up with your preferred frontend framework.</p>
<blockquote><p>According to their docs, Camome UI is not yet stable — Breaking changes may be introduced without increment of significant version number. When you update <code>@camome/*</code>, see <a href="https://github.com/camomeui/camome/releases">changelogs</a> to make sure your code is not affected by breaking changes.</p></blockquote>
<p>For this tutorial, we will be using the <a href="https://camome.net/docs/integrations/cdn">CDN</a> version. Create an <code>index.html</code> file within a new folder <code>camome-project</code> and add the CDN link to the <code>head</code> tag element. Your code should look like the one below:</p>
<pre>&lt;!DOCTYPE html>
&lt;html lang="en" data-theme='light'>
  &lt;head>
    &lt;meta charset="UTF-8">
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
    &lt;meta http-equiv="X-UA-Compatible" content="ie=edge">
    // camome UI CDN link
    &lt;link href="https://unpkg.com/@camome/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9be8e2e8effef6dbf7faeffee8ef">[email protected]</a>/dist/theme.css" rel="stylesheet" />
  &lt;link href="https://unpkg.com/@camome/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e685899483a68a8792839592">[email protected]</a>/dist/components.css" rel="stylesheet" />
    &lt;title>Camome UI Landing page&lt;/title>
  &lt;/head>
  &lt;body>&lt;/body>
</pre>
<p>The <code>data-theme</code> attribute is what Camome used to define light and dark modes.</p>
<h2 id="building-user-interface-using-camome-ui">Building a user interface using Camome UI</h2>
<p>Here, we will put all that we’ve learned so far into building a landing page. We’ll implement a couple of Camome UI components and design systems. We will create a basic homepage that includes Camome UI components and the pre-existing styles that Camome UI provides by default for both light and dark modes.</p>
<p>Subsequently, we will modify the user interface to integrate our individualized styles and design preferences. Here’s what our finished project will look like:</p>
<blockquote class="embedly-card" data-card-controls="1" data-card-align="center" data-card-theme="light">
<h4><a href="https://codesandbox.io/s/using-camome-to-design-highly-customizable-ui-obp2xl">Using Camome to design highly customizable UI</a></h4>
<p>Using Camome to design highly customizable UI by miracle</p>
</blockquote>
<p><script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"/><script async="async" src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"/></p>
<h2 id="creating-navbar">Creating our Navbar</h2>
<p>Open the <code>camome-project/index.html</code> file we previously prepared to begin creating our home page. Following that, we’ll make a <code>nav</code> element to house our navigation link and toggle button:</p>
<pre>&lt;nav>
  &lt;div class="Tab__group">
    &lt;div class="Tab__list" role="tablist" aria-orientation="horizontal">
      &lt;div class='tab'>
        &lt;a href='#' class="Tab Tab--active">Home&lt;/a>
        &lt;a href='#' class="Tab">FAQ&lt;/a>
        &lt;a href='#' class="Tab">Contact Us&lt;/a>
      &lt;/div>
       &lt;button class="Button Button--solid Button--primary Button--md'>dark&lt;/button>
    &lt;/div>        
  &lt;/div>
&lt;/nav>
</pre>
<p>This code creates a navigation bar for a website. The navigation bar has a group of tabs with links to different pages on the website such as the homepage, FAQ page, and contact page. The active tab, or the one currently selected, is highlighted with a different color.</p>
<p>In addition to the tabs, there is also a button that can be clicked to toggle between light and dark. We will be handling the functionality of the toggle button with JavaScript.</p>
<p>Now let’s add our <code>Hero</code> section:</p>
<pre>&lt;header>
  &lt;div class='container'>
      &lt;h1>Light weight, accessibleUI framework for React and CSS&lt;/h1>
      &lt;p>Camome UI enables you to build various styles of components without run-time JavaScript by fully utilizing the power of CSS.&lt;/p>
      &lt;div class="Tooltip__target">
        &lt;button class="Button Button--solid Button--primary Button--lg">
          Hover me
        &lt;/button>
        &lt;div role="tooltip" class="Tooltip__content" data-placement="bottom">
          Camome UI is a React component library and a CSS framework.
        &lt;/div>
      &lt;/div>
  &lt;/div>
      &lt;form>
        &lt;div class="FormField FormField--fill">
            &lt;label class="FormFieldLabel">
              First name
            &lt;/label>
            &lt;input
              class="TextInput TextInput--md TextInput--fill"
              type="text"
              placeholder="John"
              name="firstName"
            />
          &lt;/div>
          &lt;div class="FormField FormField--fill">
            &lt;label class="FormFieldLabel">
              Email
            &lt;/label>
            &lt;input 
              class="TextInput TextInput--md TextInput--fill" 
              type="email" 
              placeholder="example.com" 
              name="email" 
            />
          &lt;/div>
        &lt;div class="FormField FormField--fill">
          &lt;label class="FormFieldLabel">
            Job title
          &lt;/label>
          &lt;select class="Select Select--md Select--fill" name="jobTitle">
            &lt;option value="developer">Developer&lt;/option>
            &lt;option value="designer">Designer&lt;/option>
            &lt;option value="other">Other&lt;/option>
          &lt;/select>
        &lt;/div>
        &lt;button class="Button Button--solid Button--primary Button--md" type="submit">
          Submit
        &lt;/button>
      &lt;/form>
&lt;/header>
</pre>
<p>The markup code is used to create a header section for a website. The header includes a title and description and a button that, when hovered over, displays a tooltip. Additionally, there is a form included that allows users to input their name, email, and job title with a submit button.</p>
<p>With this, let’s add styles to our site to make it look good. We will style our app using the Camome design system. This will give us more power to easily customize our styles. Create a new <code>camome-project/styles.css</code> file, link the CSS file to the HTML file, and add the code below:</p>
<pre>body {
  max-width: 1080px;
  width: 100%;
  height: 100vh;
  margin: 0 auto;
  padding: 2rem 1rem;
}
nav {
  display: flex;
  margin-bottom: 5rem;
}
nav .tab {
  display: flex;
}
nav .Tab__list {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 5rem;
}
.container{
  flex: 0 0 40%;
  max-width: 40%;
}
header h1 {
  font-size: var(--cmm-font-size-2xl);
}
header p {
  margin: 2rem 0
}
form {
  flex: 0 0 60%;
  max-width: 60%;
  display: grid;
  gap: 1.5rem;
  color: var(--cmm-color-neutral-0);
  background: var(--cmm-color-neutral-7);
  padding: 1rem;
  border-radius: var(--cmm-radius-lg);
}
select, input{
  color: var(--cmm-color-neutral-7);
}
</pre>
<p>Styling using Camome UI is usually variable and starts with the prefix <code>-cmm-</code>. For example, <code>var(--cmm-font-size-2xl)</code> will increase the font size by 24px.</p>
<h2 id="customizing-user-interface-camome-ui">Customizing our user interface with Camome UI</h2>
<p>To add and customize the dark mode user interface, we will adjust the <code>background-image</code> of the webpage’s body and <code>background-color</code> of the hover <code>button</code>. Additionally, we will modify the <code>background-color</code> of the <code>form</code>, <code>input</code>, and <code>select</code> elements. These instances can serve as helpful references for making additional modifications to the pre-existing styles within Camome UI.</p>
<p>Inside the <code>styles.css</code> file, add the code below:</p>
<pre>[data-theme="dark"] body{
  background: url("https://media.giphy.com/media/aRZ4vTsHnyW6A/giphy.gif");
}
[data-theme="dark"] .container button {
  background: linear-gradient(
    to right,
    hsl(240deg 60% 40%) 0%,
    hsl(300deg 80% 40%) 100%
  );
}

[data-theme="dark"] form{
  background: linear-gradient(
    to right,
    hsl(240deg 60% 40%) 0%,
    hsl(300deg 80% 40%) 100%
  );
}

[data-theme="dark"] select, input{
  color: var(--cmm-color-neutral-7);
  background: var(--cmm-color-neutral-0);
}
</pre>
<p>The UI for the light mode will not change once we have successfully added these custom styles to our CSS file. But, we’ve customized our dark mode, which will make it look different.</p>
<p>Now, handling <code>click</code> events in JavaScript will be the last step. First, add an <code>id</code> attribute with a <code>toggle</code> value to the navigation button. That way, when we click on it, we will be able to switch between dark and light modes:</p>
<pre>&lt;button class="Button Button--solid Button--primary Button--md' id='toggle'>dark&lt;/button>
</pre>
<p>To handle the switch between the light and dark mode user interface, add the following code to the <code>index.js</code> file:</p>
<pre>const toggle = document.getElementById("toggle");
const html = document.documentElement;

toggle.addEventListener("click", () => {
  if (html.getAttribute("data-theme") === "light") {
    html.setAttribute("data-theme", "dark");
    document.getElementById('toggle').innerHTML = 'light'
  } else {
    html.setAttribute("data-theme", "light");
    document.getElementById('toggle').innerHTML = 'dark'
  }
});
</pre>
<h2 id="camome-ui-vs-tailwind-css">Camome UI vs. Tailwind CSS</h2>
<p>Camome UI is a React component framework that provides the same styling benefits as Tailwind CSS but handles all of the details for you. This library contains meticulously constructed components, allowing you to concentrate on accessibility, component composition, keyboard navigation, style overrides, and other important tasks.</p>
<p>When using various applications, it is often difficult to modify styles to meet specific design needs for a particular situation. In the case of Tailwind CSS, users may need to determine the most effective method to override certain <code>classNames</code> or create their own CSS. Conversely, with Camome UI, overrides are simple because their styles are based on CSS modules, and can be easily adjusted.</p>
<p>Tailwind CSS supports dark mode for all of its components through the use of a dark variant. On the other hand, Camome UI components can be used in both light and dark modes, and you can also create custom light and dark mode experiences for your entire application.</p>
<p>Tailwind CSS requires the user to manage semantic HTML structure, adhere to WAI-ARIA requirements, enable keyboard navigation, and so on. On the other hand, Camome UI offers the ease of use of Tailwind as well as all of these other advantages pre-packaged.</p>
<p>Being a utility-first approach, Tailwind CSS usually uses many classes in HTML. The size of your HTML file may consequently grow larger during download. As a larger HTML file could take longer to download and render in the browser, it can also affect how quickly the page loads. On the other hand, the Camome UI component costs 1.42KB (including CSS), and an extra 4KB of global CSS is required.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this guide, we looked at the Camome UI framework and its features, as well as explored the components and design system. We displayed some examples and guided you through the process of incorporating Camome UI into your webpage development. We also demonstrated how to substitute predefined styles with our unique styles. Although we concentrated on overriding dark mode styles, you can apply the information acquired from this guide to override light mode styles as well as overriding components.</p>
<p>In general, styling with Camome starts with the prefix <code>-cmm-</code> and customizing for either light or dark mode starts with <code>[data-theme="&lt;dark or light>"]</code>. There are many styles that can be modified for both modes, allowing for a multitude of customization options for your web pages.</p>
<p>Good luck using Camome UI in your next project!</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166987" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166987" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166987" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

 <div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/judemiracle/">
Jude Miracle <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer passionate about the Web3 ecosystem and love to spend time learning and tinkering with new tools and technologies.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/css/">#css</a></li> <li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/ltv-cac-ratio-how-to-calculate-strategies/" rel="prev">LTV:CAC ratio: Definition, strategies, and how to calculate</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/using-modern-decorators-typescript/" rel="next">Using modern decorators in TypeScript</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/using-camome-design-highly-customizable-uis/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Using modern decorators in TypeScript - LogRocket Blog</title>
			<link>https://blog.logrocket.com/using-modern-decorators-typescript/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/using-modern-decorators-typescript/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<title>Using modern decorators in TypeScript - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/using-modern-decorators-typescript/">Using modern decorators in TypeScript - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168216 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-typescript" id="post-168216">
<div class="mainheading">

 <div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/alecbrunelle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/alecbrunelle/">
Alec Brunelle <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Alec is a web developer who loves to work in all areas of the stack. Currently hacking on GraphQL services at Unity Technologies.</span>
</div>
</div>
<h1 class="posttitle">Using modern decorators in TypeScript</h1>
<p>
<span class="post-date"><time class="post-date">
April 28, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1751</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/using-modern-decorators-typescript-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Using Modern Decorators TypeScript"                /> <article class="article-post">
<p><a href="https://www.jetbrains.com/lp/devecosystem-2022/">The State of Developer Ecosystem 2022</a> crowned TypeScript the fastest-growing programming language. It’s not hard to see why. This popular superset of JavaScript provides type-checking, enums, and other enhancements. But often, TypeScript introduces long-awaited features that are not yet part of the ECMAScript standard that JavaScript relies on.</p>
<p>One example is the reintroduction of decorators in the <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-0-rc/">soon-to-be-released TypeScript 5.0</a>; decorators is a meta-programming technique that can be found in other programming languages. If you’re an application developer or library author who is interested in using the new official TypeScript decorators, you’ll want to adopt the new syntax and understand the differences between the old and new feature sets. The API differences are extensive and it is unlikely that old decorators will work with the new syntax out of the box.</p>
<p>In this article, we’ll review the history of using decorators in TypeScript, discuss the benefits associated with decorators in TypeScript 5.0, walk through a demo using modern decorators, and explore how to refactor existing decorators.</p>
<p><strong><em>N.B.,</em></strong> <em>all the APIs have changed extensively in TypeScript 5.0; for this article, we’ll focus on class method decorators</em></p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#history-typescript-decorators">History of TypeScript decorators</a></li>
<li><a href="#decorators-typescript-5">Decorators in TypeScript 5.0</a></li>
<li><a href="#decorator-factory-demo">Decorator factory demo</a></li>
<li><a href="#refactoring-existing-decorators">Refactoring existing decorators</a></li>
<li><a href="#understanding-limitations-modern-decorators">Understanding the limitations of modern decorators</a></li>
</ul>
<h2 id="history-typescript-decorators">History of TypeScript decorators</h2>
<p><a href="https://www.typescriptlang.org/docs/handbook/decorators.html">Decorators</a> is a feature that enables developers to reduce boilerplate by quickly adding functionality to classes, class properties, and class methods. When TypeScript first introduced decorators it did not follow the ECMAScript specification. This wasn’t great for developers, since ideally emitted code from any JavaScript compiler should comply with web standards!</p>
<p>Using decorators required setting an <code>--experimentalDecorators</code> experimental compiler flag. Several popular TypeScript libraries, such as <a href="https://typegraphql.com/">type-graphql</a> and <a href="https://inversify.io/">inversify</a>, rely on this implementation.</p>
<p>Here’s an example of a simple class method decorator, demonstrating the enhanced ergonomics of the new syntax:</p>
<pre><code>function debugMethod(_target: unknown, memberName: string, propertyDescriptor: PropertyDescriptor) {
  return {
    get() {
      const wrapperFunction = (...arguments_: unknown[]) => {
        const now = new Date(Date.now());
        console.log('start time', now.toISOString());
        propertyDescriptor.value.apply(this, arguments_);
        const end = new Date(Date.now());
        console.log('end time', end.toISOString());
      };
      Object.defineProperty(this, memberName, {
        value: wrapperFunction,
        configurable: true,
        writable: true,
      });
      return wrapperFunction;
    },
  };
}
class ComplexClass {
  @debugMethod
  public complexMethod(a: number): void {
    console.log("DOING COMPLEX STUFF!");
  }
}
</code></pre>
<p>In the above code, we can see that the <code>debugMethod</code> decorator overrides the class method property using <code>Object.defineProperty</code>, but in general, the code isn’t easy to follow. Also, the arguments are not type-safe, which limits our safety inside the <code>wrapperFunction</code>. Additionally, the compiler will not fail if this decorator is used on an invalid use case, such as a class property.</p>
<p>We could <a href="https://blog.logrocket.com/using-typescript-generic-type-create-reusable-components/">use TypeScript generics</a> to try to achieve type safety, but TypeScript does not infer generic types and this makes them a pain to consume. Thus, writing complex decorators is difficult due to the unknown values users can input into them.</p>
<p>The modern version of decorators, which will be officially rolled out in TypeScript 5.0, no longer requires a compiler flag and follows <a href="https://github.com/tc39/proposal-decorators">the official ECMAScript Stage-3 proposal</a>. Alongside a stable implementation that follows ECMAScript standards, decorators now work seamlessly with the TypeScript type system, enabling more enhanced functionality than the original version.</p>
<p>With the new implementation of decorators in TypeScript 5.0, these aspects are greatly improved. Let’s take a look.</p>
<h2 id="decorators-typescript-5">Decorators in TypeScript 5.0</h2>
<p>TypeScript 5.0 offers better ergonomics, improved type safety, and more. Here’s a similar example of a TypeScript 5.0 decorator that overrides a class method:</p>
<pre class="language-typescript hljs">function debugMethod(originalMethod: any, _context: any) {
  function replacementMethod(this: any, ...args: any[]) {
    const now = new Date(Date.now());
    console.log('start time', now.toISOString());
    const result = originalMethod.call(this, ...args);
    const end = new Date(Date.now());
    console.log('end time', end.toISOString());
    return result;
  }
  return replacementMethod;
}
class ComplexClass {
  @debugMethod
  complexMethod(a: number): void {
    console.log("DOING STUFF!");
  }
}
</pre>
<p><em><strong>N.B.,</strong> to <a href="https://www.typescriptlang.org/play">try out TypeScript in an online playground</a>, just switch the version to “nightly” or “5.0”</em></p>
<p>With the new implementation, simply returning the function can now replace it; there’s no need for the <code>Object.defineProperty</code>. This makes decorators easier to implement and understand. Alongside this improvement, let’s make it completely type-safe:</p>
<pre class="language-typescript hljs">function debugMethod&lt;TThis, TArgs extends [string, number], TReturn extends number>(
  originalMethod: Function,
  context: ClassMethodDecoratorContext&lt;TThis, (this: TThis, ...args: TArgs) => TReturn>
) {
  function replacementMethod(this: TThis, a: TArgs[0], b: TArgs[1]): TReturn {
    const now = new Date(Date.now());
    console.log('start time', now.toISOString());
    const result = originalMethod.call(this, a, b);
    const end = new Date(Date.now());
    console.log('end time', end.toISOString());
    return result;
  }
  return replacementMethod;
}
</pre>
<p>The decorators function in TypeScript 5.0 is greatly improved and now supports the following:</p>
<ul>
<li>Using generics to type a method’s arguments and return a value; the method must accept a string and a number, <code>TArgs</code>, and return a number, <code>TReturn</code></li>
<li>Typing the <code>originalMethod</code> as a <code>Function</code></li>
<li>Using the <code>ClassMethodDecoratorContext</code> inbuilt helper type; this exists for all decorator types</li>
</ul>
<p>We can test to see if our decorator is truly type-safe by inspecting errors when it is used incorrectly:</p>
<p><img             class="aligncenter wp-image-168219 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/typescript-5-incorrectly-typed-arguments.jpeg" alt="TypeScript 5.0 Incorrectly Typed Arguments" width="720" height="470"    /><noscript><img               class="aligncenter wp-image-168219 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/typescript-5-incorrectly-typed-arguments.jpeg" alt="TypeScript 5.0 Incorrectly Typed Arguments" width="720" height="470"  /></noscript></p>
<p>Now, let’s look at an actual use case for the new TypeScript 5.0 decorators.</p>
<h2 id="decorator-factory-demo">Decorator factory demo</h2>
<p>We can use the type safety available in the TypeScript 5.0 decorators to create functions that return a decorator, otherwise known as a <a href="https://blog.logrocket.com/practical-guide-typescript-decorators/#use-cases-typescript-decorators">decorator factory</a>. Decorator factories allow us to customize the behavior of our decorators by passing some parameters in the factory.</p>
<p>For our demo, we’ll create a decorator factory that changes the class method argument based on its own arguments. This is possible with a TypeScript type ternary operator. Our example is inspired by REST API frameworks like NestJS.</p>
<p>We’ll call our module <code>rest-framework</code>. Let’s start by creating a blank TypeScript project using <code>ts-node</code>:</p>
<pre class="language-bash hljs">$ mkdir rest-framework
$ cd rest-framework
$ npm init -y
$ npm install -D <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2d59545d485e4e5f445d596d18031d0319">[email protected]</a> @types/node ts-node
$ touch index.ts
$ echo "console.log('Hello, world!');" > index.ts
</pre>
<p>Next, we’ll define the script to build and run the project in <code>package.json</code>:</p>
<pre class="language-json hljs">{
  // ...
  "scripts": {
    "build": "tsc",
    "start": "ts-node index.ts"
  }
}
</pre>
<p>Let’s run <code>npm start</code> to see it in action:</p>
<pre class="language-bash hljs">$ npm start
Hello, world!
</pre>
<p>Now, let’s define our types:</p>
<pre class="language-typescript hljs">interface RouteOptionsAuthEnabled {
  auth: true;
}
interface RouteOptionsAuthDisabled {
  auth: false;
}
type RouteArguments = [string] | [];
type RouteDecorator&lt;TThis, TArgs extends RouteArguments> = (
  originalMethod: Function,
  context: ClassMethodDecoratorContext&lt;
    TThis,
    (this: TThis, ...args: TArgs) => string
  >
) => void;
</pre>
<p>Next, let’s define the factory decorator:</p>
<pre class="language-typescript hljs">function Route&lt;
  TThis,
  // The user can enable or disable auth
  TOptions extends RouteOptionsAuthEnabled | RouteOptionsAuthDisabled
>(
  options: TOptions
): RouteDecorator&lt;
  TThis,
  // Do not accept a function that uses a string for an argument if auth is disabled
  TOptions extends RouteOptionsAuthEnabled ? [string] : []
> {
  return &lt;TThis>(
    target: (
      this: TThis,
      ...args: TOptions extends RouteOptionsAuthEnabled ? [string] : []
    ) => string,
    context: ClassMethodDecoratorContext&lt;
      TThis,
      (
        this: TThis,
        ...args: TOptions extends RouteOptionsAuthEnabled ? [string] : []
      ) => string
    >
  ) => {};
}
</pre>
<p>Now we have a route decorator that changes the class method parameter types depending on the user’s options.</p>
<p>Let’s create an example <code>Route</code> class to act as our test case:</p>
<pre class="language-typescript hljs">class Controller {
  @Route({ auth: true })
  get(authHeaderValue: string): string {
    console.log("get http method handled!");
    return "response";
  }
  @Route({ auth: false })
  post(): string {
    console.log("post http method handled!");
    return "response";
  }
}
</pre>
<p>We can see that TypeScript fails to compile if we try to use <code>authHeaderValue</code> in the <code>post</code> route:</p>
<p><img             class="aligncenter wp-image-168218 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/authheadervalue-post-route-typescript-compilation-failure.png" alt="AuthHeaderValue Post Route TypeScript Compilation Failure" width="720" height="317"    /><noscript><img               class="aligncenter wp-image-168218 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/authheadervalue-post-route-typescript-compilation-failure.png" alt="AuthHeaderValue Post Route TypeScript Compilation Failure" width="720" height="317"  /></noscript></p>
<p>The decorator factory use case is a simple example, but it demonstrates the power of what type-safe decorators can do.</p>
<h2 id="refactoring-existing-decorators">Refactoring existing decorators</h2>
<p>If you’re using an existing TypeScript decorator, you’ll want to refactor to use the API and take advantage of its many benefits. Basic decorators can be easily refactored to the new ones, but the difference is substantial enough that advanced use cases will take effort.</p>
<p>For best results, follow these steps to refactor existing decorators:</p>
<ul>
<li>Write unit tests for your decorators</li>
<li>Remove or falsify the <code>experimentalDecorators</code> TypeScript compiler flags</li>
<li>Read this extensive <a href="https://2ality.com/2022/10/javascript-decorators.html">summary of how the new proposal works</a></li>
<li>Understand the limitations of modern decorators (we’ll cover this in more detail later in this article)</li>
<li>Rewrite decorators using no types and use <code>any</code> in place of all types</li>
<li>Make sure unit tests pass</li>
<li>Add types</li>
</ul>
<h2 id="understanding-limitations-modern-decorators">Understanding the limitations of modern decorators</h2>
<p>The modern decorator implementation is great news for TypeScript developers, but there are notable features missing. First, there’s no support for decorating method parameters. This is within the spec of the proposal, so hopefully it will be included in the final spec. Its omission is notable because popular libraries, like <code>type-graphql</code>, utilize this in important ways, such as writing resolvers:</p>
<pre class="language-typescript hljs">@Query(returns => Recipe)
async recipe(@Arg("recipeId") recipeId: string) {
  return this.recipeRepository.findOneById(recipeId);
}
</pre>
<p>Second, TypeScript 5.0 cannot emit decorator metadata. Subsequently, it doesn’t integrate with the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect API</a> and won’t work with the <a href="https://github.com/rbuckton/reflect-metadata">reflect-metadata</a> npm package.</p>
<p>Third, the <code>--emitDecoratorMetadata</code> flag, which was previously used to access and modify metadata for given decorators, is no longer supported. Unfortunately, there’s no real way to achieve the same functionality by getting the metadata at runtime. There are some cases that can be refactored. For example, let’s define a decorator that validates a function’s parameter types at runtime:</p>
<pre class="language-typescript hljs">function validateParameterType(target: any, propertyKey: string | symbol): void {
  const methodParameterTypes: (string | unknown)[] =
    Reflect.getMetadata("design:paramtypes", target, propertyKey) ?? [];
  const firstParameterType = methodParameterTypes[0];
  if (typeof firstParameterType !== "string") {
    throw new TypeError("First parameter must be a string");
  }
}
</pre>
<p>We can achieve similar functionality with the improved type safety provided by TypeScript 5.0. We simply add the arguments of the method we are decorating, like so:</p>
<pre class="language-typescript hljs">function debugMethod&lt;TThis, TArgs extends [string], TReturn>(
) {
...
</pre>
<p>In theory, we could use this approach to refactor decorators that depend on getting types from Reflect for <code>design:type</code>, <code>design:paramtypes</code>, and <code>design:returntype</code>. This is a different way to write decorators; it is not a simple refactor because it requires using TypeScript type inference to refactor how types are acquired and validated.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The new decorator implementation in TypeScript 5.0 follows the official ECMAScript Stage-3 proposal and is now type-safe, making it easier to implement and understand. However, some notable features are missing, such as support for decorating method parameters and the ability to emit decorator metadata.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Basic decorators can be easily refactored to the TypeScript 5.0 version, but advanced use cases will require more effort. Developers can refactor existing decorators to use the new API and take advantage of the associated benefits. They can be less dependent on external libraries and are less likely to refactor code in the future. These changes to TypeScript’s implementation of decorators are a benefit to the broader ecosystem, but community adoption could take some time.</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168216" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/using-modern-decorators-typescript/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/using-modern-decorators-typescript/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168216" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/using-modern-decorators-typescript/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168216" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/using-modern-decorators-typescript/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/alecbrunelle/">
Alec Brunelle <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Alec is a web developer who loves to work in all areas of the stack. Currently hacking on GraphQL services at Unity Technologies.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/typescript/">#typescript</a></li> </ul>
 </div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/" rel="prev">Using Camome to design highly customizable UIs</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/guide-to-customer-discovery-process/" rel="next">A guide to the customer discovery process</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/using-modern-decorators-typescript/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

	</channel>
</rss>
