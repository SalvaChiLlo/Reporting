
  <rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:georss="http://www.georss.org/georss"
    xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">
  
    <channel>
      <title>LogRocker Engineering Blog</title>
      <atom:link href="https://raw.githubusercontent.com/SalvaChiLlo/Reporting/main/logrocker.rss.xml" rel="self" type="application/rss+xml" />
      <link>https://LogRocker.engineering/</link>
      <description>The official blog of the LogRocker Engineering team.</description>
      <lastBuildDate>Sat, 29 Apr 2023 21:14:47 +0000</lastBuildDate>
      <language>en-US</language>
      <sy:updatePeriod>hourly</sy:updatePeriod>
      <sy:updateFrequency>
    1	</sy:updateFrequency>
  
  
      <image>
        <url>https://i0.wp.com/LogRocker.engineering/wp-content/uploads/2019/01/cropped-LogRocker_icon.jpg?fit=32%2C32&#038;ssl=1</url>
        <title>LogRocker Engineering Blog</title>
        <link>https://LogRocker.engineering/</link>
        <width>32</width>
        <height>32</height>
      </image>

		<item>
			<title>3 ways to implement infinite scroll in React - LogRocket Blog</title>
			<link>https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>3 ways to implement infinite scroll in React - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/">3 ways to implement infinite scroll in React - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-1837 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-1837">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/osamuel/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/ogundipe.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/ogundipe.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/osamuel/">
Ogundipe Samuel <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software engineer and technical writer.</span>
</div>
</div>
<h1 class="posttitle">3 ways to implement infinite scroll in React</h1>
<p>
<span class="post-date"><time class="post-date">
April 14, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1334</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2018/02/react-infinite-scroll-implement.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="React Infinite Scroll Implement"                /> <article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was last updated on 14 April 2023 to include information about the Intersection Observer API. </em></p>
<p>In today’s fast-paced digital landscape, providing a seamless and engaging user experience is more important than ever before. One popular method for improving user experience is implementing infinite scrolling, a web design technique that loads content continuously as the user scrolls down the page.</p>
<p>This intuitive feature <a href="https://blog.logrocket.com/react-pagination-scratch-hooks/">eliminates the need for traditional pagination</a> and has become a staple in modern web applications. In this article, we’ll explore three unique approaches to implementing infinite scrolling in React applications:</p>
<ol>
<li>Building the entire implementation from scratch: Covers the fundamentals of creating an infinite scroll solution from the ground up, giving you full control over customization and functionality</li>
<li>Using an existing infinite scroll library or component: Leverages pre-built libraries or components, which save time and effort but still offer customization options</li>
<li>Leveraging the Intersection Observer API: Harnesses the power of the <a href="https://blog.logrocket.com/lazy-loading-using-the-intersection-observer-api/">Intersection Observer API</a>, which allows for efficient and performant detection when elements come into view, thereby triggering content loading</li>
</ol>
<p>To follow along with this article, you’ll need a basic understanding of React. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#basic-setup">Basic React application setup</a>
<ul >
<li><a href="#set-up-initial-state">Setting up the initial state</a></li>
<li><a href="#load-data">Loading data</a></li>
<li><a href="#call-fetchdata-component-mount">Calling <code>fetchData</code> on component mount</a></li>
</ul>
</li>
<li><a href="#methods-implementing-infinite-scroll-react">Methods for implementing infinite scroll in React</a>
<ul >
<li><a href="#building-entire-implementation-scratch">1. Building the entire implementation from scratch</a></li>
<li><a href="#utilize-existing-infinite-scroll-library-component">2. Utilizing an existing infinite scroll library or component</a></li>
<li><a href="#leveraging-intersection-observer-api">3. Leveraging the Intersection Observer API</a></li>
</ul>
</li>
</ul>
<h2 id="basic-setup">Basic React application setup</h2>
<p>Throughout this article, we’ll build on a consistent foundation to implement the various infinite scrolling techniques. For each method, we’ll adapt the following steps and code snippets.</p>
<h3 id="set-up-initial-state">Setting up the initial state</h3>
<p>First, we’ll set up the initial state for our component. This includes the list of items to display, the necessary loading and error indicators, and a variable to keep track of the current page number:</p>
<pre class="language-javascript hljs">import React, { useState, useEffect, useRef } from 'react';

const InfiniteScrollExample = () => {
  const [items, setItems] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1);

  // ... rest of the component
};
</pre>
<h3 id="load-data">Loading data</h3>
<p>Next, we’ll create a function to fetch data from an API or another data source, increment the page number, and update the state with the fetched items. Additionally, we’ll handle any errors during the data fetching process:</p>
<pre class="language-javascript hljs">const fetchData = async () => {
  setIsLoading(true);
  setError(null);

  try {
    const response = await fetch(`https://api.example.com/items?page=${page}`);
    const data = await response.json();

    setItems(prevItems => [...prevItems, ...data]);
    setPage(prevPage => prevPage + 1);
  } catch (error) {
    setError(error);
  } finally {
    setIsLoading(false);
  }
};
</pre>
<h3 id="call-fetchdata-component-mount">Calling <code>fetchData</code> on component mount</h3>
<p>Lastly, we’ll use the <code>useEffect</code> Hook to call the <code>fetchData</code> function when the component mounts initially:</p>
<pre class="language-javascript hljs">useEffect(() => {
  fetchData();
}, []);
</pre>
<p>These foundational steps will be present in all of the techniques we discuss in this article. As we explore each method for implementing infinite scrolling React, we’ll modify and expand upon this base.</p>
<h2 id="methods-implementing-infinite-scroll-react">Methods for implementing infinite scroll in React</h2>
<h3 id="building-entire-implementation-scratch">1. Building the entire implementation from scratch</h3>
<p>Building the entire infinite scroll implementation from scratch involves handling the scroll event, loading more data, and updating the state in your React application. This approach provides you with full control over customization and functionality.</p>
<p>Extending our basic setup, we’ll first create a function to handle the <code>scroll</code> event. This function will check if the user has reached the bottom of the page and call <code>fetchData</code> if necessary. We’ll add a <code>scroll</code> event listener to the <code>window</code> object and remove it when the component is unmounted:</p>
<pre class="language-javascript hljs">const handleScroll = () => {
  if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isLoading) {
    return;
  }
  fetchData();
};

useEffect(() => {
  window.addEventListener('scroll', handleScroll);
  return () => window.removeEventListener('scroll', handleScroll);
}, [isLoading]);
</pre>
<p>Finally, we render the items, the loading indicator, and any error messages within the component:</p>
<pre class="language-javascript hljs">return (
  &lt;div>
    &lt;ul>
      {items.map(item => (
        &lt;li key={item.id}>{item.name}&lt;/li>
      ))}
    &lt;/ul>
    {isLoading &amp;&amp; &lt;p>Loading...&lt;/p>}
    {error &amp;&amp; &lt;p>Error: {error.message}&lt;/p>}
  &lt;/div>
);
</pre>
<p>With that, we have a fully functional infinite scroll implementation built from scratch. This approach allows for extensive customization and more control over functionality. However, it may be more time-consuming and require more maintenance than using an existing library or component.</p>
<h3 id="utilize-existing-infinite-scroll-library-component">2. Utilizing an existing infinite scroll library or component</h3>
<p>Using an existing infinite scroll library or component can save you time and effort as you leverage pre-built, pre-tested solutions while retaining customization options. One popular library for implementing infinite scrolling in React is <code><a href="https://github.com/ankeetmaini/react-infinite-scroll-component">react-infinite-scroll-component</a></code>. Let’s learn how to use this library to create infinite scrolling in our React application.</p>
<p>First, install the <code>react-infinite-scroll-component</code> library using npm or Yarn:</p>
<pre class="language-bash hljs">npm install react-infinite-scroll-component
or
yarn add react-infinite-scroll-component
</pre>
<p>Then, we’ll extend our basic setup, import the <code>InfiniteScroll</code> component from the library, and wrap the list of items in it. Configure the component by passing the necessary props like <code>dataLength</code>, <code>next</code>, <code>hasMore</code>, and <code>loader</code>:</p>
<pre class="language-javascript hljs">import InfiniteScroll from 'react-infinite-scroll-component';

// ...

return (
  &lt;div>
    &lt;InfiniteScroll
      dataLength={items.length}
      next={fetchData}
      hasMore={true} // Replace with a condition based on your data source
      loader={&lt;p>Loading...&lt;/p>}
      endMessage={&lt;p>No more data to load.&lt;/p>}
    >
      &lt;ul>
        {items.map(item => (
          &lt;li key={item.id}>{item.name}&lt;/li>
        ))}
      &lt;/ul>
    &lt;/InfiniteScroll>
    {error &amp;&amp; &lt;p>Error: {error.message}&lt;/p>}
  &lt;/div>
);
</pre>
<p>With that, we’ve implemented infinite scrolling in our React application using the <code>react-infinite-scroll-component</code> library. We didn’t use <code>scroll</code> handling because <code>react-infinite-scroll-component</code> handles that for us.</p>
<p>The <code>react-infinite-scroll-component</code> library offers a faster and more streamlined implementation process but still provides customization options, like for scroll height and scroll overflow. However, you should keep in mind the trade-off of introducing additional dependencies in your project.</p>
<h3 id="leveraging-intersection-observer-api">3. Leveraging the Intersection Observer API</h3>
<p>The Intersection Observer API is a modern development technique that can detect when elements come into view, thereby triggering content loading for infinite scrolling. The Intersection Observer API observes changes in the intersection of target elements with an ancestor element or the viewport, making it well-suited for implementing infinite scrolling.</p>
<p>Extending our basic setup, create a <code>ref</code> for the <code>observer</code> target element and set up the Intersection Observer in a <code>useEffect</code> Hook. When the target element comes into view, call the <code>fetchData</code> function as follows:</p>
<pre class="language-javascript hljs">const observerTarget = useRef(null);

useEffect(() => {
  const observer = new IntersectionObserver(
    entries => {
      if (entries[0].isIntersecting) {
        fetchData();
      }
    },
    { threshold: 1 }
  );

  if (observerTarget.current) {
    observer.observe(observerTarget.current);
  }

  return () => {
    if (observerTarget.current) {
      observer.unobserve(observerTarget.current);
    }
  };
}, [observerTarget]);
</pre>
<p>Then, render the items, loading indicator, error messages, and the <code>observer</code> target element within the component:</p>
<pre class="language-javascript hljs">return (
  &lt;div>
    &lt;ul>
      {items.map(item => (
        &lt;li key={item.id}>{item.name}&lt;/li>
      ))}
    &lt;/ul>
    {isLoading &amp;&amp; &lt;p>Loading...&lt;/p>}
    {error &amp;&amp; &lt;p>Error: {error.message}&lt;/p>}
    &lt;div ref={observerTarget}>&lt;/div>
  &lt;/div>
);
</pre>
<p>By leveraging the Intersection Observer API, we have created an efficient and performant infinite scrolling solution in our React application. This approach offers a modern, browser-native method for detecting when elements come into view, but it may not be supported in all browsers or environments without using a polyfill.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h2 id="conclusion">Conclusion</h2>
<p>Infinite scrolling is a powerful web design technique. It enhances the user experience by progressively loading content as users scroll down a page, thereby eliminating the need for pagination.</p>
<p>In this article, we explored three different approaches for implementing infinite scrolling in React applications. Each technique has its own advantages and potential drawbacks, so it’s essential to choose the method that best suits your specific requirements and your users’ needs.</p>
<p>By implementing infinite scrolling in your React applications, you can provide an intuitive and engaging user experience that keeps visitors engaged with your content. I hope you enjoyed this article! Be sure to leave a comment if you have any questions.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-1837" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-1837" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-1837" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/ogundipe.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/ogundipe.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/osamuel/">
Ogundipe Samuel <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software engineer and technical writer.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/top-libraries-react-lazy-loading-2023/" rel="prev">The top libraries for lazy loading React in 2023</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/" rel="next">Create customizable and shareable calendars in React Native</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>5 useful JSON tools to improve your productivity - LogRocket Blog</title>
			<link>https://blog.logrocket.com/5-useful-json-tools-improve-productivity/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/5-useful-json-tools-improve-productivity/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>5 useful JSON tools to improve your productivity - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/">5 useful JSON tools to improve your productivity - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-165294 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized" id="post-165294">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/hassandjirdeh/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2023/01/hassan_profile_photo.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2023/01/hassan_profile_photo.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/hassandjirdeh/">
Hassan Djirdeh <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Hassan is a senior frontend engineer who's worked at different organizations to build large production applications at scale. He's a published author and course instructor, helping thousands of students learn in-depth frontend engineering skills like React, Vue, TypeScript, and GraphQL. When he's not in front of his laptop, you can find Hassan spending time with family, at the gym, and running through the 6.</span>
</div>
</div>
<h1 class="posttitle">5 useful JSON tools to improve your productivity</h1>
<p>
<span class="post-date"><time class="post-date">
April 6, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1436</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/5-useful-json-tools-improve-productivity.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="5 Useful JSON Tools To Improve Your Productivity"                /> <article class="article-post">
<p>JavaScript Object Notation (JSON) is a <a href="https://www.json.org/">lightweight data-interchange format</a> that is widely used in web applications and APIs to transmit data between servers and clients. JSON is a popular choice for data storage and exchange due to it being human-readable, platform-independent, and capable of supporting complex data structures. In this article, we’ll explore five useful JSON tools that can help you improve your productivity.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#data-visualization-json-crack">Data visualization with JSON Crack</a></li>
<li><a href="#reading-exploring-data-json-hero">Reading and exploring data with JSON Hero</a></li>
<li><a href="#format-data-json-formatter-validator">Format data with JSON Formatter &amp; Validator</a></li>
<li><a href="#convert-data-csv-konkloneio">Convert data to CSV with Konklone.io</a></li>
<li><a href="#validate-date-json-schema">Validate data with JSON Schema</a></li>
</ul>
<h2 id="data-visualization-json-crack">Data visualization with JSON Crack</h2>
<p><a href="https://jsoncrack.com/">JSON Crack</a> is a powerful tool for visualizing JSON data that allows us to quickly and easily create interactive visualizations to help us understand our data better.</p>
<p>For example, assume we had a JSON structure that looks like the following:</p>
<pre class="language-json hljs">{
  "person":{
    "name":"John",
    "age":20,
    "address":{
      "street":"123 Main Street",
      "city":"New York"
    }
  }
}
</pre>
<p>This JSON structure contains information about a person that includes their name, age, and address. We could use JSON Crack to quickly create a visualization of the data, allowing us to quickly and easily view all the information at once.</p>
<p><img             class="aligncenter size-full wp-image-165298 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/data-visualization-json-crack.jpeg" alt="Data Visualization With JSON Crack" width="730" height="338"    /><noscript><img               class="aligncenter size-full wp-image-165298" src="https://blog.logrocket.com/wp-content/uploads/2023/03/data-visualization-json-crack.jpeg" alt="Data Visualization With JSON Crack" width="730" height="338"  /></noscript></p>
<p>If we were to select a certain node in our graphical JSON tree, we can get more information about the node and its children:</p>
<p><img             class="aligncenter size-full wp-image-165300 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/selecting-node-graphical-json-tree.jpeg" alt="Selecting A Certain Node In Our Graphical JSON Tree" width="730" height="339"    /><noscript><img               class="aligncenter size-full wp-image-165300" src="https://blog.logrocket.com/wp-content/uploads/2023/03/selecting-node-graphical-json-tree.jpeg" alt="Selecting A Certain Node In Our Graphical JSON Tree" width="730" height="339"  /></noscript></p>
<p>We’re also able to use the search bar to quickly search for a node in our JSON tree by searching for certain key names or values:</p>
<p><img             class="aligncenter size-full wp-image-165302 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/searching-specific-node-json-tree-search-bar.jpeg" alt="Searching For A Specific Node In Our JSON Tree Using The Search Bar" width="730" height="339"    /><noscript><img               class="aligncenter size-full wp-image-165302" src="https://blog.logrocket.com/wp-content/uploads/2023/03/searching-specific-node-json-tree-search-bar.jpeg" alt="Searching For A Specific Node In Our JSON Tree Using The Search Bar" width="730" height="339"  /></noscript></p>
<p>JSON Crack becomes even more useful in situations where we have a large complex JSON structure. As an example, if we were to observe a JSON structure like the following:</p>
<pre class="language-json hljs">{
  "person": {
    "name": "John",
    "age": 20,
    "address": {
      "street": "123 Main Street",
      "city": "New York"
    },
    "phone_numbers": [
      {
        "type": "Home",
        "number": "555-1234"
      },
      {
        "type": "Work",
        "number": "555-5678",
        "extension": "123"
      }
    ],
    "emails": [
      "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="402a2f282e002538212d302c256e232f2d">[email protected]</a>",
      "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="442e2b2c2a202b21042329252d286a272b29">[email protected]</a>"
    ],
    "spouse": {
      "name": "Jane",
      "age": 22,
      "address": {
        "street": "456 Oak Avenue",
        "city": "New York"
      },
      "phone_numbers": [
        {
          "type": "Home",
          "number": "555-5678"
        },
        {
          "type": "Work",
          "number": "555-9101",
          "extension": "456"
        }
      ],
      "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="096368676c496c71686479656c276a6664">[email protected]</a>"
    }
  }
}
</pre>
<p>JSON Crack makes it easy for us to get a quick overview of the data, which can identify any potential issues or areas that need improvement:</p>
<p><img             class="aligncenter size-full wp-image-165304 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-crack-data-overview.jpeg" alt="JSON Crack Giving Us A Data Overview" width="730" height="339"    /><noscript><img               class="aligncenter size-full wp-image-165304" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-crack-data-overview.jpeg" alt="JSON Crack Giving Us A Data Overview" width="730" height="339"  /></noscript></p>
<h2 id="reading-exploring-data-json-hero">Reading and exploring data with JSON Hero</h2>
<p><a href="https://jsonhero.io/">JSON Hero</a> is another JSON viewer that allows us to explore and navigate our JSON data quickly and easily. Instead of providing a graphical visualization like JSON Crack, it allows us to see the structure of JSON in either a column, tree, or JSON layout.</p>
<p>In the column layout, we’re able to view the children nodes of our JSON structure in separate columns:</p>
<p><img             class="aligncenter size-full wp-image-165306 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/viewing-children-nodes-json-structure.jpeg" alt="Viewing The Children Nodes Of Our JSON Structure" width="730" height="390"    /><noscript><img               class="aligncenter size-full wp-image-165306" src="https://blog.logrocket.com/wp-content/uploads/2023/03/viewing-children-nodes-json-structure.jpeg" alt="Viewing The Children Nodes Of Our JSON Structure" width="730" height="390"  /></noscript></p>
<p>In the JSON layout, we’re able to see the structure of our data in standard JSON but with the capability to select certain fields to gather more information:</p>
<p><img             class="aligncenter size-full wp-image-165309 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-layout-structure-data-standard-json.jpeg" alt="Viewing The Structure Of Our Data In Standard JSON" width="730" height="438"    /><noscript><img               class="aligncenter size-full wp-image-165309" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-layout-structure-data-standard-json.jpeg" alt="Viewing The Structure Of Our Data In Standard JSON" width="730" height="438"  /></noscript></p>
<p>In the Tree layout, we can see our JSON structure displayed as a tree with nested branches used to reflect the child nodes of a parent:</p>
<p><img             class="aligncenter size-full wp-image-165311 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-structure-displayed-tree-layout.jpeg" alt="JSON Structure Displayed In A Tree Layout" width="730" height="436"    /><noscript><img               class="aligncenter size-full wp-image-165311" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-structure-displayed-tree-layout.jpeg" alt="JSON Structure Displayed In A Tree Layout" width="730" height="436"  /></noscript></p>
<p>JSON Hero also provides a powerful search capability where we’re able to search our entire JSON structure quickly by searching for key names, key paths, or values.</p>
<p><img             class="aligncenter size-full wp-image-165313 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-search-capability.png" alt="JSON Hero Search Capability" width="730" height="432"    /><noscript><img               class="aligncenter size-full wp-image-165313" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-search-capability.png" alt="JSON Hero Search Capability" width="730" height="432"  /></noscript></p>
<p>Lastly, JSON Hero also provides a very helpful content-preview capability where the application automatically infers the content of JSON string values to help show a preview. This works for date values, image URLs, colors, website URLs, and more:</p>
<p><img             class="aligncenter size-full wp-image-165318 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-content-preview-capability.png" alt="JSON Hero Content's Preview Capability" width="730" height="432"    /><noscript><img               class="aligncenter size-full wp-image-165318" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-content-preview-capability.png" alt="JSON Hero Content's Preview Capability" width="730" height="432"  /></noscript></p>
<h2 id="format-data-json-formatter-validator">Format data with JSON Formatter &amp; Validator</h2>
<p><a href="https://jsonformatter.curiousconcept.com/">JSON Formatter &amp; Validator</a> is a tool that helps format JSON data in a readable and organized manner. It automatically indents and formats JSON data making it easier to read and understand.</p>
<p>Assume we had the following unformatted JSON structure:</p>
<pre class="language-json hljs">{"Person":{"Name":"John","Age":20,"Address":{"Street":"123 Main Street","City":"New York"}}}
</pre>
<p>The above JSON is valid but missing any indentation or line breaks, which make it difficult to read. JSON Formatter &amp; Validator can help quickly format and beautify the JSON data:</p>
<p><img             class="aligncenter size-full wp-image-165320 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-validator-formatting-json-data.jpeg" alt="JSON Formatter And Validator Helping Format JSON Data " width="730" height="316"    /><noscript><img               class="aligncenter size-full wp-image-165320" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-validator-formatting-json-data.jpeg" alt="JSON Formatter And Validator Helping Format JSON Data " width="730" height="316"  /></noscript></p>
<p>The JSON Formatter &amp; Validator tool can also notify us of common JSON errors like incorrect quotes, missing quotes, trailing commas, etc. If we were to provide the following invalid JSON structure:</p>
<pre class="language-json hljs">{
  'Person': {
    'Name": "John,
    "Age": 20,
    "Address": {
      "Street": "123 Main Street",
      "City": "New York",
    },
  }
}
</pre>
<p>JSON Formatter will repair some of the issues it notices but also provide us with a breakdown of other errors that we’ll need to fix on our own:</p>
<p><img             class="aligncenter size-full wp-image-165322 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-listing-errors.jpeg" alt="JSON Formatter Listing Errors" width="730" height="468"    /><noscript><img               class="aligncenter size-full wp-image-165322" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-listing-errors.jpeg" alt="JSON Formatter Listing Errors" width="730" height="468"  /></noscript></p>
<h2 id="convert-data-csv-konkloneio">Convert data to CSV with Konklone.io</h2>
<p>There exist many different tools that help convert JSON data to other formats like XML, CSV, YAML, etc. One tool that I’ve liked within this category is <a href="https://konklone.io/json/">Konklone.io</a>, built by <a href="https://konklone.com/">Eric Mill</a>, because it acts as a lightweight and simple tool to help quickly convert JSON data into CSV.</p>
<p>When pasting JSON data structured to contain an array of values like the following:</p>
<pre class="language-json hljs">{
  "people": [
    {
      "name": "John",
      "age": 20,
      "address": {
        "street": "123 Main Street",
        "city": "New York"
      }
    },
    {
      "name": "Jane",
      "age": 25,
      "address": {
        "street": "456 Elm Street",
        "city": "Los Angeles"
      }
    },
    {
      "name": "Bob",
      "age": 30,
      "address": {
        "street": "789 Oak Street",
        "city": "Chicago"
      }
    }
  ]
}
</pre>
<p>The tool helps surface a preview of the CSV data that’s been converted from JSON:</p>
<p><img             class="aligncenter size-full wp-image-165325 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/preview-csv-data-converted-from-json.jpeg" alt="A Preview Of CSV Data Converted From JSON" width="730" height="382"    /><noscript><img               class="aligncenter size-full wp-image-165325" src="https://blog.logrocket.com/wp-content/uploads/2023/03/preview-csv-data-converted-from-json.jpeg" alt="A Preview Of CSV Data Converted From JSON" width="730" height="382"  /></noscript></p>
<p>We’re then able to download the entire generated CSV for later use. One thing to keep in mind when using this tool is that because the JSON to CSV conversion is all done inside the browser, attempting to convert large JSON data into CSV may cause some issues.</p>
<h2 id="validate-data-json-schema">Validate data with JSON Schema</h2>
<p>The last item we’ll talk about today is <a href="https://json-schema.org/">JSON Schema</a>, which allows us to validate our JSON data against a schema. To understand the helpfulness of this concept, it’s important to first understand what a JSON Schema is.</p>
<p>A JSON Schema is a declarative language that describes the expected structure and content of JSON data. The Schema can include information about the data types of fields, minimum and maximum values, patterns, and other constraints. For example, let’s consider the simple JSON object example we used earlier to represent information about a person:</p>
<pre class="language-json hljs">{
  "person":{
    "name":"John",
    "age":20,
    "address":{
      "street":"123 Main Street",
      "city":"New York"
    }
  }
}
</pre>
<p>Even with this simple structure, there are many ways that this data could be represented differently. For example, the <code>"name"</code> key could be represented as <code>"person_name"</code> and the <code>"age"</code> key could be represented as <code>"person_age"</code>. Additionally, the <code>"address"</code> key could be represented as <code>"person_address"</code> but contain a single string value:</p>
<pre class="language-json hljs">{
  "person":{
    "person_name":"John",
    "person_age":20,
    "person_address": "123 Main Street, New York"
    }
  }
}
</pre>
<p>Both examples above describe the same person and are equally valid. However, they’re still structured differently. How JSON data should be structured depends entirely on how it’s meant to be used within an application. This is where JSON Schema comes in.</p>
<p>We can use JSON Schema to validate that our data adheres to a specific structure. <a href="https://github.com/ajv-validator/ajv">A</a><a href="https://github.com/ajv-validator/ajv">jv</a> is one popular validator tool for JavaScript applications that allows us to create a schema and then validate JSON against that schema. Here’s an example of using Ajv to validate one of the above JSON examples against a schema:</p>
<pre class="language-json hljs">import Ajv from "ajv"

const ajv = new Ajv()

const schema = {
  type: "object",
  properties: {
    name: {type: "string"},
    age: {type: "number", minimum: 0, maximum: 150},
    address: {
      type: "object",
      properties: {
        street: {type: "string"},
        city: {type: "string"},
      },
      required: ["street", "city"],
    },
  },
  required: ["name", "age", "address"],
  additionalProperties: false,
};

const data = {
  name: "John",
  age: 30,
  address: {
    street: "123 Main Street",
    city: "New York"
  }
}

const validate = ajv.compile(schema)
const valid = validate(data)

// if not valid, console.log the validation errors
if (!valid) console.log(validate.errors)
</pre>
<p>The schema we’ve defined above describes a JSON object with three properties: <code>name</code> (string), <code>age</code> (a number between zero to 150), and <code>address</code> (an object that contains two string properties: <code>street</code> and <code>city</code>). All properties are required and no additional properties beyond those explicitly listed in the schema are allowed.</p>
<p>Outside of validators, many other implementations and tools exist within the capability of using a JSON Schema. These include schema generators, format converters, and other utilities. The <a href="https://json-schema.org/implementations.html">Implementations</a> section of the JSON Schema website highlights a list of these other tools and implementations.</p>
<p>JSON Schema can help us avoid any potential issues down the line by providing us with a way to validate our JSON data against a pre-defined schema. This ensures that our JSON data is always structured correctly, which can help prevent any unexpected errors or discrepancies in our applications. For more additional reading, the <a href="https://json-schema.org/understanding-json-schema/index.html">Understanding JSON Schema</a> section of the JSON Schema is helpful.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As we’ve seen in this article, there are many different tools available to help us work with JSON data. From visualizing and exploring data with <a href="https://jsoncrack.com/">JSON Crack</a>, formatting it with <a href="https://jsonformatter.curiousconcept.com/">JSON Formatter &amp; Validator</a>, converting it to other formats like CSV with Konklone.io, and validating it against a schema with <a href="https://json-schema.org/">JSON Schema</a> — these tools can help make working with JSON data much easier and more efficient.</p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165294" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165294" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165294" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2023/01/hassan_profile_photo.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2023/01/hassan_profile_photo.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/hassandjirdeh/">
Hassan Djirdeh <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Hassan is a senior frontend engineer who's worked at different organizations to build large production applications at scale. He's a published author and course instructor, helping thousands of students learn in-depth frontend engineering skills like React, Vue, TypeScript, and GraphQL. When he's not in front of his laptop, you can find Hassan spending time with family, at the gym, and running through the 6.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
</ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/scss-vs-styled-components-advantages-caveats/" rel="prev">SCSS vs. styled-components: Advantages and caveats</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/pre-rendering-react-app-react-snap/" rel="next">Pre-rendering your React app with react-snap</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/5-useful-json-tools-improve-productivity/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to JavaScript bitwise operators - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-javascript-bitwise-operators/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-javascript-bitwise-operators/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to JavaScript bitwise operators - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/guide-javascript-bitwise-operators/">A guide to JavaScript bitwise operators - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-4261 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-vanilla-javascript" id="post-4261">
<div class="mainheading">

 <div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/gladchinda/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/gladchinda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/gladchinda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/gladchinda/">
Glad Chinda <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Full-stack web developer learning new hacks one day at a time. Web technology enthusiast. Hacking stuffs @theflutterwave.</span>
</div>
</div>
<h1 class="posttitle">A guide to JavaScript bitwise operators</h1>
<p>
<span class="post-date"><time class="post-date">
April 13, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
<span class="wordcount">4315</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2019/08/guide-javascript-bitwise-operators.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="A Guide To JavaScript Bitwise Operators"                /> <article class="article-post">
 <p><em><strong>Editor’s note:</strong> This article was last updated by <a href="https://blog.logrocket.com/author/ibiyemiadewakun/">Ibiyemi Adewakun</a> on 13 April 2023. Want to read up on some other JavaScript operators? Check out our posts on <a href="https://blog.logrocket.com/optional-chaining-and-nullish-coalescing-in-javascript/">optional chaining and nullish coalescing in JavaScript</a> and the <a href="https://blog.logrocket.com/investigating-javascript-pipe-operator-proposal/">JavaScript pipe operator proposal</a>.</em></p>
<p>JavaScript provides several kinds of operators, making it possible to carry out basic operations on simple values such as arithmetic operations, assignment operations, logical operations, bitwise operations, etc.</p>
<p>We often see JavaScript code that contains a mix of assignment operators, arithmetic operators, and logical operators. However, we don’t get to see bitwise operators in use that much.</p>
<p>In this tutorial, we will take a look at all the JavaScript bitwise operators and try to understand how they are evaluated. We will also look at a few interesting applications for bitwise operators in writing simple JavaScript programs. This will require us to take a little peek at how JavaScript bitwise operators represent their operands as signed 32-bit integers.</p>
<p><em>Jump ahead</em>:</p>
<ul>
<li><a href="#bitwise-not"><code>~</code> — Bitwise NOT</a></li>
<li><a href="#bitwise-and"><code>&amp;</code> — Bitwise AND</a></li>
<li><a href="#bitwise-or"><code>|</code> — Bitwise OR</a></li>
<li><a href="#bitwise-xor"><code>^</code> — Bitwise XOR</a></li>
<li><a href="#left-shift"><code>&lt;&lt;</code> — Left shift</a></li>
<li><a href="#sign-propagating-right-shift"><code>>></code> — Sign-propagating right shift</a></li>
<li><a href="#zero-fill-right-shift"><code>>>></code> — Zero-fill right shift</a></li>
<li><a href="#config-flags">Config flags</a></li>
</ul>
<h2 id="bitwise-not">Bitwise NOT (<code>~</code>)</h2>
<p>The <code>~</code> operator is a unary operator, meaning it takes only one operand. The <code>~</code> operator performs a NOT operation on every bit of its operand. The result of a NOT operation is called a complement. The complement of an integer is formed by inverting every bit of the integer.</p>
<p>For a given integer — say, <code>170</code> — the complement can be computed using the <code>~</code> operator as follows:</p>
<pre class="language-javascript hljs">// 170 => 00000000000000000000000010101010
// --------------------------------------
//  ~ 00000000000000000000000010101010
// --------------------------------------
//  = 11111111111111111111111101010101
// --------------------------------------
//  = -171 (decimal)

console.log(~170); // -171
</pre>
<p>JavaScript bitwise operators convert their operands to 32-bit signed integers in two’s complement format. Hence, when the <code>~</code> operator is used on an integer, the resulting value is the two’s complement of the integer. The two’s complement of an integer <code>A</code> is given by <code>-(A + 1)</code>:</p>
<pre class="language-javascript hljs">~170 => -(170 + 1) => -171
</pre>
<p>Here are a few points to note about the 32-bit signed integers used by JavaScript bitwise operators:</p>
<ul>
<li>The most significant (leftmost) bit is called the sign bit. The sign bit is always <code>0</code> for positive integers, and <code>1</code> for negative integers</li>
<li>The remaining 31 bits besides the sign bit are used to represent the integer. Therefore, the maximum 32-bit integer that can be represented is <code>(2^31 - 1)</code>, which is <code>2147483647</code>, while the minimum integer is <code>-(2^31)</code>, which is <code>-2147483648</code></li>
<li>For integers that fall outside the 32-bit signed integer range, the most significant bits are discarded until the integer falls within range</li>
</ul>
<p>Here are the 32-bit sequence representations of some important numbers:</p>
<pre class="language-javascript hljs">           0 => 00000000000000000000000000000000
          -1 => 11111111111111111111111111111111
  2147483647 => 01111111111111111111111111111111
 -2147483648 => 10000000000000000000000000000000
</pre>
<p>From the above representations, it is evident that:</p>
<pre class="language-javascript hljs">          ~0 => -1
         ~-1 => 0
 ~2147483647 => -2147483648
~-2147483648 => 2147483647
</pre>
<h3 id="when-would-use-bitwise-not-operator">When would you use the bitwise NOT operator?</h3>
<p>One of the most common use cases for the bitwise NOT operator is in combination with the found index. Let’s take a look at how it is used.</p>
<h4 id="found-index">Found index</h4>
<p>Most built-in objects in JavaScript, such as arrays and strings, have some useful methods that can be used to check for the presence of an item in the array or a substring within the string. Here are some of those methods:</p>
<ul>
<li><code>Array.indexOf()</code></li>
<li><code>Array.lastIndexOf()</code></li>
<li><code>Array.findIndex()</code></li>
<li><code>String.indexOf()</code></li>
<li><code>String.lastIndexOf()</code></li>
<li><code>String.search()</code></li>
</ul>
<p>These methods all return the zero-based index of the item or substring, if it is found. Otherwise, they return <code>-1</code>. For example:</p>
<pre class="language-javascript hljs">const numbers = [1, 3, 5, 7, 9];

console.log(numbers.indexOf(5)); // 2
console.log(numbers.indexOf(8)); // -1
</pre>
<p>In the snippet above, we see that when an item is not found, we get <code>-1</code> in return. But it is easier to confirm if this item is missing or exists using a Boolean true or false and this is where the bitwise NOT operator helps.</p>
<p>Remember that the complement of <code>-1</code> is <code>0</code> (zero), and in JavaScript, a zero-value when made Boolean is false. This means we can check for the complement of our found index and convert it to a Boolean.</p>
<p>Here is what that will look like:</p>
<pre class="language-javascript hljs">function foundIndex (index) {
  return Boolean(~index);
}
</pre>
<p>In the above code snippet, the <code>~</code> operator, when used on <code>-1</code>, evaluates to <code>0</code>, which is a falsy value. Hence, using <code>Boolean()</code> to cast a falsy value will return <code>false</code>. For every other index value, <code>true</code> is returned because in JavaScript any non-zero value (even negative numbers) is truthy. So the previous code snippet can be modified as follows:</p>
<pre class="language-javascript hljs">const numbers = [1, 3, 5, 7, 9];

console.log(foundIndex(numbers.indexOf(5))); // true
console.log(foundIndex(numbers.indexOf(8))); // false
</pre>
<h2 id="bitwise-and">Bitwise AND (<code>&amp;</code>)</h2>
<p>The <code>&amp;</code> operator performs an AND operation on each pair of corresponding bits of its operands. The <code>&amp;</code> operator returns <code>1</code> only if both bits are 1; otherwise, it returns <code>0</code>. Thus, the result of an AND operation is the equivalent of multiplying each pair of corresponding bits.</p>
<p>For a pair of bits, here are the possible values of an AND operation:</p>
<pre class="language-javascript hljs">(0 &amp; 0) === 0     // 0 x 0 = 0
(0 &amp; 1) === 0     // 0 x 1 = 0
(1 &amp; 0) === 0     // 1 x 0 = 0
(1 &amp; 1) === 1     // 1 x 1 = 1
</pre>
<h3 id="when-use-bitwise-and-operator">When would you use the bitwise AND operator?</h3>
<h4 id="turning-off-bits">Turning off bits</h4>
<p>The <code>&amp;</code> operator is commonly used in bit masking applications to ensure that certain bits are turned off for a given sequence of bits. This is based on the fact that for any bit <code>A</code>:</p>
<ul>
<li><code>(A &amp; 0 = 0)</code> – the bit is always turned off by a corresponding <code>0</code> bit</li>
<li><code>(A &amp; 1 = A)</code> – the bit remains unchanged when paired with a corresponding <code>1</code> bit</li>
</ul>
<p>For example, say we have an 8-bit integer, and we want to ensure that the first four bits are turned off (set to <code>0</code>). The <code>&amp;</code> operator can be used to achieve this as follows:</p>
<ul>
<li>First, create a bit mask whose effect will be to turn off the first 4 bits of an 8-bit integer. That bit mask will be <code>0b11110000</code>. Note that the first 4 bits of the bit mask are set to <code>0</code>, while every other bit is set to <code>1</code></li>
<li>Next, perform an <code>&amp;</code> operation using the 8-bit integer and the created bit mask:
<pre class="language-javascript hljs">const mask = 0b11110000;// 222 => 11011110// (222 &amp; mask)
// ------------
// 11011110
// &amp; 11110000
// ------------
// = 11010000
// ------------
// = 208 (decimal)console.log(222 &amp; mask); // 208
</pre>
</li>
</ul>
<h4 id="checking-set-bits">Checking for set bits</h4>
<p>The <code>&amp;</code> operator has some other useful bit masking applications. One such application is in determining whether one or more bits are set for a given sequence of bits. For example, say we want to check if the fifth bit is set for a given decimal number. Here is how we can use the <code>&amp;</code> operator to do that:</p>
<ul>
<li>First, create a bit mask that will be used to check whether the target bits (fifth bit, in this case) are set to 1. Every bit on the bit mask is set to 0 except the bits at the target positions, which are set to 1. The binary number literal can be used to easily achieve this:
<pre class="language-javascript hljs">const mask = 0b10000;</pre>
</li>
<li>Next, perform an <code>&amp;</code> operation using the decimal number and the bit mask as operands, and compare the result with the bit mask. If all the target bits are set for the decimal number, the result of the <code>&amp;</code> operation will be equal to the bit mask. Note that the <code>0</code> bits in the bit mask will effectively turn off the corresponding bits in the decimal number, because <code>A &amp; 0 = 0:</code>
<pre class="language-javascript hljs">// 34 => 100010
// (34 &amp; mask) => (100010 &amp; 010000) = 000000
console.log((34 &amp; mask) === mask); // false// 50 => 110010
// (50 &amp; mask) => (110010 &amp; 010000) = 010000
console.log((50 &amp; mask) === mask); // true</pre>
</li>
</ul>
<h4 id="even-odd">Even or odd</h4>
<p>The use of the <code>&amp;</code> operator in checking for set bits for a decimal number can be extended to check whether a given decimal number is even or odd. To achieve this, <code>1</code> is used as the bit mask (to determine whether the first bit or rightmost bit is set). For integers, the least significant bit (first bit or rightmost bit) can be used to determine whether the number is even or odd. If the least significant bit is turned on (set to <code>1</code>), the number is odd; otherwise, the number is even:</p>
<pre class="language-javascript hljs">function isOdd (int) {
  return (int &amp; 1) === 1;
}

function isEven (int) {
  return (int &amp; 1) === 0;
}

console.log(isOdd(34)); // false
console.log(isOdd(-63)); // true
console.log(isEven(-12)); // true
console.log(isEven(199)); // false
</pre>
<h3 id="useful-identities">Useful identities</h3>
<p>Before proceeding to the next operator, here are some useful identities for bitwise AND <code>&amp;</code> operations (for any signed 32-bit integer <code>A</code>):</p>
<pre class="language-javascript hljs">(A &amp; 0) === 0
(A &amp; ~A) === 0
(A &amp; A) === A
(A &amp; -1) === A
</pre>
<h2 id="bitwise-or">Bitwise OR (<code>|</code>)</h2>
<p>The <code>|</code> operator performs an OR operation on each pair of corresponding bits of its operands. The <code>|</code> operator returns <code>0</code> only if both bits are 0; otherwise, it returns <code>1</code>.</p>
<p>For a pair of bits, here are the possible values of an OR operation:</p>
<pre class="language-javascript hljs">(0 | 0) === 0
(0 | 1) === 1
(1 | 0) === 1
(1 | 1) === 1
</pre>
<h3 id="when-would-use-bitwise-or-operator">When would you use the bitwise OR operator?</h3>
<h4 id="turning-bits">Turning on bits</h4>
<p>In bit masking applications, the <code>|</code> operator can be used to ensure that certain bits in a sequence of bits are turned on (set to <code>1</code>). This is based on the fact that for any given bit <code>A</code>:</p>
<ul>
<li><code>(A | 0 = A)</code> — The bit remains unchanged when paired with a corresponding <code>0</code> bit</li>
<li><code>(A | 1 = 1)</code> — The bit is always turned on by a corresponding <code>1</code> bit</li>
</ul>
<p>For example, say we have an 8-bit integer and we want to ensure that all the even-position bits (second, fourth, sixth, eighth) are turned on (set to <code>1</code>). The <code>|</code> operator can be used to achieve this as follows:</p>
<ul>
<li>First, create a bit mask whose effect will be to turn on every even-positioned bit of an 8-bit integer. That bit mask will be <code>0b10101010</code>. Note that the even-positioned bits of the bit mask are set to <code>1</code>, while every other bit is set to <code>0</code></li>
<li>Next, perform an <code>|</code> operation using the 8-bit integer and the created bit mask:
<pre class="language-javascript hljs">const mask = 0b10101010;// 208 => 11010000// (208 | mask)
// ------------
// 11010000
// | 10101010
// ------------
// = 11111010
// ------------
// = 250 (decimal)console.log(208 | mask); // 250</pre>
</li>
</ul>
<h3 id="useful-identities">Useful identities</h3>
<p>Before proceeding to the next operator, here are some useful identities for bitwise OR <code>|</code> operations (for any signed 32-bit integer <code>A</code>):</p>
<pre class="language-javascript hljs">(A | 0) === A
(A | ~A) === -1
(A | A) === A
(A | -1) === -1
</pre>
<h2 id="bitwise-xor">Bitwise XOR (<code>^</code>)</h2>
<p>The <code>^</code> operator performs an XOR (exclusive-OR) operation on each pair of corresponding bits of its operands. The <code>^</code> operator returns <code>0</code> if both bits are the same (either 0 or 1); otherwise, it returns <code>1</code>.<br/>
For a pair of bits, here are the possible values of an XOR operation:</p>
<pre class="language-javascript hljs">(0 ^ 0) === 0
(0 ^ 1) === 1
(1 ^ 0) === 1
(1 ^ 1) === 0
</pre>
<h3 id="when-would-use-bitwise-xor-operator">When would you use the bitwise XOR operator?</h3>
<h4 id="toggling-bits">Toggling bits</h4>
<p>In bit masking applications, the <code>^</code> operator is commonly used for toggling or flipping certain bits in a sequence of bits. This is based on the fact that for any given bit <code>A</code>:</p>
<ul>
<li>The bit remains unchanged when paired with a corresponding <code>0</code> bit, e.g., <code>(A ^ 0 = A)</code></li>
<li>The bit is always toggled when paired with a corresponding <code>1</code> bit:<br/>
<code>(A ^ 1 = 1)</code> — if <code>A</code> is <code>0</code><br/>
<code>(A ^ 1 = 0)</code> — if <code>A</code> is <code>1</code></li>
</ul>
<p>For example, say we have an 8-bit integer and we want to ensure that every bit is toggled except the least significant (first) and most significant (eighth) bits. The <code>^</code> operator can be used to achieve this as follows:</p>
<ul>
<li>First, create a bit mask whose effect will be to toggle every bit of an 8-bit integer except the least significant and most significant bits. That bit mask will be <code>0b01111110</code>. Note that the bits to be toggled are set to <code>1</code>, while every other bit is set to <code>0</code></li>
<li>Next, perform an <code>^</code> operation using the 8-bit integer and the created bit mask:
<pre class="language-javascript hljs">const mask = 0b01111110;// 208 => 11010000// (208 ^ mask)
// ------------
// 11010000
// ^ 01111110
// ------------
// = 10101110
// ------------
// = 174 (decimal)console.log(208 ^ mask); // 174</pre>
</li>
</ul>
<h3 id="useful-identities">Useful identities</h3>
<p>Before proceeding to the next operator, here are some useful identities for bitwise XOR <code>^</code> operations (for any signed 32-bit integer <code>A</code>):</p>
<pre class="language-javascript hljs">(A ^ 0) === A
(A ^ ~A) === -1
(A ^ A) === 0
(A ^ -1) === ~A
</pre>
<p>From the identities listed above, it is evident that an XOR operation on <code>A</code> and <code>-1</code> is equivalent to a NOT operation on <code>A</code>. This means the <code>foundIndex()</code> function from before can also be written like:</p>
<pre class="language-javascript hljs">function foundIndex(index) {
  return Boolean(index ^ -1);
}
</pre>
<h2 id="left-shift">Left shift (<code>&lt;&lt;</code>)</h2>
<p>The left shift (<code>&lt;&lt;</code>) operator takes two operands. The first operand is an integer, while the second operand is the number of bits of the first operand to be shifted to the left. Zero (<code>0</code>) bits are shifted in from the right, while the excess bits that have been shifted off to the left are discarded.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>For example, consider the integer <code>170</code>. Let’s say we want to shift three bits to the left. We can use the <code>&lt;&lt;</code> operator as follows:</p>
<pre class="language-javascript hljs">// 170 => 00000000000000000000000010101010

// 170 &lt;&lt; 3
// --------------------------------------------
//    (000)00000000000000000000010101010(***)
// --------------------------------------------
//  = (***)00000000000000000000010101010(000)
// --------------------------------------------
//  = 00000000000000000000010101010000
// --------------------------------------------
//  = 1360 (decimal)

console.log(170 &lt;&lt; 3); // 1360
</pre>
<p>The left shift bitwise operator (<code>&lt;&lt;</code>) can be defined using the following JavaScript expressions:</p>
<pre class="language-javascript hljs">(A &lt;&lt; B) => A * (2 ** B) => A * Math.pow(2, B)
</pre>
<p>Hence, looking back at the previous example:</p>
<pre class="language-javascript hljs">(170 &lt;&lt; 3) => 170 * (2 ** 3) => 170 * 8 => 1360
</pre>
<h3 id="when-use-left-shift-operator">When would you use the left shift operator?</h3>
<h4 id="color-conversion-rgb-hex">Color conversion: RGB to hex</h4>
<p>One very useful application of the left shift (<code>&lt;&lt;</code>) operator is converting colors from an RGB representation to a hexadecimal representation.</p>
<p>The color value for each component of an RGB color is between <code>0 - 255</code>. Simply put, each color value can be represented perfectly by 8 bits:</p>
<pre class="language-javascript hljs">  0 => 0b00000000 (binary) => 0x00 (hexadecimal)
255 => 0b11111111 (binary) => 0xff (hexadecimal)
</pre>
<p>Thus, the color itself can be perfectly represented by 24 bits (8 bits each for red, green, and blue components). The first 8 bits starting from the right will represent the blue component, the next 8 bits will represent the green component, and the 8 bits after that will represent the red component:</p>
<pre class="language-javascript hljs">(binary) => 11111111 00100011 00010100

   (red) => 11111111 => ff => 255
 (green) => 00100011 => 23 => 35
  (blue) => 00010100 => 14 => 20

   (hex) => ff2314
</pre>
<p>Now that we understand how to represent the color as a 24-bit sequence, let’s see how we can compose the 24 bits of the color from the values of the color’s individual components. Let’s say we have a color represented by <code>rgb(255, 35, 20)</code>. Here is how we can compose the bits:</p>
<pre class="language-javascript hljs">  (red) => 255 => 00000000 00000000 00000000 11111111
(green) =>  35 => 00000000 00000000 00000000 00100011
 (blue) =>  20 => 00000000 00000000 00000000 00010100

// Rearrange the component bits and pad with zeroes as necessary
// Use the left shift operator

  (red &lt;&lt; 16) => 00000000 11111111 00000000 00000000
 (green &lt;&lt; 8) => 00000000 00000000 00100011 00000000
       (blue) => 00000000 00000000 00000000 00010100

// Combine the component bits together using the OR (|) operator
// ( red &lt;&lt; 16 | green &lt;&lt; 8 | blue )

      00000000 11111111 00000000 00000000
    | 00000000 00000000 00100011 00000000
    | 00000000 00000000 00000000 00010100
// -----------------------------------------
      00000000 11111111 00100011 00010100
// -----------------------------------------
</pre>
<p>Now that the procedure is pretty clear, here is a simple function that takes the RGB values of a color as an input array and returns the corresponding hexadecimal representation of the color based on the above procedure:</p>
<pre class="language-javascript hljs">function rgbToHex ([red = 0, green = 0, blue = 0] = []) {
  return `#${(red &lt;&lt; 16 | green &lt;&lt; 8 | blue).toString(16)}`;
}
</pre>
<p>With our function snippet that implements the left shift operator, we can create a simple page that shows how <a href="https://blog.logrocket.com/how-to-manipulate-css-colors-with-javascript-fb547113a1b8/">colors can be converted from RGB to Hex codes</a> and sets two rectangles’ colors using both codes. The full HTML code for this is <a href="https://github.com/ibywaks/simple-color-converter">available here</a>:</p>
<p><img             class="aligncenter size-full wp-image-168621 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/08/code-color-converter.gif" alt="Code Color Converter" width="685" height="749"  /><noscript><img               class="aligncenter size-full wp-image-168621" src="http://blog.logrocket.com/wp-content/uploads/2019/08/code-color-converter.gif" alt="Code Color Converter" width="685" height="749"/></noscript></p>
<h2 id="sign-propagating-right-shift">Sign-propagating right shift</h2>
<p>The sign-propagating right shift (<code>>></code>) operator takes two operands. The first operand is an integer, while the second operand is the number of bits of the first operand to be shifted to the right.</p>
<p>The excess bits that have been shifted off to the right are discarded, whereas copies of the sign bit (leftmost bit) are shifted in from the left. As a result, the sign of the integer is always preserved, hence the name sign-propagating right shift.</p>
<p>For example, consider the integers <code>170</code> and <code>-170</code>. Let’s say we want to shift three bits to the right. We can use the <code>>></code> operator as follows:</p>
<pre class="language-javascript hljs">//  170 => 00000000000000000000000010101010
// -170 => 11111111111111111111111101010110

// 170 >> 3
// --------------------------------------------
//    (***)00000000000000000000000010101(010)
// --------------------------------------------
//  = (000)00000000000000000000000010101(***)
// --------------------------------------------
//  = 00000000000000000000000000010101
// --------------------------------------------
//  = 21 (decimal)

// -170 >> 3
// --------------------------------------------
//    (***)11111111111111111111111101010(110)
// --------------------------------------------
//  = (111)11111111111111111111111101010(***)
// --------------------------------------------
//  = 11111111111111111111111111101010
// --------------------------------------------
//  = -22 (decimal)

console.log(170 >> 3); // 21
console.log(-170 >> 3); // -22
</pre>
<p>The sign-propagating right shift bitwise operator (<code>>></code>) can be described by the following JavaScript expressions:</p>
<pre class="language-javascript hljs">(A >> B) => Math.floor(A / (2 ** B)) => Math.floor(A / Math.pow(2, B))
</pre>
<p>Thus, looking back at the previous example:</p>
<pre class="language-javascript hljs">(170 >> 3) => Math.floor(170 / (2 ** 3)) => Math.floor(170 / 8) => 21
(-170 >> 3) => Math.floor(-170 / (2 ** 3)) => Math.floor(-170 / 8) => -22
</pre>
<h3 id="use-cases-sign-propogating-right-shift-operator">Use cases for the Sign-Propagating Right Shift operator</h3>
<h4 id="color-extraction">Color extraction</h4>
<p>One very good application of the right shift (<code>>></code>) operator is extracting RGB color values from a color. When the color is represented in RGB, it is very easy to distinguish between the red, green, and blue color component values. However, it will take a bit more effort for a color represented as hexadecimal.</p>
<p>In the previous section, we saw the procedure for composing the bits of a color from the bits of its individual components (red, green, and blue). If we work through that procedure backwards, we will be able to extract the values of the individual components of the color. Let’s give that a shot.</p>
<p>Let’s say we have a color represented by the hexadecimal notation <code>#ff2314</code>. Here is the signed 32-bit representation of the color:</p>
<pre class="language-javascript hljs">(color) => ff2314 (hexadecimal) => 11111111 00100011 00010100 (binary)

// 32-bit representation of color
00000000 11111111 00100011 00010100
</pre>
<p>To get the individual components, we will right-shift the color bits by multiples of 8 as necessary until we get the target component bits as the first 8 bits from the right. Since the most significant bit of the 32 bits for the color is <code>0</code>, we can safely use the sign-propagating right shift (<code>>></code>) operator for this:</p>
<pre class="language-javascript hljs">color => 00000000 11111111 00100011 00010100

// Right shift the color bits by multiples of 8
// Until the target component bits are the first 8 bits from the right

  red => color >> 16
      => 00000000 11111111 00100011 00010100 >> 16
      => 00000000 00000000 00000000 11111111

green => color >> 8
      => 00000000 11111111 00100011 00010100 >> 8
      => 00000000 00000000 11111111 00100011

 blue => color >> 0 => color
      => 00000000 11111111 00100011 00010100
</pre>
<p>Now that we have the target component bits as the first 8 bits from the right, we need a way to mask out every other bits except the first 8 bits. That brings us back to the AND (<code>&amp;</code>) operator. Remember that the <code>&amp;</code> operator can be used to ensure that certain bits are turned off.</p>
<p>Let’s start by creating the required bit mask. That would look like this:</p>
<pre class="language-javascript hljs">mask => 00000000 00000000 00000000 11111111
     => 0b11111111 (binary)
     => 0xff (hexadecimal)
</pre>
<p>With the bit mask ready, we can carry out an AND (<code>&amp;</code>) operation on each of the results from the previous right-shifting operations using the bit mask to extract the target component bits:</p>
<pre class="language-javascript hljs">  red => color >> 16 &amp; 0xff
      =>   00000000 00000000 00000000 11111111
      => &amp; 00000000 00000000 00000000 11111111
      => = 00000000 00000000 00000000 11111111
      =>   255 (decimal)

green => color >> 8 &amp; 0xff
      =>   00000000 00000000 11111111 00100011
      => &amp; 00000000 00000000 00000000 11111111
      => = 00000000 00000000 00000000 00100011
      =>   35 (decimal)

 blue => color &amp; 0xff
      =>   00000000 11111111 00100011 00010100
      => &amp; 00000000 00000000 00000000 11111111
      => = 00000000 00000000 00000000 00010100
      =>   20 (decimal)
</pre>
<p>Based on the above procedure, here is a simple function that takes a hex color string (with six hexadecimal digits) as input and returns the corresponding array of RGB color component values:</p>
<pre class="language-javascript hljs">function hexToRgb (hex) {
  hex = hex.replace(/^#?([0-9a-f]{6})$/i, '$1');
  hex = Number(`0x${hex}`);

  return [
    hex >> 16 &amp; 0xff, // red
    hex >> 8 &amp; 0xff,  // green
    hex &amp; 0xff        // blue
  ];
}
</pre>
<p>With this function, we can create an HTML page to illustrate how colors can be converted from Hex codes to RGB and sets two rectangle colors using each codes. The HTML code for this is <a href="https://github.com/ibywaks/simple-color-converter">available here</a>:</p>
<p><img             class="aligncenter size-full wp-image-168622 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/08/convert-hex-color-code-rgb.gif" alt="Convert HEX Color Code To RGB" width="672" height="749"  /><noscript><img               class="aligncenter size-full wp-image-168622" src="http://blog.logrocket.com/wp-content/uploads/2019/08/convert-hex-color-code-rgb.gif" alt="Convert HEX Color Code To RGB" width="672" height="749"/></noscript></p>
<h2 id="zero-fill-right-shift">Zero-fill right shift (<code>>>></code>)</h2>
<p>The zero-fill right shift (<code>>>></code>) operator behaves pretty much like the sign-propagating right shift (<code>>></code>) operator. However, the key difference is in the bits that are shifted in from the left.</p>
<p>As the name implies, <code>0</code> bits are always shifted in from the left. As a result, the <code>>>></code> operator always returns an unsigned 32-bit integer because the sign bit of the resulting integer is always <code>0</code>. For positive integers, both <code>>></code> and <code>>>></code> will always return the same result.</p>
<p>For example, consider the integers <code>170</code> and <code>-170</code>. Let’s say we want to shift three bits to the right. We can use the <code>>>></code> operator as follows:</p>
<pre class="language-javascript hljs">//  170 => 00000000000000000000000010101010
// -170 => 11111111111111111111111101010110

// 170 >>> 3
// --------------------------------------------
//    (***)00000000000000000000000010101(010)
// --------------------------------------------
//  = (000)00000000000000000000000010101(***)
// --------------------------------------------
//  = 00000000000000000000000000010101
// --------------------------------------------
//  = 21 (decimal)

// -170 >>> 3
// --------------------------------------------
//    (***)11111111111111111111111101010(110)
// --------------------------------------------
//  = (000)11111111111111111111111101010(***)
// --------------------------------------------
//  = 00011111111111111111111111101010
// --------------------------------------------
//  = 536870890 (decimal)

console.log(170 >>> 3); // 21
console.log(-170 >>> 3); // 536870890
</pre>
<h2 id="config-flags">Config flags</h2>
<p>Before we wrap up this tutorial, let’s consider another common application of bitwise operators and bit masking: config flags.</p>
<p>Let’s say we have a function that accepts a couple of Boolean options that can be used to control how the function runs or the kind of value it returns. One possible way to create this function is by passing all the options as arguments to the function, probably with some default values, like so:</p>
<pre class="language-javascript hljs">function doSomething (optA = true, optB = true, optC = false, optD = true, ...) {
  // something happens here...
}
</pre>
<p>Surely, this isn’t so convenient. Here are two cases in which this approach starts getting quite problematic:</p>
<ul>
<li>Imagine that we have more than 10 Boolean options. We just can’t define our function with that many parameters</li>
<li>Imagine that we just want to specify a different value for the fifth and ninth options and leave the others with their default values. We will need to call the function, passing the default values as arguments for all the other options while passing the desired values for the fifth and ninth options</li>
</ul>
<p>One way to solve the issues with the previous approach would be to use an object for the config options, like so:</p>
<pre class="language-javascript hljs">const defaultOptions = {
  optA: true,
  optB: true,
  optC: false,
  optD: true,
  ...
};

function doSomething (options = defaultOptions) {
  // something happens here...
}
</pre>
<p>This approach is very elegant, and you’ve most likely seen it used, or even used it yourself at some point or another. With this approach, however, the <code>options</code> argument will always be an object, which can be considered overkill for just configuration options.</p>
<p>If all the options take Boolean values, we could use an integer instead of an object to represent the options. In this case, certain bits of the integer will be mapped to designated options. If a bit is turned on (set to <code>1</code>), the designated option’s value is <code>true</code>; otherwise, it is <code>false</code>.</p>
<p>We can demonstrate this approach using a simple example. Let’s say we have a function that normalizes the items of an array list containing numbers and returns the normalized array. The returned array can be controlled by three options, namely:</p>
<ul>
<li><strong>Fraction:</strong> divides each item of the array by the maximum item in the array</li>
<li><strong>Unique:</strong> removes duplicate items from the array</li>
<li><strong>Sorted:</strong> sorts the items of the array from lowest to highest</li>
</ul>
<p>We can use an integer with three bits to represent these options, each bit being mapped to an option. The following code snippet shows the option flags:</p>
<pre class="language-javascript hljs">const LIST_FRACTION = 0x1; // (001)
const LIST_UNIQUE = 0x2;   // (010)
const LIST_SORTED = 0x4;   // (100)
</pre>
<p>To activate one or more options, the <code>|</code> operator can be used to combine the corresponding flags as necessary. For example, we can create a flag that activates all the options, as follows:</p>
<pre class="language-javascript hljs">const LIST_ALL = LIST_FRACTION | LIST_UNIQUE | LIST_SORTED; // (111)
</pre>
<p>Again, let’s say we want only the <strong>fraction</strong> and <strong>sorted</strong> options to be activated by default. We could use the <code>|</code> operator again, as follows:</p>
<pre class="language-javascript hljs">const LIST_DEFAULT = LIST_FRACTION | LIST_SORTED; // (101)
</pre>
<p>While this doesn’t look bad with just three options, it tends to become quite messy when there are so many options, and a lot of them are required to be activated by default. In such a scenario, a better approach will be to deactivate the unwanted options using the <code>^</code> operator:</p>
<pre class="language-javascript hljs">const LIST_DEFAULT = LIST_ALL ^ LIST_UNIQUE; // (101)
</pre>
<p>Here, we have the <code>LIST_ALL</code> flag that activates all the options. We then use the <code>^</code> operator to deactivate the unique option, leaving other options activated as required.</p>
<p>Now that we have the option flags ready, we can go ahead and define the <code>normalizeList()</code> function:</p>
<pre class="language-javascript hljs">function normalizeList (list, flag = LIST_DEFAULT) {
  if (flag &amp; LIST_FRACTION) {
    const max = Math.max(...list);
    list = list.map(value => Number((value / max).toFixed(2)));
  }
  if (flag &amp; LIST_UNIQUE) {
    list = [...new Set(list)];
  }
  if (flag &amp; LIST_SORTED) {
    list = list.sort((a, b) => a - b);
  }
  return list;
}
</pre>
<p>To check if an option is activated, we use the <code>&amp;</code> operator to check if the corresponding bit of the option is turned on (set to <code>1</code>). The <code>&amp;</code> operation is carried out with the <code>flag</code> argument passed to the function and the corresponding flag for the option, as demonstrated in the following code snippet:</p>
<pre class="language-javascript hljs">// Checking if the unique option is activated
// (flag &amp; LIST_UNIQUE) === LIST_UNIQUE (activated)
// (flag &amp; LIST_UNIQUE) === 0 (deactivated)

flag &amp; LIST_UNIQUE
</pre>
<h2 id="summary">Summary</h2>
<p>Here is a recap of the JavaScript Bitwise operators we covered in this article, their symbols, and what each of them does.</p>
<div>
<table class="table-top-header" data-ace-table-col-widths="175;120;248">
<tbody>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Operator</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><strong>Symbol</strong></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><strong>Description</strong></div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise NOT</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>~</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes one operand</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It returns the complement of the given operand, e.g., ~-1 is 0</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise AND</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>&amp;</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands and operates on a pair of bits</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It is the equivalent of multiplying two bits, e.g., <code>1 x 0</code> is equal to <code>(1 &amp; 0)</code></li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It will only return 1 when both bits in the pair are 1, otherwise it returns 0</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul>
<li >
<ul class="listtype-bullet listindent1 list-bullet1">
<li>e.g.,<code>(1 &amp; 1) === 1</code> and <code>(1 &amp; 0) === 0</code></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise OR</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>|</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands and operates on a pair of bits</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It returns 1 if at least one of the bits in the pair is 1; otherwise it returns 0</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul>
<li >
<ul class="listtype-bullet listindent1 list-bullet1">
<li>e.g., <code>(1 | 0) === 1</code> and <code>(0 | 0) === 0</code></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise XOR</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>^</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands and operates on a pair of bits</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It returns 0 if both bits are the same; otherwise it returns 1</li>
</ul>
</div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz81zz86zr286jz65zz122zz65zspgz90zfiz78zg9z76zz67zz81zz79zqdgz85z75z74zz122z line-list-type-bullet ace-ltr" dir="auto">
<ul>
<li >
<ul class="listtype-bullet listindent1 list-bullet1">
<li>e.g., <code>(0 ^ 0) === 0</code>, <code>(1 ^ 1) === 0</code>, and <code>(1 ^ 0) === 1</code></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Left Shift</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>&lt;&lt;</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands. The first operand is an integer and the second operand represents the number of bits to shift left.</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>When this operator is used, bits are shifted in from the right and excess bits on the left are discarded</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz81zz86zr286jz65zz122zz65zspgz90zfiz78zg9z76zz67zz81zz79zqdgz85z75z74zz122z ace-ltr" dir="auto"><b>Sign-Propagating Right Shift</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>>></code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands. The first operand is an integer and the second operand represents the number of bits to shift right</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>When this operator is used, the sign bit(i.e.,leftmost bit) of the first operand are shifted in from the left and excess bits on the right are discarded</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>With this operator, the sign of the integer operand is always preserved</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz81zz86zr286jz65zz122zz65zspgz90zfiz78zg9z76zz67zz81zz79zqdgz85z75z74zz122z ace-ltr" dir="auto"><b>Zero-Fill Right Shift</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>>>></code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>This behaves similar to the sign-propagating right shift operator  (<code>>>></code>) except that zero bits are always shifted in from the left</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>This operator always returns an unsigned integer</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>For positive integers, <code>>></code> and <code>>>></code> will always return the same result</li>
</ul>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<h2>Conclusion</h2>
<p>JavaScript bitwise operators, though sparingly used, have interesting use cases, as we’ve seen in this article. I strongly hope that the insights you’ve gotten in the course of reading this article will find expression in your day-to-day coding from now on. Happy coding!</p><div class="code-block code-block-27" >
<div class="blog-plug inline-plug vanilla-javascript-cta"><h2><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Debug JavaScript errors more easily by understanding the context</h2>
<p>Debugging code is always a tedious task. But the more you understand your errors the easier it is to fix them.</p>
<p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> allows you to understand these errors in new and unique ways. Our frontend monitoring solution tracks user engagement with your JavaScript frontends to give you the ability to find out exactly what the user did that led to an error.</p>
<a href="https://lp.logrocket.com/blg/javascript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"/></noscript></a>
<p >LogRocket records console logs, page load times, stacktraces, slow network requests/responses with headers + bodies, browser metadata, and custom logs. Understanding the impact of your JavaScript code will never be easier!</p>
<a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-29 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-29 .fadeOut {
    opacity:0 !important;
}

.code-block-29 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-4261" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-4261" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-4261" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/gladchinda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/gladchinda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/gladchinda/">
Glad Chinda <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Full-stack web developer learning new hacks one day at a time. Web technology enthusiast. Hacking stuffs @theflutterwave.</span>
</div>
 </div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/vanilla-javascript/">#vanilla javascript</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/design-thinking-process-5-steps/" rel="prev">Using design thinking steps to build great products</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/what-is-product-adoption/" rel="next">What is product adoption and how do you measure it?</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-javascript-bitwise-operators/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to cookies in Next.js - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-cookies-next-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-cookies-next-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to cookies in Next.js - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/guide-cookies-next-js/">A guide to cookies in Next.js - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-165797 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-nextjs" id="post-165797">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
 <div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/georgeyvb/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/07/new.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/07/new.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/georgeyvb/">
Georgey V B <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a self-taught web developer from India. I enjoy learning about new web technologies and working on projects. I hope that my work will assist other developers who are experiencing the same difficulties that I am.</span>
</div>
</div>
<h1 class="posttitle">A guide to cookies in Next.js</h1>
<p>
<span class="post-date"><time class="post-date">
April 4, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1555</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/guide-cookies-next-js.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="A Guide to Cookies in Next.js"                /> <article class="article-post">
<p>Cookies are data blobs that our browsers unknowingly contain. While some are fervent invaders of privacy, others attempt to improve the browsing experience by keeping track of your browsing habits, preferences, and more. Cookies are useful in situations like <a href="https://blog.logrocket.com/authentication-svelte-using-cookies/">authentication</a>, <a href="https://blog.logrocket.com/ui-ux-best-practices-cookie-notifications/">improving the</a> <a href="https://blog.logrocket.com/ui-ux-best-practices-cookie-notifications/">UX</a>, <a href="https://blog.logrocket.com/javascript-developer-guide-browser-cookies/">quicker response times</a>, and the list goes on.</p>
<p>In this article, we’ll explore two packages that will allow us to achieve setting cookies in a <a href="https://blog.logrocket.com/tag/nextjs/">Next.js</a> application and implement them into an actual use case. To follow along, head over to this <a href="https://github.com/GeoBrodas/cookies-with-nextjs">GitHub</a> <a href="https://github.com/GeoBrodas/cookies-with-nextjs">repository</a>. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#next-js-cookies">Cookies: Boon or ban?</a></li>
<li><a href="#working-with-react-cookies-next-js">Working with react-cookies in Next.js</a>
<ul >
<li><a href="#binding-function-button">Binding a function to a <code>button</code></a></li>
</ul>
</li>
<li><a href="#using-cookies-next-package-next-js">Using the cookies-next package in Next.js</a>
<ul >
<li><a href="#implementing-api-routes">Implementing API routes</a></li>
<li><a href="#accessing-api-routes-frontend">Accessing API routes from the frontend</a></li>
</ul>
</li>
</ul>
<h2 id="next-js-cookies">Cookies: Boon or ban?</h2>
<p>Cookies are little text files that websites place on users’ computers. Cookies have generated discussion in recent years and have both benefits and drawbacks. Cookies can remember user preferences and settings, which can improve your session and personalization of surfing for users. The ability of cookies to trace users’ online behavior, however, presents <a href="https://blog.logrocket.com/data-tracking-react-walker-js/">privacy issues</a>. As a result, several websites have standards requiring them to display their biscuit usage and provide users with the option to opt-out.</p>
<p>Furthermore, a few browsers give users the choice to remove or delete cookies, which may assist in guarding their privacy. Cookies can be helpful for users and websites, but it’s important to abide by the rules and be aware of any privacy dangers. Users are becoming more cautious and switching to different browsers to help them track cookies and disable adverts. It is ultimately up to users and website administrators to use cookies wisely because they can be beneficial and adverse.</p>
<h2 id="working-with-react-cookies-next-js">Working with react-cookies in Next.js</h2>
<p>The first package we will explore is <a href="https://github.com/reactivestack/cookies">react-cookies</a>. This package aims to help you load and save cookies within your React application. Let’s create a simple application that keeps track of registered users.</p>
<p>If you haven’t already, launch a Next.js application by typing the following command:</p>
<pre class="language-bash hljs">npx create-next-app --ts
</pre>
<p>With that done, install react-cookie with the following code:</p>
<pre class="language-bash hljs">npm install react-cookie
</pre>
<p>To start using the Hooks, add the <code>CookiesProvider</code> component in the <code>_app.tsx</code> file, like so:</p>
<pre class="language-jsx hljs">import type { AppProps } from 'next/app';
import { CookiesProvider } from 'react-cookie';

function MyApp({ Component, pageProps }: AppProps) {
  return (
    &lt;CookiesProvider>
      &lt;Component {...pageProps} />
    &lt;/CookiesProvider>
  );
}

export default MyApp;
</pre>
<p>With this done, the Hooks are now available from any part of your application. Start using it by importing the <code>useCookies</code> Hook, as shown below:</p>
<pre class="language-bash hljs">import { useCookies } from 'react-cookie';
</pre>
<p>We can now fetch, add, and remove cookies from the application. Let’s start off by adding a <a href="https://blog.logrocket.com/useeffect-hook-complete-guide/"><code>useEffect</code> Hook</a> to fetch all cookies on load:</p>
<pre class="language-jsx hljs">import { useCookies } from 'react-cookie';

const [cookies, setCookie, removeCookie] = useCookies(['user']);
const Home: NextPage = () => {
  useEffect(() => {
    console.log('Cookies: ', cookies);
  }, [cookies]);

  return (
  &lt;div>...&lt;/div>
)}
</pre>
<p>For now, you shouldn’t be able to see any cookies. So, let’s create a function to set cookies using the <code>setCookie()</code> function:</p>
<pre class="language-jsx hljs">import { useRouter } from 'next/router'

//...inside the defualt function
const router = useRouter();

const setCookieHandler = () => {
  setCookie('new-user', true, {
    path: '/',
  });

  router.replace("/");
};
</pre>
<p>The <code>setCookie()</code> function takes in three arguments: the key, the key-value, and some configuration choices. These choices include, <code>MaxAge</code>, <code>Path</code>, <code>Domain</code>, <code>expires</code>, etc. The <code>path</code> option was used in this case to allow the program to access the cookie from any location.</p>
<p>As you can see, we also used the <code>useRouter()</code> Hook to reload our page using the <code>replace()</code> method to avoid adding a URL entry into the history stack. It will just look like the page re-rendered!</p>
<p>As we move forward, remember that this tutorial is focused only on demonstrating the capabilities of the specific packages. Therefore, we will assume that you understand concepts like authentication flow. To learn more about authentication in Next.js, refer to this <a href="https://blog.logrocket.com/using-supertokens-authentication-next-js/">guide</a>. You can also <a href="https://blog.logrocket.com/build-web3-authentication-flow-react-ether-js-ceramic/">review authentication flows in this article</a>.</p>
<h3 id="binding-function-button">Binding a function to a <code>button</code></h3>
<p>Next up, let’s bind this function to a <code>button</code>. Input the following code:</p>
<pre class="language-jsx hljs">{!cookies['user'] &amp;&amp; (
  &lt;button onClick={setCookieHandler} className={styles.button}>
    Complete new user registration!
  &lt;/button>
)}
</pre>
<p>In this case, the <code>button</code> will only render if the cookie exists. Go ahead and run the development server to see this in action. You can see this cookie visually using the dev tools by triggering <code>Control+Shift+J</code> and then selecting the <strong>Application</strong> section, as shown below:</p>
<p><img             class="aligncenter size-full wp-image-165818 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies.gif" alt="Getting Started With Next.js and Cookies" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-165818" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies.gif" alt="Getting Started With Next.js and Cookies" width="730" height="411"/></noscript></p>
<p>With that done, let’s remove the cookie to allow the user to sign out. First, write another function:</p>
<pre class="language-jsx hljs">const removeCookieHandler = () => {
  removeCookie('new-user');

  router.replace("/");
};
</pre>
<p>Now, bind it to another <code>button</code> that will only render if the cookie is available. What does that mean? The cookie will be available if the user is registered. Here’s what that will look like:</p>
<pre class="language-jsx hljs">{cookies['new-user'] &amp;&amp; (
  &lt;button onClick={removeCookieHandler} className={styles.resetbutton}>
    Reset new user registration
  &lt;/button>
)}
</pre>
<p><img             class="aligncenter size-full wp-image-165840 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-two.gif" alt="Getting Started With Next.js and Cookies Part Two" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-165840" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-two.gif" alt="Getting Started With Next.js and Cookies Part Two" width="730" height="411"/></noscript></p>
<p>With that done, let’s explore the second package, cookies-next.</p>
<h2 id="using-cookies-next-package-next-js">Using the cookies-next package in Next.js</h2>
<p>Moving forward, we will look at how to use the <a href="https://github.com/andreizanik/cookies-next">cookies-next</a> package. This package fits more with the Next.js ecosystem because it can be used anywhere on the client side, on the server side through <a href="https://blog.logrocket.com/getinitialprops-vs-getserversideprops-nextjs/"><code>getServerSideProps</code></a>, and even with Next.js API routes. Here are the two packages head-to-head:</p>
<p><img             class="aligncenter size-full wp-image-165820 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookie-packages.png" alt="Comparing Next.js Cookie Packages" width="730" height="444"    /><noscript><img               class="aligncenter size-full wp-image-165820" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookie-packages.png" alt="Comparing Next.js Cookie Packages" width="730" height="444"  /></noscript></p>
<p>Another surprising fact about cookies-next (this one’s for all the bundle-phobic developers) is that it’s almost half the size of react-cookie. Essentially, making it more desirable to use it in your next project!🎉</p>
<p>As tradition goes, let’s start off by installing cookies-next with the following command:</p>
<pre class="language-bash hljs">npm install cookies-next 
</pre>
<p>The cookies-next package comes inbuilt with similar functions to the react-cookies package. These functions can be used for setting and removing cookies. Let’s create <code>handler</code> functions for setting and removing cookies with the following code:</p>
<pre class="language-javascript hljs">// adding cookies
const addCookie = () => {
  setCookie('user', true, {
    path: '/',
  });
  router.replace('/');
};

// removing cookies
const removeCookie = () => {
  deleteCookie('user', {
    path: '/',
  });
  router.replace('/');
};
</pre>
<p>With that done, you can go ahead and test it out by binding it to different <code>buttons</code> that render if the cookie exists. In addition to <code>getServerSideProps</code> and <a href="https://blog.logrocket.com/building-a-graphql-server-in-next-js/">API routes</a>, cookies-next can also be used on the server side of the application. Let’s look at an example where the user receives some information, has it verified, and then sets a cookie to indicate the information’s legitimacy, all on an API route.</p>
<h3 id="implementing-api-routes">Implementing API routes</h3>
<p>Go ahead and make a new API route inside <code>./pages/api/verify-otp.ts</code>. Inside the file, create a basic <code>handler</code> function with the following code:</p>
<pre class="language-javascript hljs">export default function handler (
  req: NextApiRequest,
  res: NextApiResponse
) {
  return;  
}
</pre>
<p>The cookie will be set to indicate the trustworthiness of the user and expire after a specific period. More specifically, it will expire if there is some type of verification, such as a database to check the credentials or some <a href="https://blog.logrocket.com/creating-split-otp-input-fields-react-native/">OTP logi</a><a href="https://blog.logrocket.com/creating-split-otp-input-fields-react-native/">c</a>. The <code>handler</code> function is as follows:</p>
<pre class="language-javascript hljs">if (
    req.method === 'POST' // only allow POST requests
  ) {
  // caputure the credentials required for verification from the request body
  const { name } = req.body;

  //   otp verification logic

  //   set cookie
  setCookie('authorize', true, {
    req,
    res,
    maxAge: 60 * 60 * 24 * 7, // 1 week
    path: '/',
  });

  //   respond with status and message
  return res.status(200).json({
    message: `${name} is authorized to access`,
    authorize: true,
    code: '20-0101-2092',
  });
}
</pre>
<p>Here, the cookie expires after a week and will require the user to re-verify again. On successful verification, the API responds with a status <code>200</code> message with relevant data that can be displayed in the frontend.</p>
<h3 id="accessing-api-routes-frontend">Accessing API routes from the frontend</h3>
<p>Now, let’s try to access this route from the frontend. The function can be triggered only if the user is registered the first time. Create a function with the following code:</p>
<pre class="language-javascript hljs">const verifyOTP = async (name: string) => {
  const response = await fetch('/api/verify-otp', {
    method: 'POST',
    body: JSON.stringify({ name }),
  });

  const data = await response.json();

  if (data.authorize) {
    setAuthorization(true);
    setLaunchCode(data.code);
  } else {
    setAuthorization(false);
    alert('Invalid OTP');
  }
};
</pre>
<p>We can use the <code>useState</code> Hook to store the data coming from the API route and render the <code>button</code> conditionally and based on the <code>isAuthorized</code> variable. Use the following code:</p>
<pre class="language-javascript hljs">const [isAuthorized, setAuthorization] = useState(false);
const [launchCode, setLaunchCode] = useState('');
</pre>
<p>With this done, go ahead and try out the code written so far. You can check if the cookie exists by opening up the dev tools and heading selecting the <strong>Application</strong> section, as shown below:</p>
<p><img             class="aligncenter size-full wp-image-165822 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-dev-tools.png" alt="Accessing Next.js Dev Tools and Cookies" width="730" height="444"    /><noscript><img               class="aligncenter size-full wp-image-165822" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-dev-tools.png" alt="Accessing Next.js Dev Tools and Cookies" width="730" height="444"  /></noscript></p>
<p>I attempted to make the example more entertaining by generating a random code at every login. It will also set a cookie on the API route. You can experiment with your own original ideas and try out something cooler! Here’s what my example looks like:</p>
<p><img             class="aligncenter size-full wp-image-165824 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-final.gif" alt="Final Product of Creating Cookies in Next.js" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-165824" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-final.gif" alt="Final Product of Creating Cookies in Next.js" width="730" height="411"/></noscript></p>
<h2>Conclusion</h2>
<p>Cookies are crucial to web development. The react-cookie and cookies-next packages are ideal for various use cases because of their distinctive features and advantages. React-cookie is far more popular, providing simple-to-use APIs and great compatibility with React framework. In contrast, cookies-next, a relatively new package explicitly created for Next.js, offers server-side rendering capabilities and improved security measures.</p>
<p>No matter which package you select, it is essential to understand how cookies operate and how to use them safely to prevent any security issues. These two packages make it simple for developers to handle cookies in Next.js applications, making it simpler to <a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">customi</a><a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">z</a><a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">e</a> <a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">UX</a> and enhance website speed.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165797" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165797" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165797" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/07/new.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/07/new.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/georgeyvb/">
Georgey V B <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a self-taught web developer from India. I enjoy learning about new web technologies and working on projects. I hope that my work will assist other developers who are experiencing the same difficulties that I am.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/nextjs/">#nextjs</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/innovative-approach-to-market-sizing/" rel="prev">A modern approach to market sizing</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/ux-design/design-friction-using-friction-better-ux/" rel="next">Design friction: Using friction for better UX</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-cookies-next-js/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to natural language processing with Python using spaCy - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-natural-language-processing-python-spacy/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-natural-language-processing-python-spacy/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to natural language processing with Python using spaCy - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/">A guide to natural language processing with Python using spaCy - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166669 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-python" id="post-166669">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rosariodechiara/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/rosario.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/rosario.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rosariodechiara/">
Rosario De Chiara <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a blockchain technology lead. My passions are distributed systems, efficient algorithms, and retrocomputing. I have a PhD (Dottorato di Ricerca) in Computer Science and worked as a researcher at university. I’m Italian, which means I’m pretty opinionated about food.</span>
</div>
</div>
<h1 class="posttitle">A guide to natural language processing with Python using spaCy</h1>
<p>
<span class="post-date"><time class="post-date">
April 10, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1457</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/natural-language-processing-python-spacy.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Natural Language Processing Python Spacy"                /> <article class="article-post">
<p>Natural language processing (NLP) is a subfield of artificial intelligence and computer science that deals with the interactions between computers and human languages. The goal of NLP is to <a href="https://blog.logrocket.com/natural-language-processing-node-js/">enable computers to understand, interpret, and generate human language</a> in a natural and useful way. This may include tasks like speech recognition, language translation, text summarization, sentiment analysis, and more. NLP is a rapidly growing field with a wide range of applications, especially in areas like customer service, language education, and information retrieval.</p>
<p>In this article, we’ll explore some examples of NLP using <a href="https://spacy.io">spaCy</a>, a popular, open source library for NLP in Python. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#natural-language-processing">How does natural language processing work?</a></li>
<li><a href="#spacy">How does spaCy work?</a></li>
<li><code><a href="#tokenizer">Tokenizer</a></code></li>
<li><code><a href="#tagger">tagger</a></code></li>
<li><a href="#parser"><code>parser</code></a></li>
<li><a href="#named-entity-recognition">Named entity recognition</a></li>
</ul>
<h2 id="natural-language-processing">How does natural language processing work?</h2>
<p>A peculiar example of NLP is the omnipresent <a href="https://openai.com/blog/chatgpt">ChatGPT</a>. ChatGPT is an extensive language model that has been trained on a vast dataset of text from the internet and can generate text similar to the text in the training dataset. It can also answer questions and perform other language-based tasks, like text summarization and language translation.</p>
<p>As you may notice, ChatGPT is actually the composition of two subsystems. One is in charge of NLP, which understands the user’s prompt, and the other handles natural language generation (NLG), which will assemble the answers in a form understandable by humans.</p>
<h2 id="spacy">How does spaCy work?</h2>
<p>spaCy is designed specifically for production use, helping developers to perform tasks like tokenization, lemmatization, part-of-speech tagging, and named entity recognition. spaCy is known for its speed and efficiency, making it well-suited for large-scale NLP tasks.</p>
<p>NLP is a process that can efficiently be represented as a pipeline of the following steps. Each of these steps is a specific algorithm whose output will be the input for the proceeding one. spaCy uses the following basic pipeline:</p>
<p><img             class="aligncenter wp-image-166673 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1natural-language-processing-spacy-steps.png" alt="Natural Language Processing Spacy Steps" width="730" height="118"    /><noscript><img               class="aligncenter wp-image-166673 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1natural-language-processing-spacy-steps.png" alt="Natural Language Processing Spacy Steps" width="730" height="118"  /></noscript></p>
<table class="tg">
<thead>
<tr>
<th class="tg-0lax">Name</th>
<th class="tg-0lax">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/tokenizer"><span ><code>Tokenizer</code></span></a></td>
<td class="tg-0lax">Segment text into tokens</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/tagger"><span ><code>tagger</code></span></a></td>
<td class="tg-0lax">Assign part-of-speech tags</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/dependencyparser"><span ><code>parser</code></span></a></td>
<td class="tg-0lax">Assign dependency labels</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/entityrecognizer"><span ><code>ner</code></span></a></td>
<td class="tg-0lax">Detect and label named entities</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/lemmatizer"><span ><code>lemmatizer</code></span></a></td>
<td class="tg-0lax">Assign base forms</td>
</tr>
</tbody>
</table>
<p>In the GitHub repository, you can find an example for each of the steps. The file is named after the pipeline component. Now, we’ll describe the code for each component and the output. For the sake of clarity, we’ll use the same text to better understand the kind of information that each component of the pipeline will extract.</p>
<p>In each source, the entry point to the functionalities of the library is the <code>nlp</code> object. The <code>nlp</code> object is initialized with the <code>en_core_web_sm</code>, which is a small, English pipeline pre-trained on web excerpts, like blogs, news, comments, etc., including vocabulary, syntax, and entities.</p>
<p>The execution of the <code>nlp</code> default pipeline with the specified pre-trained model will populate different data structures within the <code>doc</code> object, depicted on the right in the figure above.</p>
<p>Choosing a pre-trained module may be crucial for your application. To facilitate the decision, you can use the <a href="https://spacy.io/usage/models">boilerplate generator</a> to choose between accuracy and efficiency. Accuracy is beneficial for the size and complexity of the model, but it will mean a slower pipeline.</p>
<h2 id="tokenizer"><code>Tokenizer</code></h2>
<p>spaCy’s <code>Tokenizer</code> allows you to segment text and create <code>Doc</code> objects with the discovered segment boundaries. Let’s run the following code:</p>
<pre class="language-python hljs">import spacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple is looking at buying U.K. startup for $1 billion.")

print([(token) for token in doc])
</pre>
<p>The output of the execution is the list of the tokens; tokens can be either words, characters, or subwords:</p>
<pre class="language-python hljs">python .\01.tokenizer.py
[Apple, is, looking, at, buying, U.K., startup, for, $, 1, billion, .]
</pre>
<p>You might argue that the exact result is a simple split of the input string on the space character. But, if you look closer, you’ll notice that the <code>Tokenizer</code>, being trained in the English language, has correctly kept together the “U.K.” acronym while also separating the closing period.</p>
<h2 id="tagger"><code>tagger</code></h2>
<p>The <code>tagger</code> component will take care of separating and categorizing the parts-of-speech in the input text:</p>
<pre class="language-python hljs">import spacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple is looking at buying U.K. startup for $1 billion.")

print([(w.text, w.pos_) for w in doc])
</pre>
<p>For each word in the <code>doc</code> object, the <code>nlp</code> component populates the field <code>pos_</code>, which will contain the list of parts present in the text:</p>
<pre class="language-python hljs">> python .\02.tagger.py  
[('Apple', 'PROPN'), ('is', 'AUX'), ('looking', 'VERB'), ('at', 'ADP'),
('buying', 'VERB'), ('U.K.', 'PROPN'), ('startup', 'NOUN'), ('for', 'ADP'),
('$', 'SYM'), ('1', 'NUM'), ('billion', 'NUM'), ('.', 'PUNCT')]
</pre>
<p>The possible parts of speech are described in the following table and, per usual, they heavily depend on the language of the text:</p>
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}<br/>.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;<br/>  overflow:hidden;padding:10px 5px;word-break:normal;}<br/>.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;<br/>  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}<br/>.tg .tg-4r4g{background-color:#F7F9FA;border-color:inherit;color:#1B2733;text-align:left;text-decoration:underline;<br/>  vertical-align:top}<br/>.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}<br/></meta>
<table class="tg">
<thead>
<tr>
<th class="tg-0pky">Abbreviation</th>
<th class="tg-0pky">Part of speech</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tg-0pky">ADJ</td>
<td class="tg-0pky">Adjective</td>
</tr>
<tr>
<td class="tg-4r4g">ADP</td>
<td class="tg-0pky">Adposition</td>
</tr>
<tr>
<td class="tg-4r4g">ADV</td>
<td class="tg-0pky">Adverb</td>
</tr>
<tr>
<td class="tg-4r4g">AUX</td>
<td class="tg-0pky">Auxiliary</td>
</tr>
<tr>
<td class="tg-4r4g">CCONJ</td>
<td class="tg-0pky">Coordinating conjunction</td>
</tr>
<tr>
<td class="tg-0pky">DET</td>
<td class="tg-0pky">Determiner</td>
</tr>
<tr>
<td class="tg-0pky">INTJ</td>
<td class="tg-0pky">Interjection</td>
</tr>
<tr>
<td class="tg-0pky">NOUN</td>
<td class="tg-0pky">Noun</td>
</tr>
<tr>
<td class="tg-0pky">NUM</td>
<td class="tg-0pky">Numeral</td>
</tr>
<tr>
<td class="tg-0pky">PART</td>
<td class="tg-0pky">Particle</td>
</tr>
<tr>
<td class="tg-0pky">PRON</td>
<td class="tg-0pky">Pronoun</td>
</tr>
<tr>
<td class="tg-0pky">PROPN</td>
<td class="tg-0pky">Proper noun</td>
</tr>
<tr>
<td class="tg-0pky">PUNCT</td>
<td class="tg-0pky">Punctuation</td>
</tr>
<tr>
<td class="tg-0pky">SCONJ</td>
<td class="tg-0pky">Subordinating conjunction</td>
</tr>
<tr>
<td class="tg-0pky">SYM</td>
<td class="tg-0pky">Symbol</td>
</tr>
<tr>
<td class="tg-0pky">VERB</td>
<td class="tg-0pky">Verb</td>
</tr>
<tr>
<td class="tg-4r4g">X</td>
<td class="tg-0pky">Other</td>
</tr>
</tbody>
</table>
<h2 id="parser"><code>parser</code></h2>
<p>The <code>parser</code> component will track sentences and perform a segmentation of the input text. The output is collected in some fields in the <code>doc</code> object. For each token, the <code>.dep_</code> field represents the kind of dependency and the <code>.head</code> field, which is the syntactic father of the token. Furthermore, the boolean field <code>.is_sent_start</code> is <code>true</code> for tokens that start a sentence:</p>
<pre class="language-python hljs">import spacy
`from spacy import displacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple, a big  tech company, is looking at buying U.K. startup for $1 billion. Investors are worried about the final price.")

for token in doc:
    print(token.text, token.head)

for token in doc:
    if (token.is_sent_start):
        print(token.text, token.is_sent_start)

displacy.serve(doc, )
</pre>
<p>The code is slightly longer because we used a longer input text to show how the segmentation works:</p>
<pre>> python .\03.parser.py
Apple looking
, Apple
a company
big company
  big
tech company
company Apple
, Apple
is looking
looking looking
at looking
buying at
final price
price about
. are

Apple True
Investors True
</pre>
<p>The first part of the output reports the field <code>.head</code> for each token, and the last two lines represent the two tokens that actually start a sentence. The spaCy library also provides a means to visualize the dependency graph. The <code>displacy</code> component is the entry point to access these functionalities.</p>
<p>In particular, the last line of the code above will visualize the dependency graph shown below by pointing your browser at <code>http://127.0.0.1:5000</code>:</p>
<p><img             class="aligncenter wp-image-166675 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-visualize-dependency-graph.png" alt="Visualize Dependency Graph" width="730" height="96"    /><noscript><img               class="aligncenter wp-image-166675 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-visualize-dependency-graph.png" alt="Visualize Dependency Graph" width="730" height="96"  /></noscript></p>
<h2 id="named-entity-recognition">Named entity recognition</h2>
<p>The named entity recognition (NER) component is a powerful step towards information extraction. It will locate and classify entities in text into categories, like the names of persons, organizations, locations, expressions of times, quantities, monetary values, percentages, and more:</p>
<pre>import spacy 

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple is looking at buying U.K. startup for $1 billion.")

for ent in doc.ents:

    print(ent.text, ent.label_)

spacy.displacy.serve(doc, )
</pre>
<p>The code above will produce:</p>
<pre class="language-python hljs">> python .\04.ner.py
Apple ORG
U.K. GPE
$1 billion MONEY
</pre>
<p>In the result, it’s clear how effectively the categorization works. It correctly categorizes the <code>U.K.</code> token, regardless of the periods, and it also categorizes the three tokens of the string <code>$1 billion</code> as a single entity that indicates a quantity of money.</p>
<p>The categories vary on the model. To print the categories that are recognized, run the following code:</p>
<pre class="language-python hljs">import spacy

nlp = spacy.load("en_core_web_sm")

print(nlp.get_pipe("ner").labels)
</pre>
<p>As shown for the <code>parser</code>, it’s possible to have a visualization of the named entity recognized in the text. Once again by using displacy, the last line of code will show the following representation of the named entities embedded in the text:</p>
<p><img             class="aligncenter wp-image-166677 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-named-entity-recognition-embedded-diagram.png" alt="Named Entity Recognition Embedded Diagram" width="730" height="57"    /><noscript><img               class="aligncenter wp-image-166677 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-named-entity-recognition-embedded-diagram.png" alt="Named Entity Recognition Embedded Diagram" width="730" height="57"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we’ve just scratched the surface of the powerful architecture of spaCy.</p>
<p>spaCy is a framework to host pipelines of components extremely specialized for NLP tasks. The behaviors and the performances of each component depend on the quality of the model, the <code>en_core_web_sm</code> in our examples.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>The quality of the model depends on the size of the dataset used to train it. Pre-trained models are good for most cases but, of course, for specific domains of application, you may think about <a href="https://spacy.io/usage/training">training your own model</a>. I hope you enjoyed this article. Happy coding!</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166669" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166669" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166669" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/rosario.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/rosario.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rosariodechiara/">
Rosario De Chiara <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a blockchain technology lead. My passions are distributed systems, efficient algorithms, and retrocomputing. I have a PhD (Dottorato di Ricerca) in Computer Science and worked as a researcher at university. I’m Italian, which means I’m pretty opinionated about food.</span>
</div>
</div>
 <div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/python/">#python</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/product-management-conferences-2023/" rel="prev">Product management conferences in 2023: A complete list (updated)</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/product-development-strategy-definition-examples/" rel="next">Product development strategy: Definition, examples, and guide</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-natural-language-processing-python-spacy/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A practical guide to TypeScript decorators - LogRocket Blog</title>
			<link>https://blog.logrocket.com/practical-guide-typescript-decorators/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/practical-guide-typescript-decorators/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A practical guide to TypeScript decorators - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/practical-guide-typescript-decorators/">A practical guide to TypeScript decorators - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-18524 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-typescript" id="post-18524">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rahmanfadhil/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/08/rahman-fadhil.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/08/rahman-fadhil.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rahmanfadhil/">
Rahman Fadhil <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Developer and content writer.</span>
</div>
</div>
<h1 class="posttitle">A practical guide to TypeScript decorators</h1>
<p>
<span class="post-date"><time class="post-date">
April 4, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2617</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2020/05/practical-guide-typescript-decorators.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="A Practical Guide To TypeScript Decorators"                /> <article class="article-post">
<p><strong><em>Editor’s note:</em></strong> <em>This article was last updated on 4 April 2023 to include information about the accessor and auto-accessor TypeScript decorator types. To learn more about JavaScript decorators,</em> <a href="https://blog.logrocket.com/understanding-javascript-decorators/"><em>check out this article</em></a><em>.</em></p>
<p>A decorator is a design pattern in programming in which you wrap something to change its behavior. In JavaScript, this feature is currently at <a href="https://github.com/tc39/proposal-decorators">stage three</a>. Decorators are not new; several programming languages, such as Python, Java, and C#, adopted this pattern before JavaScript. Further refinement of the syntax will require feedback from implementation and users.</p>
<p>At the time of writing, <a href="https://caniuse.com/?search=decorators">most browsers</a> do not support decorators. Nonetheless, you can test them out by using compilers like Babel.</p>
<p>In this article, we will learn how decorators compare in JavaScript and TypeScript. We will also explore the different types of TypeScript decorators that exist, including the class, method, property, and accessor decorators.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#decorators-javascript-vs-typescript">Decorators in JavaScript vs. TypeScript</a></li>
<li><a href="#getting-started-decorators-typescript">Getting started with decorators in TypeScript</a></li>
<li><a href="#new-typescript-decorators">New TypeScript decorators</a></li>
<li><a href="#decorator-types">Types of decorators</a>
<ul >
<li><a href="#class-decorators">Class decorators</a></li>
<li><a href="#method-decorators">Method decorators</a></li>
<li><a href="#property-decorators">Property decorators</a></li>
<li><a href="#auto-accessor-decorators">Auto-accessor decorators</a></li>
</ul>
</li>
<li><a href="#use-cases-typescript-decorators">Use cases for TypeScript decorators</a></li>
</ul>
<h2 id="decorators-javascript-vs-typescript">Decorators in JavaScript vs. TypeScript</h2>
<p>TypeScript’s decorator feature is different from the JavaScript feature in a few significant ways. The first big difference is about what we can decorate. We can use TypeScript decorators to annotate and modify class declarations, methods, and properties, as well as accessors and parameters.</p>
<p>New TypeScript decorators do not currently support parameter decoration, but that will change in the future. Old TypeScript decorators, on the other hand, do support parameters decoration. We’ll learn more about this later in the article. JavaScript, on the other hand, only lets us decorate class declarations and methods.</p>
<p>The second important difference between decorators in JavaScript and TypeScript is type checking. Because TypeScript a strongly-typed programming language, it can type-check the parameters and return the value of the decorator function. JavaScript doesn’t have this kind of type checking and validation, so you need to rely on runtime checks or external tools like linters to catch type errors.</p>
<h2 id="getting-started-decorators-typescript">Getting started with decorators in TypeScript</h2>
<p>Start by creating a blank Node.js project:</p>
<pre class="language-typescript hljs">$ mkdir typescript-decorators
$ cd typescript decorators
$ npm init -y
</pre>
<p>Next, install TypeScript as a development dependency:</p>
<pre class="language-typescript hljs">$ npm install -D typescript @types/node
</pre>
<p>The <code>@types/node</code> package contains the Node.js type definitions for TypeScript. We need this package to access some Node.js standard libraries.</p>
<p>Add an npm script in the <code>package.json</code> file to compile your TypeScript code:</p>
<pre class="language-typescript hljs">{
  // ...
  "scripts": {
    "build": "tsc"
  }
}
</pre>
<p>Until TypeScript 5.0, we had to explicitly set a flag, <code>experimentalDecorators</code>, to use decorators in our code. With TypeScript 5.0, this is no longer the case. While such a flag is likely to stay around for the foreseeable future, we can use new-style decorators without it. As a matter of fact, the old-style decorators modeled a different version of the proposal (Stage 2). We can use both styles in our code because the type rules are different, but it’s not advisable to do so.</p>
<p>Remember to configure your working environment to use at least TypeScript 5. Otherwise, the code in this article won’t compile.</p>
<p>We’ll use <code>ES6</code> as a target for TypeScript because it’s supported by all modern browsers:</p>
<pre class="language-typescript hljs">{
  "compilerOptions": {
    "target": "ES6"
  }
}
</pre>
<p>Next, we’ll create a simple TypeScript file to test the project out:</p>
<pre class="language-typescript hljs">console.log("Hello, world!");


$ npm run build
$ node index.js
Hello, world!
</pre>
<p>Instead of repeating this command over and over, we can simplify the compilation and execution process by using a package called <code>ts-node</code>. It’s a community package that enables us to run TypeScript code directly without compiling it first.</p>
<p>Let’s install it as a development dependency:</p>
<pre class="language-typescript hljs">$ npm install -D ts-node
</pre>
<p>Next, add a <code>start</code> script to the <code>package.json</code> file:</p>
<pre>{
  "scripts": {
    "build": "tsc",
    "start": "ts-node index.ts"
  }
}
</pre>
<p>Simply run <code>npm start</code> to run your code:</p>
<pre class="language-typescript hljs">$ npm start
Hello, world!
</pre>
<p>For reference, I have all the source code on this article published on my <a href="https://github.com/mdipirro/typescript-decorators">GitHub</a>. You can clone it onto your computer using the command below:</p>
<pre class="language-typescript hljs">$ git clone <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a9cec0dde9cec0ddc1dccb87cac6c4">[email protected]</a>:mdipirro/typescript-decorators.git
</pre>
<h2 id="new-typescript-decorators">New TypeScript decorators</h2>
<p>In TypeScript, decorators are functions that can be attached to classes and their members, such as methods and properties.</p>
<p>In this section, we’re going to look at new-style decorators. First, the new <code>Decorator</code> type is defined as follows:</p>
<pre class="language-typescript hljs">type Decorator = (target: Input, context: {
  kind: string;
  name: string | symbol;
  access: {
    get?(): unknown;
    set?(value: unknown): void;
  };
  private?: boolean;
  static?: boolean;
  addInitializer?(initializer: () => void): void;
}) => Output | void;
</pre>
<p>The <code>type</code> definition above looks complex, so let’s break it down one piece at a time:</p>
<ul>
<li><code>target</code> represents the element we’re decorating, whose type is <code>Input</code></li>
<li><code>context</code> contains metadata about how the decorated method was declared, namely:
<ul >
<li><code>kind</code>: the type of decorated value. As we’ll see, this can be either <code>class</code>, <code>method</code>, <code>getter</code>, <code>setter</code>, <code>field</code>, or <code>accessor</code></li>
<li><code>name</code>: the name of the decorated object</li>
<li><code>access</code>: an object with references to a getter and setter method to access the decorated object</li>
<li><code>private</code>: whether the decorated object is a <code>private</code> class member</li>
<li><code>static</code>: whether the decorated object is a <code>static</code> class member</li>
<li><code>addInitializer</code>: a way to add custom initialization logic at the beginning of the constructor (or when the class is defined)</li>
</ul>
</li>
<li><code>Output</code> represents the type of value returned by the <code>Decorator</code> function</li>
</ul>
<p>In the next section, we’ll take a look at the types of decorators. Interestingly, while old-style decorators let us decorate function parameters, new-style ones don’t, at least for the time being. As a matter of fact, parameter decorators are waiting for a <a href="https://github.com/tc39/proposal-decorators/issues/47">follow-on proposal</a> to reach Stage 3.</p>
<h2 id="decorator-types">Types of decorators</h2>
<p>Now that we know how the <code>Decorator</code> type is defined, we’ll take a look at the various types of decorators.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h3 id="class-decorators">Class decorators</h3>
<p>When you attach a function to a class as a decorator, you’ll receive the class constructor as the first parameter:</p>
<pre class="language-typescript hljs">type ClassDecorator = (value: Function, context: {
  kind: "class"
  name: string | undefined
  addInitializer(initializer: () => void): void
}) => Function | void
</pre>
<p>For example, let’s assume we want to use a decorator to add two properties, <code>fuel</code> and <code>isEmpty()</code>, to a <code>Rocket</code> class. In this case, we could write the following function:</p>
<pre class="language-typescript hljs">function WithFuel(target: typeof Rocket, context): typeof Rocket {
  if (context.kind === "class") {
    return class extends target {
      fuel: number = 50
      isEmpty(): boolean {
        return this.fuel == 0
      }
    }
  }
}
</pre>
<p>After making sure the <code>kind</code> of the decorated element is indeed <code>class</code>, we return a new class with two additional properties. Alternatively, we could have used prototype objects to dynamically add new methods:</p>
<pre class="language-typescript hljs">function WithFuel(target: typeof Rocket, context): typeof Rocket {
  if (context.kind === "class") {
    target.prototype.fuel = 50
    target.prototype.isEmpty = (): boolean => {
      return this.fuel == 0
    }
  }
}
</pre>
<p>We can use <code>WithFuel</code> as follows:</p>
<pre class="language-typescript hljs">@WithFuel
class Rocket {}

const rocket = new Rocket()
console.log((rocket as any).fuel)
console.log(`Is the rocket empty? ${(rocket as any).isEmpty()}`)
/* Prints:
50
Is the rocket empty? false
*/
</pre>
<p>You might have noticed that we had to cast <code>rocket</code> to <code>any</code> to access the new properties. That’s because decorators can’t influence the structure of the type.</p>
<p>If the original class defines a property that is later decorated, the decorator overrides the original value. For example, if <code>Rocket</code> has a <code>fuel</code> property with a different value, <code>WithFuel</code> would override such a value:</p>
<pre class="language-typescript hljs">function WithFuel(target: typeof Rocket, context): typeof Rocket {
  if (context.kind === "class") {
    return class extends target {
      fuel: number = 50
      isEmpty(): boolean {
        return this.fuel == 0
      }
    }
  }
}
@WithFuel
class Rocket {
  fuel: number = 75
}

const rocket = new Rocket()
console.log((rocket as any).fuel)
// prints 50
</pre>
<h3 id="method-decorators">Method decorators</h3>
<p>Another good place to attach a decorator is class methods. In this case, the type of the decorator function is as follows:</p>
<pre class="language-typescript hljs">type ClassMethodDecorator = (target: Function, context: {
  kind: "method"
  name: string | symbol
  access: { get(): unknown }
  static: boolean
  private: boolean
  addInitializer(initializer: () => void): void
}) => Function | void
</pre>
<p>We can use method decorators when we want something to happen before or after the invocation of the method being decorated.</p>
<p>For example, during development, it might be useful to log the calls to a given method or verify pre/post-conditions before/after the call. Additionally, we can influence the way the method is invoked, for example, by delaying its execution or limiting the number of calls within a given amount of time.</p>
<p>Finally, we can use method decorators to mark a method as deprecated, logging a message to warn the user and tell them which method to use instead:</p>
<pre class="language-typescript hljs">function deprecatedMethod(target: Function, context) {
  if (context.kind === "method") {
    return function (...args: any[]) {
      console.log(`${context.name} is deprecated and will be removed in a future version.`)
      return target.apply(this, args)
    }
  }
}
</pre>
<p>Again, the first parameter of the <code>deprecatedMethod</code> function is, in this case, the method we’re decorating. After making sure it’s indeed a method (<code>context.kind === "method"</code>), we return a new <code>function</code> that basically wraps the decorated method and logs a warning message before calling the actual method call.</p>
<p>We can then use our new decorator as follows:</p>
<pre class="language-typescript hljs">@WithFuel
class Rocket {
  fuel: number = 75
  @deprecatedMethod
  isReadyForLaunch(): Boolean {
    return !(this as any).isEmpty()
  }
}

const rocket = new Rocket()
console.log(`Is the rocket ready for launch? ${rocket.isReadyForLaunch()}`)
</pre>
<p>In the <code>isReadyForLaunch()</code> method, we refer to the <code>isEmpty</code> method we added via the <code>WithFuel</code> decorator. Notice how we had to cast <code>this</code> to an instance of <code>any</code>, as we did before. When we call <code>isReadyForLaunch()</code>, we’ll see the following output, showing that the warning gets correctly printed out:</p>
<pre class="language-typescript hljs">isReadyForLaunch is deprecated and will be removed in a future version.
Is the rocket ready for launch? true
</pre>
<p>Method decorators can be useful if you want to extend the functionality of our methods, which we’ll cover later.</p>
<h3 id="property-decorators">Property decorators</h3>
<p>Property decorators are very similar to method decorators:</p>
<pre class="language-typescript hljs">type ClassPropertyDecorator = (target: undefined, context: {
  kind: "field"
  name: string | symbol
  access: { get(): unknown, set(value: unknown): void }
  static: boolean
  private: boolean
}) => (initialValue: unknown) => unknown | void
</pre>
<p>Not surprisingly, the use cases for property decorators are very similar to those for method decorators. For example, we can track the accesses to a property or mark it as deprecated:</p>
<pre class="language-typescript hljs">function deprecatedProperty(_: any, context) {
  if (context.kind === "field") {
    return function (initialValue: any) {
      console.log(`${context.name} is deprecated and will be removed in a future version.`)
      return initialValue
    }
  }
}
</pre>
<p>The code is very similar to the <code>deprecatedMethod</code> decorator we defined for methods, and so is its usage.</p>
<h3 id="accessor-decorators">Accessor decorators</h3>
<p>Very similar to method decorators are accessor decorators, which are decorators that target getters and setters:</p>
<pre class="language-typescript hljs">type ClassSetterDecorator = (target: Function, context: {
  kind: "setter"
  name: string | symbol
  access: { set(value: unknown): void }
  static: boolean
  private: boolean
  addInitializer(initializer: () => void): void
}) => Function | void

type ClassGetterDecorator = (value: Function, context: {
  kind: "getter"
  name: string | symbol
  access: { get(): unknown }
  static: boolean
  private: boolean
  addInitializer(initializer: () => void): void
}) => Function | void
</pre>
<p>The definition of accessor decorators is similar to that of as method decorators. For example, we can merge our <code>deprecatedMethod</code> and <code>deprecatedProperty</code> decorations into a single, <code>deprecated</code> function that features support for getters and setters as well:</p>
<pre class="language-typescript hljs">function deprecated(target, context) {
  const kind = context.kind
  const msg = `${context.name} is deprecated and will be removed in a future version.`
  if (kind === "method" || kind === "getter" || kind === "setter") {
    return function (...args: any[]) {
      console.log(msg)
      return target.apply(this, args)
    }
  } else if (kind === "field") {
    return function (initialValue: any) {
      console.log(msg)
      return initialValue
    }
  }
}
</pre>
<h3 id="auto-accessor-decorators">Auto-accessor decorators</h3>
<p>The new decorator proposal also introduced a new element called the “auto-accessor field”:</p>
<pre class="language-typescript hljs">class Test {
  accessor x: number
}
</pre>
<p>The transpiler will turn the <code>x</code> field above into a pair of getter and setter methods, with a <code>private</code> property behind the scenes. This is useful to represent a simple accessor pair and helps avoid some edgy issues that might arise while using decorators on class fields.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>Auto-accessors can be decorated, as well, and their type will essentially be a merge of <code>ClassSetterDecorator</code> and <code>ClassGetterDecorator</code>. You can find additional details in the <a href="https://github.com/microsoft/TypeScript/pull/50820">Stage 3 decorators pull request</a>.</p>
<h2 id="use-cases-typescript-decorators">Use cases for TypeScript decorators</h2>
<p>Now that we’ve covered what decorators are and how to use them properly, let’s look at some specific problems decorators can help us solve.</p>
<h3 id="calculating-execution-time">Calculating execution time</h3>
<p>Let’s say we want to estimate how long it takes to run a function as a way to gauge your application performance. We can create a decorator to calculate the execution time of a method and print it on the console:</p>
<pre class="language-typescript hljs">class Rocket {
  @measure
  launch() {
    console.log("Launching in 3... 2... 1... 🚀");
  }
}
</pre>
<p>The <code>Rocket</code> class has a <code>launch</code> method inside of it. To measure the execution time of the <code>launch</code> method, you can attach the <code>measure</code> decorator:</p>
<pre class="language-typescript hljs">import { performance } from "perf_hooks";

function measure(target: Function, context) {
  if (context.kind === "method") {
    return function (...args: any[]) {
      const start = performance.now()  
      const result = target.apply(this, args)
      const end = performance.now()

      console.log(`Execution time: ${end - start} milliseconds`)
      return result
    }
  }
}
</pre>
<p>As you can see, the <code>measure</code> decorator replaces the original method with a new one that enables it to calculate the execution time of the original method and log it to the console. To calculate the execution time, we’ll use the <a href="https://nodejs.org/api/perf_hooks.html">Performance Hooks API</a> from the Node.js standard library. Instantiate a new <code>Rocket</code> instance and call the <code>launch</code> method:</p>
<pre class="language-typescript hljs">const rocket = new Rocket()
rocket.launch()
</pre>
<p>You’ll get the following result:</p>
<pre class="language-typescript hljs">Launching in 3... 2... 1... 🚀
Execution time: 1.062355000525713 milliseconds
</pre>
<h3 id="using-decorator-factory-function">Using the decorator factory function</h3>
<p>To configure your decorators to act differently in a certain scenario, you can use a concept called the decorator factory. Decorator factories are functions returning a decorator. This enables us to customize the behavior of your decorators by passing some parameters in the factory.</p>
<p>Take a look at the example below:</p>
<pre class="language-typescript hljs">function fill(value: number) {
  return function(_, context) {
    if (context.kind === "field") {
      return function (initialValue: number) {
        return value + initialValue
      }
    }
  }
}
</pre>
<p>The <code>fill</code> function returns a decorator changing the value of the property based on the value passed from your factory:</p>
<pre class="language-typescript hljs">class Rocket {
  @fill(20)
  fuel: number = 50
}
const rocket = new Rocket()
console.log(rocket.fuel) // 70
</pre>
<h3 id="automatic-error-guard">Automatic error guard</h3>
<p>Another common use case for decorators is checking pre- and post-conditions on method calls. For example, assume we want to make sure <code>fuel</code> is at least a given value before calling the <code>launch()</code> method:</p>
<pre class="language-typescript hljs">class Rocket {
  fuel = 50

  launch() {
    console.log("Launching to Mars in 3... 2... 1... 🚀")
  }
}
</pre>
<p>Let’s say we have a <code>Rocket</code> class that has a <code>launchToMars</code> method. To launch a rocket, the fuel level must be above, for example, 75.</p>
<p>Let’s create the decorator for it:</p>
<pre class="language-typescript hljs">function minimumFuel(fuel: number) {
  return function(target: Function, context) {
    if (context.kind === "method") {
        return function (...args: any[]) {
          if (this.fuel > fuel) {
            return target.apply(this, args)
          } else {
            console.log(`Not enough fuel. Required: ${fuel}, got ${this.fuel}`)
          }
        }
    }
  }
}
</pre>
<p><code>minimumFuel</code> is a factory decorator. It takes the <code>fuel</code> parameter, which indicates how much fuel is needed to launch a particular rocket. To check the fuel condition, wrap the original method with a new method, just like in the previous use case. Notice how we can freely refer to <code>this.fuel</code>, which will just work at runtime.</p>
<p>Now we can plug our decorator to the <code>launch</code> method and set the minimum fuel level:</p>
<pre class="language-typescript hljs">class Rocket {
  fuel = 50

  @minimumFuel(75)
  launch() {
    console.log("Launching to Mars in 3... 2... 1... 🚀")
  }
}
</pre>
<p>If we now invoke the <code>launch</code> method, it won’t launch the rocket because the current fuel level is 50:</p>
<pre>const rocket = new Rocket()
rocket.launch()

Not enough fuel. Required: 75, got 50
</pre>
<p>The cool thing about this decorator is that you can apply the same logic to a different method without rewriting the whole if-else statement.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It’s true that in some scenarios, it’s not necessary to make your own decorators. Many TypeScript libraries/frameworks out there, such as <a href="https://typeorm.io">TypeORM</a> and <a href="https://angular.io/">Angular</a>, already provide all the decorators you need. But it’s always worth the extra effort to understand what’s going on under the hood, and it might even inspire you to build your own TypeScript framework.</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-18524" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-18524" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-18524" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/08/rahman-fadhil.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/08/rahman-fadhil.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rahmanfadhil/">
Rahman Fadhil <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Developer and content writer.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/typescript/">#typescript</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/" rel="prev">Building an adaptive, accessible UI library with React Aria</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/understanding-exclamation-mark-typescript/" rel="next">Understanding the exclamation mark in TypeScript</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/practical-guide-typescript-decorators/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Add stepper components to your React app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/add-stepper-components-react-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/add-stepper-components-react-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Add stepper components to your React app - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/add-stepper-components-react-app/">Add stepper components to your React app - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166962 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-166962">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/shalithasuranga/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/shalithasuranga/">
Shalitha Suranga <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Programmer | Author of Neutralino.js | Technical Writer</span>
</div>
</div>
<h1 class="posttitle">Add stepper components to your React app</h1>
<p>
<span class="post-date"><time class="post-date">
April 18, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2953</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/add-stepper-components-react-app.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="alt"                /> <article class="article-post">
<p>Web developers develop web application interfaces with various UI elements, such as buttons, tabs, sliders, toggle buttons, and dropdowns. In some scenarios, these include wizard-like flows with several steps, such as in web apps that let users make a reservation: designers typically decompose the entire workflow into several steps, such as entering user details, making a payment, and receiving the booking confirmation. Then, they indicate the progress through the list of steps in a separate section.</p>
<p><img             class="aligncenter size-full wp-image-166964 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"    /><noscript><img               class="aligncenter size-full wp-image-166964" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"  /></noscript></p>
<p>These steps-based flow indicators are known as stepper components. A stepper component typically visualizes several steps and indicates the current progress by highlighting already completed steps. A stepper component is usually responsible for displaying the workflow progress, so we often need to switch form segments programmatically.</p>
<p>In this tutorial, I’ll explain several ways to add stepper components to your React apps with practical examples.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#implement-stepper-component-react">Ways to implement a stepper component in React</a>
<ul >
<li><a href="#using-react-stepper-horizontal">Using <code>react-stepper-horizontal</code></a></li>
<li><a href="#using-react-form-stepper">Using <code>react-form-stepper</code></a></li>
<li><a href="#importing-stepper-components-ui-kits">Importing stepper components from UI kits</a></li>
<li><a href="#building-stepper-component-from-scratch">Building a stepper component from scratch</a></li>
</ul>
</li>
<li><a href="#creating-stepper-components-react-stepper-horizontal">Creating stepper components with <code>react-stepper-horizontal</code></a>
<ul >
<li><a href="#creating-basic-stepper-component">Creating a basic stepper component</a></li>
<li><a href="#using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</a></li>
<li><a href="#customizing-styles">Customizing styles</a></li>
</ul>
</li>
<li><a href="#creating-stepper-components-react-form-stepper">Creating stepper components with <code>react-form-stepper</code></a>
<ul >
<li><a href="#using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</a></li>
<li><a href="#creating-custom-styles">Creating custom styles</a></li>
</ul>
</li>
<li><a href="#using-stepper-components-ui-kits">Using stepper components from UI kits</a>
<ul >
<li><a href="#mui">MUI</a></li>
<li><a href="#prime-react">Prime React</a></li>
</ul>
</li>
<li><a href="#creating-stepper-component-from-scratch">Creating a stepper component from scratch</a></li>
</ul>
<h2 id="implement-stepper-component-react">Ways to implement a stepper component in React</h2>
<p>In this section, we’ll check out the available stepper component development options and discuss when to use each!</p>
<p>Using a library for adding steppers is a good choice if you don’t use a fully-featured UI kit or don’t want to build a stepper widget from scratch. The following popular stepper libraries offer pre-developed, customizable React components:</p>
<h3 id="using-react-stepper-horizontal">Using <code>react-stepper-horizontal</code></h3>
<p><a href="https://www.npmjs.com/package/react-stepper-horizontal"><code>react-stepper-horizontal</code></a> is a library that lets you create stepper components with a pre-developed, pre-styled <code>Stepper</code> component. This npm module was initially released in 2016 and offers several props to control the component behavior and styling.</p>
<p>This library’s <a href="https://github.com/mu29/react-stepper">GitHub repository</a> doesn’t show much development activity, but it is highly usable in React apps because of its complete features and customizability.</p>
<h3 id="using-react-form-stepper">Using <code>react-form-stepper</code></h3>
<p><a href="https://www.npmjs.com/package/react-form-stepper"><code>react-form-stepper</code></a> is an alternative to the <code>react-stepper-horizontal</code> library and offers a Material-inspired, pre-developed <code>Stepper</code> component for React developers. This library was released in 2019 and has an actively maintained <a href="https://github.com/M0kY/react-form-stepper">GitHub repository</a>.</p>
<p>This package offers almost all customization features, similar to the <code>react-stepper-horizontal</code> package. Additionally, it offers some modern features like HOC (higher-order components)-based step definitions.</p>
<h3 id="&quot;importing-stepper-components-ui-kits">Importing stepper components from UI kits</h3>
<p>Many React developers use UI kits to develop their apps because UI kits offer all the generic components they need, so they don’t need to look for multiple-dependency libraries. Most modern React developers use MUI, React Bootstrap, or Prime React-like, fully-featured UI kits instead of writing their own UI elements. Most UI kits offer pre-developed stepper components, so we don’t need to install a dedicated stepper library if we use a fully-featured UI kit.</p>
<h3 id="building-stepper-component-from-scratch">Building a stepper component from scratch</h3>
<p>External packages increase your app bundle size (you can calculate this using <a href="https://bundlephobia.com/">BundlePhobia</a>), so adding a third-party package for every development requirement isn’t always a good choice. Also, third-party packages may not completely fulfill your design requirements and may bring features that you don’t even use. Writing your own stepper component is also an option by including only the required features.<br/>
Let’s start creating stepper components with the above methods!</p>
<h2 id="creating-stepper-components-react-stepper-horizontal">Creating stepper components with <code>react-stepper-horizontal</code></h2>
<p>Now, let’s make our first stepper component with the <code>react-stepper-horizontal</code> package, which offers a customizable, pre-developed <code>Stepper</code> component. First, create a new React project with <a href="https://blog.logrocket.com/getting-started-with-create-react-app-d93147444a27/">Create React App</a>, as follows:</p>
<pre class="language-bash hljs">npx create-react-app react-steppers-demo
cd react-steppers-demo
</pre>
<p>Next, install the stepper component library:</p>
<pre class="language-bash hljs">npm install react-stepper-horizontal
# --- or ---
yarn add react-stepper-horizontal
</pre>
<h3 id="creating-basic-stepper-component">Creating a basic stepper component</h3>
<p>Let’s create a basic stepper with this library. In this example, we’ll visualize a fixed, pre-defined set of steps for demonstration purposes. Add the following code to your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import Stepper from 'react-stepper-horizontal';
import './App.css';

function App() {
  const steps = [
    { title: 'User details' },
    { title: 'Payment' },
    { title: 'Booking confirmation' },
  ];
  const activeStep = 1;

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
    &lt;/div>
  );
}

export default App;
</pre>
<p>Run your app and check the web browser. You’ll see a pre-styled stepper component with three steps, as we defined in the source file:</p>
<p><img             class="aligncenter size-full wp-image-166964 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"    /><noscript><img               class="aligncenter size-full wp-image-166964" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"  /></noscript></p>
<p>Here, we rendered a basic stepper by providing three steps via the <code>steps</code> prop and highlighting the finished steps by setting the <code>activeStep</code> prop. Steps one and two are marked as done because <code>activeStep</code> is <code>1</code> (index 1 refers to the second element, since the index starts from 0).</p>
<h3 id="using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</h3>
<p>Now we can dynamically switch form segments based on the active step to make the app more interactive. Use the following code in your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import React, { useState } from 'react';
import Stepper from 'react-stepper-horizontal';
import './App.css';

function UserDetails() {
  return &lt;h2>User details&lt;/h2>;
}

function Payment() {
  return &lt;h2>Payment information&lt;/h2>;
}

function Confirmation() {
  return &lt;h2>Booking is confirmed&lt;/h2>;
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { title: 'User details' },
    { title: 'Payment' },
    { title: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}

export default App;
</pre>
<p>Here, we store the current step index with the <code>activeStep</code> state field and use the <code>setActiveStep</code> function to change the current step. The <code>getSectionComponent</code> function helps us to render a form component based on the current step.</p>
<p>Users can switch steps by clicking on the next and previous buttons. Look at the following preview:</p>
<figure id="attachment_166969"   class="wp-caption aligncenter"><img             class="size-full wp-image-166969 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/changing-active-step-stepper-component-react-hooks.gif" alt="Changing the active step in the stepper component via React Hooks" width="730" height="402"  /><noscript><img               class="size-full wp-image-166969" src="https://blog.logrocket.com/wp-content/uploads/2023/04/changing-active-step-stepper-component-react-hooks.gif" alt="Changing the active step in the stepper component via React Hooks" width="730" height="402"/></noscript><figcaption id="caption-attachment-166969" class="wp-caption-text">Changing the active step in the stepper component via React Hooks</figcaption></figure>
<p>This library lets you attach click handlers to each step. For example, the following setup helps you navigate between steps by clicking the completed steps:</p>
<pre class="language-javascript hljs">const steps = [
  { title: 'User details', onClick: () => setActiveStep(0) },
  { title: 'Payment', onClick: () => setActiveStep(1) },
  { title: 'Booking confirmation', onClick: () => setActiveStep(2) },
];
</pre>
<h3 id="customizing-styles">Customizing styles</h3>
<p>In the previous example, we didn’t use any custom styles for the stepper component, so the library used the default blue color appearance for the stepper component.</p>
<p>The <code>Stepper</code> component accepts several props for style configuration. Let’s use those props and customize styles in the stepper component. We’ll create a dark-color theme for our sample app.</p>
<p>First, activate the dark-color theme by adding the following CSS into your <code>App.css</code>:</p>
<pre class="language-css hljs">.container {
  height: 100vh;
  background: #111;
  color: #eee;
}
</pre>
<p>Next, implement a new wrapper component for the customized step and use it as follows in <code>App.js</code>:</p>
<pre class="language-javascript hljs">function CustomStepper(props) {
  return (
    &lt;Stepper
      { ...props }
      activeColor="#ffd813"
      defaultColor="#eee"
      completeColor="#ffbd13"
      activeTitleColor="#fff"
      completeTitleColor="#eee"
      defaultTitleColor="#bbb"
      circleFontColor="#000"
      completeBarColor="#ffbd13"/>
  );
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { title: 'User details' },
    { title: 'Payment' },
    { title: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div className="container">
      &lt;CustomStepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}
</pre>
<p>Here, we’ve created a custom stepper by setting various props in the <code>CustomStepper</code> component implementation:</p>
<pre class="language-javascript hljs">&lt;Stepper
  { ...props }
  activeColor="#ffd813"
  defaultColor="#eee"
  completeColor="#ffbd13"
  activeTitleColor="#fff"
  completeTitleColor="#eee"
  defaultTitleColor="#bbb"
  circleFontColor="#000"
  completeBarColor="#ffbd13"/>
</pre>
<p>Once you add the above code updates, you’ll see the following result:</p>
<figure id="attachment_166974"   class="wp-caption aligncenter"><img             class="size-full wp-image-166974 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/modifying-stepper-component-dark-color-theme.gif" alt="Modifying the stepper component for a dark-color theme" width="730" height="402"  /><noscript><img               class="size-full wp-image-166974" src="https://blog.logrocket.com/wp-content/uploads/2023/04/modifying-stepper-component-dark-color-theme.gif" alt="Modifying the stepper component for a dark-color theme" width="730" height="402"/></noscript><figcaption id="caption-attachment-166974" class="wp-caption-text">Modifying the stepper component for a dark-color theme</figcaption></figure>
<p>This library also lets you use custom opacities, margins, and stepper-bar styles. See all supported props in the <a href="https://www.npmjs.com/package/react-stepper-horizontal#api">official API documentation</a>.</p>
<h2 id="creating-stepper-components-react-form-stepper">Creating stepper components with <code>react-form-stepper</code></h2>
<p>The <code>react-form-stepper</code> package is a modern alternative to the <code>react-stepper-horizontal</code> package. Its API is more structured than the <code>react-stepper-horizontal</code> package, but offers almost the same feature set.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Let’s get started by installing the new library as follows on the same React project we’ve used before:</p>
<pre class="language-bash hljs">npm install react-form-stepper
# --- or ---
yarn add react-form-stepper
</pre>
<p>Next, add the following code to your <code>App.js</code> file to create a basic stepper. Make sure to remove the dark theme CSS from your <code>App.css</code>:</p>
<pre class="language-javascript hljs">import { Stepper } from 'react-form-stepper';
import './App.css';

function App() {
  const steps = [
    { label: 'User details' },
    { label: 'Payment' },
    { label: 'Booking confirmation' },
  ];
  const activeStep = 1;

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
    &lt;/div>
  );
}

export default App;
</pre>
<p>We’ve created a read-only, static stepper component by using the <code>steps</code> and <code>activeStep</code> props.</p>
<p>Run the app. You’ll see a stepper component with a default, Material-like styling, as shown in the following preview:</p>
<figure id="attachment_166977"   class="wp-caption aligncenter"><img             class="size-full wp-image-166977 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/read-only-static-stepper-material.png" alt="A read-only, static stepper with Material-like design" width="730" height="404"    /><noscript><img               class="size-full wp-image-166977" src="https://blog.logrocket.com/wp-content/uploads/2023/04/read-only-static-stepper-material.png" alt="A read-only, static stepper with Material-like design" width="730" height="404"  /></noscript><figcaption id="caption-attachment-166977" class="wp-caption-text">A read-only, static stepper with Material-like design</figcaption></figure>
<p>This library offers another coding style for constructing stepper components. For example, we can create the previous stepper in the following way:</p>
<pre class="language-javascript hljs">import { Stepper, Step } from 'react-form-stepper';
import './App.css';

function App() {
  const activeStep = 1;

  return (
    &lt;div>
      &lt;Stepper
        activeStep={activeStep}>
        &lt;Step label="User details"/>
        &lt;Step label="Payment"/>
        &lt;Step label="Booking confirmation"/>
      &lt;/Stepper>
    &lt;/div>
  );
}

export default App;
</pre>
<p>Here, we used <code>Stepper</code>, a Higher-Order Component (HOC), and <code>Step</code> components as children. You can use either the <code>steps</code> prop or the HOC coding style according to your preference.</p>
<h3 id="using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</h3>
<p>We can dynamically switch form components based on the active step to make the app more interactive. Use the following code in your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import React, { useState } from 'react';
import { Stepper } from 'react-form-stepper';
import './App.css';

function UserDetails() {
  return &lt;h2>User details&lt;/h2>;
}

function Payment() {
  return &lt;h2>Payment information&lt;/h2>;
}

function Confirmation() {
  return &lt;h2>Booking is confirmed&lt;/h2>;
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { label: 'User details' },
    { label: 'Payment' },
    { label: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}

export default App;
</pre>
<p>The above code implements navigation buttons to switch the active step as we implemented for the <code>react-stepper-horizontal</code> example before. The above code will work as follows:</p>
<figure id="attachment_166979"   class="wp-caption aligncenter"><img             class="size-full wp-image-166979 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/dynamic-stepper-component-react-hooks.gif" alt="Implementing a dynamic stepper component with React Hooks" width="730" height="402"  /><noscript><img               class="size-full wp-image-166979" src="https://blog.logrocket.com/wp-content/uploads/2023/04/dynamic-stepper-component-react-hooks.gif" alt="Implementing a dynamic stepper component with React Hooks" width="730" height="402"/></noscript><figcaption id="caption-attachment-166979" class="wp-caption-text">Implementing a dynamic stepper component with React Hooks</figcaption></figure>
<p>You can attach a click handler to each completed step node, and enable navigation support in the stepper component as follows:</p>
<pre class="language-javascript hljs">const steps = [
  { label: 'User details', onClick: () => setActiveStep(0) },
  { label: 'Payment', onClick: () => setActiveStep(1) },
  { label: 'Booking confirmation', onClick: () => setActiveStep(2) },
];
</pre>
<h3 id="creating-custom-styles">Creating custom styles</h3>
<p>Earlier, the library rendered a default stepper component because we didn’t apply custom styles. This library lets you customize the component appearance via props. Let’s check the supported styling props by implementing a dark-color theme.</p>
<p>First, activate a dark-color theme by using the following CSS in your <code>App.css</code>:</p>
<pre class="language-css hljs">.container {
  height: 100vh;
  background: #111;
  color: #eee;
}
</pre>
<p>Next, use the following component implementations in your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">function CustomStepper(props) {
  return (
    &lt;Stepper
      { ...props }
      connectorStateColors={true}
      connectorStyleConfig={{
        completedColor: '#ffbd13',
        activeColor: '#ffbd13',
        disabledColor: '#eee'
      }}
      styleConfig={{
        activeBgColor: '#ffd813',
        completedBgColor: '#ffbd13',
        inactiveBgColor: '#eee',
        activeTextColor: '#111',
        completedTextColor: '#222',
        inactiveTextColor: '#444'
      }}
      />
  );
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { label: 'User details' },
    { label: 'Payment' },
    { label: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div className="container">
      &lt;CustomStepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}
</pre>
<p>The above code implements a custom, dark-theme-ready stepper component via the <code>CustomStepper</code> wrapper component. Run your app and check the web browser. You’ll see a custom stepper component as follows:</p>
<figure id="attachment_166981"   class="wp-caption aligncenter"><img             class="size-full wp-image-166981 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/customized-stepper-component-dark-color-theme.gif" alt="A customized stepper component with a dark-color theme" width="730" height="402"  /><noscript><img               class="size-full wp-image-166981" src="https://blog.logrocket.com/wp-content/uploads/2023/04/customized-stepper-component-dark-color-theme.gif" alt="A customized stepper component with a dark-color theme" width="730" height="402"/></noscript><figcaption id="caption-attachment-166981" class="wp-caption-text">A customized stepper component with a dark-color theme</figcaption></figure>
<p>This library lets you customize the node connectors’ thickness, node border-radius, and node content via component props. See all supported props from the <a href="https://www.npmjs.com/package/react-form-stepper">official API documentation</a>.</p>
<h2 id="using-stepper-components-ui-kits">Using stepper components from UI kits</h2>
<p><a href="https://blog.logrocket.com/top-10-react-ui-libraries-kits/">Popular React UI kits</a> offer pre-developed, pre-styled stepper components, so you don’t need separate third-party libraries if you use a UI kit that provides a stepper component. The following React UI kits come with beautiful, fully-featured stepper components:</p>
<h3 id="mui">MUI</h3>
<figure id="attachment_166983"   class="wp-caption aligncenter"><img             class="size-full wp-image-166983 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/mui-stepper-preview.png" alt="MUI stepper preview" width="730" height="156"    /><noscript><img               class="size-full wp-image-166983" src="https://blog.logrocket.com/wp-content/uploads/2023/04/mui-stepper-preview.png" alt="MUI stepper preview" width="730" height="156"  /></noscript><figcaption id="caption-attachment-166983" class="wp-caption-text">MUI stepper preview</figcaption></figure>
<p>MUI offers the <a href="https://mui.com/material-ui/react-stepper/"><code>Stepper</code> component</a> for adding steppers to your React apps. The MUI stepper offers the following step and stepper types:</p>
<ul>
<li>Types of steps: editable, non-editable, mobile, optional</li>
<li>Types of steppers: horizontal, vertical, linear, non-linear</li>
</ul>
<p>MUI stepper comes with several sub-components and props for customization purposes. You can check the <a href="https://mui.com/material-ui/react-stepper/#api">official API documentation</a> to learn more. You can also see a live demo on CodeSandbox:</p>
<p><iframe  title="primereact_demo" src="https://codesandbox.io/embed/primereact-demo-yyc0vl?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<h3 id="prime-react">Prime React</h3>
<figure id="attachment_166988"   class="wp-caption aligncenter"><img             class="size-full wp-image-166988 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/prime-react-steps.png" alt="Prime React steps preview" width="730" height="117"    /><noscript><img               class="size-full wp-image-166988" src="https://blog.logrocket.com/wp-content/uploads/2023/04/prime-react-steps.png" alt="Prime React steps preview" width="730" height="117"  /></noscript><figcaption id="caption-attachment-166988" class="wp-caption-text">Prime React steps preview</figcaption></figure>
<p>Prime React offers the <a href="https://primereact.org/steps/"><code>Steps</code> component</a> for creating stepper components. It provides a basic stepper component and an interactive one where users can navigate among steps by clicking on each node. It also comes with various props for customization purposes.</p>
<p>You can browse API documentation from the <a href="https://primereact.org/steps/#api.Steps">official website</a> and see this component live on CodeSandbox:</p>
<p><iframe  title="primereact_demo" src="https://codesandbox.io/embed/primereact-demo-yyc0vl?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<h2 id="creating-stepper-component-from-scratch">Creating a stepper component from scratch</h2>
<p>If you need a minimal stepper, you don’t need to migrate to a large React UI kit or use a fully-featured stepper component library. Creating a shareable, minimal stepper component with React Hooks and some CSS is so easy and not so time-consuming.</p>
<p>I added this example’s source into a <a href="https://github.com/codezri/react-stepper-minimal">GitHub repository</a>, so you can clone it into your computer to get started:</p>
<pre class="language-bash hljs">git clone https://github.com/codezri/react-stepper-minimal.git
</pre>
<p>Install dependencies with the following command:</p>
<pre class="language-bash hljs">npm install 
# --- or ---
yarn install
</pre>
<p>Next, run the React app and see it on your web browser:</p>
<pre class="language-bash hljs">npm start 
# --- or ---
yarn start
</pre>
<p>Once you run the app, you’ll see the following result:</p>
<figure id="attachment_166992"   class="wp-caption aligncenter"><img             class="size-full wp-image-166992 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/stepper-component-built-from-scratch.gif" alt="A stepper component built from scratch" width="730" height="396"  /><noscript><img               class="size-full wp-image-166992" src="https://blog.logrocket.com/wp-content/uploads/2023/04/stepper-component-built-from-scratch.gif" alt="A stepper component built from scratch" width="730" height="396"/></noscript><figcaption id="caption-attachment-166992" class="wp-caption-text">A stepper component built from scratch</figcaption></figure>
<p>This minimal stepper component has the following features:</p>
<ul>
<li>Accepts <code>steps</code> as a string array and <code>activeStep</code> as an integer for rendering the stepper component based on arbitrary steps</li>
<li>Renders indices in circles based on steps and indicates completed, current, and inactive steps, with different styles accordingly</li>
<li>Renders and styles connector lines based on the current step</li>
<li>Changes the width and node positions adaptively according to the device resolution</li>
</ul>
<p>Let’s understand how it works.</p>
<p>Look at the <code>Stepper</code> component implementation below. It constructs the step elements from the <code>steps</code> prop as follows:</p>
<pre class="language-javascript hljs">steps.map((label, index) =>
  &lt;div className={getStepClasses(index)} key={index}>
    &lt;div>&lt;div className="circle">{index + 1}&lt;/div>&lt;/div>
    &lt;div className="label">{label}&lt;/div>
    { index &lt; steps.length - 1 &amp;&amp; &lt;div className="line">&lt;/div> }
  &lt;/div>
)
</pre>
<p>We used the <code>getStepClass</code> function to dynamically set a CSS class to style steps based on the active step. For example, if a particular step’s index is the active step index, we use the <code>step-active</code> CSS class:</p>
<pre class="language-javascript hljs">function getStepClasses(step) {
  let cls = 'step';
  if(activeStep === step) {
    cls += ' step-active';
  }
// ----
</pre>
<p>Each step element has a circle with the step number, label, and connector line. In <code>App.css</code>, we’ve styled these as <code>div</code>s:</p>
<pre class="language-css hljs">/* ---- */
.step-done .circle {
  background: #236ee8;
  color: #eee;
}

.step-inactive .circle {
  background: #bbb;
  color: #000;
}

.step-active .label {
  color: #000;
}
/* ---- */
</pre>
<p>This stepper component is so minimal and implements all the basic features that a generic web app needs. You can copy-paste this implementation and extend it as you wish. If your step element rendering logic grows complex, you can refactor the <code>Stepper</code> component by separating step-related code into a new component called <code>Step</code>.</p>
<h2>Conclusion</h2>
<p>In this tutorial, we discussed several available methods for creating stepper components in React apps. The <a href="https://www.npmjs.com/package/react-progress-stepper"><code>react-progress-stepper</code> package</a> lets you create animated steppers with progress bars. <a href="https://www.npmjs.com/package/react-stepper-js"><code>react-stepper-js</code></a> offers a minimal pre-developed stepper component.</p>
<p>As discussed, you can implement your own stepper for your project and publish it to the npm registry as an open-source project for other developers to use. Importing a stepper component from a popular UI kit is another productive approach.</p>
<p>Try to adhere to <a href="https://blog.logrocket.com/ux-design/">UI/UX principles</a> while adding stepper components to your apps regardless of your stepper component creation method (library, UI kit, or from scratch). For example, make sure that steppers render accordingly on different screen resolutions, use text colors that don’t blend with backgrounds, and match stepper colors with your global app theme.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166962" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166962" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166962" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/shalithasuranga/">
Shalitha Suranga <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Programmer | Author of Neutralino.js | Technical Writer</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/build-monorepo-next-js/" rel="prev">Learn how to build a monorepo in Next.js</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/ux-design/designers-guide-developer-handoffs-figma/" rel="next">A designer’s guide to developer handoffs with Figma</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/add-stepper-components-react-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Boost accessibility for high-contrast users with CSS - LogRocket Blog</title>
			<link>https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Boost accessibility for high-contrast users with CSS - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/">Boost accessibility for high-contrast users with CSS - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168174 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-accessibility tag-css" id="post-168174">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/davidomotayo/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/davidomotayo/">
David Omotayo <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and indie game enthusiast.</span>
</div>
</div>
<h1 class="posttitle">Boost accessibility for high-contrast users with CSS</h1>
<p>
<span class="post-date"><time class="post-date">
April 26, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2351</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/improving-accessibility-high-contrast-users-css-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Improving Accessibility High-Contrast Users CSS"                /> <article class="article-post">
<p>Compliance with <a href="https://www.w3.org/WAI/standards-guidelines/wcag/">Web Content Accessibility Guidelines</a> has enabled developers to better serve the needs of people with disabilities, including those who are visually impaired. However, WCAG does not fully consider how differences in visual impairment vary from one individual to the next.</p>
<p>According to the <a href="https://webaim.org/projects/lowvisionsurvey2/#at">WebAim survey</a>, approximately 30% of internet users with low vision utilize high-contrast mode to enhance legibility and minimize visual clutter when visiting websites:</p>
<p><img             class="aligncenter wp-image-168182 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/webaim-survey-results-low-vision-users.png" alt="WebAim Survey Results Low Vision Users" width="643" height="461"    /><noscript><img               class="aligncenter wp-image-168182 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/webaim-survey-results-low-vision-users.png" alt="WebAim Survey Results Low Vision Users" width="643" height="461"  /></noscript></p>
<p>Yet, despite its high use rate, high-contrast mode receives less consideration from developers compared to other web accessibility features such as dark mode, keyboard navigation, reduced motion, and screen reader compatibility. So, why hasn’t high-contrast mode become more widely accepted among developers?</p>
<p>Its low adoption rate may be partly due to an assumption that implementing accessibility features for high-contrast users requires significant changes to a website’s style, leading to additional work. However, this assumption is not always accurate. By following some key practices, developers can avoid negatively impacting user experience for high-contrast users.</p>
<p>In this article, we will introduce essential practices for improving accessibility and enhancing UX for high-contrast users with CSS. We’ll also explore how to diagnose website accessibility issues.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-is-windows-high-contrast-mode">What is Windows high-contrast mode?</a></li>
<li><a href="#high-contrast-mode-best-practices">High-contrast mode best practices</a>
<ul >
<li><a href="#using-semantic-html">Using semantic HTML</a></li>
<li><a href="#leverging-transparent-value">Leveraging the <code>transparent</code> value</a></li>
<li><a href="#handling-scrollbar-styling">Handling scrollbar styling</a></li>
<li><a href="#using-forced-colors-css-media-query">Using the <code>forced-colors</code> CSS media query</a></li>
<li><a href="#using-forced-adjust-colors-css-property">Using the <code>forced-adjust-colors</code> CSS property</a>
<ul >
<li><a href="#browser-compatibility">Browser compatibility</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#diagnosing-website-accessibility-issues">Diagnosing website accessibility issues</a></li>
</ul>
<h2 id="what-is-windows-high-contrast-mode">What is Windows high-contrast mode?</h2>
<p>There are two ways to implement high-contrast mode in a website: manual implementation and <a href="https://support.microsoft.com/en-us/windows/turn-high-contrast-mode-on-or-off-in-windows-909e9d89-a0f9-a3a9-b993-7a6dcee85025">Windows high-contrast mode</a>.</p>
<p>Manual implementation requires keeping the feature in mind and building it into the website from the start. This approach requires more effort and attention to detail. Using Windows high-contrast mode is a more straightforward process that involves leveraging the feature in the Windows operating system to override any styles set by the website and applying its custom color scheme.</p>
<p>Contrast mode is an accessibility feature in the Windows OS that is designed to make it easier for visually impaired users to see the screen. When turned on, contrast mode changes the look of websites and Windows applications by replacing the colors, backgrounds, and brightness of elements on the screen to provide a higher level of contrast. Contrast mode also reduces a website’s visual noise by removing certain elements. This feature makes it easier for visually impaired users to differentiate between elements and read text.</p>
<p>Using Windows high-contrast mode is the simplest way to implement high-contrast mode on your website, as many users with photosensitivity likely already have the feature enabled in their Windows OS. However, developers need to be aware of how the feature will affect the appearance of a website and make necessary changes to ensure that the site remains accessible and usable for all users.</p>
<p>You can activate Windows high-contrast mode on your computer by going to Settings, clicking <strong>Accessibility</strong>, and then selecting <strong>Contrast themes</strong>. You will then be able to choose from four available themes. In the example below, we selected the <strong>Night sky</strong> theme:</p>
<p><img             class="aligncenter wp-image-168183 size-large jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/activating-windows-high-contrast-mode.png?w=720" alt="Activating Windows High-Contrast Mode" width="720" height="381"    /><noscript><img               class="aligncenter wp-image-168183 size-large" src="http://blog.logrocket.com/wp-content/uploads/2023/04/activating-windows-high-contrast-mode.png?w=720" alt="Activating Windows High-Contrast Mode" width="720" height="381"  /></noscript></p>
<p>Once activated, Windows high-contrast mode not only changes the contrast of the operating system, it also affects everything displayed on the screen, including browsers and websites. So it’s very important to ensure your website is compatible with this mode.</p>
<p>Here’s an example of how the LogRocket Blog homepage appears with high-contrast mode turned on:</p>
<p><img             class="aligncenter wp-image-168184 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/logrocket-homepage-high-contrast-mode.png" alt="LogRocket Homepage High-Contrast Mode" width="720" height="345"    /><noscript><img               class="aligncenter wp-image-168184 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/logrocket-homepage-high-contrast-mode.png" alt="LogRocket Homepage High-Contrast Mode" width="720" height="345"  /></noscript></p>
<p>And here’s how it looks with high-contrast mode turned off:</p>
<p><img             class="aligncenter wp-image-168185 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/logrocket-homepage-high-contrast-mode-off.png" alt="LogRocket Homepage High-Contrast Mode Off" width="720" height="345"    /><noscript><img               class="aligncenter wp-image-168185 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/logrocket-homepage-high-contrast-mode-off.png" alt="LogRocket Homepage High-Contrast Mode Off" width="720" height="345"  /></noscript></p>
<p>It’s evident that the LogRocket Blog’s webpage design follows the high-contrast approach. The only variations between both modes are the background of the “START MONITORING FOR FREE” button at the top, right of the page and the bookmark icons on the article cards. These differences exist because the browser automatically selects values for some properties, such as background color and SVG stroke, from the system colors set for high-contrast mode and applies them to the page elements, overriding the normal style cascading process.</p>
<p>Here’s a list of properties with values that are forced in high-contrast mode:</p>
<ul>
<li><code>color</code></li>
<li><code>Background-color</code></li>
<li><code>Background-image</code></li>
<li><code>text-decoration-color</code></li>
<li><code>text-emphasis-color</code></li>
<li><code>border-color</code></li>
<li><code>outline-color</code></li>
<li><code>column-rule-color</code></li>
<li><code>-webkit-tap-highlight-color</code></li>
<li>SVG <code>fill</code> attribute</li>
<li>SVG <code>stroke</code> attribute</li>
</ul>
<p>So, in our example, the <code>background-color</code> value for the button element on the page is forcibly set to <code>none</code>, and the stroke attribute of the bookmark icon is removed due to the high-contrast mode enforcement. Some CSS properties are compatible with high-contrast mode by default but may exhibit unexpected behavior. We will discuss these properties in further detail later in this article.</p>
<h2 id="high-contrast-mode-best-practices">High-contrast mode best practices</h2>
<p>When high-contrast mode is activated, the browser prioritizes legibility over aesthetics. This is why most of the properties for beautifying a webpage, such as <code>background-color</code> and <code>color</code>, are forced to adopt the system color scheme.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Let’s take a look at fallback options to fix elements with unexpected behaviors in high-contrast mode.</p>
<h3 id="using-semantic-html">Using semantic HTML</h3>
<p>The significance of HTML semantics in web accessibility cannot be overstated. It is as important in forced mode as it is for screen readers. This is because the browser selects system colors for elements based on the semantics of the elements, rather than their appearance on the webpage or any added ARIA roles.</p>
<p><em><strong>N.B.,</strong> contrast mode is also known as forced mode; we’ll use this term for the remainder of this article</em></p>
<p>In the past, developers would “trick” screen readers by camouflaging <code>div</code> elements with ARIA roles. However, this approach is not feasible in forced mode since Windows doesn’t determine an element’s style based on its role on the webpage.</p>
<p>In the below example there are three elements: a <code>div</code> with a button role, a semantic <code>button</code> element, and an anchor tag with identical styles applied:</p>
<pre class="language-html hljs">//html
&lt;div>
      &lt;button class="btn">
        button
      &lt;/button>
      &lt;div role="button" class="btn" tabindex="0">
        div
      &lt;/div>
      &lt;a href="#" class="btn">
        link
      &lt;/a>
&lt;/div>
</pre>
<pre class="language-css hljs">//css
.btn{
    padding: 0.5em 1em;
    border: 2px solid purple;
    background-color: purple;
    border-radius: 0.5em;
    font-size: 1.5rem;
    text-decoration: none;
    color: white;
    margin-right: 15px;
}
</pre>
<p>Here’s how the elements appear in default mode:</p>
<p><img             class="aligncenter wp-image-168186 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/elements-default-mode.png" alt="Elements Default Mode" width="557" height="373"    /><noscript><img               class="aligncenter wp-image-168186 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/elements-default-mode.png" alt="Elements Default Mode" width="557" height="373"  /></noscript></p>
<p>And here’s how they appear in forced mode:</p>
<p><img             class="aligncenter wp-image-168187 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/elements-forced-mode.png" alt="Elements Forced Mode" width="583" height="384"    /><noscript><img               class="aligncenter wp-image-168187 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/elements-forced-mode.png" alt="Elements Forced Mode" width="583" height="384"  /></noscript></p>
<p>As you can see, each element has the same color in default mode, but this isn’t the case in forced mode. This highlights the importance of always using semantic HTML to prevent compromising or confusing the user’s experience.</p>
<h3 id="leverging-transparent-value">Leveraging the <code>transparent</code> value</h3>
<p>In some instances, an element’s border, outline, or <code>text-decoration</code> may clash with your design system, and you may need to set the value of the conflicting property to <code>none</code>. This approach could work in default mode but can significantly impede the user experience in forced mode.</p>
<p>Since forced mode overrides the background color of every element on the webpage, users may find it challenging to distinguish between components, such as buttons and links, and regular text on the page.</p>
<p>To better understand, let’s look at this example of a button element with <code>border</code> value set to <code>none</code>:</p>
<pre class="language-html hljs">//html
&lt;button class="btn">
   Button
&lt;/button>
</pre>
<pre class="language-css hljs">//css
.btn{
    padding: 0.5em 1em;
    border: none;
    background-color: purple;
    border-radius: 0.5em;
    font-size: 1.5rem;
    color: white;
}
</pre>
<p><img             class="aligncenter wp-image-168194 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/button-default-mode.png" alt="Button Default Mode" width="397" height="234"    /><noscript><img               class="aligncenter wp-image-168194 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/button-default-mode.png" alt="Button Default Mode" width="397" height="234"  /></noscript></p>
<p>As you can see, the <code>button</code> looks good in the default mode. However, in forced mode, the background color, which provides depth to the element, is overwritten. As a result, the <code>button</code> could easily be mistaken for normal text:</p>
<p><img             class="aligncenter wp-image-168188 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/button-default-mode-looks-like-text.png" alt="Button Forced Mode Looks Like Text" width="481" height="286"    /><noscript><img               class="aligncenter wp-image-168188 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/button-default-mode-looks-like-text.png" alt="Button Forced Mode Looks Like Text" width="481" height="286"  /></noscript></p>
<p>The same issue applies to anchor tags and the CSS <code>text-decoration</code> property. When the <code>text-decoration</code> property is set to <code>none</code>, it becomes difficult for users to distinguish between anchor tags and regular text in forced mode:</p>
<pre class="language-html hljs">//html
 &lt;a href="#" class="link"> 
    Home 
 &lt;/a>
 &lt;a href="#" class="link">
    About
 &lt;/a>
 &lt;a href="#" class="link">
    Contact
 &lt;/a>
</pre>
<pre class="language-css hljs">//css
.link{
    color: purple;
    font-size: 1.5rem;
    text-decoration: none;
}
</pre>
<p><img             class="aligncenter wp-image-168197 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/anchor-tags-forced-mode-look-like-text.png" alt="Anchor Tags Forced Mode Look Like Text" width="588" height="392"    /><noscript><img               class="aligncenter wp-image-168197 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/anchor-tags-forced-mode-look-like-text.png" alt="Anchor Tags Forced Mode Look Like Text" width="588" height="392"  /></noscript></p>
<p>We can address this issue by setting the anchor tag’s <code>text-decoration-color</code> property and the button’s <code>border</code> property to a value of <code>transparent</code>:</p>
<pre class="language-css hljs">/*css*/
.link{
    color: purple;
    font-size: 1.5rem;
    text-decoration: transparent;
}

.btn{
    padding: 0.5em 1em;
    border: 2px solid transparent;
    background-color: purple;
    border-radius: 0.5em;
    font-size: 1.5rem;
    color: white;
}
</pre>
<p><img             class="aligncenter wp-image-168198 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/anchor-tags-forced-mode-transparent-border.png" alt="Anchor Tags Forced Mode Transparent Border" width="550" height="328"    /><noscript><img               class="aligncenter wp-image-168198 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/anchor-tags-forced-mode-transparent-border.png" alt="Anchor Tags Forced Mode Transparent Border" width="550" height="328"  /></noscript></p>
<p><img             class="aligncenter wp-image-168200 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/button-forced-mode-transparent-border.png" alt="Button Forced Mode Transparent Border" width="577" height="358"    /><noscript><img               class="aligncenter wp-image-168200 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/button-forced-mode-transparent-border.png" alt="Button Forced Mode Transparent Border" width="577" height="358"  /></noscript></p>
<p>Forced mode overwrites styling, but when it detects a <code>border</code> or <code>outline</code> property with a <code>transparent</code> value, it adds a visible <code>border</code> to the element. This makes transparency visible in forced mode.</p>
<p>You can employ the same approach to the <code>outline</code> property to produce highlights for an element’s focus state:</p>
<pre class="language-css hljs">.btn:hover{
    outline: 2px solid transparent;
}
</pre>
<p><img             class="aligncenter wp-image-168201 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/button-forced-mode-transparent-outline.gif" alt="Button Forced Mode Transparent Outline" width="501" height="322"  /><noscript><img               class="aligncenter wp-image-168201 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/button-forced-mode-transparent-outline.gif" alt="Button Forced Mode Transparent Outline" width="501" height="322"/></noscript></p>
<h3 id="handling-scrollbar-styling">Handling scrollbar styling</h3>
<p>Scrollbars are not usually a cause for concern with regard to forced mode, because they are rarely styled. In fact, it’s worth noting that styling a webpage’s scrollbar is not recommended if accessibility is a top priority. Even if you take steps to mitigate the issue, the end result may be suboptimal. If you decide to style your website’s scrollbar, despite this warning, there are a few important points you should at least keep in mind.</p>
<p>Styling a scrollbar typically involves adding a background color and possibly a box shadow. Unfortunately, these properties can cause the scrollbar to become invisible when viewed in forced, or high-contrast, mode.</p>
<p>To address this issue, you could use the <code>border</code> property with a <code>transparent</code> value as demonstrated previously. However, this may create another problem — the scrollbar thumb will have a hollow appearance which can confuse users. As a result, it’s important to carefully consider the implications of styling the scrollbar before making any changes.</p>
<p>The below GIF illustrates how challenging it can be to keep track of the scrollbar thumb:</p>
<p><img             class="aligncenter wp-image-168202 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/scrollbar-styling-forced-mode.gif" alt="Scrollbar Styling Forced Mode" width="720" height="515"  /><noscript><img               class="aligncenter wp-image-168202 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/scrollbar-styling-forced-mode.gif" alt="Scrollbar Styling Forced Mode" width="720" height="515"/></noscript></p>
<p>One solution is to increase the width of the track, which can create an illusion of depth on the thumb. However, this approach can negatively impact the aesthetics of the webpage in default mode. For this reason, it’s generally recommended to avoid styling the scrollbar altogether if accessibility is a top priority.</p>
<p>It’s also worth noting that the limitations of scrollbar customization vary between browsers. While Chromium-based browsers may have more flexibility, recent updates to Firefox have restricted the ways in which scrollbars can be customized.</p>
<p>In Firefox, we can only manipulate the width and color of the scrollbar using the <code>scrollbar-color</code> and <code>scrollbar-width</code> properties. Furthermore, even if the scrollbar is highly customized in default mode, Firefox will automatically adjust it to match the system color in forced mode, which is an important consideration for accessibility.</p>
<h3 id="using-forced-colors-css-media-query">Using the <code>forced-colors</code> CSS media query</h3>
<p><code>forced-colors</code> is a CSS media query feature that is used to detect if the browser is in forced mode. It has two possible values: <code>active</code> and <code>none</code>. When <code>active</code> is used, the styles within the media query are only applied when the browser is in forced mode. Conversely, when the <code>none</code> value is used, the styles within the media query are only applied when the browser is not in forced mode.</p>
<p>Developers can use this media feature to apply high-contrast friendly styles for forced mode, as shown in this example:</p>
<pre class="language-css hljs">.button {
    border: 0;
    padding: 10px;
    box-shadow: -2px -2px 5px gray, 2px 2px 5px gray;
}

@media (forced-colors: active) {
    .button {
        /* Use a border instead, since box-shadow is forced to 'none' in forced-colors mode */
        border: 2px transparent solid;
    }
}
</pre>
<p>The code above checks for forced mode in the browser and applies a media query to add <code>transparent</code> borders to the <code>button</code> element on the page.</p>
<h3 id="using-forced-adjust-colors-css-property">Using the <code>forced-adjust-colors</code> CSS property</h3>
<p><code>forced-adjust-colors</code> is a CSS property that is used to prevent forced mode from overwriting the colors of an element or the entire webpage via the body selector. This property has two possible values:</p>
<ul>
<li><code>auto</code>: The default value; sets the color of the element or webpage to the color scheme specified by the operating system or browser</li>
<li><code>none</code>: Allows the browser to disregard the color scheme of the system and instead use the style cascade</li>
</ul>
<p>The <code>forced-adjust-colors</code> property is often used with the <code>forced-colors</code> media query, like so:</p>
<pre class="language-css hljs">@media screen and (forced-colors: active) {
   .btn {
        Forced-color-adjust: none;
    }
}
</pre>
<p>The <code>forced-adjust-colors</code> CSS property can also be applied to individual elements to achieve the same effect on that specific element:</p>
<pre class="language-css hljs"> .btn {
        ...
      Forced-color-adjust: none;
  }
</pre>
<p>This will force the browser to use the colors defined by the element’s style cascade, overriding the system colors set by the browser or OS:</p>
<p><img             class="aligncenter wp-image-168203 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/css-forced-adjust-colors-elements.png" alt="CSS Forced-Adjust-Colors Elements" width="617" height="327"    /><noscript><img               class="aligncenter wp-image-168203 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/css-forced-adjust-colors-elements.png" alt="CSS Forced-Adjust-Colors Elements" width="617" height="327"  /></noscript></p>
<p>The <code>forced-adjust-colors</code> property might appear to be a solution for enhancing the visual appearance of a website in forced mode, but its use should be limited to making essential adjustments that improve the contrast and readability of the site’s content. It is not intended for creating designs that could potentially undermine the accessibility of the site.</p>
<h4 id="browser-compatibility">Browser compatibility</h4>
<p>The <code>forced-adjust-colors</code> CSS property is a recently introduced property and currently has limited support on modern browsers. This feature is only available on Chrome 89+ and Edge 79+ browsers, so it’s important to check the browser compatibility before using it in your code:</p>
<p><img             class="aligncenter wp-image-168204 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/browser-compatibility-css-forced-adjust-colors.png" alt="Browser Compatibility CSS Forced-Adjust-Colors" width="491" height="255"    /><noscript><img               class="aligncenter wp-image-168204 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/browser-compatibility-css-forced-adjust-colors.png" alt="Browser Compatibility CSS Forced-Adjust-Colors" width="491" height="255"  /></noscript></p>
<h2 id="diagnosing-website-accessibility-issues">Diagnosing website accessibility issues</h2>
<p>Diagnosing a website for accessibility issues can be a challenging task, particularly for high-contrast mode, which requires frequent switching between default and forced mode. Fortunately, the browser’s developer toolset offers a range of tools to help test website accessibility.</p>
<p>One such tool is the <a href="https://developer.chrome.com/docs/devtools/rendering/">Rendering tool</a> — a component of Chrome DevTools that allows developers to debug and diagnose problems with the rendering of webpages. The Rendering tool provides a range of features for inspecting and modifying the visual layout of webpages, including the ability to view and edit the box model, examine and modify the CSS styles applied to elements, and diagnose issues with rendering performance.</p>
<p>To use the Rendering tool, open DevTools in your Chrome browser using <strong>Ctrl+Shift+I</strong> for a PC or <strong>Command+Shift+I</strong> for a Mac. Next, navigate to the <strong>Console</strong> drawer located below the DevTool pane and click the <strong>Rendering</strong> tab:</p>
<p><img             class="aligncenter wp-image-168207 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/chrome-devtools-rendering-tool.png" alt="Chrome DevTools Rendering Tool" width="555" height="774"    /><noscript><img               class="aligncenter wp-image-168207 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/chrome-devtools-rendering-tool.png" alt="Chrome DevTools Rendering Tool" width="555" height="774"  /></noscript></p>
<p>Here you can emulate various accessibility features directly within the browser:</p>
<p><img             class="aligncenter wp-image-168208 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/emulate-accessibility-features-browser-chrome-devtools.gif" alt="Emulate Accessibility Features Browser Chrome DevTools" width="720" height="351"  /><noscript><img               class="aligncenter wp-image-168208 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/emulate-accessibility-features-browser-chrome-devtools.gif" alt="Emulate Accessibility Features Browser Chrome DevTools" width="720" height="351"/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>There’s still a long way to go in terms of making the web accessible for everyone. In the meantime, it’s important that we all do our part by considering the needs of all users when designing or developing websites.</p>
<p>By implementing a high-contrast mode in your website, you can help ensure that users of all abilities have an enjoyable and productive experience when they visit and interact with your site.</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168174" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168174" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168174" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/davidomotayo/">
David Omotayo <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and indie game enthusiast.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/accessibility/">#accessibility</a></li> <li><a href="https://blog.logrocket.com/tag/css/">#css</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/what-is-the-spotify-model-agile/" rel="prev">What is the Spotify model in agile?</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/ux-design/creating-headless-design-system-figma/" rel="next">Creating a headless design system using Figma</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/boost-accessibility-high-contrast-users-css/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Build a React Native app with Solito - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-react-native-app-solito/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-react-native-app-solito/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Build a React Native app with Solito - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-react-native-app-solito/">Build a React Native app with Solito - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-164566 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react-native" id="post-164566">
 <div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/vijitail/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/01/vijit.profile-picture.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/01/vijit.profile-picture.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/vijitail/">
Vijit Ail <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software Engineer at toothsi. I work with React and NodeJS to build customer-centric products. Reach out to me on <a href="https://www.linkedin.com/in/vijit-ail-376885179">LinkedIn</a> or <a href="https://www.instagram.com/vijit__ail">Instagram</a>.</span>
</div>
</div>
<h1 class="posttitle">Build a React Native app with Solito</h1>
<p>
<span class="post-date"><time class="post-date">
April 6, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1840</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/build-react-native-app-solito-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build React Native App Solito"                /> <article class="article-post">
<p>Navigation is one of the biggest challenges when sharing code across platforms, particularly between web and mobile. The web relies on URLs to represent the navigation state, whereas mobile apps often use a combination of nested navigation patterns, such as stacks, tabs, modals, and drawers. This difference in navigation patterns can make it difficult to share code across platforms, as developers need to find a way to reconcile these different approaches.</p>
<p><a href="https://solito.dev">Solito</a> is a library that combines these different approaches into a shared API that developers can use to create a more seamless experience for both web and mobile.</p>
<p>In this guide, we’ll investigate Solito’s features and benefits. We’ll also build a Next.js app and a React Native app with Solito and demonstrate how easily the library enables the navigation code to be shared between web and native apps.</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#getting-started-with-solito">Getting started with Solito</a></li>
<li><a href="#setting-up-project">Setting up the project</a>
<ul >
<li><a href="#installing-solito">Installing Solito</a></li>
<li><a href="#creating-api-functions">Creating the API functions</a></li>
<li><a href="#creating-home-screen">Creating a home screen</a></li>
<li><a href="#creating-detail-screen">Creating a detail screen</a></li>
</ul>
</li>
<li><a href="#adding-screens-web">Adding screens for web</a></li>
<li><a href="#adding-screens-native">Adding screens for native</a></li>
</ul>
<p>&amp;nbsp;</p>
<h2 id="getting-started-with-solito">Getting started with Solito</h2>
<p>Solito is a tiny wrapper around React Navigation and Next.js, enabling developers to share navigation code across platforms. Solito helps developers to ensure that the navigation experience is consistent across different platforms. By having a single, unified approach to navigation, developers can simplify their codebase, reduce the amount of duplicated code, and ultimately build better cross-platform apps.</p>
<p>Solito is also built to run in isolation between platforms, using React Navigation on Native and Next.js Router on Web. This approach allows each platform to do what it does best and eliminates the need to import code that is not being used.</p>
<p>Solito takes into account the differences between Web and Native navigation patterns. Web navigation is flat, with one screen mounted at a time, while native navigation patterns are more complex and involve stacked, tabbed, and modal screens that can preserve local state and scroll position.</p>
<p>Solito uses URLs as the source of truth for triggering page changes. It enables developers to create different header, footer, and sidebar UIs for their website and native app, depending on the platform. This allows developers to match their users’ expectations based on the platform they are using rather than trying to make the user experience the same on every platform.</p>
<p>Solito does not get in the way of how developers implement their screens and allows developers to have complete control over their navigation patterns, making it a flexible solution for building cross-platform apps.</p>
<h2 id="setting-up-project">Setting up the project</h2>
<p>In this guide, we’ll build a simple news app using Solito and the <a href="https://www.spaceflightnewsapi.net">Spaceflight News API</a>.</p>
<p>The monorepo includes the following packages:</p>
<ul>
<li><a href="https://solito.dev/">Solito</a> for cross-platform navigation</li>
<li><a href="https://moti.fyi/">Moti</a> for animations</li>
<li><a href="https://www.dripsy.xyz/">Dripsy</a> for theming/design (you can bring your own, too)</li>
<li><a href="https://expo.dev/">Expo SDK 46</a></li>
<li><a href="https://nextjs.org/">Next.js 12</a></li>
<li><a href="https://reactnavigation.org/">React Navigation 6</a></li>
</ul>
<p>The folder structure is opinionated and includes the following:</p>
<ul>
<li><code>apps</code> folder for entry points for each app
<ul>
<li>expo</li>
<li>next</li>
</ul>
</li>
<li><code>packages</code> folder for shared packages across apps
<ul>
<li><code>app</code> folder containing most files for import</li>
<li><code>features</code> folder for organizing code by feature instead of using a <code>screens</code> folder</li>
<li><code>provider</code> folder containing providers that wrap the app and some no-ops for Web</li>
<li><code>navigation</code> folder for navigation-related code for React Native</li>
</ul>
</li>
</ul>
<p>Other folders can also be included inside the <code>packages</code> folder if required.</p>
<h3 id="installing-solito">Installing Solito</h3>
<p>Run the following command to create a starter monorepo setup with all the configs pre-configured:</p>
<pre class="language-bash hljs">npx <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cfacbdaaaebbaae2bca0a3a6bba0e2aebfbf8fa3aebbaabcbb">[email protected]</a> news-app
</pre>
<h3 id="creating-api-functions">Creating the API functions</h3>
<p>Next, let’s create the required API functions to get the data from the <a href="https://www.spaceflightnewsapi.net/">Spaceflight News API</a>:</p>
<pre class="language-typescript hljs">// packages/app/api/news.ts

import { News } from "app/types/news";

const API_URL = `https://api.spaceflightnewsapi.net/v3/articles`

export const getLatestNews = async (): Promise&lt;News[]> => {

    const req = new Request(`${API_URL}`);

    const res = await fetch(req);
    const data = await res.json();

    return data || [];

}

export const getNews = async (id: number): Promise&lt;News> => {

    const req = new Request(`${API_URL}/${id}`);

    const res = await fetch(req);
    const data = await res.json();

    return data || [];

}
</pre>
<p>Following is the type definition for a single <code>News</code> object:</p>
<pre class="language-typescript hljs">// packages/app/types/news.ts

export interface News {
    id: number;

    title: string;

    summary: string;

    newsSite: string;

    imageUrl: string;

    url: string;
}
</pre>
<p>By creating shared UI components inside the <code>packages/</code> directory, Solito allows us to write our UI code once and use it in both our React Native app and our Next.js website. This is possible because of the monorepo structure, which enables us to share code across apps by organizing it into shared packages.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h3 id="creating-home-screen">Creating a home screen</h3>
<p>Next, we’ll create a home screen that will display a list of news items using the <code>&lt;FlatList /></code> component:</p>
<pre class="language-typescript hljs">// packages/app/features/home/screen.tsx

import { getLatestNews } from 'app/api/news'
import { News } from 'app/types/news'
import { Text, useSx, View, H1, P, Row, A, FlatList, H2, Image } from 'dripsy'
import { useEffect, useState } from 'react'
import { ListRenderItem, Platform } from 'react-native'
import { TextLink } from 'solito/link'

export function HomeScreen() {
  const sx = useSx()

  const [latestNews, setLatestNews] = useState&lt;News[]>([])

  useEffect(() => {
    getLatestNews().then((data) => {
      setLatestNews(data)
    })
  }, [])

  const renderItem: ListRenderItem&lt;News> = ({ item }) => (
    &lt;View sx={{ paddingHorizontal: 16, marginBottom: 20 }}>
      &lt;View
        sx={{
          padding: 16,
          borderWidth: 1,
          borderColor: '#ddd',
          borderRadius: 8,
        }}
      >
        {item.imageUrl &amp;&amp; (
          &lt;View sx={{ minHeight: 300, marginBottom: 16 }}>
            &lt;Image
              source={{ uri: item.imageUrl }}
              height={400}
              width={800}
              resizeMode={'cover'}
              alt={item.title}
              sx={{ flex: 1, borderRadius: 8 }}
            />
          &lt;/View>
        )}
        &lt;TextLink href={`latest-news/${item.id}`}>
          &lt;H2 sx={{ color: '#444', fontSize: 18 }}>{item.title}&lt;/H2>
        &lt;/TextLink>
      &lt;/View>
    &lt;/View>
  )

  return (
    &lt;View>
      {Platform.OS === 'web' &amp;&amp; (
        &lt;View sx={{ paddingHorizontal: 16 }}>
          &lt;H1 sx={{ marginBottom: 10 }}>Latest News&lt;/H1>
        &lt;/View>
      )}
      &lt;FlatList
        sx={{ marginTop: 16 }}
        data={latestNews}
        renderItem={renderItem}
        keyExtractor={(item: News) => item.id}
      />
    &lt;/View>
  )
}
</pre>
<p>The <code>HomeScreen</code> component, which is located inside the <code>packages/app/screens</code> file, is an example of a shared UI component that can be used by both a native app and a website. This approach helps to reduce code duplication and makes it easier to maintain a project over time.</p>
<p>In the above code, the <code>&lt;TextLink /></code> component imported from Solito is a drop-in replacement for the Next.js <code>&lt;Link /></code> component.</p>
<h3 id="creating-detail-screen">Creating a detail screen</h3>
<p>Next, we’ll create a screen for displaying additional details about the new article:</p>
<pre class="language-typescript hljs">// packages/app/features/latest-news/detail-screen.tsx

import { getNews } from 'app/api/news'
import { News } from 'app/types/news'
import { View, Text, Image, H1, P, Pressable } from 'dripsy'
import { useEffect, useState } from 'react'
import { createParam } from 'solito'
import { Link, TextLink } from 'solito/link'

const { useParam } = createParam&lt;{ id: string }>()

export function NewsDetailScreen() {
  const [id] = useParam('id')

  const [data, setData] = useState&lt;News>()

  useEffect(() => {
    if (id) getNews(Number(id)).then((news) => setData(news))
  }, [id])

  if (!data) return &lt;>&lt;/>

  return (
    &lt;View sx={{ flex: 1, padding: 16 }}>
      &lt;View
        sx={{
          borderWidth: 1,
          borderColor: '#ddd',
          borderRadius: 8,
          padding: 16,
        }}
      >
        {data.imageUrl &amp;&amp; (
          &lt;View sx={{ minHeight: 300, marginBottom: 10 }}>
            &lt;Image
              source={{ uri: data.imageUrl }}
              height={400}
              width={800}
              resizeMode={'cover'}
              alt={data.title}
              sx={{ flex: 1, borderRadius: 8 }}
            />
          &lt;/View>
        )}

        &lt;H1 sx={{ color: '#444', fontSize: 22, marginBottom: 10 }}>
          {data.title}
        &lt;/H1>
        &lt;P>{data.summary}&lt;/P>
        &lt;P> - by {data.newsSite}&lt;/P>
      &lt;/View>
      &lt;View sx={{ marginTop: 10 }}>
        &lt;Link href="/">
          &lt;Pressable
            sx={{
              backgroundColor: '#000',
              padding: 10,
              width: 100,
              borderRadius: '8px',
              alignItems: 'center',
              justifyContent: 'center',
            }}
          >
            &lt;Text sx={{ color: '#fff' }}>Go Home&lt;/Text>
          &lt;/Pressable>
        &lt;/Link>
      &lt;/View>
    &lt;/View>
  )
}
</pre>
<p>Similar to the <code>&lt;TextLink /></code> component, Solito’s <code>&lt;Link /></code> component (shown in the above code) is a drop-in replacement for the Next.js <code>&lt;Link /></code> component.</p>
<p>Solito’s <code>useParam</code> hook is a utility that can be used to read screen parameters on both Next.js and React Native platforms. This hook can read query parameters as well as dynamic route parameters. For example, a Next.js dynamic route might have a structure like <code>/latest-news/[id].tsx</code>, and <code>useParam('id')</code> could be used to access its value.</p>
<p>On the native side, the <code>useParam</code> hook can read React Navigation params for the corresponding screen. Additionally, it allows us to update the parameter, using query parameters on both web and React state for iOS/Android.</p>
<h2 id="adding-screens-web">Adding screens for web</h2>
<p>To add a screen as a Next.js page in Solito, we simply create <code>.tsx</code> file inside the <code>apps/next/pages</code> directory and import the shared screen component we need from the <code>packages/app/features</code> directory:</p>
<pre class="language-typescript hljs">// apps/next/pages/index.tsx

import { HomeScreen } from 'app/features/home/screen'

export default HomeScreen


// apps/next/pages/latest-news/[id].tsx

import { NewsDetailScreen } from 'app/features/latest-news/detail-screen'

export default NewsDetailScreen
</pre>
<p>Now we can open our terminal and use the following command to run the Next.js app in a development environment:</p>
<pre class="language-bash hljs">> npm run web
</pre>
<p>Here’s the resulting webpage:</p>
<p><img             class="aligncenter wp-image-164568 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/next-js-webpage-built-solito.png" alt="Next.js Webpage Built Solito" width="720" height="884"    /><noscript><img               class="aligncenter wp-image-164568 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/next-js-webpage-built-solito.png" alt="Next.js Webpage Built Solito" width="720" height="884"  /></noscript></p>
<h2 id="adding-screens-native">Adding screens for native</h2>
<p>Now that the app is up and running on the web, let’s set up the screens for the native platform.</p>
<p>Open <code>packages/app/navigation/native/index.tsx</code> file and add the screens in the navigation stack using the <code>&lt;Stack.Screen /></code> component. The <code>name</code> prop is especially important, since it will be used by Solito to map the URL with the screen name:</p>
<pre class="language-typescript hljs">// packages/app/navigation/native/index.tsx

import { createNativeStackNavigator } from '@react-navigation/native-stack'

import { HomeScreen } from '../../features/home/screen'
import { NewsDetailScreen } from '../../features/latest-news/detail-screen'

const Stack = createNativeStackNavigator&lt;{
  home: undefined
  'user-detail': {
    id: string
  }
}>()

export function NativeNavigation() {
  return (
    &lt;Stack.Navigator
      screenOptions={{
        headerStyle: {
          backgroundColor: '#000',
        },
        headerTitleStyle: {
          color: '#fff',
        },
      }}
    >
      &lt;Stack.Screen
        name="home"
        component={HomeScreen}
        options={{
          title: 'Latest News',
        }}
      />
      &lt;Stack.Screen
        name="user-detail"
        component={NewsDetailScreen}
        options={{
          title: 'News',
        }}
      />
    &lt;/Stack.Navigator>
  )
}
</pre>
<p>React Navigation’s linking feature enables us to map a URL to a native screen:</p>
<pre class="language-typescript hljs">// packages/app/provider/navigation/index.tsx

import { DefaultTheme, NavigationContainer } from '@react-navigation/native'
import * as Linking from 'expo-linking'
import { useMemo } from 'react'

export function NavigationProvider({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    &lt;NavigationContainer
      theme={{
        ...DefaultTheme,
        colors: {
          ...DefaultTheme.colors,
          background: '#fff',
        },
      }}
      linking={useMemo(
        () => ({
          prefixes: [Linking.createURL('/')],
          config: {
            initialRouteName: 'home',
            screens: {
              home: '',
              'news-detail': 'news/:id',
            },
          },
        }),
        []
      )}
    >
      {children}
    &lt;/NavigationContainer>
  )
}
</pre>
<p>The <code>linking.config.screens</code> property maps the screen name to the URL:</p>
<pre class="language-typescript hljs">screens: {
  home: '',
  'news-detail': 'news/:id',
}
</pre>
<p>At this point, the native setup is complete.</p>
<p>We can start the Expo server by running the following command:</p>
<pre class="language-bash hljs">> npm run native
</pre>
<p>Here’s the resulting page:</p>
<p><img             class="aligncenter wp-image-164570 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/react-native-screen-built-solito.png" alt="React Native Screen Built Solito" width="720" height="1558"    /><noscript><img               class="aligncenter wp-image-164570 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/react-native-screen-built-solito.png" alt="React Native Screen Built Solito" width="720" height="1558"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>Solito is a must-have tool for any developer building cross-platform apps with Next.js and React Native. It offers a unified API for navigation, with all the features of Next.js <code>useRouter</code> and <code>Link</code>, plus additional utilities like <code>useParam</code>. With Solito, you can easily transition your React Native app into a Next.js site and vice versa without sacrificing the native navigation experience.</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-164566" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-react-native-app-solito/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-react-native-app-solito/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-164566" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-react-native-app-solito/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-164566" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-react-native-app-solito/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/01/vijit.profile-picture.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/01/vijit.profile-picture.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/vijitail/">
Vijit Ail <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software Engineer at toothsi. I work with React and NodeJS to build customer-centric products. Reach out to me on <a href="https://www.linkedin.com/in/vijit-ail-376885179">LinkedIn</a> or <a href="https://www.instagram.com/vijit__ail">Instagram</a>.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react-native/">#react native</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/compare-tabby-visual-studio-code/" rel="prev">How Tabby compares with the VS Code terminal</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/cause-and-effect-analysis-fishbone-ishikawa-diagram/" rel="next">Cause and effect analysis with a fishbone (Ishikawa) diagram</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-react-native-app-solito/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Build a SwiftUI customizable segmented control - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-swiftui-segmented-customizable-control/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-swiftui-segmented-customizable-control/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Build a SwiftUI customizable segmented control - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-swiftui-segmented-customizable-control/">Build a SwiftUI customizable segmented control - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166634 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-swift" id="post-166634">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/alejandroulatefallas/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/alejandro-ulate-fallas.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/alejandro-ulate-fallas.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/alejandroulatefallas/">
Alejandro Ulate Fallas <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Alejandro is a loving dad and husband. He enjoys sports, building apps, and writing about life and work.</span>
</div>
</div>
<h1 class="posttitle">Build a SwiftUI customizable segmented control</h1>
<p>
<span class="post-date"><time class="post-date">
April 14, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2491</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/build-customizable-segmented-control-swiftui-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build Customizable Segmented Control SwiftUI"                /> <article class="article-post">
<p>During 2022, <a href="https://www.statista.com/statistics/268251/number-of-apps-in-the-itunes-app-store-since-2008/">there were more than 4.5M apps and games in the App Store</a>. The sheer volume of options makes it important for apps to provide a fresh, novel experience or find other ways of standing out.</p>
<p>Creating a unique interface can help make an app more attractive and go a long way toward increasing its user acquisition and retention. Customizing the default look and feel of the controls or creating unique tabs or a switch for dark/light themes can help make an application more appealing.</p>
<p>In this tutorial, we’ll explore how to create a customizable segmented control in SwiftUI. First, we’ll explore this scenario by discussing how to use the <a href="https://developer.apple.com/documentation/swiftui/picker">SwiftUI Picker</a> with a segmented style. Then, we’ll explore its limitations. Finally, we’ll build our own picker that allows for easy customization and usage.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="#using-swiftui-picker">Using SwiftUI’s Picker</a>
<ul >
<li><a href="#building-simple-picker">Building a simple Picker</a></li>
<li><a href="#building-complex-picker">Building a complex Picker</a></li>
<li><a href="#building-segmented-picker">Building a segmented Picker</a></li>
</ul>
</li>
<li><a href="#understanding-swiftui-picker-limitations">Understanding the SwiftUI Picker’s limitations</a>
<ul >
<li><a href="#limitations-display">Limitations with display</a></li>
<li><a href="#limitations-styling">Limitations with styling</a></li>
</ul>
</li>
<li><a href="#creating-customizable-picker">Creating a customizable picker</a>
<ul >
<li><a href="#implementing-default-background">Implementing a default background</a></li>
<li><a href="#supporting-corner-radius-borders">Supporting corner radius and borders</a></li>
<li><a href="#adding-indicator-views">Adding indicator Views</a></li>
</ul>
</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow along with this guide, you should have the following:</p>
<ul>
<li>Working knowledge of iOS development and Swift</li>
<li>Experience creating user interfaces using SwiftUI</li>
</ul>
<h2 id="getting-started">Getting started</h2>
<p>To follow along with this SwiftUI Picker showcase project, see the <a href="https://github.com/CodingAleCR/dayswithoutincidents/tree/v3.0.0%2B11">open source code on GitHub</a>. If you feel like jumping straight into a specific section, you can check out the different Git branches. There’s a specific branch for each section of this article.</p>
<p>Here’s a quick rundown of some important files you should be aware of:</p>
<ul>
<li>Domain: Defines business logic objects, in this case, <code>enum</code> structures; you won’t need to change anything in this directory</li>
<li>Extensions: Contains a couple of handy extensions for this article; you won’t need to change anything in this directory</li>
<li>UI: Stores all reusable components in the project. In this case, it contains PickerPlus, the customizable picker that we’ll build in the tutorial</li>
<li><code>PickerLimitations.swift</code>, <code>StyledPicker.swift</code>, <code>DefaultPickerExamples.swift</code>: SwiftUI Views that will help visualize the theory explained in this article</li>
</ul>
<h2 id="using-swiftui-picker">Using the SwiftUI Picker</h2>
<p>Before we start creating custom component Views, let’s take a closer look at how the SwiftUI default Picker works. This will help us better understand how to build Views that support multiple configurations.</p>
<p>The SwiftUI Picker is a control for selecting from a set of mutually exclusive values. Let’s look at a few Picker examples: simple, complex, and segmented.</p>
<h3 id="building-simple-picker">Building a simple Picker</h3>
<p>This View also has an extensive selection of initializers for us to choose from. The <code>init(_:selection:content:)</code> initializer is a good choice for a simple Picker. We can use this when we want the user to be able to select from a list of options.</p>
<p>Let’s say we have a list of vehicle options (e.g., bicycle, car, plane, or rocket) and we want the user to choose their preference. Open the <code>DefaultPickerExamples.swift</code> file and paste the following code into line 19 to create a new Picker using the <code>init(_:selection:content:)</code> initializer:</p>
<pre class="language-swift hljs">//swift
Text("SwiftUI Picker: Simple")
Picker("Types of Vehicles", selection: $selectedItem) {
ForEach(Vehicles.allCases) { vehicle in
Text(vehicle.rawValue.capitalized)
   }
}
.padding()
</pre>
<p>Here’s a preview of the code, using Xcode’s preview canvas for SwiftUI:</p>
<p><img             class="aligncenter wp-image-166639 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-simple-picker.png" alt="SwiftUI Simple Picker" width="379" height="781"    /><noscript><img               class="aligncenter wp-image-166639 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-simple-picker.png" alt="SwiftUI Simple Picker" width="379" height="781"  /></noscript></p>
<p>This is a quite simple way to display a dropdown. We could also choose a different approach to support more complex scenarios. Let’s take a look at another example.</p>
<h3 id="building-complex-picker">Building a complex Picker</h3>
<p>Suppose we own some of the vehicles and want to display them in the Picker in such a way that the user can select a list of the type of vehicle from which they’d like to choose.</p>
<p>Copy the following code and paste it into line 27:</p>
<pre class="language-swift hljs">//swift
Text("SwiftUI Picker: Complex")
Picker("Owned Vehicles", sources: $ownedVehicles, selection: \.vehicle) {
ForEach(Vehicles.allCases) { vehicle in
Text(vehicle.rawValue.capitalized)
   }
}
.padding() 
</pre>
<p>Now, if we take a look at the preview, we should see something like this:</p>
<p><img             class="aligncenter wp-image-166641 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-complex-picker.png" alt="SwiftUI Complex Picker" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166641 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-complex-picker.png" alt="SwiftUI Complex Picker" width="390" height="780"  /></noscript></p>
<h3 id="building-segmented-picker">Building a segmented Picker</h3>
<p>We can use the pickerStyle to specify the way the Picker is displayed (<code>menu</code>, <code>wheel</code>, <code>segmented</code>, etc.). For this example, we’ll choose <code>segmented</code>. Go ahead and add this code to the <code>DefaultPickerExamples</code> at line 35:</p>
<pre class="language-swift hljs">//swift
Text("SwiftUI Picker: Segmented")
Picker("Types of Vehicles - Segmented", selection: $selectedItem) {
ForEach(Vehicles.allCases) { vehicle in
Text(vehicle.rawValue.capitalized)
   }
}
.pickerStyle(.segmented)
.padding()
</pre>
<p>The preview canvas should display something like this:</p>
<p><img             class="aligncenter wp-image-166643 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-segmented-picker.png" alt="SwiftUI Segmented Picker" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166643 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-segmented-picker.png" alt="SwiftUI Segmented Picker" width="390" height="780"  /></noscript></p>
<p>This <code>ViewModifier</code> allows us to set a style depending on the context around the control. For this article, we’re going to focus on the <code>.segmented</code> style and explore its limitations.</p>
<h2 id="understanding-swiftui-picker-limitations">Understanding the SwiftUI Picker’s limitations</h2>
<p>Using the SwiftUI default Picker with a <code>.segmented</code> style can be a convenient option, but there are a couple of limitations to be aware of. The default Picker can’t display more than one line of text or display vertical items. Also, styling the default Picker is not SwiftUI friendly.</p>
<h3 id="limitations-display">Limitations with display</h3>
<p>The <code>UISegmentedControl</code> is the base of any Picker with <code>.segmented</code> style, so it is also restricted by it. For example, if we try to set customized items that contain different heights, the default Picker will fail to display them properly.</p>
<p>To see how the default Picker handles vertical items, open the <code>PickerLimitations.swift</code> file and paste the following code replacing the to-do in line 15:</p>
<pre class="language-swift hljs">//swift
Text("SwiftUI Picker: Vertical Items")
Picker("Types of Vehicles", selection: $selectedItem) {
ForEach(Vehicles.allCases) { vehicle in
       VStack {
Text(vehicle.rawValue.capitalized)
           vehicle.indicatorImage
               .resizable()
               .frame(width: 24, height: 24)
               .scaledToFit()
       }
   }
}
.pickerStyle(.segmented)
.padding()
//            TODO: Uncomment the following line after applying custom styles to `Picker`
//            StyledPicker()
</pre>
<p>Now, take a look at the preview, it should look like this:</p>
<p><img             class="aligncenter wp-image-166648 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-segmentedcontrol-limitations-vertical-items.png" alt="SwiftUI SegmentedControl Vertical Items" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166648 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-segmentedcontrol-limitations-vertical-items.png" alt="SwiftUI SegmentedControl Vertical Items" width="390" height="780"  /></noscript></p>
<p>By default, <code>UISegmentedControl</code> defines the height of the View. Another issue is that the Picker aligns both the <code>Text</code> and the <code>Image</code> as options. As a result, the View does not behave as expected when selecting each <code>Text</code> or <code>Image</code> contained within.</p>
<h3 id="limitations-styling">Limitations with styling</h3>
<p>Another issue with the SwiftUI default Picker is that styling options are very limited. We can try to add <code>ViewModifier</code>s to the Picker, but they will have little to no effect on the View. The most reliable way to style a Picker is to use <code>UIAppearance</code> to style the default Picker. It can be difficult to understand the code necessary for modifying a Picker since you may end up combining both <code>UIAppearance</code> and <code>ViewModifier</code>s in your app.</p>
<p>Open the <code>StyledPicker.swift</code> file and take a look at the preview; you should see the following:</p>
<p><img             class="aligncenter wp-image-166645 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-segmentedcontrol-limitations-styling.png" alt="SwiftUI SegmentedControl Limitations Styling" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166645 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-segmentedcontrol-limitations-styling.png" alt="SwiftUI SegmentedControl Limitations Styling" width="390" height="780"  /></noscript></p>
<p>Despite configuring an <code>accentColor</code> in the Picker, the preview shows no visual evidence of any color. This is because the default Picker does not use many of the SwiftUI inbuilt color systems.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>To change the styling of the Picker, we’ll have to override the appearance of the <code>UISegmentedControl</code>. We can add an initializer to <code>StyledPicker</code> like the following:</p>
<pre class="language-swift hljs">//swift
init() {
// Sets the background color of the Picker
   UISegmentedControl.appearance().backgroundColor = .red.withAlphaComponent(0.15)
// Disappears the divider
   UISegmentedControl.appearance().setDividerImage(UIImage(), forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default)
// Changes the color for the selected item
   UISegmentedControl.appearance().selectedSegmentTintColor = .red
// Changes the text color for the selected item
   UISegmentedControl.appearance().setTitleTextAttributes([.foregroundColor: UIColor.white], for: .selected)
}
</pre>
<p>Here’s a preview showing the new styling of the Picker:</p>
<p><img             class="aligncenter wp-image-166650 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-picker-new-styling.png" alt="SwiftUI Picker New Styling" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166650 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-picker-new-styling.png" alt="SwiftUI Picker New Styling" width="390" height="780"  /></noscript></p>
<p>This is not exactly the most intuitive approach since we’re building a Picker with SwiftUI. The added code is common in apps that use the UIKit instead of SwiftUI, making the syntax a bit confusing.</p>
<p>Also, there are also limitations as to what we can customize. The control also has its own shade on top of the background, making its appearance inaccurate. This results in a darker background color.</p>
<p>Now open the <code>PickerLimitations.swift</code> file again and uncomment line 32. You should see something like this:</p>
<p><img             class="aligncenter wp-image-166652 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-picker-updates-styling-vertical-items.png" alt="SwiftUI Updates Styling Vertical Items" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166652 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/swiftui-picker-updates-styling-vertical-items.png" alt="SwiftUI Updates Styling Vertical Items" width="390" height="780"  /></noscript></p>
<p>Overriding the appearance of the <code>UISegmentedControl</code> will override the on-screen appearance of all Pickers — not just one. This is not ideal since the style is not customized to the View to which we’re applying it. Behaviors like this are error-prone and can restrict our ability to scale our code. It also can lead to a bad developer experience.</p>
<h2 id="creating-customizable-picker">Creating a customizable picker</h2>
<p>Now that we have a clear idea of the SwiftUI Picker’s issues and limitations, let’s address some of these by creating our own customizable picker — we’ll call it PickerPlus.</p>
<p>Let’s get right on it!</p>
<p>Open the <code>PickerPlus.swift</code> file and replace the to-do in line 4 with the following code:</p>
<pre class="language-swift hljs">//swift
public let sources: [Data]
public let selection: Data?
private let itemBuilder: (Data) -> Content
// TODO: Add default background
// TODO: Add borders and corner radius.
// TODO: Add support for custom indicators
public init(
_ sources: [Data],
selection: Data?,
   @ViewBuilder itemBuilder: @escaping (Data) -> Content
) {
   self.sources = sources
   self.selection = selection
   self.itemBuilder = itemBuilder
}
</pre>
<p>Similar to the <a href="https://developer.apple.com/documentation/swiftui/picker#creating-a-picker">initializers from the default Picker</a>, we have three different properties for <code>PickerPlus</code>:</p>
<ul>
<li><code>sources</code>: An array of the data that PickerPlus will iterate over</li>
<li><code>selection</code>: A nullable item that should belong to <code>sources</code>; it helps determine what the currently selected index is when styling and positioning the indicator</li>
<li><code>itemBuilder</code>: A function for building each item’s corresponding View inside <code>PickerPlus</code>; it can support different configurations</li>
</ul>
<p>Now replace the to-do in line 29 with the following:</p>
<pre class="language-swift hljs">//swift
HStack(spacing: 0) {
    ForEach(sources, id: \.self) { item in
        itemBuilder(item)
    }
}
</pre>
<p>Here, we’re building the Views needed to display the options available in the picker. It does this by iterating <code>sources</code> and making use of <code>itemBuilder</code>.</p>
<p>Let’s add a visual example to <code>PickerPlus</code> to see it in action. Replace the to-do in line 50 with the following:</p>
<pre class="language-swift hljs">//swift
Text("Using an enum")
PickerPlus(
               Vehicles.allCases,
selection: selectedItem
           ) { item in
Text(item.rawValue.capitalized)
                   .font(Font.footnote.weight(.medium))
                   .foregroundColor(selectedItem == item ? .white : nil)
                   .padding(.vertical, 8)
                   .padding(.horizontal, 8)
                   .frame(maxWidth: .infinity)
                   .multilineTextAlignment(.center)
                   .onTapGesture {
withAnimation(.easeInOut(duration: 0.150)) {
                           selectedItem = item
                       }
                   }
           }
           .accentColor(.green)
           .padding()
</pre>
<p>Below is a preview of <code>PickerPlus</code>. The user can select any item and see the preview change with it:</p>
<p><img             class="aligncenter wp-image-166654 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-user-selection.gif" alt="iOS Customizable Picker User Selection" width="390" height="777"  /><noscript><img               class="aligncenter wp-image-166654 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-user-selection.gif" alt="iOS Customizable Picker User Selection" width="390" height="777"/></noscript></p>
<h3 id="implementing-default-background">Implementing a default background</h3>
<p>The text used for each option in the above <code>PickerPlus</code> preview has some styling to it, but the selected option is not visible. Let’s fix this by adding a background.</p>
<p>Replace the to-do in line 8 with this code:</p>
<pre class="language-swift hljs">//swift
@State private var backgroundColor: Color = Color.black.opacity(0.05)
func pickerBackgroundColor(_ color: Color) -> PickerPlus {
var view = self
   view._backgroundColor = State(initialValue: color)
return view
}
</pre>
<p>Now, jump to line 40 and change it to the following:</p>
<pre class="language-swift hljs">//swift
.background(
RoundedRectangle(cornerRadius: 6.0)
       .fill(backgroundColor)
)
</pre>
<p>Now if you look back at the preview, you should see the following:</p>
<p><img             class="aligncenter wp-image-166658 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-default-background.png" alt="iOS Customizable Picker Default Background" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166658 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-default-background.png" alt="iOS Customizable Picker Default Background" width="390" height="780"  /></noscript></p>
<h3 id="supporting-corner-radius-borders">Supporting corner radius and borders</h3>
<p>Next, let’s add some corner radius and support borders to the custom picker view; this will enable more styles for our <code>PickerPlus</code>.</p>
<p>Start by replacing the to-do in line 16 with the following code:</p>
<pre class="language-swift hljs">//swift
@State private var cornerRadius: CGFloat?
func cornerRadius(_ cornerRadius: CGFloat) -> PickerPlus {
var view = self
   view._cornerRadius = State(initialValue: cornerRadius)
return view
}
@State private var borderColor: Color?
func borderColor(_ borderColor: Color) -> PickerPlus {
var view = self
   view._borderColor = State(initialValue: borderColor)
return view
}
@State private var borderWidth: CGFloat?
func borderWidth(_ borderWidth: CGFloat) -> PickerPlus {
var view = self
   view._borderWidth = State(initialValue: borderWidth)
return view
}
</pre>
<p>This will enable new modifying functions for our <code>PickerPlus</code>. Now we need to change the <code>RoundedRectangle</code> to support borders and corner radius options when drawing a background.</p>
<p>Change <code>.background</code> in line 62 to the following:</p>
<pre class="language-swift hljs">//swift
.background(
RoundedRectangle(cornerRadius: cornerRadius ?? 6.0)
       .fill(
           backgroundColor,
strokeBorder: borderColor ?? Color.clear,
lineWidth: borderWidth ?? .zero
       )
)

</pre>
<p>With this code, we’re enabling <code>PickerPlus</code> to support custom border colors, border width, and corner radius. We’re also specifying a default <code>cornerRadius</code> of 6pt which is similar to the default provided by the SwiftUI Picker.</p>
<p>Now look at the preview and you should see the default <code>cornerRadius</code> applied to the background. Play around with the preview and add borders and a custom background to it. Here’s a preview showing how it might look:</p>
<p><img             class="aligncenter wp-image-166660 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-corner-radius-custom-background.png" alt="iOS Customizable Picker Corner Radius Custom Background" width="390" height="780"    /><noscript><img               class="aligncenter wp-image-166660 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-corner-radius-custom-background.png" alt="iOS Customizable Picker Corner Radius Custom Background" width="390" height="780"  /></noscript></p>
<h3 id="adding-indicator-views">Adding indicator Views</h3>
<p>So far, our <code>PickerPlus</code> is looking nice, but there’s an important part missing: the selection indicator. This View should meet the following requirements if we want it to improve on the default settings available from the SwiftUI Picker:</p>
<ul>
<li>Animate the position when the selection changes</li>
<li>Check for and apply the accent color</li>
<li>Support custom implementations</li>
</ul>
<p>To support these requirements, let’s update the to-do in line 40 with the following code:</p>
<pre class="language-swift hljs">//swift
private var customIndicator: AnyView? = nil
public init(
_ sources: [Data],
selection: Data?,
indicatorBuilder: @escaping () -> some View,
   @ViewBuilder itemBuilder: @escaping (Data) -> Content
) {
   self.sources = sources
   self.selection = selection
   self.itemBuilder = itemBuilder
   self.customIndicator = AnyView(indicatorBuilder())
}
</pre>
<p>Here, we added an <code>indicator</code> — this will allow us to support custom indicators. In fact, the custom initializer enables support for that. It wraps <code>indicatorBuilder</code> with <code>AnyView</code> and allows us to build anything we want as an indicator.</p>
<p>Now, let’s change the to-do in line 66 with the following code:</p>
<pre class="language-swift hljs">//swift
if let selection = selection, let selectedIdx = sources.firstIndex(of: selection) {
if let customIndicator = customIndicator {
       customIndicator
   } else {
       GeometryReader { geo in
RoundedRectangle(cornerRadius: cornerRadius ?? 6.0)
               .foregroundColor(.accentColor)
               .padding(EdgeInsets(top: borderWidth ?? 2, leading: borderWidth ?? 2, bottom: borderWidth ?? 2, trailing: borderWidth ?? 2))
               .frame(width: geo.size.width / CGFloat(sources.count))
               .shadow(color: .black.opacity(0.1), radius: 2, x: 1, y: 1)
               .animation(.spring().speed(1.5))
               .offset(x: geo.size.width / CGFloat(sources.count) * CGFloat(selectedIdx), y: 0)
       }.frame(height: 32)
   }
}
</pre>
<p>With this code we:</p>
<ol>
<li>Check if <code>selection</code> is set and confirm it belongs to an item in <code>sources</code>. This way we’re only rendering the indicator when it’s needed, which is the default criteria in the Picker too</li>
<li>Determine if <code>PickerPlus</code> should render the <code>customIndicator</code> or the default implementation</li>
<li>Add a default implementation that has an animation for its position and also checks for the current <code>.accentColor</code></li>
</ol>
<p>Finally, let’s add an example that showcases the usage of <code>indicatorBuilder</code> to build a custom indicator. Change the code in the <code>&lt;body></code> of <code>PreviewPickerPlus</code> with the following:</p>
<pre class="language-swift hljs">//swift
VStack {
Text("Custom Picker: Vintage Style")
PickerPlus(
       Vehicles.allCases,
selection: selectedItem
   ) { item in
Text(item.rawValue.capitalized)
           .font(Font.footnote.weight(.medium))
           .foregroundColor(selectedItem == item ? .white : nil)
           .padding(.vertical, 8)
           .padding(.horizontal, 8)
           .frame(maxWidth: .infinity)
           .multilineTextAlignment(.center)
           .onTapGesture {
withAnimation(.easeInOut(duration: 0.150)) {
                   selectedItem = item
               }
           }
   }
   .pickerBackgroundColor(.blue.opacity(0.15))
   .cornerRadius(0)
   .borderWidth(1)
   .borderColor(.blue)
   .accentColor(.blue)
   .padding()
Text("Custom Picker: Vertical Items")
PickerPlus(
       Vehicles.allCases,
selection: selectedItem,
indicatorBuilder: {
           GeometryReader { geo in
Rectangle()
                   .foregroundColor(.white)
                   .cornerRadius(6.0)
                   .padding(1)
                   .frame(width: geo.size.width / CGFloat(Vehicles.allCases.count))
                   .shadow(color: .black.opacity(0.1), radius: 2, x: 1, y: 1)
                   .animation(.spring().speed(1.5))
                   .offset(x: geo.size.width / CGFloat(Vehicles.allCases.count) * CGFloat(Vehicles.allCases.firstIndex(of: selectedItem!)!), y: 0)
           }.frame(height: 64)
       }
   ) { item in
VerticalItem(
item: item,
isSelected: selectedItem == item
       )
       .padding(.vertical, 8)
       .onTapGesture {
withAnimation(.easeInOut(duration: 0.150)) {
               selectedItem = item
           }
       }
   }
   .padding()
}
</pre>
<p>Here’s the preview, showing the indicator View:</p>
<p><img             class="aligncenter wp-image-166662 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-selection-indicator.gif" alt="iOS Customizable Picker Selection Indicator" width="390" height="780"  /><noscript><img               class="aligncenter wp-image-166662 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-customizable-picker-selection-indicator.gif" alt="iOS Customizable Picker Selection Indicator" width="390" height="780"/></noscript></p>
<h2 id="conclusion">And, that’s a wrap!</h2>
<p>I hope you’ve enjoyed this tutorial and have a better understanding of how to use SwiftUI to build a customizable segmented control for your iOS apps. If you have any questions or comments, please feel free to leave them in the comments section below.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166634" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-swiftui-segmented-customizable-control/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-swiftui-segmented-customizable-control/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166634" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-swiftui-segmented-customizable-control/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166634" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-swiftui-segmented-customizable-control/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/alejandro-ulate-fallas.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/alejandro-ulate-fallas.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/alejandroulatefallas/">
Alejandro Ulate Fallas <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Alejandro is a loving dad and husband. He enjoys sports, building apps, and writing about life and work.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/swift/">#swift</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/" rel="prev">Create customizable and shareable calendars in React Native</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/what-is-project-governance-effectively-oversee-projects/" rel="next">What is project governance? How to effectively oversee projects</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-swiftui-segmented-customizable-control/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Build a real-time chat app with Rust and React - LogRocket Blog</title>
			<link>https://blog.logrocket.com/real-time-chat-app-rust-react/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/real-time-chat-app-rust-react/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Build a real-time chat app with Rust and React - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/real-time-chat-app-rust-react/">Build a real-time chat app with Rust and React - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-150928 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react tag-rust" id="post-150928">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ahmadrosid/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ahmad-rosid.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ahmad-rosid.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ahmadrosid/">
Ahmad Rosid <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software Developer based in Indonesia. Loves solving problems with technology and sharing it with the world.</span>
</div>
</div>
<h1 class="posttitle">Build a real-time chat app with Rust and React</h1>
<p>
<span class="post-date"><time class="post-date">
April 26, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">25 min read</span>
<span class="wordcount">7274</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/12/real-time-chat-app-rust-react-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Rust and React Logos"                /> <article class="article-post">
<p><em><strong>Editor’s Note:</strong> This post was reviewed for accuracy on 26 April 2023. Since publication, <a href="https://blog.rust-lang.org/2023/04/20/Rust-1.69.0.html">Rust recently released v1.69</a>, which contains increased capabilities when using <code>cargo</code> and even more stabilized APIs. You can <a href="https://blog.logrocket.com/tag/rust/">read more about Rust in our archive</a> and <a href="https://www.rust-lang.org/learn">in the official docs</a>.</em></p>
<p>If you’re looking to build a real-time chat app that is both fast and reliable, consider using Rust and React. Rust is known for its speed and reliability, while <a href="https://survey.stackoverflow.co/2022/#most-popular-technologies-webframe-prof">React is one of the most popular frontend frameworks</a> for building user interfaces.</p>
<p>In this article, we’ll demonstrate how to build a real-time chat app with Rust and React that offers functionality for chat, checking user status, and indicating when a user is typing. We’ll use WebSockets to enable the two-way client-server communication.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#introduction-to-real-time-chat-applications">Introduction to real-time chat applications</a></li>
<li><a href="#introduction-to-websockets">Introduction to WebSockets</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="#designing-the-real-time-chat-app-architecture">Designing the real-time chat app architecture</a></li>
<li><a href="#building-the-websocket-server-in-rust">Building the WebSocket server in Rust</a>
<ul >
<li><a href="#creating-the-routes">Creating the routes</a></li>
<li><a href="#handling-the-user-session">Handling the user session</a></li>
</ul>
</li>
<li><a href="#preparing-the-database-with-sqlite">Preparing the database with SQLite</a>
<ul >
<li><a href="#generating-the-schema">Generating the schema</a></li>
<li><a href="#creating-the-structs">Creating the structs</a></li>
<li><a href="#setting-up-the-queries">Setting up the queries</a>
<ul >
<li><a href="#finding-users-by-phone-number">Finding users by phone number</a></li>
<li><a href="#adding-a-new-user">Adding a new user</a></li>
<li><a href="#finding-chat-rooms-and-participants">Finding chat rooms and participants</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#building-the-client-ui-with-react">Building the client UI with React</a>
<ul >
<li><a href="#avatar-component">avatar component</a></li>
<li><a href="#login-component">login component</a></li>
<li><a href="#room-component">room component</a></li>
<li><a href="#conversation-component">conversation component</a></li>
<li><a href="#usewebsocket-hook">useWebsocket Hook</a></li>
<li><a href="#uselocalstorage-hook">useLocalStorage Hook</a></li>
<li><a href="#useconversation-hook">useConversation Hook</a></li>
</ul>
</li>
<li><a href="#building-the-chat-application">Building the chat application</a></li>
</ul>
<h2 id="introduction-to-real-time-chat-applications">Introduction to real-time chat applications</h2>
<p>Real-time chat applications allow users to communicate with each other in real time through text, voice, or video. This type of app allows for more immediate messaging than other types of communication such as email or IM.</p>
<p>There are several reasons why chat applications must work in real time:</p>
<ul>
<li><strong>Improved performance</strong>: More immediate communication allows for more natural conversation</li>
<li><strong>Greater responsiveness</strong>: Real-time functionality results in improved user experience</li>
<li><strong>Superior reliability</strong>: With real-time functionality there‘s less opportunity for messages to be lost or delayed</li>
</ul>
<h2 id="introduction-to-websockets">Introduction to WebSockets</h2>
<p>WebSockets enables two-way communication between the client and server in real-time chat applications. Using Rust to build the WebSocket server will enable the server to handle a large number of connections without slowing down. This is due to Rust’s speed and reliability.</p>
<p>Now that we have a better understanding of WebSockets, let’s get started building our real-time chat application!</p>
<h2 id="getting-started">Getting started</h2>
<p>First, let’s review some prerequisites:</p>
<ul>
<li><strong>Rust</strong>: Ensure you have Rust installed on your computer. If you don’t have it, use the following command to install it:
<pre class="language-javascript hljs">curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
// if you are in windows see more installation method here
https://forge.rust-lang.org/infra/other-installation-methods.html</pre>
</li>
<li><strong>React</strong>: Ensure that your environment is ready for React development; use one of the below commands to install React if you don’t already have it:
<pre class="language-javascript hljs">// on mac
brew install node
// on linux
nvm install v14.10.0
// on windows you can download nodejs installer here
https://nodejs.org/en/download/</pre>
</li>
</ul>
<p>Next, run the following commands to verify that everything is installed and working properly:</p>
<pre class="language-javascript hljs">rustc --version
cargo --version
node --version
npm --version
</pre>
<h2 id="designing-the-real-time-chat-app-architecture">Designing the real-time chat app architecture</h2>
<p>Let’s create some design architecture for our real-time chat application. We’ll build a simple server; our application’s architecture will cover the following features:</p>
<ul>
<li><strong>Chat</strong>: between two users via direct messaging</li>
<li><strong>Typing indicator</strong>: notifies the recipient when a user starts typing a chat to them</li>
<li><strong>User status</strong>: indicates whether the user is online or offline</li>
</ul>
<figure id="attachment_150938"   class="wp-caption aligncenter"><img             class="wp-image-150938 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/chat-app-architecture.png" alt="Real-Time Chat App Architecture" width="730" height="413"    /><noscript><img               class="wp-image-150938 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/chat-app-architecture.png" alt="Real-Time Chat App Architecture" width="730" height="413"  /></noscript><figcaption id="caption-attachment-150938" class="wp-caption-text">Real-time chat application system architecture.</figcaption></figure>
<p>This architecture is very simple and easy to follow. It consists of just a few components:</p>
<ul>
<li><strong>WebSocket server</strong>: This is the most important component of our application; it handles all the communication between clients and rooms</li>
<li><strong>Room manager</strong>: This component is responsible for managing all the rooms in our application. It will create, update, and delete rooms. This component will be on the HTTP server</li>
<li><strong>User manager</strong>: This component is responsible for managing all the users in our application. It will create, update, and delete users. This component will be on the HTTP server as well</li>
<li><strong>Message manager</strong>: This component is responsible for managing all the messages in our application. It will create, update, and delete messages. This component one will be on the WebSocket server and the HTTP server. It will be used to store incoming messages from WebSockets and retrieve all messages already in the database when the user opens the chat room via the Rest API</li>
</ul>
<h2 id="building-the-websocket-server-in-rust">Building the WebSocket server in Rust</h2>
<p>There are many packages we can use to write a WebSocket server in Rust. For this tutorial, we’ll use <a href="https://actix.rs">Actix Web</a>; it is a mature package and is easy to use.</p>
<p>To start, create a Rust project using the following command:</p>
<pre class="language-javascript hljs">cargo new rust-react-chat
</pre>
<p>Next, add this package to the <code>Cargo.toml</code> file:</p>
<pre class="language-javascript hljs">[package]
name = "rust-react-chat"
version = "0.1.0"
edition = "2021"

[dependencies]
actix = "0.13.0"
actix-files = "0.6.2"
actix-web = "4.2.1"
actix-web-actors = "4.1.0"
rand = "0.8.5"
serde = "1.0.147"
serde_json = "1.0.88"
</pre>
<p>Now, install <code>diesel_cli</code>; we’ll use this as our ORM:</p>
<pre class="language-javascript hljs">cargo install diesel_cli --no-default-features --features sqlite
</pre>
<p>Here’s how the structure of the project should look:</p>
<pre class="language-javascript hljs">.
├── Cargo.lock
├── Cargo.toml
├── README.md
├── chat.db
├── .env
└── src
    ├── db.rs
    ├── main.rs
    ├── models.rs
    ├── routes.rs
    ├── schema.rs
    ├── server.rs
    └── session.rs
└── static
└── ui
</pre>
<p>Now, here’s a bit of information about the folders:</p>
<ul>
<li><code>src</code>: This folder contains all of our Rust code</li>
<li><code>static</code>: This folder contains all of our static assets, HTML files, JavaScript files, and images</li>
<li><code>ui</code>: This folder contains our React code; we’ll compile it later to the <code>static</code> file and export it to the <code>static</code> folder</li>
</ul>
<p>Next, let’s write the entry point for our WebSocket server:</p>
<pre class="language-javascript hljs">// src/main.rs
#[macro_use]
extern crate diesel;
use actix::*;
use actix_cors::Cors;
use actix_files::Files;
use actix_web::{web, http, App, HttpServer};
use diesel::{
    prelude::*,
    r2d2::{self, ConnectionManager},
};
mod db;
mod models;
mod routes;
mod schema;
mod server;
mod session;
#[actix_web::main]
async fn main() -> std::io::Result&lt;()> {
    let server = server::ChatServer::new().start();
    let conn_spec = "chat.db";
    let manager = ConnectionManager::&lt;SqliteConnection>::new(conn_spec);
    let pool = r2d2::Pool::builder().build(manager).expect("Failed to create pool.");
    let server_addr = "127.0.0.1";
    let server_port = 8080;
    let app = HttpServer::new(move || {
        let cors = Cors::default()
            .allowed_origin("http://localhost:3000")
            .allowed_origin("http://localhost:8080")
            .allowed_methods(vec!["GET", "POST"])
            .allowed_headers(vec![http::header::AUTHORIZATION, http::header::ACCEPT])
            .allowed_header(http::header::CONTENT_TYPE)
            .max_age(3600);
        App::new()
            .app_data(web::Data::new(server.clone()))
            .app_data(web::Data::new(pool.clone()))
            .wrap(cors)
            .service(web::resource("/").to(routes::index))
            .route("/ws", web::get().to(routes::chat_server))
            .service(routes::create_user)
            .service(routes::get_user_by_id)
            .service(routes::get_user_by_phone)
            .service(routes::get_conversation_by_id)
            .service(routes::get_rooms)
            .service(Files::new("/", "./static"))
    })
    .workers(2)
    .bind((server_addr, server_port))?
    .run();
    println!("Server running at http://{server_addr}:{server_port}/");
    app.await
}
</pre>
<p>Here’s some information about the packages we’re using:</p>
<ul>
<li><code>actix_cors</code>: Will be used to debug the UI; we’ll accept POST and GET requests from <code>localhost:3000</code> or <code>localhost:8080</code></li>
<li><code>actix_web</code>: For all HTTP-related features in the Actix Web package</li>
<li><code>actix_files</code>: For embedding static files to one of our routes</li>
<li><code>diesel</code>: Will be used to query the data from our SQLite database. If you prefer, you can change this to Postgres or MySQL</li>
<li><code>serde_json</code>: Will be used to parse the JSON data that we’ll send to the React app</li>
</ul>
<h3 id="creating-the-routes">Creating the routes</h3>
<p>Now let’s make routes for our server. Since we will use a REST HTTP and WebSocket server, we can easily put everything in one file.</p>
<p>First, add all the packages we’ll need:</p>
<pre class="language-javascript hljs">// src/routes.rs
use std::time::Instant;
use actix::*;
use actix_files::NamedFile;
use actix_web::{get, post, web, Error, HttpRequest, HttpResponse, Responder};
use actix_web_actors::ws;
use diesel::{
    prelude::*,
    r2d2::{self, ConnectionManager},
};
use serde_json::json;
use uuid::Uuid;
use crate::db;
use crate::models;
use crate::server;
use crate::session;
type DbPool = r2d2::Pool&lt;ConnectionManager&lt;SqliteConnection>>;
</pre>
<p>Then, add a route for embedding the home page to the root URL:</p>
<pre class="language-javascript hljs">// src/routes.rs
pub async fn index() -> impl Responder {
    NamedFile::open_async("./static/index.html").await.unwrap()
}
</pre>
<p>This is the entry point for our WebSocket server. Right now it’s on <code>/ws</code> routes, but you can change it to whatever route name you like. Since we already registered all the dependencies we need in the <code>main.rs</code> file, we can just pass the dependency to the function parameter, like so:</p>
<pre class="language-javascript hljs">// src/routes.rs
pub async fn chat_server(
    req: HttpRequest,
    stream: web::Payload,
    pool: web::Data&lt;DbPool>,
    srv: web::Data&lt;Addr&lt;server::ChatServer>>,
) -> Result&lt;HttpResponse, Error> {
    ws::start(
        session::WsChatSession {
            id: 0,
            hb: Instant::now(),
            room: "main".to_string(),
            name: None,
            addr: srv.get_ref().clone(),
            db_pool: pool,
        },
        &amp;req,
        stream
    )
}
</pre>
<p>Next, we need to add a REST API to our route in order to get the necessary data to make our chat work:</p>
<pre class="language-javascript hljs">// src/routes.rs
#[post("/users/create")]
pub async fn create_user(
    pool: web::Data&lt;DbPool>,
    form: web::Json&lt;models::NewUser>,
) -> Result&lt;HttpResponse, Error> {
    let user = web::block(move || {
        let mut conn = pool.get()?;
        db::insert_new_user(&amp;mut conn, &amp;form.username, &amp;form.phone)
    })
    .await?
    .map_err(actix_web::error::ErrorUnprocessableEntity)?;
    Ok(HttpResponse::Ok().json(user))
}
#[get("/users/{user_id}")]
pub async fn get_user_by_id(
    pool: web::Data&lt;DbPool>,
    id: web::Path&lt;Uuid>,
) -> Result&lt;HttpResponse, Error> {
    let user_id = id.to_owned();
    let user = web::block(move || {
        let mut conn = pool.get()?;
        db::find_user_by_uid(&amp;mut conn, user_id)
    })
    .await?
    .map_err(actix_web::error::ErrorInternalServerError)?;
    if let Some(user) = user {
        Ok(HttpResponse::Ok().json(user))
    } else {
        let res = HttpResponse::NotFound().body(
            json!({
                "error": 404,
                "message": format!("No user found with phone: {id}")
            })
            .to_string(),
        );
        Ok(res)
    }
}
#[get("/conversations/{uid}")]
pub async fn get_conversation_by_id(
    pool: web::Data&lt;DbPool>,
    uid: web::Path&lt;Uuid>,
) -> Result&lt;HttpResponse, Error> {
    let room_id = uid.to_owned();
    let conversations = web::block(move || {
        let mut conn = pool.get()?;
        db::get_conversation_by_room_uid(&amp;mut conn, room_id)
    })
    .await?
    .map_err(actix_web::error::ErrorInternalServerError)?;
    if let Some(data) = conversations {
        Ok(HttpResponse::Ok().json(data))
    } else {
        let res = HttpResponse::NotFound().body(
            json!({
                "error": 404,
                "message": format!("No conversation with room_id: {room_id}")
            })
            .to_string(),
        );
        Ok(res)
    }
}
#[get("/users/phone/{user_phone}")]
pub async fn get_user_by_phone(
    pool: web::Data&lt;DbPool>,
    phone: web::Path&lt;String>,
) -> Result&lt;HttpResponse, Error> {
    let user_phone = phone.to_string();
    let user = web::block(move || {
        let mut conn = pool.get()?;
        db::find_user_by_phone(&amp;mut conn, user_phone)
    })
    .await?
    .map_err(actix_web::error::ErrorInternalServerError)?;
    if let Some(user) = user {
        Ok(HttpResponse::Ok().json(user))
    } else {
        let res = HttpResponse::NotFound().body(
            json!({
                "error": 404,
                "message": format!("No user found with phone: {}", phone.to_string())
            })
            .to_string(),
        );
        Ok(res)
    }
}
#[get("/rooms")]
pub async fn get_rooms(
    pool: web::Data&lt;DbPool>,
) -> Result&lt;HttpResponse, Error> {
    let rooms = web::block(move || {
        let mut conn = pool.get()?;
        db::get_all_rooms(&amp;mut conn)
    })
    .await?
    .map_err(actix_web::error::ErrorInternalServerError)?;
    if !rooms.is_empty() {
        Ok(HttpResponse::Ok().json(rooms))
    } else {
        let res = HttpResponse::NotFound().body(
            json!({
                "error": 404,
                "message": "No rooms available at the moment.",
            })
            .to_string(),
        );
        Ok(res)
    }
}
</pre>
<p>Now, let’s handle the WebSocket connection. First, let’s import all the packages we need again:</p>
<pre class="language-javascript hljs">// src/server.rs
use std::collections::{HashMap, HashSet};
use serde_json::json;
use actix::prelude::*;
use rand::{self, rngs::ThreadRng, Rng};
use crate::session;
#[derive(Message)]
#[rtype(result = "()")]
pub struct Message(pub String);
#[derive(Message)]
#[rtype(usize)]
pub struct Connect {
    pub addr: Recipient&lt;Message>,
}
#[derive(Message)]
#[rtype(result = "()")]
pub struct Disconnect {
    pub id: usize,
}
#[derive(Message)]
#[rtype(result = "()")]
pub struct ClientMessage {
    pub id: usize,
    pub msg: String,
    pub room: String,
}
pub struct ListRooms;
impl actix::Message for ListRooms {
    type Result = Vec&lt;String>;
}
#[derive(Message)]
#[rtype(result = "()")]
pub struct Join {
    pub id: usize,
    pub name: String,
}
</pre>
<p>Next, let’s implement the trait to manage the WebSocket connections. This code will handle all the messages coming from users and send them back to participants in the chat room:</p>
<pre class="language-javascript hljs">// src/server.rs
#[derive(Debug)]
pub struct ChatServer {
    sessions: HashMap&lt;usize, Recipient&lt;Message>>,
    rooms: HashMap&lt;String, HashSet&lt;usize>>,
    rng: ThreadRng,
}
impl ChatServer {
    pub fn new() -> ChatServer {
        let mut rooms = HashMap::new();
        rooms.insert("main".to_string(), HashSet::new());
        Self {
            sessions: HashMap::new(),
            rooms,
            rng: rand::thread_rng()
        }
    }
    fn send_message(&amp;self, room: &amp;str, message: &amp;str, skip_id: usize) {
        if let Some(sessions) = self.rooms.get(room) {
            for id in sessions {
                if *id != skip_id {
                    if let Some(addr) = self.sessions.get(id) {
                        addr.do_send(Message(message.to_owned()));
                    }
                }
            }
        }
    }
}
impl Actor for ChatServer {
    type Context = Context&lt;Self>;
}
impl Handler&lt;Connect> for ChatServer {
    type Result = usize;
    fn handle(&amp;mut self, msg: Connect, _: &amp;mut Context&lt;Self>) -> Self::Result {
        let id = self.rng.gen::&lt;usize>();
        self.sessions.insert(id, msg.addr);
        self.rooms
            .entry("main".to_string())
            .or_insert_with(HashSet::new)
            .insert(id);
        self.send_message("main", &amp;json!({
            "value": vec![format!("{}", id)],
            "chat_type": session::ChatType::CONNECT
        }).to_string(), 0);
        id
    }
}
impl Handler&lt;Disconnect> for ChatServer {
    type Result = ();
    fn handle(&amp;mut self, msg: Disconnect, _: &amp;mut Self::Context) -> Self::Result {
        let mut rooms: Vec&lt;String> = vec![];
        if self.sessions.remove(&amp;msg.id).is_some() {
            for (name, sessions) in &amp;mut self.rooms {
                if sessions.remove(&amp;msg.id) {
                    rooms.push(name.to_owned());
                }
            }
        }
        for room in rooms {
            self.send_message("main", &amp;json!({
                "room": room,
                "value": vec![format!("Someone disconnect!")],
                "chat_type": session::ChatType::DISCONNECT
            }).to_string(), 0);
        }
    }
}
impl Handler&lt;ClientMessage> for ChatServer {
    type Result = ();
    fn handle(&amp;mut self, msg: ClientMessage, _: &amp;mut Self::Context) -> Self::Result {
        self.send_message(&amp;msg.room, &amp;msg.msg, msg.id);
    }
}
impl Handler&lt;ListRooms> for ChatServer {
    type Result = MessageResult&lt;ListRooms>;
    fn handle(&amp;mut self, _: ListRooms, _: &amp;mut Self::Context) -> Self::Result {
        let mut rooms = vec![];
        for key in self.rooms.keys() {
            rooms.push(key.to_owned());
        }
        MessageResult(rooms)
    }
}
impl Handler&lt;Join> for ChatServer {
    type Result = ();
    fn handle(&amp;mut self, msg: Join, _: &amp;mut Self::Context) -> Self::Result {
        let Join {id, name} = msg;
        let mut rooms = vec![];
        for (n, sessions) in &amp;mut self.rooms {
            if sessions.remove(&amp;id) {
                rooms.push(n.to_owned());
            }
        }
        for room in rooms {
            self.send_message(&amp;room, &amp;json!({
                "room": room,
                "value": vec![format!("Someone disconnect!")],
                "chat_type": session::ChatType::DISCONNECT
            }).to_string(), 0);
        }
        self.rooms
            .entry(name.clone())
            .or_insert_with(HashSet::new)
            .insert(id);
    }
}
</pre>
<h3 id="handling-the-user-session">Handling the user session</h3>
<p>Now, let’s address the user session. Here we’ll receive a message, save it to the database, and then send it back to the participant in the chat room.</p>
<p>To start, import all the packages:</p>
<pre class="language-javascript hljs">// src/session.rs
use std::time::{Duration, Instant};
use actix::prelude::*;
use actix_web::web;
use actix_web_actors::ws;
use serde::{Deserialize, Serialize};
use diesel::{
    prelude::*,
    r2d2::{self, ConnectionManager},
};
use crate::db;
use crate::models::NewConversation;
use crate::server;
</pre>
<p>You can change the duration of the connection to the WebSocket here. So the <code>HEARTBEAT</code> is the duration to keep the connection alive with the client. And <code>CLIENT_TIMEOUT</code> is the duration to check if the client is still connected:</p>
<pre class="language-javascript hljs">// src/session.rs
const HEARBEET: Duration = Duration::from_secs(5);
const CLIENT_TIMEOUT: Duration = Duration::from_secs(10);
type DbPool = r2d2::Pool&lt;ConnectionManager&lt;SqliteConnection>>;
</pre>
<p>Now let’s create some structs to store all the data we need:</p>
<pre class="language-javascript hljs">// src/session.rs
#[derive(Debug)]
pub struct WsChatSession {
    pub id: usize,
    pub hb: Instant,
    pub room: String,
    pub name: Option&lt;String>,
    pub addr: Addr&lt;server::ChatServer>,
    pub db_pool: web::Data&lt;DbPool>,
}
#[derive(PartialEq, Serialize, Deserialize)]
pub enum ChatType {
    TYPING,
    TEXT,
    CONNECT,
    DISCONNECT,
}
#[derive(Serialize, Deserialize)]
struct ChatMessage {
    pub chat_type: ChatType,
    pub value: Vec&lt;String>,
    pub room_id: String,
    pub user_id: String,
    pub id: usize,
}
</pre>
<p>This struct will be used for the following:</p>
<ul>
<li><code>WsChatSession</code>: To make a custom implementation of the Actix Web actor</li>
<li><code>ChatMessage</code>: To define the object that will be sent to and received from the user</li>
</ul>
<p>Now, let’s implement our session’s <code>Actor</code> and stream <code>Handler</code>:</p>
<pre class="language-javascript hljs">// src/session.rs
impl Actor for WsChatSession {
    type Context = ws::WebsocketContext&lt;Self>;
    fn started(&amp;mut self, ctx: &amp;mut Self::Context) {
        self.hb(ctx);
        let addr = ctx.address();
        self.addr
            .send(server::Connect {
                addr: addr.recipient(),
            })
            .into_actor(self)
            .then(|res, act, ctx| {
                match res {
                    Ok(res) => act.id = res,
                    _ => ctx.stop(),
                }
                fut::ready(())
            })
            .wait(ctx);
    }
    fn stopping(&amp;mut self, _: &amp;mut Self::Context) -> Running {
        self.addr.do_send(server::Disconnect { id: self.id });
        Running::Stop
    }
}
impl Handler&lt;server::Message> for WsChatSession {
    type Result = ();
    fn handle(&amp;mut self, msg: server::Message, ctx: &amp;mut Self::Context) -> Self::Result {
        ctx.text(msg.0);
    }
}
impl StreamHandler&lt;Result&lt;ws::Message, ws::ProtocolError>> for WsChatSession {
    fn handle(&amp;mut self, item: Result&lt;ws::Message, ws::ProtocolError>, ctx: &amp;mut Self::Context) {
        let msg = match item {
            Err(_) => {
                ctx.stop();
                return;
            }
            Ok(msg) => msg,
        };
        match msg {
            ws::Message::Ping(msg) => {
                self.hb = Instant::now();
                ctx.pong(&amp;msg);
            }
            ws::Message::Pong(_) => {
                self.hb = Instant::now();
            }
            ws::Message::Text(text) => {
                let data_json = serde_json::from_str::&lt;ChatMessage>(&amp;text.to_string());
                if let Err(err) = data_json {
                    println!("{err}");
                    println!("Failed to parse message: {text}");
                    return;
                }
                let input = data_json.as_ref().unwrap();
                match &amp;input.chat_type {
                    ChatType::TYPING => {
                        let chat_msg = ChatMessage {
                            chat_type: ChatType::TYPING,
                            value: input.value.to_vec(),
                            id: self.id,
                            room_id: input.room_id.to_string(),
                            user_id: input.user_id.to_string(),
                        };
                        let msg = serde_json::to_string(&amp;chat_msg).unwrap();
                        self.addr.do_send(server::ClientMessage {
                            id: self.id,
                            msg,
                            room: self.room.clone(),
                        })
                    }
                    ChatType::TEXT => {
                        let input = data_json.as_ref().unwrap();
                        let chat_msg = ChatMessage {
                            chat_type: ChatType::TEXT,
                            value: input.value.to_vec(),
                            id: self.id,
                            room_id: input.room_id.to_string(),
                            user_id: input.user_id.to_string(),
                        };
                        let mut conn = self.db_pool.get().unwrap();
                        let new_conversation = NewConversation {
                            user_id: input.user_id.to_string(),
                            room_id: input.room_id.to_string(),
                            message: input.value.join(""),
                        };
                        let _ = db::insert_new_conversation(&amp;mut conn, new_conversation);
                        let msg = serde_json::to_string(&amp;chat_msg).unwrap();
                        self.addr.do_send(server::ClientMessage {
                            id: self.id,
                            msg,
                            room: self.room.clone(),
                        })
                    }
                    _ => {}
                }
            }
            ws::Message::Binary(_) => println!("Unsupported binary"),
            ws::Message::Close(reason) => {
                ctx.close(reason);
                ctx.stop();
            }
            ws::Message::Continuation(_) => {
                ctx.stop();
            }
            ws::Message::Nop => (),
        }
    }
}
impl WsChatSession {
    fn hb(&amp;self, ctx: &amp;mut ws::WebsocketContext&lt;Self>) {
        ctx.run_interval(HEARBEET, |act, ctx| {
            if Instant::now().duration_since(act.hb) > CLIENT_TIMEOUT {
                act.addr.do_send(server::Disconnect { id: act.id });
                ctx.stop();
                return;
            }
            ctx.ping(b"");
        });
    }
}
</pre>
<h2 id="preparing-the-database-with-sqlite">Preparing the database</h2>
<p>Next, let’s prepare the database. We’ll use SQLite to keep things simple. Here’s how the schema will look:</p>
<p><img             class="aligncenter wp-image-150940 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/database-query.png" alt="SQLite Database Query Schema" width="730" height="455"    /><noscript><img               class="aligncenter wp-image-150940 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/database-query.png" alt="SQLite Database Query Schema" width="730" height="455"  /></noscript></p>
<p>The table will be used for the following:</p>
<ul>
<li><code>users</code>: Store user data. Since we’re not implementing a full authentication system at this time, we’ll only save the username and phone number for now</li>
<li><code>rooms</code>: Store a list of all chat rooms</li>
<li><code>conversations</code>: Lists where all messages are stored in our database</li>
</ul>
<p>Next, let’s generate the database migration for our schema:</p>
<pre class="language-javascript hljs">// shell
diesel migration generate create_users
diesel migration generate create_rooms
diesel migration generate create_conversations
</pre>
<p>Here’s how the migration SQL will look:</p>
<pre class="language-javascript hljs">-- migrations/2022-11-21-101206_create_users/up.sql
CREATE TABLE users (
  id TEXT PRIMARY KEY NOT NULL,
  username VARCHAR NOT NULL,
  phone VARCHAR NOT NULL,
  created_at TEXT NOT NULL,
  unique(phone)
)

-- migrations/2022-11-21-101215_create_rooms/up.sql
CREATE TABLE rooms (
  id TEXT PRIMARY KEY NOT NULL,
  name VARCHAR NOT NULL,
  last_message TEXT NOT NULL,
  participant_ids TEXT NOT NULL,
  created_at TEXT NOT NULL
)

-- migrations/2022-11-21-101223_create_conversations/up.sql
CREATE TABLE conversations (
  id TEXT PRIMARY KEY NOT NULL,
  room_id TEXT NOT NULL,
  user_id TEXT NOT NULL,
  content VARCHAR NOT NULL,
  created_at TEXT NOT NULL
)
</pre>
<p>We also need to add some dummy data just to have some examples for initial rendering to the client later:</p>
<pre class="language-javascript hljs">diesel migration generate dummy_data
</pre>
<p>Here’s how the data will look:</p>
<pre class="language-javascript hljs">-- migrations/2022-11-24-034153_generate_dummy_data/up.sql
INSERT INTO users(id, username, phone, created_at) 
VALUES
("4fbd288c-d3b2-4f78-adcf-def976902d50","Ahmad Rosid","123","2022-11-23T07:56:30.214162+00:00"),
("1e9a12c1-e98c-4a83-a55a-32cc548a169d","Ashley Young","345","2022-11-23T07:56:30.214162+00:00"),
("1bc833808-05ed-455a-9d26-64fe1d96d62d","Charles Edward","678","2022-12-23T07:56:30.214162+00:00");
INSERT INTO rooms(id, name, last_message, participant_ids, created_at)
VALUES
("f061383b-0393-4ce8-9a85-f31d03762263", "Charles Edward", "Hi, how are you?", "1e9a12c1-e98c-4a83-a55a-32cc548a169d,1bc833808-05ed-455a-9d26-64fe1d96d62d", "2022-12-23T07:56:30.214162+00:00"),
("008e9dc4-f01d-4429-ba31-986d7e63cce8", "Ahmad Rosid", "Hi... are free today?", "1e9a12c1-e98c-4a83-a55a-32cc548a169d,1bc833808-05ed-455a-9d26-64fe1d96d62d", "2022-12-23T07:56:30.214162+00:00");
INSERT INTO conversations(id, user_id, room_id, content, created_at)
VALUES
("9aeab1a7-e063-40d1-a120-1f7585fa47d6", "1bc833808-05ed-455a-9d26-64fe1d96d62d", "f061383b-0393-4ce8-9a85-f31d03762263", "Hello", "2022-12-23T07:56:30.214162+00:00"),
("f4e54e70-736b-4a79-a622-3659b0b555e8", "1e9a12c1-e98c-4a83-a55a-32cc548a169d", "f061383b-0393-4ce8-9a85-f31d03762263", "Hi, how are you?", "2022-12-23T07:56:30.214162+00:00"),
("d3ea6e39-ed58-4613-8922-b78f14a2676a", "1bc833808-05ed-455a-9d26-64fe1d96d62d", "008e9dc4-f01d-4429-ba31-986d7e63cce8", "Hi... are free today?", "2022-12-23T07:56:30.214162+00:00");
</pre>
<h3 id="generating-the-schema">Generating the schema</h3>
<p>Now let’s generate the schema and run the migration:</p>
<pre class="language-javascript hljs">diesel database setup
diesel migration run   
</pre>
<p>The schema that is generated automatically by the CLI will look like this:</p>
<pre class="language-javascript hljs">// src/schema.rs
// @generated automatically by Diesel CLI.
diesel::table! {
    conversations (id) {
        id -> Text,
        room_id -> Text,
        user_id -> Text,
        content -> Text,
        created_at -> Text,
    }
}
diesel::table! {
    rooms (id) {
        id -> Text,
        name -> Text,
        last_message -> Text,
        participant_ids -> Text,
        created_at -> Text,
    }
}
diesel::table! {
    users (id) {
        id -> Text,
        username -> Text,
        phone -> Text,
        created_at -> Text,
    }
}
diesel::allow_tables_to_appear_in_same_query!(
    conversations,
    rooms,
    users,
);
</pre>
<p>The above code is auto generated, so don’t make any changes to this file.</p>
<h3 id="creating-the-structs">Creating the structs</h3>
<p>Let’s create some structs to store all the tables. One thing to keep in mind is that the order of the property in the struct should be the same as that in the schema file. You’ll get the wrong data if the order doesn’t match.</p>
<pre class="language-javascript hljs">// src/model.rs
use serde::{Deserialize, Serialize};
use crate::schema::*;
#[derive(Debug, Clone, Serialize, Deserialize, Queryable, Insertable)]
pub struct User {
    pub id: String,
    pub username: String,
    pub phone: String,
    pub created_at: String
}
#[derive(Debug, Clone, PartialEq, Serialize, Deserialize, Queryable, Insertable)]
pub struct Conversation {
    pub id: String,
    pub room_id: String,
    pub user_id: String,
    pub content: String,
    pub created_at: String
}
#[derive(Debug, Clone, Serialize, Deserialize, Queryable, Insertable)]
pub struct Room {
    pub id: String,
    pub name: String,
    pub last_message: String,
    pub participant_ids: String,
    pub created_at: String,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NewUser {
    pub username: String,
    pub phone: String,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct NewConversation {
    pub user_id: String,
    pub room_id: String,
    pub message: String,
}
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RoomResponse {
    pub room: Room,
    pub users: Vec&lt;User>,
}
</pre>
<h3 id="setting-up-the-queries">Setting up the queries</h3>
<p>Now, let’s fetch data from the database.</p>
<p>First, import the dependency:</p>
<pre class="language-javascript hljs">// src/db.rs
use chrono::{DateTime, Utc};
use diesel::prelude::*;
use std::{
    collections::{HashMap, HashSet},
    time::SystemTime,
};
use uuid::Uuid;
use crate::models::{Conversation, NewConversation, Room, RoomResponse, User};
type DbError = Box&lt;dyn std::error::Error + Send + Sync>;
</pre>
<p>Since SQLite doesn’t have a date functionality build, we’ll create one:</p>
<pre class="language-javascript hljs">// src/db.rs
fn iso_date() -> String {
    let now = SystemTime::now();
    let now: DateTime&lt;Utc> = now.into();
    return now.to_rfc3339();
}
</pre>
<h4 id="finding-users-by-phone-number">Finding users by phone number</h4>
<p>Here, we’ll set up a query that will implement a simple login feature and enable us to find a user by phone number. We’re using this login method as an example only. In production, you’ll want to use a method that can be easily verified and debugged:</p>
<pre class="language-javascript hljs">// src/db.rs
pub fn find_user_by_phone(
    conn: &amp;mut SqliteConnection,
    user_phone: String,
) -> Result&lt;Option&lt;User>, DbError> {
    use crate::schema::users::dsl::*;
    let user = users
        .filter(phone.eq(user_phone))
        .first::&lt;User>(conn)
        .optional()?;
    Ok(user)
}
</pre>
<h4 id="adding-a-new-user">Adding a new user</h4>
<p>Here’s a query for storing a new user who registers for our app. This is also part of our authentication system. Again, please don’t use this approach for your production app:</p>
<pre class="language-javascript hljs">// src/db.rs
pub fn insert_new_user(conn: &amp;mut SqliteConnection, nm: &amp;str, pn: &amp;str) -> Result&lt;User, DbError> {
    use crate::schema::users::dsl::*;
    let new_user = User {
        id: Uuid::new_v4().to_string(),
        username: nm.to_owned(),
        phone: pn.to_owned(),
        created_at: iso_date(),
    };
    diesel::insert_into(users).values(&amp;new_user).execute(conn)?;
    Ok(new_user)
}
</pre>
<p>With the new user added, we now insert new conversations:</p>
<pre class="language-javascript hljs">// src/db.rs
pub fn insert_new_conversation(
    conn: &amp;mut SqliteConnection,
    new: NewConversation,
) -> Result&lt;Conversation, DbError> {
    use crate::schema::conversations::dsl::*;
    let new_conversation = Conversation {
        id: Uuid::new_v4().to_string(),
        user_id: new.user_id,
        room_id: new.room_id,
        content: new.message,
        created_at: iso_date(),
    };
    diesel::insert_into(conversations)
        .values(&amp;new_conversation)
        .execute(conn)?;
    Ok(new_conversation)
}
</pre>
<h4 id="finding-chat-rooms-and-participants">Finding chat rooms and participants</h4>
<p>Next, let’s set up a query to fetch all the chat rooms and participants from the database:</p>
<pre class="language-javascript hljs">// src/db.rs
pub fn get_all_rooms(conn: &amp;mut SqliteConnection) -> Result&lt;Vec&lt;RoomResponse>, DbError> {
    use crate::schema::rooms;
    use crate::schema::users;
    let rooms_data: Vec&lt;Room> = rooms::table.get_results(conn)?;
    let mut ids = HashSet::new();
    let mut rooms_map = HashMap::new();
    let data = rooms_data.to_vec();
    for room in &amp;data {
        let user_ids = room
            .participant_ids
            .split(",")
            .into_iter()
            .collect::&lt;Vec&lt;_>>();
        for id in user_ids.to_vec() {
            ids.insert(id.to_string());
        }
        rooms_map.insert(room.id.to_string(), user_ids.to_vec());
    }
    let ids = ids.into_iter().collect::&lt;Vec&lt;_>>();
    let users_data: Vec&lt;User> = users::table
        .filter(users::id.eq_any(ids))
        .get_results(conn)?;
    let users_map: HashMap&lt;String, User> = HashMap::from_iter(
        users_data
            .into_iter()
            .map(|item| (item.id.to_string(), item)),
    );
    let response_rooms = rooms_data.into_iter().map(|room| {
        let users = rooms_map
            .get(&amp;room.id.to_string())
            .unwrap()
            .into_iter()
            .map(|id| users_map.get(id.to_owned()).unwrap().clone())
            .collect::&lt;Vec&lt;_>>();
        return RoomResponse{ room, users };
    }).collect::&lt;Vec&lt;_>>();
    Ok(response_rooms)
}
</pre>
<h2 id="building-the-client-ui-with-react">Building the client UI with React</h2>
<p>Let’s design a user interface for our client app; the end result will look like this:</p>
<p><img             class="aligncenter wp-image-150942 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/client-ui-end-result.png" alt="CHat App Client UI Built with React" width="730" height="464"    /><noscript><img               class="aligncenter wp-image-150942 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/client-ui-end-result.png" alt="CHat App Client UI Built with React" width="730" height="464"  /></noscript></p>
<p>To start, create a UI project with Next.js:</p>
<pre class="language-javascript hljs">yarn create next-app --js ui
</pre>
<p>Add Tailwind CSS to the project:</p>
<pre class="language-javascript hljs">npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
</pre>
<p>Now, change the Tailwind <code>config</code> file:</p>
<pre class="language-javascript hljs">// ui/tailwind.config.js
content: [
  "./pages/**/*.{js,ts,jsx,tsx}",
  "./components/**/*.{js,ts,jsx,tsx}",
]
</pre>
<p>We will add this <code>package.json</code> config to export our Next.js app as static HTML pages so that we can access them through the file server using Actix Web:</p>
<pre class="language-javascript hljs">// ui/package.json
{
  "name": "ui",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build &amp;&amp; next export -o ../static",
...
</pre>
<p>Next, import the Tailwind CSS utility to the <code>globals.css</code> file:</p>
<pre class="language-javascript hljs">// ui/styles/global.css
@tailwind base;
@tailwind components;
@tailwind utilities;
</pre>
<p>Now, let’s create some components for our client app.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h3 id="avatar-component"><code>avatar</code> component</h3>
<p>Here we’ll create the avatar for each user:</p>
<pre class="language-javascript hljs">// ui/components/avatar.js
function getShortName(full_name = '') {
    if (full_name.includes(" ")) {
        const names = full_name.split(" ");
        return `${names[0].charAt(0)}${names[1].charAt(0)}`.toUpperCase()
    }
    return `${full_name.slice(0,2)}`.toUpperCase()
}
export default function Avatar({ children, color = '' }) {
  return (
    &lt;div className='bg-blue-500 w-[45px] h-[45px] flex items-center justify-center rounded-full' style={{backgroundColor: color}}>
      &lt;span className='font-bold text-sm text-white'>{getShortName(children)}&lt;/span>
    &lt;/div>
  )
}
</pre>
<h3 id="login-component"><code>login</code> component</h3>
<p>Here we’ll create the user login component:</p>
<pre class="language-javascript hljs">// ui/components/login.js
import { useState } from "react";
async function createAccount({ username, phone }) {
    try {
        const url = "http://localhost:8080/users/create";
        let result = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ username, phone })
        });
        return result.json();
    } catch (e) {
        return Promise.reject(e);
    }
}
async function signIn({ phone }) {
    try {
        const url = "http://localhost:8080/users/phone/" + phone;
        let result = await fetch(url);
        return result.json();
    } catch (e) {
        return Promise.reject(e);
    }
}
export default function Login({ show, setAuth }) {
    const [isShowSigIn, setShowSignIn] = useState(false);
    const showSignIn = () => {
        setShowSignIn(prev => !prev)
    }
    const FormCreateUsername = ({ setAuth }) => {
        const onCreateUsername = async (e) => {
            e.preventDefault();
            let username = e.target.username.value;
            let phone = e.target.phone.value;
            if (username === "" || phone === "") {
                return;
            }
            let res = await createAccount({ username, phone });
            if (res === null) {
                alert("Failed to create account");
                return;
            }
            setAuth(res)
        }
        return (
            &lt;form action="" className="mt-4 space-y-2" onSubmit={onCreateUsername}>
                &lt;div>
                    &lt;label className="text-sm font-light">Username&lt;/label>
                    &lt;input required type="text" name="username" placeholder="John Doe"
                        className="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600" />
                &lt;/div>
                &lt;div>
                    &lt;label className="text-sm font-light">Phone&lt;/label>
                    &lt;input required type="text" name="phone" placeholder="+1111..."
                        className="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600" />
                &lt;/div>
                &lt;div className="flex items-baseline justify-between">
                    &lt;button type="submit"
                        className="px-6 py-2 mt-4 text-white bg-violet-600 rounded-lg hover:bg-violet-700 w-full">Submit&lt;/button>
                &lt;/div>
                &lt;div className="pt-2 space-y-2 text-center">
                    &lt;p className="text-base text-gray-700">Already have a username? &lt;button onClick={showSignIn} className="text-violet-700 font-light">Sign In&lt;/button>&lt;/p>
                &lt;/div>
            &lt;/form>
        )
    }
    const FormSignIn = ({ setAuth }) => {
        const onSignIn = async (e) => {
            e.preventDefault();
            let phone = e.target.phone.value;
            if (phone === "") {
                return;
            }
            let res = await signIn({ phone });
            if (res === null) {
                alert("Failed to create account");
                return;
            }
            if (!res.id) {
                alert(`Phone number not found ${phone}`);
                return;
            }
            setAuth(res)
        }
        return (
            &lt;form action="" className="mt-4 space-y-2" onSubmit={onSignIn}>
                &lt;div>
                    &lt;label className="text-sm font-light">Phone&lt;/label>
                    &lt;input required type="text" name="phone" placeholder="+1111..."
                        className="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600" />
                &lt;/div>
                &lt;div className="flex items-baseline justify-between">
                    &lt;button type="submit"
                        className="px-6 py-2 mt-4 text-white bg-violet-600 rounded-lg hover:bg-violet-700 w-full">Submit&lt;/button>
                &lt;/div>
                &lt;div className="pt-2 space-y-2 text-center">
                    &lt;p className="text-base text-gray-700">Don't have username? &lt;button onClick={showSignIn} className="text-violet-700 font-light">Create&lt;/button>&lt;/p>
                &lt;/div>
            &lt;/form>
        )
    }
    return (
        &lt;div className={`${show ? '' : 'hidden'} bg-gradient-to-b from-orange-400 to-rose-400`}>
            &lt;div className="flex items-center justify-center min-h-screen">
                &lt;div className="px-8 py-6 mt-4 text-left bg-white  max-w-[400px] w-full rounded-xl shadow-lg">
                    &lt;h3 className="text-xl text-slate-800 font-semibold">{isShowSigIn ? 'Log in with your phone.' : 'Create your account.'}&lt;/h3>
                    {isShowSigIn ? &lt;FormSignIn setAuth={setAuth} /> : &lt;FormCreateUsername setAuth={setAuth} />}
                &lt;/div>
            &lt;/div>
        &lt;/div>
    )
}
</pre>
<h3 id="room-component"><code>room</code> component</h3>
<p>Here we’ll create the chat room components:</p>
<pre class="language-javascript hljs">// ui/components/room.js
import React, { useState, useEffect } from "react";
import Avatar from "./avatar";
async function getRooms() {
    try {
        const url = "http://localhost:8080/rooms";
        let result = await fetch(url);
        return result.json();
    } catch (e) {
        console.log(e);
        return Promise.resolve(null);
    }
}
function ChatListItem({ onSelect, room, userId, index, selectedItem }) {
    const { users, created_at, last_message } = room;
    const active = index == selectedItem;
    const date = new Date(created_at);
    const ampm = date.getHours() >= 12 ? 'PM' : 'AM';
    const time = `${date.getHours()}:${date.getMinutes()} ${ampm}`
    const name = users?.filter(user => user.id != userId).map(user => user.username)[0];
    return (
        &lt;div
            onClick={() => onSelect(index, {})}
            className={`${active ? 'bg-[#FDF9F0] border border-[#DEAB6C]' : 'bg-[#FAF9FE] border border-[#FAF9FE]'} p-2 rounded-[10px] shadow-sm cursor-pointer`} >
            &lt;div className='flex justify-between items-center gap-3'>
                &lt;div className='flex gap-3 items-center w-full'>
                    &lt;Avatar>{name}&lt;/Avatar>
                    &lt;div className="w-full max-w-[150px]">
                        &lt;h3 className='font-semibold text-sm text-gray-700'>{name}&lt;/h3>
                        &lt;p className='font-light text-xs text-gray-600 truncate'>{last_message}&lt;/p>
                    &lt;/div>
                &lt;/div>
                &lt;div className='text-gray-400 min-w-[55px]'>
                    &lt;span className='text-xs'>{time}&lt;/span>
                &lt;/div>
            &lt;/div>
        &lt;/div>
    )
}
export default function ChatList({ onChatChange, userId }) {
    const [data, setData] = useState([])
    const [isLoading, setLoading] = useState(false)
    const [selectedItem, setSelectedItem] = useState(-1);
    useEffect(() => {
        setLoading(true)
        getRooms()
            .then((data) => {
                setData(data)
                setLoading(false)
            })
    }, [])
    const onSelectedChat = (idx, item) => {
        setSelectedItem(idx)
        let mapUsers = new Map();
        item.users.forEach(el => {
            mapUsers.set(el.id, el);
        });
        const users = {
            get: (id) => {
                return mapUsers.get(id).username;
            },
            get_target_user: (id) => {
                return item.users.filter(el => el.id != id).map(el => el.username).join("")
            }
        }
        onChatChange({ ...item.room, users })
    }
    return (
        &lt;div className="overflow-hidden space-y-3">
            {isLoading &amp;&amp; &lt;p>Loading chat lists.&lt;/p>}
            {
                data.map((item, index) => {
                    return &lt;ChatListItem
                        onSelect={(idx) => onSelectedChat(idx, item)}
                        room={{ ...item.room, users: item.users }}
                        index={index}
                        key={item.room.id}
                        userId={userId}
                        selectedItem={selectedItem} />
                })
            }
        &lt;/div>
    )
}
</pre>
<h3 id="conversation-component"><code>conversation</code> component</h3>
<p>Here we’ll create the user conversation component:</p>
<pre class="language-javascript hljs">// ui/components/conversation.js
import React, { useEffect, useRef } from "react";
import Avatar from "./avatar"
function ConversationItem({ right, content, username }) {
    if (right) {
        return (
            &lt;div className='w-full flex justify-end'>
                &lt;div className='flex gap-3 justify-end'>
                    &lt;div className='max-w-[65%] bg-violet-500 p-3 text-sm rounded-xl rounded-br-none'>
                        &lt;p className='text-white'>{content}&lt;/p>
                    &lt;/div>
                    &lt;div className='mt-auto'>
                        &lt;Avatar>{username}&lt;/Avatar>
                    &lt;/div>
                &lt;/div>
            &lt;/div>
        )
    }
    return (
        &lt;div className='flex gap-3 w-full'>
            &lt;div className='mt-auto'>
                &lt;Avatar color='rgb(245 158 11)'>{username}&lt;/Avatar>
            &lt;/div>
            &lt;div className='max-w-[65%] bg-gray-200 p-3 text-sm rounded-xl rounded-bl-none'>
                &lt;p>{content}&lt;/p>
            &lt;/div>
        &lt;/div>
    )
}
export default function Conversation({ data, auth, users }) {
    const ref = useRef(null);
    useEffect(() => {
        ref.current?.scrollTo(0, ref.current.scrollHeight)
    }, [data]);
    return (
        &lt;div className='p-4 space-y-4 overflow-auto' ref={ref}>
            {
                data.map(item => {
                    return &lt;ConversationItem
                        right={item.user_id === auth.id}
                        content={item.content}
                        username={users.get(item.user_id)}
                        key={item.id} />
                })
            }
        &lt;/div>
    )
}
</pre>
<p>Now let’s prepare the Hooks needed to interact with our WebSocket server and REST API server.</p>
<h3 id="usewebsocket-hook"><code>useWebsocket</code> Hook</h3>
<p>This Hook is for connecting to the WebSocket server, enabling us to send and receive messages:</p>
<pre class="language-javascript hljs">// ui/libs/websocket.js
import { useEffect, useRef } from "react";
export default function useWebsocket(onMessage) {
    const ws = useRef(null);
    useEffect(() => {
        if (ws.current !== null) return;
        const wsUri = 'ws://localhost:8080/ws';
        ws.current = new WebSocket(wsUri);
        ws.current.onopen = () => console.log("ws opened");
        ws.current.onclose = () => console.log("ws closed");
        const wsCurrent = ws.current;
        return () => {
            wsCurrent.close();
        };
    }, []);
    useEffect(() => {
        if (!ws.current) return;
        ws.current.onmessage = e => {
            onMessage(e.data)
        };
    }, []);
    const sendMessage = (msg) => {
        if (!ws.current) return;
        ws.current.send(msg);
    }
    return sendMessage;
}
</pre>
<h3 id="uselocalstorage-hook"><code>useLocalStorage</code> Hook</h3>
<p>This Hook enables us to get the user data from localStorage:</p>
<pre class="language-javascript hljs">// ui/libs/useLocalStorage
import { useEffect, useState } from "react";
export default function useLocalStorage(key, defaultValue) {
  const [storedValue, setStoredValue] = useState(defaultValue);
  const setValue = (value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      if (typeof window !== "undefined") {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
    }
  };
  useEffect(() => {
    try {
      const item = window.localStorage.getItem(key);
      let data = item ? JSON.parse(item) : defaultValue;
      setStoredValue(data)
    } catch (error) {}
  }, [])
  return [storedValue, setValue];
}
</pre>
<h3 id="useconversation-hook"><code>useConversation</code> Hook</h3>
<p>We’ll use this Hook to fetch conversations based on the given room <code>id</code>:</p>
<pre class="language-javascript hljs">import { useEffect, useState } from "react";
const fetchRoomData = async (room_id) => {
    if (!room_id) return;
    const url = `http://localhost:8080/conversations/${room_id}`;
    try {
        let resp = await fetch(url).then(res => res.json());
        return resp;
    } catch (e) {
        console.log(e);
    }
}
export default function useConversations(room_id) {
    const [isLoading, setIsLoading] = useState(true);
    const [messages, setMessages] = useState([]);
    const updateMessages = (resp = []) => {
        setIsLoading(false);
        setMessages(resp)
    }
    const fetchConversations = (id) => {
        setIsLoading(true)
        fetchRoomData(id).then(updateMessages)
    }
    useEffect(() => fetchConversations(room_id), []);
    return [isLoading, messages, setMessages, fetchConversations];
}
</pre>
<h2 id="building-the-chat-application">Building the chat application</h2>
<p>Now let’s connect all of our components and Hooks to build our chat application in React with Next.js.</p>
<p>First, let’s import all the dependencies we need:</p>
<pre class="language-javascript hljs">// ui/pages/index.js
import Head from 'next/head'
import React, { useEffect, useState } from 'react'
import Avatar from '../components/avatar'
import ChatList from '../components/rooms'
import Conversation from '../components/conversation'
import Login from '../components/login'
import useConversations from '../libs/useConversation'
import useLocalStorage from '../libs/useLocalStorage'
import useWebsocket from '../libs/useWebsocket'
</pre>
<p>Now, let’s set up the state for our chat pages:</p>
<pre class="language-javascript hljs">// ui/pages/index.js
...
export default function Home() {
  const [room, setSelectedRoom] = useState(null);
  const [isTyping, setIsTyping] = useState(false);
  const [showLogIn, setShowLogIn] = useState(false);
  const [auth, setAuthUser] = useLocalStorage("user", false);
  const [isLoading, messages, setMessages, fetchConversations] = useConversations("");
  ...
}
</pre>
<p>The following functions will handle all messages coming in or out of the WebSocket server:</p>
<ul>
<li><code>handleTyping</code>: Updates the state to display the typing indicator</li>
<li><code>handleMessage</code>: Handles incoming and outgoing messages to the state</li>
<li><code>onMessage</code>: Handles messages retrieved from the WebSocket server</li>
<li><code>updateFocus</code>: Tells the WebSocket server if the current user is still typing a message</li>
<li><code>onFocusChange</code>: Lets the WebSocket server know when the current user is finished typing</li>
<li><code>submitMessage</code>: Updates the message state and then sends the message to the server when a user hits the <strong>send</strong> button</li>
</ul>
<p>Here’s how we’ll use these functions in our code:</p>
<pre class="language-javascript hljs">// ui/pages/index.js
  const handleTyping = (mode) => {
    if (mode === "IN") {
      setIsTyping(true)
    } else {
      setIsTyping(false)
    }
  }
  const handleMessage = (msg, userId) => {
    setMessages(prev => {
      const item = { content: msg, user_id: userId };
      return [...prev, item];
    })
  }
  const onMessage = (data) => {
    try {
      let messageData = JSON.parse(data);
      switch (messageData.chat_type) {
        case "TYPING": {
          handleTyping(messageData.value[0]);
          return;
        }
        case "TEXT": {
          handleMessage(messageData.value[0], messageData.user_id);
          return;
        }
      }
    } catch (e) {
      console.log(e);
    }
  }
  const sendMessage = useWebsocket(onMessage)
  const updateFocus = () => {
    const data = {
      id: 0,
      chat_type: "TYPING",
      value: ["IN"],
      room_id: room.id,
      user_id: auth.id
    }
    sendMessage(JSON.stringify(data))
  }
  const onFocusChange = () => {
    const data = {
      id: 0,
      chat_type: "TYPING",
      value: ["OUT"],
      room_id: room.id,
      user_id: auth.id
    }
    sendMessage(JSON.stringify(data))
  }
  const submitMessage = (e) => {
    e.preventDefault();
    let message = e.target.message.value;
    if (message === "") {
      return;
    }
    if (!room.id) {
      alert("Please select chat room!")
      return
    }
    const data = {
      id: 0,
      chat_type: "TEXT",
      value: [message],
      room_id: room.id,
      user_id: auth.id
    }
    sendMessage(JSON.stringify(data))
    e.target.message.value = "";
    handleMessage(message, auth.id);
    onFocusChange();
  }
</pre>
<p>We’ll use the following functions to handle state for updating the message and for the user login and logout:</p>
<ul>
<li><code>updateMessages</code>: Fetches the conversation of the given room <code>id</code> when a user switches chat rooms</li>
<li><code>signOut</code>: Updates the state to signout and removes the user data from local storage</li>
</ul>
<p>We’ll use these functions in our code, like so:</p>
<pre class="language-javascript hljs">// ui/pages/index.js
  const updateMessages = (data) => {
    if (!data.id) return;
    fetchConversations(data.id)
    setSelectedRoom(data)
  }
  const signOut = () => {
    window.localStorage.removeItem("user");
    setAuthUser(false);
  }
  useEffect(() => setShowLogIn(!auth), [auth])
</pre>
<p>Now, let’s display all the data to the client:</p>
<pre class="language-javascript hljs">  return (
    &lt;div>
      &lt;Head>
        &lt;title>Rust with react chat app&lt;/title>
        &lt;meta name="description" content="Rust with react chat app" />
        &lt;link rel="icon" href="/favicon.ico" />
      &lt;/Head>
      &lt;Login show={showLogIn} setAuth={setAuthUser} />
      &lt;div className={`${!auth &amp;&amp; 'hidden'} bg-gradient-to-b from-orange-400 to-rose-400 h-screen p-12`}>
        &lt;main className='flex w-full max-w-[1020px] h-[700px] mx-auto bg-[#FAF9FE] rounded-[25px] backdrop-opacity-30 opacity-95'>
          &lt;aside className='bg-[#F0EEF5] w-[325px] h-[700px] rounded-l-[25px] p-4 overflow-auto relative'>
            &lt;ChatList onChatChange={updateMessages} userId={auth.id} />
            &lt;button onClick={signOut} className='text-xs w-full max-w-[295px] p-3 rounded-[10px] bg-violet-200 font-semibold text-violet-600 text-center absolute bottom-4'>LOG OUT&lt;/button>
          &lt;/aside>
          {room?.id &amp;&amp; (&lt;section className='rounded-r-[25px] w-full max-w-[690px] grid grid-rows-[80px_minmax(450px,_1fr)_65px]'>
            &lt;div className='rounded-tr-[25px] w-ful'>
              &lt;div className='flex gap-3 p-3 items-center'>
                &lt;Avatar color='rgb(245 158 11)'>{room.users.get_target_user(auth.id)}&lt;/Avatar>
                &lt;div>
                  &lt;p className='font-semibold text-gray-600 text-base'>{room.users.get_target_user(auth.id)}&lt;/p>
                  &lt;div className='text-xs text-gray-400'>{isTyping ? "Typing..." : "10:15 AM"}&lt;/div>
                &lt;/div>
              &lt;/div>
              &lt;hr className='bg-[#F0EEF5]' />
            &lt;/div>
            {(isLoading &amp;&amp; room.id) &amp;&amp; &lt;p className="px-4 text-slate-500">Loading conversation...&lt;/p>}
            &lt;Conversation data={messages} auth={auth} users={room.users} />
            &lt;div className='w-full'>
              &lt;form onSubmit={submitMessage} className='flex gap-2 items-center rounded-full border border-violet-500 bg-violet-200 p-1 m-2'>
                &lt;input
                  onBlur={onFocusChange}
                  onFocus={updateFocus}
                  name="message"
                  className='p-2 placeholder-gray-600 text-sm w-full rounded-full bg-violet-200 focus:outline-none'
                  placeholder='Type your message here...' />
                &lt;button type='submit' className='bg-violet-500 rounded-full py-2 px-6 font-semibold text-white text-sm'>Sent&lt;/button>
              &lt;/form>
            &lt;/div>
          &lt;/section>)}
        &lt;/main>
      &lt;/div>
    &lt;/div>
  )
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we discussed the features of WebSockets, its applications in Rust, and how to use it with the <code>actix-web</code> package. We demonstrated how to create an efficient, real-time chat application, using React and Next.js to establish WebSocket connections to the Actix Web server. The code from this article is available on <a href="https://github.com/ahmadrosid/rust-react-chat">GitHub</a>.</p>
<p>To further improve our sample real-time chat application, you could enable it to display user status (i.e., online or offline) and create an online group chat for users.</p>
<p>Please feel free to leave a comment if you have any questions about this article. Happy coding!</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-150928" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/real-time-chat-app-rust-react/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/real-time-chat-app-rust-react/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-150928" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/real-time-chat-app-rust-react/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-150928" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/real-time-chat-app-rust-react/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ahmad-rosid.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ahmad-rosid.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ahmadrosid/">
Ahmad Rosid <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software Developer based in Indonesia. Loves solving problems with technology and sharing it with the world.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> <li><a href="https://blog.logrocket.com/tag/rust/">#rust</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/best-change-management-certifications/" rel="prev">Top 5 change management certifications</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/what-is-the-spotify-model-agile/" rel="next">What is the Spotify model in agile?</a> &amp;raquo;</div></div>
 </div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/real-time-chat-app-rust-react/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Build a web editor with react-monaco-editor - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Build a web editor with react-monaco-editor - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/">Build a web editor with react-monaco-editor - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168135 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-168135">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/isaacjunior/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/08/isaac-junior.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/08/isaac-junior.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/isaacjunior/">
Isaac Okoro <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Isaac is a software engineer and technical writer based in Nigeria. An avid reader and football lover with a passion for community and self-improvement.</span>
</div>
</div>
<h1 class="posttitle">Build a web editor with react-monaco-editor</h1>
<p>
<span class="post-date"><time class="post-date">
April 24, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1791</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/build-web-editor-with-react-monaco-editor.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build a Web Editor With React-Monaco-Editor"                /> <article class="article-post">
<p>Online web editors are web-based applications that allow users to write and edit code on a browser. They work without needing local environments or setups, encouraging accessibility, collaboration, and simplicity.</p>
<p>Online editors offer a simple interface for writing and editing code and time-saving tools like syntax highlighting, line numbering, and auto-completion. Some examples of online web editors include <a href="https://replit.com/">Repl.it</a>, <a href="https://codepen.io/">CodePen</a>, and <a href="https://codesandbox.io/">CodeSandbox</a>. In this article, we will cover how to build a web editor with React and the <a href="https://www.npmjs.com/package/react-monaco-editor?activeTab=readme">react-monaco-editor</a> package.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#monaco-editor">What is Monaco Editor?</a>
<ul >
<li><a href="#react-monaco-editor-vs-@monaco-editor/react">react-monaco-editor vs. @monaco-editor/react</a></li>
</ul>
</li>
<li><a href="#creating-new-app-installing-dependencies">Creating a new app and installing dependencies</a>
<ul >
<li><a href="#rewiring-react-app-work-with-monaco-editor">Rewiring the React app to work with Monaco Editor</a></li>
</ul>
</li>
<li><a href="#building-code-editor-react">Building the code editor in React</a>
<ul >
<li><a href="#passing-options-editor">Passing <code>options</code> to the editor</a></li>
<li><a href="#opening-files-editor">Opening files in the editor</a></li>
<li><a href="#adding-themes-code-editor">Adding <code>themes</code> to the code editor</a></li>
<li><a href="#creating-diff-editor-with-monaco-editor">Creating a <code>Diff</code> editor with the Monaco Editor</a></li>
</ul>
</li>
</ul>
<h2 id="monaco-editor">What is Monaco Editor?</h2>
<p>Monaco Editor is a browser-based code editor developed by Microsoft and is used in several of Microsoft’s products, including VS Code, Azure DevOps, and Visual Studio Online. The Monaco Editor is designed to provide a fast and efficient coding experience, with features like syntax highlighting and auto-completion. It also has inbuilt support for various programming languages and technologies, including <a href="https://blog.logrocket.com/tag/vanilla-javascript/">JavaScript</a>, <a href="https://blog.logrocket.com/tag/typescript/">TypeScript</a>, <a href="https://blog.logrocket.com/tag/html/">HTML</a>, <a href="https://blog.logrocket.com/tag/css/">CSS</a>, and more.</p>
<p>Two packages are available for using React with Monaco Editor: react-monaco-editor and @monaco-editor/react. React-monaco-editor was created six years ago with over 114,000 weekly npm downloads, while the @monaco-editor/react package was designed four years ago and had over 380,000 weekly npm downloads.</p>
<h3 id="react-monaco-editor-vs-@monaco-editor/react">react-monaco-editor vs. @monaco-editor/react</h3>
<p>The <a href="https://github.com/react-monaco-editor/react-monaco-editor">react-monaco-editor</a> package was the first package available for embedding with React and is still actively maintained. However, it requires you to make various <a href="https://blog.logrocket.com/tag/webpack/">webpack</a> changes which are very inconvenient, especially when working with React. This has made the package decline in popularity, as shown by the number of weekly downloads compared to the @monaco-editor/react package.</p>
<p>The @monaco-editor/react package is embeddable with React and does not require any configurations to start using it. Here’s a chart comparing the react-monaco-editor and @monaco-editor/react packages:</p>
<p><img             class="aligncenter size-full wp-image-168136 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/comparing-monaco-editor-packages-react.png" alt="Comparing React Monaco Editor Packages" width="730" height="653"    /><noscript><img               class="aligncenter size-full wp-image-168136" src="http://blog.logrocket.com/wp-content/uploads/2023/04/comparing-monaco-editor-packages-react.png" alt="Comparing React Monaco Editor Packages" width="730" height="653"  /></noscript></p>
<h2 id="creating-new-app-installing-dependencies">Creating a new app and installing dependencies</h2>
<p>The first step is to create a new React app by running the command below:</p>
<pre class="language-javascript hljs">yarn create react-app monaco-editor-with-react
</pre>
<p>Next, add the react-monaco-editor package with the following command:</p>
<pre class="language-javascript hljs">yarn add react-monaco-editor
</pre>
<p>We also need to install some dependencies to work with the react-monaco-editor. Install them by running the command below:</p>
<pre class="language-javascript hljs">yarn add monaco-editor monaco-editor-core monaco-languageclient
</pre>
<p>We will also install the Monaco webpack plugin as a <code>devDependency</code> into our React application with the following command:</p>
<pre class="language-javascript hljs">yarn add --dev monaco-editor-webpack-plugin
</pre>
<h3 id="rewiring-react-app-work-with-monaco-editor">Rewiring the React app to work with Monaco Editor</h3>
<p>The next step after downloading the dependencies is to make the various webpack changes to allow the Monaco editor to work with our React application. However, it is quite challenging to make webpack changes because webpack configurations are not available to users in <a href="https://blog.logrocket.com/getting-started-with-create-react-app/">Create React App</a> unless they choose to eject the React app by running <code>yarn eject</code>.</p>
<p>Ejecting a React app is a bad idea because our application will lose all the React configurations and will not benefit from the CRA updates. Some solutions for ejecting our application include using packages like <a href="https://github.com/timarney/react-app-rewired">react-app-rewired</a> or <a href="https://github.com/jhnns/rewire">rewire</a>. You can also use <a href="https://craco.js.org/">CRACO</a> to eject your React application, but it needs you to install additional plugins.</p>
<p>In this tutorial, we will use the react-app-rewired to rewire our React application. Install the package by running the command below:</p>
<pre class="language-javascript hljs">yarn add --dev react-app-rewired
</pre>
<p>Next, create a <code>config-overrides.js</code> file in the root of the project, and paste the following code into it:</p>
<pre class="language-javascript hljs">// config-overrides.js

const path = require('path');
const MonacoWebpackPlugin = require('monaco-editor-webpack-plugin');

module.exports = function override(config, env) {
  config.plugins.push(new MonacoWebpackPlugin())
  return config;
}
</pre>
<p>Now, navigate to the <code>App.js</code> file, clear all the boilerplate code, and build the code editor.</p>
<h2 id="building-code-editor-react">Building the code editor in React</h2>
<p>To get started building the code editor in React, paste the code below into the <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import MonacoEditor from 'react-monaco-editor';

function App() {
  return (
      &lt;MonacoEditor
        height="400"
      />
  );
}

export default App;
</pre>
<p>Let’s go over what it does. In the code above, we imported the <code>MonacoEditor</code> from <code>react-monaco-editor</code>. Next, we embedded that web editor into the application and passed in the <code>height</code> that we wanted the editor to be rendered.</p>
<blockquote><p>Note, we didn’t pass any language to the editor. The <code>MonacoEditor</code> uses JavaScript as the default language when no language is specified. This means you can get all of JavaScript’s syntax highlighting and intelligence capabilities.</p></blockquote>
<p>Now, run <code>yarn start</code> to see the changes that you have made in the browser, which should look like the image below:</p>
<p><img             class="aligncenter size-full wp-image-168137 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/monaco-editor.png" alt="The Monaco Editor in React" width="730" height="528"    /><noscript><img               class="aligncenter size-full wp-image-168137" src="http://blog.logrocket.com/wp-content/uploads/2023/04/monaco-editor.png" alt="The Monaco Editor in React" width="730" height="528"  /></noscript></p>
<h3 id="passing-options-editor">Passing <code>options</code> to the editor</h3>
<p>You can provide a list of <code>options</code> to the monaco-editor. The options range from setting the <code>font size</code> and <code>font family</code> to choosing the <code>cursor style</code> and choosing if we want to put the <code>minimap</code> in the editor. Now, copy and paste the list of <code>options</code> into the <code>App.js</code> file:</p>
<pre class="language-javascript hljs">  const options = {
    autoIndent: 'full',
    contextmenu: true,
    fontFamily: 'monospace',
    fontSize: 13,
    lineHeight: 24,
    hideCursorInOverviewRuler: true,
    matchBrackets: 'always',
    minimap: {
      enabled: true,
    },
    scrollbar: {
      horizontalSliderSize: 4,
      verticalSliderSize: 18,
    },
    selectOnLineNumbers: true,
    roundedSelection: false,
    readOnly: false,
    cursorStyle: 'line',
    automaticLayout: true,
  }; 
</pre>
<p>In the code block above, we defined some <code>options</code> to customize the appearance and behavior of the editor. The next step is to pass the <code>options</code> to the editor, as shown below:</p>
<pre class="language-javascript hljs">&lt;MonacoEditor
    height="400"
    options={options}
/>
</pre>
<h3 id="opening-files-editor">Opening files in the editor</h3>
<p>So far, we have hardcoded the language of the editor by setting it to JavaScript, and we can see that the code editor works. What happens when we try to write code that doesn’t have JavaScript syntax? Take a look at the image below to find out:</p>
<p><img             class="aligncenter size-full wp-image-168138 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/files-monaco-editor.png" alt="Opening Files in the React Monaco Editor Part One" width="730" height="619"    /><noscript><img               class="aligncenter size-full wp-image-168138" src="http://blog.logrocket.com/wp-content/uploads/2023/04/files-monaco-editor.png" alt="Opening Files in the React Monaco Editor Part One" width="730" height="619"  /></noscript></p>
<p>In the image above, we wrote some <a href="https://blog.logrocket.com/python-developers-guide-react/">Python</a> code. You can see that the editor doesn’t recognize the syntax, and that is the cause of the errors and squiggly lines. A solution to this is to upload files from our local machine, check the language of each file, and dynamically pass the language to the editor. Let’s do that in the code block below:</p>
<pre class="language-javascript hljs">import React, { useState, useEffect } from 'react';
import MonacoEditorfrom 'react-monaco-editor';

const CodeEditor = () => {
  const [code, setCode] = useState('');
  const [file, setFile] = useState();
  const [language, setLanguage] = useState('javascript');

  const handleFileChange = (event) => {
    if (event.target.files) {
      setFile(event.target.files[0]);
    }
  };

  useEffect(() => {
    if (file) {
      var reader = new FileReader();
      reader.onload = async (e) => {
        setCode(e.target.result);
      };
      reader.readAsText(file);
      let newLanguage = 'javascript';
      const extension = file.name.split('.').pop();
      if (['css', 'html', 'python', 'dart'].includes(extension)) {
        newLanguage = extension;
      }
      setLanguage(newLanguage);
    }
  }, [file]);

// The Options object goes here and is passed to the editor below

  return (
    &lt;div>
      &lt;div>
        &lt;input type="file" onChange={handleFileChange} /> 
      &lt;/div>
      &lt;hr />
      &lt;MonacoEditor
        height="800"
        language={language}
        value={code}
        options={options}
      />
    &lt;/div>
  );
};

const App = () => (
  &lt;div>
    &lt;h2>Monaco Editor &lt;/h2>
    &lt;CodeEditor />
  &lt;/div>
);
export default App;
</pre>
<p>In the code block above, we created two <a href="https://blog.logrocket.com/guide-usestate-react/"><code>useState</code> Hooks</a> — one for getting and setting the language of the editor and the other for handling the file state. Next, we made a <a href="https://blog.logrocket.com/useeffect-hook-complete-guide/"><code>useEffect</code> Hook</a> to check if there is a file. If there is a file, we get the extension and use it to set the language of the editor to the language of the file that was loaded.</p>
<p>The next step is creating an <code>input</code> button to get files from our machine. Finally, we created a function for handling the file changes and passed it to the <code>onChange</code> handler on the <code>input</code> button. When we save the changes and navigate to the browser, all the errors and squiggly lines disappear because we are now dynamically setting the language of the editor. Here’s what that looks like:</p>
<p><img             class="aligncenter size-full wp-image-168139 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/files-monaco-editor-two.png" alt="Opening Files in the React Monaco Editor Part Two" width="730" height="736"    /><noscript><img               class="aligncenter size-full wp-image-168139" src="http://blog.logrocket.com/wp-content/uploads/2023/04/files-monaco-editor-two.png" alt="Opening Files in the React Monaco Editor Part Two" width="730" height="736"  /></noscript></p>
<h3 id="adding-themes-code-editor">Adding <code>themes</code> to the code editor</h3>
<p>Monaco Editor provides themes for use in the editor. Some of these themes include a <code>light theme</code> (the default), a <code>dark theme</code>, and a <code>high-contrast theme</code>. Let’s see how to include the themes in the editor:</p>
<pre class="language-javascript hljs">// The remaining state hooks here remain the same
const [theme, setTheme] = useState('vs-light');

// The fileChange function and useEffect remains the same

const setDarkTheme = (e) => {
    e.preventDefault();
    setTheme((prev) => (prev === 'vs-dark' ? 'hc-black' : 'vs-dark'));
  };

  const setLightTheme = (e) => {
    e.preventDefault();
    setTheme('vs-light');
  };
</pre>
<p>In the code above, we are creating two functions: one for setting the <code>light theme</code> and the other for setting the <code>dark theme</code>. In the <code>dark theme</code> function, we get the previous state of the theme and then set it to the other accordingly. The next step is to pass the functions to the <code>buttons</code> that will be used to change the theme. Use the code below:</p>
<pre class="language-javascript hljs">  return (
    &lt;div>
      &lt;div>
        &lt;button onClick={setDarkTheme} type="button">
          Set dark theme ({theme === 'vs-dark' ? 'hc-black' : 'vs-dark'})
        &lt;/button>
        {theme !== 'vs-light' &amp;&amp; (
          &lt;button onClick={setLightTheme} type="button">
            Set light theme
          &lt;/button>
        )}
        &lt;input type="file" onChange={handleFileChange} />
      &lt;/div>
      &lt;hr />
      &lt;MonacoEditor
        height="500"
        language={language}
        value={code}
        options={options}
        theme={theme}
      />
    &lt;/div>
  );
};
</pre>
<p>In the code block above, we set up the <code>buttons</code> that would be used to change the theme of the code editor and then passed the <code>theme</code> to the editor. The results should be as shown in the GIF below:</p>
<p><img             class="aligncenter size-full wp-image-168140 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/themes-react-monaco-editor.gif" alt="Themes Using the React Monaco Editor" width="730" height="758"  /><noscript><img               class="aligncenter size-full wp-image-168140" src="http://blog.logrocket.com/wp-content/uploads/2023/04/themes-react-monaco-editor.gif" alt="Themes Using the React Monaco Editor" width="730" height="758"/></noscript></p>
<h3 id="creating-diff-editor-with-monaco-editor">Creating a <code>Diff</code> editor with the Monaco Editor</h3>
<p>A <code>Diff</code> editor is used to compare two files. Fortunately, the Monaco Editor offers functionality for creating a <code>Diff</code> editor. Let’s dive into some code and see how to create a <code>Diff</code> editor in the code block below:</p>
<pre class="language-javascript hljs">import { MonacoDiffEditor } from 'react-monaco-editor';

const DiffEditor = () => {
  const originalCode = 'const firstCode = "Hello from the Monaco Diff Editor!"';
  const modifiedCode =
    'const secondCode = "Lets change this and see what happens next"';

// The Options objects still remains the same 

  return (
    &lt;div>
      &lt;MonacoDiffEditor
        width="800"
        height="300"
        options={options}
        language="javascript"
        original={originalCode}
        value={modifiedCode}
      />
    &lt;/div>
  );
};

const App = () => (
  &lt;div className="editor">
    &lt;h2>Another editor (showing a diff)&lt;/h2>
    &lt;DiffEditor />
  &lt;/div>
);
export default App;
</pre>
<p>In the code block above, we imported the <code>MonacoDiffEditor</code> from the react-monaco-editor package. We then created two lines of code to compare and passed them to the <code>MonacoDiffEditor</code> as props for the <code>value</code> property and the <code>original</code> property. The <code>original</code> property holds the original value and the <code>value</code> property holds the compared code. The result is shown below:</p>
<p><img             class="aligncenter size-full wp-image-168141 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/final-product-react-monaco-editor.png" alt="Final Product Using the React Monaco Editor" width="730" height="345"    /><noscript><img               class="aligncenter size-full wp-image-168141" src="http://blog.logrocket.com/wp-content/uploads/2023/04/final-product-react-monaco-editor.png" alt="Final Product Using the React Monaco Editor" width="730" height="345"  /></noscript></p>
<h2>Conclusion</h2>
<p>This article has looked at creating a web editor with React and the react-monaco-editor package. Using React and the react-monaco-editor package can greatly simplify the process of creating a web-based code editor. The react-monaco-editor provides a powerful and efficient editor component with <a href="https://blog.logrocket.com/guide-syntax-highlighting-react/">syntax highlighting</a>, autocompletion, and a range of other useful features.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168135" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168135" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168135" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/08/isaac-junior.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/08/isaac-junior.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/isaacjunior/">
Isaac Okoro <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Isaac is a software engineer and technical writer based in Nigeria. An avid reader and football lover with a passion for community and self-improvement.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/ux-design/conduct-effective-design-retrospective/" rel="prev">How to conduct an effective design retrospective</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/ux-design/b2b-vs-b2c-ux-design/" rel="next">B2B vs. B2C UX design: Same steps, a different approach</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-web-editor-with-react-monaco-editor/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Build an application with Node.js and PouchDB - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-application-with-node-js-pouchdb/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-application-with-node-js-pouchdb/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Build an application with Node.js and PouchDB - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-application-with-node-js-pouchdb/">Build an application with Node.js and PouchDB - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-167025 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-node" id="post-167025">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/solomonesenyi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/solomonesenyi/">
Solomon Esenyi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Python/Golang developer and Technical Writer with a passion for open-source, cryptography, and serverless technologies.</span>
</div>
</div>
<h1 class="posttitle">Build an application with Node.js and PouchDB</h1>
<p>
<span class="post-date"><time class="post-date">
April 19, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1598</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/Build-application-with-node-js-PouchDB.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build an Application With Node.js and PouchDB"                /> <article class="article-post">
<p>While traditional databases like <a href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/">MySQL</a> or <a href="https://blog.logrocket.com/tag/postgresql/">PostgreSQL</a> have been the go-to option for storing data in server-side applications, they can be inadequate for applications that require offline-first functionality or real-time synchronization between the server and client.</p>
<p>However, creating a Node.js application with PouchDB allows you to build efficient, scalable, and reliable web and mobile applications that can function seamlessly online and offline. In this article, you will create a simple bookstore API with <a href="https://blog.logrocket.com/crud-rest-api-node-js-express-postgresql/">CRUD</a> (create, read, update, delete) functionality using <a href="https://blog.logrocket.com/tag/node/">Node.js</a>, <a href="https://blog.logrocket.com/express-js-5-migration-guide/">Express.js</a>, and PouchDB.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-pouchdb">What is PouchDB?</a></li>
<li><a href="#setting-up-development-environment">Setting up your development environment</a></li>
<li><a href="#creating-pouchdb-database">Creating a PouchDB database</a>
<ul >
<li><a href="#implementing-crud-end-points">Implementing CRUD endpoints</a></li>
<li><a href="#adding-new-book-database">Adding a new book to your database</a></li>
<li><a href="#retrieving-books-from-database">Retrieving books from your database</a></li>
<li><a href="#updating-existing-books-database">Updating existing books in your database</a></li>
<li><a href="#deleting-book-from-database">Deleting a book from your database</a></li>
</ul>
</li>
</ul>
<h2 id="what-pouchdb">What is PouchDB?</h2>
<p>PouchDB is an open source JavaScript database library designed for creating efficient and scalable offline-first web applications. With PouchDB, you can build applications seamlessly across multiple platforms, including browsers, Node.js servers, and mobile devices.</p>
<p>While applications using PouchDB are offline, it stores the data locally. When the applications are online, it synchronizes the data with <a href="https://blog.logrocket.com/couchdb-vs-leveldb-comparing-state-database-options/">CouchDB</a> and other compatible servers, keeping the user’s data updated and in sync.</p>
<p>PouchDB provides a lightweight, embedded database that can be easily integrated into applications, allowing users to work offline and synchronize data when a network connection is available. It supports a variety of storage backends, including <a href="https://blog.logrocket.com/cache-invalidation-strategies-using-indexeddb-in-angular-2/">IndexedDB</a>, <a href="https://blog.logrocket.com/couchdb-vs-leveldb-comparing-state-database-options/">LevelDB</a>, and <a href="https://blog.logrocket.com/speeding-up-development-environment-sqlite/">SQLite</a>, and provides a flexible API for querying and manipulating data.</p>
<h2 id="setting-up-development-environment">Setting up your development environment</h2>
<p>To set up your development environment, create a project directory and <code>cd</code> into it by running the command below:</p>
<pre class="language-bash hljs">mkdir pouchdb-tutorial &amp;&amp; cd pouchdb-tutorial
</pre>
<p>Next, create a <code>package.json</code> file with all its defaults by running the command below:</p>
<pre class="language-bash hljs">npm init -y
</pre>
<p>Then, install <code><a href="https://blog.logrocket.com/nestjs-vs-express-js/">Express.js</a></code> by running the command below:</p>
<pre class="language-bash hljs">npm install express
</pre>
<p>After that, install PouchDB by running this command:</p>
<pre>npm install pouchdb
</pre>
<p>Finally, create an <code>index.js</code> file and add the code block below to your file to create a basic Express server:</p>
<pre class="language-javascript hljs">// index.js
const express = require("express");
const app = express();
const port = 3000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.listen(port, () => console.log(`Example app listening on port ${port}!`));
</pre>
<p>The code block above creates a simple Express server running on port <code>3000</code>.</p>
<h2 id="creating-pouchdb-database">Creating a PouchDB database</h2>
<p>PouchDB is not a self-contained database; instead, it is an abstraction layer over other databases. By default, when you use PouchDB in the browser, it ships with IndexedDB as an adapter. In Node.js, it ships with LevelDB.</p>
<p>To create a PouchDB database, create a <code>config</code> folder in your project’s root directory and a <code>db.js</code> file in your <code>config</code> folder. Next, add the code block below to your <code>db.js</code> file:</p>
<pre class="language-javascript hljs">// config/db.js
const pouchDB = require("pouchdb");

// Create a new database instance
const db = new pouchDB("books");

// Export the database instance
module.exports = db;
</pre>
<p>The code block above created and exported a PouchDB database <code>"books"</code> using the <code>pouchDB</code> constructor. By default, this database’s adapter is LevelDB. Next, import the database instance in your <code>index.js</code> file. Like so:</p>
<pre class="language-javascript hljs">// index.js
const db = require("./config/db");
</pre>
<p>Then, add the code block below to your <code>index.js</code> file to get information about your PouchDB database:</p>
<pre class="language-javascript hljs">// index.js
// Get database info
db.info().then((info) => console.log(info));
</pre>
<p>The code block above logs information about your database to your console, as shown in the image below:</p>
<p><img             class="aligncenter size-full wp-image-167538 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/database-node-js-pouch.jpeg" alt="Database for Node.js and PouchDB" width="730" height="140"    /><noscript><img               class="aligncenter size-full wp-image-167538" src="https://blog.logrocket.com/wp-content/uploads/2023/04/database-node-js-pouch.jpeg" alt="Database for Node.js and PouchDB" width="730" height="140"  /></noscript></p>
<h2 id="implementing-crud-end-points">Implementing CRUD endpoints</h2>
<p>Now, let’s implement the CRUD endpoints. Create a <code>routes</code> folder in your project’s root directory and create a <code>book.js</code> file in the folder. Next, add the code block below to your <code>book.js</code> file to implement <a href="https://blog.logrocket.com/comparing-wayne-js-express-js-service-worker-routing/">E</a><a href="https://blog.logrocket.com/comparing-wayne-js-express-js-service-worker-routing/">xpress routing</a>:</p>
<pre class="language-javascript hljs">// book.js
const express = require("express");
const router = express.Router();
</pre>
<p>PouchDB provides two methods to persist data to a database: <code>post</code> and <code>put</code>. When you save data to your database using <code>put</code>, you must specify and <code>_id</code> property. However, PouchDB automatically generates an <code>_id</code> property when you save data using <code>post</code>. The <a href="https://pouchdb.com/api.html#create_document">PouchDB documentation</a> recommends the use of <code>put</code> over <code>post</code>, so this tutorial will cover the <code>put</code> method.</p>
<p>To generate unique <code>_id</code> properties for each document, you will use an npm package, <a href="https://www.npmjs.com/package/uuid">uuid</a>. Run the <code>npm install uuid</code> command below to install the package. Next, import uuid in your <code>book.js</code> file, like so:</p>
<pre class="language-javascript hljs">// book.js
const { v4: uuidv4 } = require('uuid');
</pre>
<p>Finally, import your PouchDB database instance in your <code>book.js</code> file:</p>
<pre class="language-javascript hljs">// book.js
const db = require("../config/db");
</pre>
<h3 id="adding-new-book-database">Adding a new book to your database</h3>
<p>To implement the logic for adding a new <code>book</code> document to your database, add the code block below to your <code>book.js</code> file:</p>
<pre class="language-javascript hljs">// book.js
// POST /books/new
router.post("/books/new", async (req, res) => {
  const { title, author, genre, year } = req.body;
  // Generating _id
  const _id = uuidv4();

  const book = {
    _id,
    title,
    author,
    genre,
    year,
  };

  // Saving to DB
  db.put(book)
    .then((response) => {
      res.status(201).send(response);
    })
    .catch((error) => {
      res.status(500).json({ error: error.message });
    });
});
</pre>
<p>The code block above implements a <a href="https://blog.logrocket.com/understanding-controllers-routes-nestjs/"><code>POST</code> route handler</a> for <a href="http://localhost:3000/books/new">http://localhost:3000/books/new</a>. First, you extracted the required properties from the <code>req.body</code> object. Then, you generated a unique <code>_id</code> by calling the <code>uuidv4</code> method you imported earlier. Next, you stored the required properties and the <code>_id</code> in an object. Finally, using PouchDB’s asynchronous <code>put</code> method, you store the <code>book</code> object in your database and send a response to the server.</p>
<h3 id="retrieving-books-from-database">Retrieving books from your database</h3>
<p>To implement the logic for getting all the <code>book</code> documents in your database, add the code block below to your <code>book.js</code> file:</p>
<pre class="language-javascript hljs">// book.js
// GET /books
router.get("/books", async (req, res) => {
  try {
    const books = await db.allDocs({ include_docs: true });
    const response = books.rows.map((book) => book.doc);

    res.status(200).send(response);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
</pre>
<p>The code block above implements a <code>GET</code> route handler for <a href="http://localhost:3000/books/">http://localhost:3000/books/</a>. First, you retrieved all the documents from your database using PouchDB’s <code>allDocs({include_docs: true})</code> method. The returned document contains a lot of nested data; by accessing the <code>rows</code> property and mapping through it to extract the <code>doc</code> property of each, you’ll get a more readable response that you send back to the server.</p>
<p>To implement the logic for getting a <code>book</code> document based on a given <code>_id</code> in your database, add the code block below to your <code>book.js</code> file:</p>
<pre class="language-javascript hljs">// book.js
// GET /books/:id
router.get("/books/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const book = await db.get(id);
    res.status(200).send(book);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
</pre>
<p>The code block above implements a <code>GET</code> route handler for <a href="http://localhost:3000/books/new">http://localhost:3000/books/</a>:id. First, you extracted the <code>id</code> property from the <code>req.params</code> object. Then, using the extracted <code>id</code> as an argument to the <code>get</code> method, you retrieved the <code>book</code> document with the corresponding <code>_id</code> and sent it back as a response to the server.</p>
<h3 id="updating-existing-books-database">Updating existing books in your database</h3>
<p>To implement the logic for editing a <code>book</code> document based on a given <code>_id</code> in your database, add the following code block to your <code>book.js</code> file:</p>
<pre class="language-javascript hljs">// book.js
// PUT /books/:id
router.put("/books/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { title, author, genre, year } = req.body;

    db.get(id).then(async (doc) => {
      const response = await db.put({
        _id: id,
        _rev: doc._rev,
        title,
        author,
        genre,
        year,
      });
      res.status(201).send(response);
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: error.message });
  }
});
</pre>
<p>The code block above implements a <code>PUT</code> route handler for <a href="http://localhost:3000/books/">http://localhost:3000/books/</a>:id. First, you extracted the <code>id</code> property from the <code>req.params</code> object. Next, you extracted the required properties from the <code>req.body</code> object. Then, using the extracted <code>id</code> as an argument to the <code>get</code> method, you retrieved the <code>book</code> document with the corresponding <code>_id</code> and replaced the old properties with the extracted properties.</p>
<p>Notice that a <code>_rev</code> property was passed along with the extracted properties into the <code>put</code> method. The <code>_rev</code> property ensures that the syncing process happens correctly by preventing possible conflicts when the application is online.</p>
<h3 id="deleting-book-from-database">Deleting a book from your database</h3>
<p>Now, to implement the logic for deleting a <code>book</code> document based on a given <code>_id</code> in your database, add the following code to your <code>book.js</code> file.</p>
<pre class="language-javascript hljs">// book.js
// DELETE /books/:id
router.delete("/books/:id", async (req, res) => {
  try {
    const id = req.params.id;
    const doc = await db.get(id);
    const response = await db.remove(doc);
    res.status(200).send(response);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
</pre>
<p>The code block above implements a <code>DELETE</code> route handler for <a href="http://localhost:3000/books/">http://localhost:3000/books/</a>:id. First, you extracted the <code>id</code> property from the <code>req.params</code> object. Then, using the extracted <code>id</code> as an argument to the <code>get</code> method, you retrieved the <code>book</code> document with the corresponding <code>_id</code> and passed it as an argument to PouchDB’s <code>remove</code> method, effectively deleting it from the database.</p>
<p>Export your Express router by adding the code block below to your <code>book.js</code> file:</p>
<pre class="language-javascript hljs">// book.js
module.exports = router;
</pre>
<p>Then, import your Express router in your <code>index.js</code> file and use it as <a href="https://blog.logrocket.com/express-middleware-a-complete-guide/">middleware</a>:</p>
<pre class="language-javascript hljs">// index.js
app.use(bookRouter);
</pre>
<p>Finally, you can start up your application by running the command below:</p>
<pre class="language-javascript hljs">node index.js
</pre>
<h2>Conclusion</h2>
<p>In this article, you built a functional Node.js API with Express.js using PouchDB as your database. As a server-side application with PouchDB, you used LevelDB as your database adapter. You can learn more about PouchDB in the <a href="https://pouchdb.com/guides/">official PouchDB documentation</a>.</p><div class="code-block code-block-23" >
<div class="blog-plug inline-plug node-plug"><h2>200’s only <img  src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"/></noscript> Monitor failed and slow network requests in production</h2> Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/node-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer"><img src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"/></noscript></a><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens while a user interacts with your app. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.</p> LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>. </div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-167025" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-application-with-node-js-pouchdb/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-application-with-node-js-pouchdb/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-167025" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-application-with-node-js-pouchdb/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-167025" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-application-with-node-js-pouchdb/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/solomonesenyi/">
Solomon Esenyi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Python/Golang developer and Technical Writer with a passion for open-source, cryptography, and serverless technologies.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/node/">#node</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/ux-design/best-practices-website-footer-ux/" rel="prev">Best practices for website footer UX</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/how-to-write-scenarios-using-gherkin-language/" rel="next">How to write scenarios using Gherkin language</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-application-with-node-js-pouchdb/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Build customized data tables with PrimeReact - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-customized-data-tables-primereact/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-customized-data-tables-primereact/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Build customized data tables with PrimeReact - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-customized-data-tables-primereact/">Build customized data tables with PrimeReact - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-167454 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-167454">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/pelumiakintokun/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/02/pelumi-akintokun.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/02/pelumi-akintokun.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/pelumiakintokun/">
Timonwa Akintokun <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and technical writer who is passionate about the web. Creator of websites that tell stories.</span>
</div>
</div>
<h1 class="posttitle">Build customized data tables with PrimeReact</h1>
<p>
<span class="post-date"><time class="post-date">
April 17, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2174</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/build-beautiful-customized-data-table-primereact-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build Beautiful Customized Data Table PrimeReact"                /> <article class="article-post">
<p>In the world of web development, data tables are essential for displaying and organizing large amounts of data clearly and concisely. Data tables are relevant for a wide variety of websites, such as finance, ecommerce, directories, analytics and reporting, CRM and sales management, project management, inventory management, human resources and employee management, and education and learning.</p>
<p>In this article, we’ll demonstrate how to build a beautiful, customized data table using PrimeReact, a popular library that provides a wide range of UI components for React. PrimeReact is a useful resource for easily creating professional-looking data tables that are customizable and responsive, making it an excellent choice for building data-driven React applications.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#setting-up-project">Setting up the project</a></li>
<li><a href="#creating-basic-data-table">Creating a basic data table</a></li>
<li><a href="#customizing-data-table-layout">Customizing the data table layout</a>
<ul >
<li><a href="#sizing-data-table">Sizing the data table</a></li>
<li><a href="#adding-gridlines">Adding gridlines</a></li>
<li><a href="#styling-rows">Styling the rows</a></li>
</ul>
</li>
<li><a href="#defining-custom-content-templating">Defining custom content with templating</a>
<ul >
<li><a href="#adding-custom-header-footer">Adding a custom header and footer</a></li>
<li><a href="#customizing-individual-columns">Customizing individual columns</a></li>
</ul>
</li>
<li><a href="#adding-sorting">Adding sorting</a></li>
<li><a href="#adding-pagination">Adding pagination</a></li>
<li><a href="#adding-radio-checkbox-selection">Adding radio or checkbox selection</a></li>
<li><a href="#displaying-data-table-modal-popup">Displaying the data table as a modal popup</a></li>
</ul>
<h2 id="setting-up-project">Setting up the project</h2>
<p>The first step in building a data table with PrimeReact is to set up the project. If you already have a React project, you can skip this step. If not, you can create a new React project using the following command:</p>
<pre class="language-bash hljs">npx create-react-app my-app
</pre>
<p>Once your project is set up, you’ll need to import PrimeReact. You can do this by running the following command in your terminal:</p>
<pre class="language-bash hljs">npm install primereact primeicons
</pre>
<p>Next, import the PrimeReact styles into your app by copying and pasting the following code in your <code>index.js</code> file:</p>
<pre class="language-javascript hljs">//theme
import "primereact/resources/themes/lara-light-indigo/theme.css";
//core
import "primereact/resources/primereact.min.css";
//icons
import "primeicons/primeicons.css";
</pre>
<h2 id="creating-basic-data-table">Creating a basic data table</h2>
<p>For our demo, we will consider an ecommerce website and will use an array of products available on the site as data for our table. The array contains objects representing products with properties such as <code>id</code>, <code>name</code>, <code>price</code>, <code>category</code>, <code>quantity</code>, and<code> rating</code>, which can be used to populate the data table.</p>
<pre class="language-javascript hljs">const products = [
    {
      id: 1,
      name: "Apple Watch",
      price: "₦350,000",
      category: "Accessories",
      quantity: "7",
      rating: "5",
    },
    {
      id: 2,
      name: "Fitness watch",
      price: "₦10,000",
      category: "Fitness",
      quantity: "23",
      rating: "2",
    },
    {
      id: 3,
      name: "Beach dress",
      price: "₦25,000",
      category: "Clothing",
      quantity: "5",
      rating: "4",
    },
    {
      id: 4,
      name: "Washing machine",
      price: "₦260,000",
      category: "Electronics",
      quantity: "10",
      rating: "4",
    },
    {
      id: 5,
      name: "Blue Jeans",
      price: "₦10,000",
      category: "Clothing",
      quantity: "50",
      rating: "5",
    },
    {
      id: 6,
      name: "Samsung Watch",
      price: "₦270,000",
      category: "Accessories",
      quantity: "7",
      rating: "3",
    },
    {
      id: 7,
      name: "Yoga mat",
      price: "₦15,000",
      category: "Fitness",
      quantity: "15",
      rating: "4",
    },
    {
      id: 8,
      name: "Jumpsuit",
      price: "₦15,700",
      category: "Clothing",
      quantity: "30",
      rating: "5",
    },
    {
      id: 9,
      name: "Hand mixer",
      price: "₦50,000",
      category: "Electronics",
      quantity: "10",
      rating: "4",
    },
    {
      id: 10,
      name: "Pallazo",
      price: "₦12,000",
      category: "Clothing",
      quantity: "4",
      rating: "3",
    },
  ];</pre>
<p>Next, we’ll create a component, called <code>Table</code>, that will be used to render the data table. Then, we’ll add the following code to our <code>Table.js</code> file:</p>
<pre class="language-javascript hljs">import React from "react";
import { DataTable } from "primereact/datatable";
import { Column } from "primereact/column";

const Table = () => {
  const products = [
    // our products array
  ];

  return (
    &lt;div className="table-wrapper">
      &lt;h2 className="table-name">PrimeReact data table&lt;/h2>

      &lt;DataTable value={products} responsiveLayout="scroll">
        &lt;Column field="name" header="Name">&lt;/Column>
        &lt;Column field="price" header="Price">&lt;/Column>
        &lt;Column field="category" header="Category">&lt;/Column>
        &lt;Column field="quantity" header="Quantity">&lt;/Column>
        &lt;Column field="rating" header="Rating">&lt;/Column>
      &lt;/DataTable>
    &lt;/div>
  );
};

export default Table;</pre>
<p>Here we are importing two components from PrimeReact, <code>DataTable</code> and <code>Column</code>. We have a <code>&lt;div></code> element that wraps around the <code>DataTable</code> component we imported. We also have five <code>Column</code> components within the <code>DataTable</code> component.</p>
<p>The <code>DataTable</code> has two props passed into it: <code>products</code> accepts an array of items to be displayed in the table and <code>responsiveLayout</code> determines the responsive layout of the table. It accepts two options: <code>scroll </code>and <code>stack</code>. The <code>scroll</code> option gives the table a horizontal scrollbar for smaller screens, while the <code>stack</code> option defines a breakpoint to display the row’s cells as a vertical stack.</p>
<p>The <code>Column</code> component also has two props passed into it: <code>field</code> and <code>header</code>. The header represents the header or title of a column, and <code>field</code> represents the values we want displayed in that column. We have only five <code>Column</code> components because the objects in our <code>products</code> array have five key-value pairs.</p>
<p>Each value is represented by and displayed in one <code>Column</code> component. For example, the five key-value pairs for the first item listed in the below table are: <code>id</code>–<code>1</code>, <code>name</code>–<code>Apple Watch</code>, <code>price</code>–<code>₦350,000, category</code>–<code>Accessories, quantity</code>–<code>7, and rating</code>–<code>5.</code></p>
<p>Here’s an example of a basic data table built in PrimeReact:</p>
<p><img             class="aligncenter wp-image-167458 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-basic-data-table.png" alt="PrimeReact Basic Data Table" width="720" height="456"    /><noscript><img               class="aligncenter wp-image-167458 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-basic-data-table.png" alt="PrimeReact Basic Data Table" width="720" height="456"  /></noscript></p>
<h2 id="customizing-data-table-layout">Customizing the data table layout</h2>
<p>PrimeReact offers a variety of options for customizing a data table. To start, we can further customize our table by passing more props with varying values to the <code>DataTable</code> or <code>Column</code> components.</p>
<h3 id="sizing-data-table">Sizing the data table</h3>
<p>We can easily change the size of our data table by setting the <code>size</code> property on the <code>DataTable</code> component. It accepts the following values as props: <code>small</code>, <code>normal</code>, and <code>large</code>:</p>
<pre class="language-javascript hljs">   &lt;DataTable
        value={products}
        responsiveLayout="scroll"
        size="small">
      …
   &lt;/DataTable>

The default size prop is normal. Here's a smaller version of our demo PrimeReact data table:</pre>
<p><img             class="aligncenter wp-image-167460 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-resized.png" alt="PrimeReact Data Table Resized" width="720" height="324"    /><noscript><img               class="aligncenter wp-image-167460 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-resized.png" alt="PrimeReact Data Table Resized" width="720" height="324"  /></noscript></p>
<h3 id="adding-gridlines">Adding gridlines</h3>
<p>We can add gridlines to our table to help visually define each cell. To do this, we simply set the <code>gridlines</code> property to <code>true</code>:</p>
<pre class="language-javascript hljs">   &lt;DataTable
        value={products}
        responsiveLayout="scroll"
        size="small"
        showGridlines>
      …
   &lt;/DataTable>

</pre>
<p>Here’s our PrimeReact table with gridlines:</p>
<p><img             class="aligncenter wp-image-167464 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-gridlines.png" alt="PrimeReact Data Table Gridlines" width="720" height="324"    /><noscript><img               class="aligncenter wp-image-167464 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-gridlines.png" alt="PrimeReact Data Table Gridlines" width="720" height="324"  /></noscript></p>
<h3 id="styling-rows">Styling the rows</h3>
<p>We can provide additional visual definition to our table by setting the table rows to display alternating colors. Setting the <code>stripedRows </code>property to <code>true</code> will add a light gray background to alternating rows within the table:</p>
<pre class="language-javascript hljs">   &lt;DataTable
        value={products}
        responsiveLayout="scroll"
        size="small"
        showGridlines
        stripedRows>
      …
    &lt;/DataTable>
</pre>
<p>Here’s our PrimeReact table with striped rows:</p>
<p><img             class="aligncenter wp-image-167468 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-striped-rows.png" alt="PrimeReact Data Table Striped Rows" width="720" height="324"    /><noscript><img               class="aligncenter wp-image-167468 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-striped-rows.png" alt="PrimeReact Data Table Striped Rows" width="720" height="324"  /></noscript></p>
<h2 id="defining-custom-content-templating">Defining custom content with templating</h2>
<p>Templating is a powerful feature of PrimeReact that allows us to define custom content for specific parts of our data table. For example, we can define a custom header or footer for our table or customize the appearance of individual columns.</p>
<h3 id="adding-custom-header-footer">Adding a custom header and footer</h3>
<p>Let’s say we want to create a custom header with the text “All Products” and a custom footer that totals the number of products listed in the table. We can accomplish this by creating the header and footer and then passing them in as props into our <code>DataTable </code>component:</p>
<pre class="language-javascript hljs">const header = &lt;p>All Products&lt;/p>;
const footer = &lt;p>Total products = ${products ? products.length : 0}&lt;/p>;
…

&lt;div className="table-wrapper">
    &lt;h2 className="table-name">PrimeReact data table&lt;/h2>

    &lt;DataTable
        value={products}
        responsiveLayout="scroll"
        size="small"
        showGridlines
        stripedRows
        header={header}
        footer={footer}>
        &lt;Column field="name" header="Name">&lt;/Column>
      …
    &lt;/DataTable>
</pre>
<p>Here’s our PrimeReact table with the custom header and footer:</p>
<p><img             class="aligncenter wp-image-167470 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-custom-header-footer.png" alt="PrimeReact Data Table Custom Header Footer" width="720" height="433"    /><noscript><img               class="aligncenter wp-image-167470 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-custom-header-footer.png" alt="PrimeReact Data Table Custom Header Footer" width="720" height="433"  /></noscript></p>
<h3 id="customizing-individual-columns">Customizing individual columns</h3>
<p>We can customize the appearance of individual columns within our data table by defining custom content for the <code>body</code> property of the <code>Column</code> component. For example, let’s say we want to display stars instead of numbers for the product ratings.</p>
<p>We import the <code>Rating</code> component from PrimeReact, create a rating body template called <code>ratingBodyTemplate</code>, and pass it into the <code>body</code> props of the <code>Rating</code> column:</p>
<pre class="language-javascript hljs">const ratingBodyTemplate = (rowData) => {
    return &lt;Rating value={rowData.rating} readOnly cancel={false} />;
  };
…

&lt;/DataTable>
…
    &lt;Column
        field="rating"
        header="Rating"
        body={ratingBodyTemplate}>&lt;/Column>
&lt;/DataTable>
</pre>
<p>Here’s our PrimeReact table with a custom column displaying a star rating:</p>
<p><img             class="aligncenter wp-image-167473 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-star-rating.png" alt="PrimeReact Data Table Star Rating" width="720" height="324"    /><noscript><img               class="aligncenter wp-image-167473 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-star-rating.png" alt="PrimeReact Data Table Star Rating" width="720" height="324"  /></noscript></p>
<h2 id="adding-sorting">Adding sorting</h2>
<p>By adding the <code>sortable</code> property to a<code> Column</code> component, we can add functionality that enables that column to be sortable in both ascending and descending order. Adding the <code>removableSort</code> property to the<code>Column</code> component allows you to revert to the column’s initial order:</p>
<pre class="language-javascript hljs">&lt;DataTable
      value={products}
      responsiveLayout="scroll"
      size="small"
      showGridlines
      stripedRows
      header={header}
      footer={footer}
      removableSort>
      &lt;Column field="name" header="Name" sortable>&lt;/Column>
      &lt;Column field="price" header="Price" sortable>&lt;/Column>
      &lt;Column field="category" header="Category" sortable>&lt;/Column>
      &lt;Column field="quantity" header="Quantity" sortable>&lt;/Column>
 &lt;/DataTable>
</pre>
<p>Here’s our PrimeReact data table with sorting functionality for each column:</p>
<p><img             class="aligncenter wp-image-167476 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-sorting.gif" alt="PrimeReact Data Table Sorting" width="600" height="320"  /><noscript><img               class="aligncenter wp-image-167476 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-sorting.gif" alt="PrimeReact Data Table Sorting" width="600" height="320"/></noscript></p>
<h2 id="adding-pagination">Adding pagination</h2>
<p>With a larger data table, it can be helpful to add pagination instead of trying to display all of the data on one page. We can get this functionality by adding the <code>paginator</code> property to the DataTable component and the <code>paginatorTemplate</code> prop. The <code>paginatorTemplate</code> prop allows us to define a template that indicates how we want the paginator to look and what properties or details we want it to display.</p>
<p>For example, we may want to only display the navigation buttons to the user and have the user select the number of rows to be displayed per page:</p>
<pre class="language-javascript hljs">&lt;DataTable
        …
        paginator
        paginatorTemplate="CurrentPageReport FirstPageLink PrevPageLink PageLinks
        NextPageLink LastPageLink"
        rows={5}>
…
&lt;/DataTable>
</pre>
<p>Here’s our PrimeReact table with pagination navigation:</p>
<p><img             class="aligncenter wp-image-167478 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-pagination.png" alt="PrimeReact Data Table Pagination" width="720" height="324"    /><noscript><img               class="aligncenter wp-image-167478 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-pagination.png" alt="PrimeReact Data Table Pagination" width="720" height="324"  /></noscript></p>
<h2 id="adding-radio-checkbox-selection">Adding radio or checkbox selection</h2>
<p>PrimeReact enables us to turn a row into a radio or checkbox input, thereby enabling the user to select one or multiple rows simultaneously.</p>
<p>To add row selection functionality to our data table, we’ll first import the <code>useState</code> Hook from React and create a state to store the selected product:</p>
<pre class="language-javascript hljs">import React, { useState } from "react";
…
const [selectedProduct, setSelectedProduct] = useState(null);</pre>
<p>Next, we’ll include the following to our <code>DataTable</code> component as props:</p>
<pre class="language-javascript hljs"> &lt;DataTable
        …
        selection={selectedProduct}
        onSelectionChange={(e) => setSelectedProduct(e.value)}
        dataKey="id">
 &lt;/DataTable></pre>
<p>Finally, we’ll add the <code>selectionMode </code>prop to the first <code>Column</code> component. We can pass in either <code>single</code> or <code>multiple</code> into this prop. For radio buttons, we would use <code>single</code>, indicating that only one column may be selected at a time. For checkboxes, we would use<code> multiple</code>, indicating that one or more columns can be selected simultaneously:</p>
<pre class="language-javascript hljs"> &lt;Column selectionMode="single" field="name" header="Name">&lt;/Column></pre>
<p>With radio buttons (<code>single</code> selection mode), when we select a column, the <code>onSelectionChange</code> function sets the <code>selection</code> value — in our case <code>selectedProduct</code> — to the object value of that selected column:</p>
<p><img             class="aligncenter wp-image-167480 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-radio-button-selection.png" alt="PrimeReact Data Table Radio Button Selection" width="720" height="324"    /><noscript><img               class="aligncenter wp-image-167480 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-radio-button-selection.png" alt="PrimeReact Data Table Radio Button Selection" width="720" height="324"  /></noscript></p>
<p>With checkboxes (<code>multiple</code> selection mode), when we select one or multiple columns, the <code>onSelectionChange</code> function sets the <code>selection</code> value to an array of objects (i.e., each column’s value):</p>
<p><img             class="aligncenter wp-image-167482 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-checkbox-selection.png" alt="PrimeReact Data Table Checkbox Selection" width="720" height="324"    /><noscript><img               class="aligncenter wp-image-167482 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/primereact-data-table-checkbox-selection.png" alt="PrimeReact Data Table Checkbox Selection" width="720" height="324"  /></noscript></p>
<h2 id="displaying-data-table-modal-popup">Displaying the data table as a modal popup</h2>
<p>Sometimes it’s useful to hide a data table and only display it when a user clicks on a button. We can accomplish this by displaying the data table as a dialog or modal popup.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>First, we import the <code>Button</code> and <code>Dialog</code> components from PrimeReact:</p>
<pre class="language-javascript hljs">import { Button } from "primereact/button";
import { Dialog } from "primereact/dialog";</pre>
<p>Then we create a state called <code>dialogVisible</code> that will determine the visibility of the table:</p>
<pre class="language-javascript hljs">const [dialogVisible, setDialogVisible] = useState(false);</pre>
<p>Next, we create three functions: <code>openDialog</code>, <code>closeDialog</code>, and <code>dialogFooterTemplate</code>. <code>openDialog</code> sets the visibility of our <code>Dialog</code> to <code>true</code>, while <code>closeDialog</code> sets the visibility of our <code>Dialog</code> to <code>false</code>. <code>dialogFooterTemplate</code> is the button that will be displayed in the footer of our <code>Dialog</code>; it also sets the visibility of our <code>Dialog</code> to <code>false</code>:</p>
<pre class="language-javascript hljs">const openDialog = () => {
    setDialogVisible(true);
  };

  const closeDialog = () => {
    setDialogVisible(false);
  };

  const dialogFooterTemplate = (
    &lt;Button label="Ok" icon="pi pi-check" onClick={closeDialog} />
  );</pre>
<p>Now, we create a <code>Button</code> element that will render the <code>Dialog</code> visible on click. Lastly, we wrap the <code>DataTable</code> component with the <code>Dialog</code> component:</p>
<pre class="language-javascript hljs">    &lt;div className="table-wrapper">
      &lt;h2 className="table-name">PrimeReact data table&lt;/h2>
      &lt;Button
        label="View table"
        icon="pi pi-external-link"
        onClick={openDialog}
      />
      &lt;Dialog
        header="Flex Scroll"
        visible={dialogVisible}
        style={{ width: "75vw" }}
        maximizable
        modal
        contentStyle={{ height: "300px" }}
        onHide={closeDialog}
        footer={dialogFooterTemplate}>
        &lt;DataTable
          value={products}
          responsiveLayout="scroll"
          header={header}
          footer={footer}
          size="small"
          showGridlines
          stripedRows
          dataKey="id">
          &lt;Column field="name" header="Name">&lt;/Column>
          &lt;Column field="price" header="Price">&lt;/Column>
          &lt;Column field="category" header="Category">&lt;/Column>
          &lt;Column field="quantity" header="Quantity">&lt;/Column>
        &lt;/DataTable>
      &lt;/Dialog>
    &lt;/div>
</pre>
<p>Here’s our PrimeReact data table, displayed as a popup modal:</p>
<p><img             class="aligncenter wp-image-167484 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/prime-react-data-table-popup-modal.gif" alt="PrimeReact Data Table Popup Modal" width="600" height="320"  /><noscript><img               class="aligncenter wp-image-167484 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/prime-react-data-table-popup-modal.gif" alt="PrimeReact Data Table Popup Modal" width="600" height="320"/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>PrimeReact offers a variety of props and options for adjusting the appearance and functioanlity of data tables, enabling you to organize and display large amounts of data clearly and concisely. In this article, we explored how to build a beautiful, customized data table using PrimeReact.</p>
<p>We started by building a basic data table, then we demonstrated how to customize the layout, add a custom header and footer, and customize individual columns. We showed how to add sorting, pagination, and radio and checkbox selection. We also demonstrated how to display the data table as a popup modal. This tutorial illustrated how several PrimeReact components, such as the <code>Button</code>, <code>Rating</code>, and <code>Dialog</code>, work well together and improve the overall usability and design of a data table.</p>
<p>For other data table customization options, check out the <a href="https://primereact.org/datatable/">PrimeReact documentation</a>. You can find the code in this article in this <a href="https://github.com/Timonwa/primereact-datatable">GitHub repo</a>.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-167454" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-customized-data-tables-primereact/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-customized-data-tables-primereact/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-167454" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-customized-data-tables-primereact/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-167454" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-customized-data-tables-primereact/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/02/pelumi-akintokun.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/02/pelumi-akintokun.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/pelumiakintokun/">
Timonwa Akintokun <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and technical writer who is passionate about the web. Creator of websites that tell stories.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/understanding-prioritize-react-ui-updates/" rel="prev">Understanding when and how to prioritize React UI updates</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/understanding-handling-rust-mutex-poisoning/" rel="next">Understanding and handling Rust mutex poisoning</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-customized-data-tables-primereact/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Building Vue.js grid layouts: Best libraries and components - LogRocket Blog</title>
			<link>https://blog.logrocket.com/building-vue-js-grid-layouts/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/building-vue-js-grid-layouts/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Building Vue.js grid layouts: Best libraries and components - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/building-vue-js-grid-layouts/">Building Vue.js grid layouts: Best libraries and components - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-165703 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-vue" id="post-165703">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ivaylogerchev/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/09/ivaylogerchev.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/09/ivaylogerchev.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ivaylogerchev/">
Ivaylo Gerchev <span class="btn follow">Follow</span></a>
<span class="author-description d-block">All things are difficult before they are easy.</span>
</div>
</div>
<h1 class="posttitle">Building Vue.js grid layouts: Best libraries and components</h1>
<p>
<span class="post-date"><time class="post-date">
April 3, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2777</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/Building-Vue-js-grid-layouts.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Building Vue Js Grid Layouts - Best Libraries And Components"                /> <article class="article-post">
<p>Data must be presented in an ordered and easy-to-digest manner so people can effortlessly find what they are looking for. One of the most powerful and useful ways to display a certain amount of data is to render it in a data grid layout.</p>
<p>Knowing how to display data in a grid is one of the most important skills a developer can have. In this tutorial, we’ll explore the best ways to do so when using Vue.js. We will cover:</p>
<ul>
<li><a href="#data-grids-vs-data-tables">Data grids vs. data tables</a></li>
<li><a href="#exploring-best-options-building-data-grid-layouts-vue">Exploring the best options for building data grid layouts in Vue</a></li>
<li><a href="#dedicated-vue-data-grid-libraries">Dedicated Vue data grid libraries</a>
<ul >
<li><a href="#vue-grid-layout">Vue Grid Layout</a></li>
<li><a href="#vue-grid-responsive">Vue Grid Responsive</a></li>
<li><a href="#vue-layout-system">Vue Layout System</a></li>
</ul>
</li>
<li><a href="#data-grid-components-vue-component-libraries">Data grid components from Vue component libraries</a>
<ul >
<li><a href="#quasar-grid-component">Quasar’s grid component</a></li>
<li><a href="#vuetify-grid-component">Vuetify’s grid component</a></li>
<li><a href="#bootstrapvue-grid-component">BootstrapVue’s grid component</a></li>
</ul>
</li>
<li><a href="#gridstack-vanilla-js-data-grid-library-vue-support">Gridstack — A vanilla JS data grid library with Vue support</a></li>
</ul>
<h2 id="data-grids-vs-data-tables">Data grids vs. data tables</h2>
<p>Before we start exploring Vue grid layout options, we need to make an important clarification.</p>
<p>It’s strange to me, but many developers use the terms “table” and “grid” interchangeably. For example, there are many Vue libraries for building complex data tables that contain the term “grid” in their names. This is technically incorrect. Let’s see why.</p>
<p>At first glance, a table and a grid may look pretty similar because they both have columns and rows. But if we take a closer look, we’ll see that the context and purpose in which they are used differ drastically.</p>
<p>The best way to understand the difference between both is to think about a data table like a good old HTML table, whereas a data grid is more like a <a href="https://blog.logrocket.com/css-flexbox-vs-css-grid/">CSS flexbox or CSS grid layout</a>.</p>
<p>In a data table, a single row represents a whole unit of data — for example, a blog post. In such a case, the table’s columns would represent various parts of the post’s data, like its title, content, author, date, tags, categories, and other information.</p>
<p>Since the rows and columns are tightly coupled in a data table, we can’t move or reorder a single cell without destroying the data’s integrity. We can only safely move an entire row or column.</p>
<p>In a data grid, all cells are independent, and a single cell represents a whole unit of data, the same way a row from a table would. We can move or reorder the cells in our grid however we want, and the data will stay intact — only the layout will change.</p>
<p>Some real-world examples of data grids could include a blog listing or <a href="https://blog.logrocket.com/responsive-image-gallery-css-flexbox/">an image gallery</a>.</p>
<p>Those of you who remember when HTML tables were used for building layouts will understand the above difference perfectly. The purpose of data tables is not to build layouts, but rather, to hold a certain amount of structured data, just like the <a href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/">tables in a database such as MySQL</a>.</p>
<p>With this clarification in mind, let’s explore how we can build data grid layouts in Vue.</p>
<h2 id="exploring-best-options-building-data-grid-layouts-vue">Exploring the best options for building data grid layouts in Vue</h2>
<p>In the following sections, we’ll explore the best available options for building data grids with Vue. We’ll group them into the following three usage categories:</p>
<ul>
<li>Using a separate Vue data grid library</li>
<li>Using a data grid component from a particular Vue component library</li>
<li>Using a vanilla JS data grid library with Vue</li>
</ul>
<p>Let’s explore these options and see when to use each.</p>
<h2 id="dedicated-vue-data-grid-libraries">Dedicated Vue data grid libraries</h2>
<p>The first approach is to use a separate Vue library designed for building grid layouts. Use this option if your project is small or you want to enhance it with some data grid functionality.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>We will explore three libraries you can use for this approach — Vue Grid Layout, Vue Grid Responsive, and Vue Layout System.</p>
<h3 id="vue-grid-layout">Vue Grid Layout</h3>
<p>One of the best options in this group is the <a href="https://jbaysolutions.github.io/vue-grid-layout/">Vue Grid Layout library</a>. It’s pretty flexible and offers the following features:</p>
<ul>
<li>Drag and resize widgets (table cells) interactively</li>
<li>Widgets can be static</li>
<li>RTL support</li>
<li>Responsive grid</li>
<li>Layout can be serialized and restored</li>
<li>Supports Vue 2.2+</li>
</ul>
<p>Note: For Vue 3 support, use the <code><a href="https://www.npmjs.com/package/vue3-drr-grid-layout">vue3-drr-grid-layout</a></code><a href="https://www.npmjs.com/package/vue3-drr-grid-layout"> package</a>.</p>
<p>The library provides two components — <code>grid-layout</code> and <code>grid-item</code> — for building grid layouts. Each one provides a variety of properties you can customize.</p>
<p>For example, in the <code>grid-layout</code> component, you can use <code>isDraggable</code> to make grid items draggable and <code>isResizable</code> to make them resizable. In the <code>grid-item</code> component, you can set an item to be static by using the <code>static</code> prop.</p>
<p>Take a look at the following example:</p>
<pre class="language-html hljs">&lt;div id="app">
  &lt;grid-layout class="grid"
  :layout.sync="layout"
  :col-num="6"
  :row-height="30"
  :is-draggable="true"
  :is-resizable="true"
  :margin="[10, 10]">

    &lt;grid-item v-for="item in layout"
    :x="item.x"
    :y="item.y"
    :w="item.w"
    :h="item.h"
    :i="item.i"
    :key="item.i">
    {{item.i}}
    &lt;/grid-item>

  &lt;/grid-layout>
&lt;/div>

&lt;script>
  new Vue({
    el: "#app",
    data: {
      layout: [
        {"x":0,"y":0,"w":2,"h":2,"i":"1"},
        {"x":2,"y":0,"w":1,"h":2,"i":"2"},
        {"x":3,"y":0,"w":3,"h":2,"i":"3"},
        {"x":0,"y":0,"w":1,"h":3,"i":"4"},
        {"x":4,"y":0,"w":2,"h":3,"i":"5"},
      ],
    },
  })
&lt;/script>
</pre>
<p>The data for the grid is provided via the <code>layout</code> prop. We also set the number of columns and the height of rows, and added some space between cells via the <code>margin</code> prop.</p>
<p>Each item must have the following properties added in the data source:</p>
<ul>
<li><code>x</code> and <code>y</code> — initial horizontal and vertical position of the item</li>
<li><code>w</code> and <code>h</code> — initial width and height of the item</li>
<li><code>i</code> — unique identifier for the item</li>
</ul>
<p>Here is how the above code will be rendered:</p>
<p><img             class="aligncenter size-full wp-image-165706 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img1-Data-grid-Vue-Grid-Layout-library-e1680287943265.png" alt="Data Grid Layout Built With Vue Grid Layout Library With Five Widgets Arranged In Two Rows" width="730" height="293"    /><noscript><img               class="aligncenter size-full wp-image-165706" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img1-Data-grid-Vue-Grid-Layout-library-e1680287943265.png" alt="Data Grid Layout Built With Vue Grid Layout Library With Five Widgets Arranged In Two Rows" width="730" height="293"  /></noscript></p>
<p>Note that for this example, I’ve used CSS — the code for which is not included here — to style and display grid lines. This styling is for the purposes of this tutorial only, so you can more easily distinguish individual columns and rows and see how much space each widget occupies.</p>
<p>Visit the Vue Grid Layout documentation for the <a href="https://jbaysolutions.github.io/vue-grid-layout/guide/properties.html">full list of available props</a>.</p>
<p>Vue Grid Layout is an excellent choice when you need an interactive grid for your app layout — for example, if you are building a dashboard grid with customizable widgets. Of course, it can be used for static grids too, but for such a case, the next option may be more appropriate.</p>
<h3 id="vue-grid-responsive">Vue Grid Responsive</h3>
<p>If you want just a plain static grid without extras, then <a href="https://github.com/andrelmlins/vue-grid-responsive">Vue Grid Responsive</a> is a great option. It offers a simple responsive grid system based on Bootstrap classes with support for Vue 2 and 3.</p>
<p>Vue Grid Responsive provides <code>row</code>, <code>column</code>, and <code>hidden</code> components you can use to build a grid. Here is a simple example:</p>
<pre class="language-html hljs">&lt;row :gutter="12">
  &lt;column :xs="12" :md="4" :lg="3">xs=12 md=4 lg=3&lt;/column>
  &lt;column :xs="12" :md="4" :lg="3">xs=12 md=4 lg=3&lt;/column>
  &lt;column :xs="12" :md="4" :lg="3">xs=12 md=4 lg=3&lt;/column>
  &lt;column :xs="12" :md="4" :lg="3">xs=12 md=4 lg=3&lt;/column>
  &lt;column :xs="12" :lg="6">xs=12 lg=6&lt;/column>
  &lt;column :xs="12" :lg="6">xs=12 lg=6&lt;/column>
  &lt;column :lg="4">lg=4&lt;/column>
  &lt;column :lg="4">lg=4&lt;/column>
  &lt;column :lg="4">lg=4&lt;/column>
&lt;/row>
</pre>
<p>The resulting Vue grid layout will look like so:</p>
<p><img             class="aligncenter size-full wp-image-165708 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img2-Data-grid-Vue-Grid-Responsive-library-e1680287961766.png" alt="Data Grid Layout Built With Vue Grid Responsive Library With Nine Widgets Arranged In Three Rows" width="730" height="110"    /><noscript><img               class="aligncenter size-full wp-image-165708" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img2-Data-grid-Vue-Grid-Responsive-library-e1680287961766.png" alt="Data Grid Layout Built With Vue Grid Responsive Library With Nine Widgets Arranged In Three Rows" width="730" height="110"  /></noscript></p>
<p>You can specify the size, breakpoints, and gutter of your columns, as well as set a column count and order.</p>
<p>This small library is ideal for building layouts for simple blogs, landing pages, and portfolios. But what if you need a more powerful and flexible layout-building solution? The next option may provide what you need.</p>
<h3 id="vue-layout-system">Vue Layout System</h3>
<p>If you have to build complex and tricky layouts, then the <a href="https://leeboyin.github.io/vue-layout-system/">Vue Layout System library</a> is the best choice. It provides eight main layout components for many different scenarios:</p>
<ul>
<li><code>LayoutAbsolute</code> — offers nine absolute positioning options for placing content in a relatively positioned element</li>
<li><code>LayoutAlign</code> — for content alignment</li>
<li><code>LayoutColumns</code> — for creating evenly spaced and ordered columns</li>
<li><code>LayoutFlexColumn</code> — for setting a column’s top, bottom, and remaining space</li>
<li><code>LayoutFlexRow</code> — for setting a row’s left, right, and remaining space</li>
<li><code>LayoutGrid</code> — for more complex grids</li>
<li><code>LayoutList</code> — for regular vertical lists</li>
<li><code>LayoutListInline</code> — for horizontal lists</li>
</ul>
<p>By combining the above components, you can build almost any layout you can think of.</p>
<p>Let’s see some examples. We’ll start with the code for each. First, here is a simple grid:</p>
<pre class="language-html hljs">&lt;layout-grid
column-count="12"
gap-x="5"
gap-y="5">
  &lt;layout-grid-cell span="4">
    &lt;button>4 columns&lt;/button>
  &lt;/layout-grid-cell>
  &lt;layout-grid-cell span="2">
    &lt;button>2 columns&lt;/button>
  &lt;/layout-grid-cell>
  &lt;layout-grid-cell span="6">
    &lt;button>6 columns&lt;/button>
  &lt;/layout-grid-cell>
  &lt;layout-grid-cell span="5">
    &lt;button>5 columns&lt;/button>
  &lt;/layout-grid-cell>
  &lt;layout-grid-cell span="3">
    &lt;button>3 columns&lt;/button>
  &lt;/layout-grid-cell>
  &lt;layout-grid-cell span="4">
    &lt;button>4 columns&lt;/button>
  &lt;/layout-grid-cell>
&lt;/layout-grid>
</pre>
<p>Second, here is a grid made with the <code>LayoutColumns</code> component:</p>
<pre class="language-html hljs">&lt;layout-columns
column-count="3"
flow-direction="row"
vertical-align="center"
gap-x="3"
gap-y="5">
  &lt;button>1&lt;/button>
  &lt;button>2&lt;/button>
  &lt;button>3&lt;/button>
  &lt;button>4&lt;/button>
  &lt;button>5&lt;/button>
  &lt;button>6&lt;/button>
&lt;/layout-columns>
</pre>
<p>Last, here is a simple list:</p>
<pre class="language-html hljs">&lt;layout-list
padding-x="5"
padding-y="5"
gap="5"
horizontal-align="center"
>
  &lt;button>OK&lt;/button>
  &lt;button>Cancel&lt;/button>
  &lt;button>Save&lt;/button>
&lt;/layout-list>
</pre>
<p>You can see what the examples look like below:</p>
<p><img             class="aligncenter size-full wp-image-165710 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img3-Data-grid-Vue-Layout-System-library-e1680287981525.png" alt="Data Grid, Column, And List Components From Vue Layout System Library Demonstrated With Three To Six Examples In Each Category" width="730" height="506"    /><noscript><img               class="aligncenter size-full wp-image-165710" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img3-Data-grid-Vue-Layout-System-library-e1680287981525.png" alt="Data Grid, Column, And List Components From Vue Layout System Library Demonstrated With Three To Six Examples In Each Category" width="730" height="506"  /></noscript></p>
<p>This library is great for things like news websites or online stores — in other words, use cases that demand complex and rich layouts.</p>
<p>There are many more Vue data grid libraries for building layouts, but most of them seem not to be actively maintained. If you want to check them out anyways, <a href="https://github.com/vuejs/awesome-vue#ui-layout">take a look at this comprehensive list</a>.</p>
<h2 id="data-grid-components-vue-component-libraries">Data grid components from Vue component libraries</h2>
<p>The second approach to building a Vue grid layout is to use data grid components from a particular UI library. Use this option if your project is big or requires the use of a components library.</p>
<p>We will discuss data grid components available in three Vue component libraries — Quasar, Vuetify, and Bootstrap.</p>
<p>All of these libraries use similar principles and techniques for their grid components, but they differ in how exactly they implement those components. The right choice between them depends on your past experience and your project’s requirements.</p>
<p>For example, if you’ve used Bootstrap before, then BootstrapVue could be the easiest for you. But if your project is complex or cross-platform, you may need a more sophisticated library such as Quasar or Vuetify. With that in mind, let’s move on.</p>
<h3 id="quasar-grid-component">Quasar’s grid component</h3>
<p><a href="https://quasar.dev/layout/grid/introduction-to-flexbox">Quasar provides a grid component</a> that leverages CSS flexbox classes — <code>row</code>, <code>column</code>, <code>wrap</code>, and others — for building grids.</p>
<p>You can leverage this grid component along with <a href="https://quasar.dev/layout/layout">Quasar’s special QLayout component</a>, which is for building simple base app layouts. QLayout provides the following main components:</p>
<ul>
<li><code>q-layout</code> — to wrap the layout section in a container</li>
<li><code>q-header</code> and <code>q-footer</code> — for adding headers and footers</li>
<li><code>q-page-container</code> and <code>q-page</code> — for encapsulating pages</li>
<li><code>q-drawer</code> — for sidebars and navigation</li>
</ul>
<p>Here is an example of a simple layout:</p>
<pre class="language-html hljs">&lt;template>
  &lt;q-layout view="hHh lpr fFf">

    &lt;q-header elevated class="bg-primary text-white">
      &lt;q-toolbar>
        &lt;q-btn dense flat round icon="menu" @click="toggleLeftDrawer" />
        &lt;q-toolbar-title>
          Header
        &lt;/q-toolbar-title>
      &lt;/q-toolbar>
    &lt;/q-header>

    &lt;q-drawer v-model="leftDrawerOpen" side="left" overlay bordered>
      &lt;!-- drawer content -->
    &lt;/q-drawer>

    &lt;q-page-container>
      &lt;q-page>
        &lt;!-- page content -->
      &lt;/q-page>
    &lt;/q-page-container>

    &lt;q-footer elevated class="bg-grey-8 text-white">
      &lt;q-toolbar>
        &lt;q-toolbar-title>
          &lt;div>Footer&lt;/div>
        &lt;/q-toolbar-title>
      &lt;/q-toolbar>
    &lt;/q-footer>

  &lt;/q-layout>
&lt;/template>

&lt;script>
import { ref } from 'vue'

export default {
  setup () {
    const leftDrawerOpen = ref(false)

    return {
      leftDrawerOpen,
      toggleLeftDrawer () {
        leftDrawerOpen.value = !leftDrawerOpen.value
      }
    }
  }
}
&lt;/script>
</pre>
<p>Here is how the layout created above should look:</p>
<p><img             class="aligncenter size-full wp-image-165712 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img4-Data-grid-Quasar-grid-component.png" alt="Grid Component From Quasar Library Shown Used To Create Page Header, Footer, And Containers" width="730" height="410"    /><noscript><img               class="aligncenter size-full wp-image-165712" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img4-Data-grid-Quasar-grid-component.png" alt="Grid Component From Quasar Library Shown Used To Create Page Header, Footer, And Containers" width="730" height="410"  /></noscript></p>
<p>Quasar is a great choice if you want to build cross-platform apps and you need a feature-rich library with a full set of components.</p>
<h3 id="vuetify-grid-component">Vuetify’s grid component</h3>
<p><a href="https://vuetifyjs.com/en/components/grids/">Vuetify also provides a grid component</a> with a 12-point, CSS flexbox-based grid system. It is built on a group of containers, rows, and columns used to lay out and align content. Here are the available components:</p>
<ul>
<li><code>v-container</code> — wraps the layout in a container</li>
<li><code>v-row</code> — defines a row</li>
<li><code>v-col</code> — defines a column</li>
<li><code>v-spacer</code> — adds space</li>
</ul>
<p>CSS flexbox classes are defined via props.</p>
<p>Here is an example of a simple grid:</p>
<pre class="language-html hljs">&lt;v-container class="bg-surface-variant">
  &lt;v-row>
    &lt;v-col>
      &lt;v-sheet class="pa-2 ma-2">
        4 columns (auto)
      &lt;/v-sheet>
    &lt;/v-col>
    &lt;v-col>
      &lt;v-sheet class="pa-2 ma-2">
        4 columns (auto)
      &lt;/v-sheet>
    &lt;/v-col>
    &lt;v-col>
      &lt;v-sheet class="pa-2 ma-2">
        4 columns (auto)
      &lt;/v-sheet>
    &lt;/v-col>
  &lt;/v-row>

  &lt;v-row>
    &lt;v-col cols="4">
      &lt;v-sheet class="pa-2 ma-2">
        4 columns
      &lt;/v-sheet>
    &lt;/v-col>

    &lt;v-spacer>&lt;/v-spacer>

    &lt;v-col cols="6">
      &lt;v-sheet class="pa-2 ma-2">
        6 columns
      &lt;/v-sheet>
    &lt;/v-col>
  &lt;/v-row>
&lt;/v-container>
</pre>
<p>Here is how the above grid should look when rendered:</p>
<p><img             class="aligncenter size-full wp-image-165714 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img5-Data-grid-Vuetify-grid-component-e1680288013177.png" alt="Data Grid Component From Vuetify Library Shown In Example With Five Widgets Displayed In Two Rows" width="730" height="157"    /><noscript><img               class="aligncenter size-full wp-image-165714" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img5-Data-grid-Vuetify-grid-component-e1680288013177.png" alt="Data Grid Component From Vuetify Library Shown In Example With Five Widgets Displayed In Two Rows" width="730" height="157"  /></noscript></p>
<p>As is the case with Quasar, Vuetify also supports cross-platform development and is feature-rich.</p>
<h3 id="bootstrapvue-grid-component">BootstrapVue’s grid component</h3>
<p>For those who use and love the Bootstrap CSS framework, <a href="https://bootstrap-vue.org/docs/components/layout">BootstrapVue’s grid component</a> could be an ideal solution. It offers a 12-point, mobile-first grid system built using CSS flexbox and provides the following components:</p>
<ul>
<li><code>b-container</code> — wraps the grid in a container</li>
<li><code>b-row</code> — defines a row</li>
<li><code>b-form-row</code> — defines a row in a form</li>
<li><code>b-col</code> — defines a column</li>
</ul>
<p>Let’s see an example:</p>
<pre class="language-html hljs">&lt;b-container class="bv-example-row">
  &lt;b-row class="text-center">
    &lt;b-col>3 columns (auto)&lt;/b-col>
    &lt;b-col cols="6">6 columns&lt;/b-col>
    &lt;b-col>3 columns (auto)&lt;/b-col>
  &lt;/b-row>

  &lt;b-row class="text-center">
    &lt;b-col cols="3">3 columns&lt;/b-col>
    &lt;b-col>6 columns (auto)&lt;/b-col>
    &lt;b-col cols="3">3 columns&lt;/b-col>
  &lt;/b-row>
&lt;/b-container>
</pre>
<p>Here is the rendered grid:</p>
<p><img             class="aligncenter size-full wp-image-165716 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img6-Data-grid-BootstrapVue-grid-component-e1680288041949.png" alt="Data Grid Component From Bootstrapvue Library Demonstrated By Rendering Two Sample Grids Split Into Three Widgets Each, With A Widget Six Columns Wide Centered And Two Widgets Three Columns Wide On Each Side" width="729" height="162"    /><noscript><img               class="aligncenter size-full wp-image-165716" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img6-Data-grid-BootstrapVue-grid-component-e1680288041949.png" alt="Data Grid Component From Bootstrapvue Library Demonstrated By Rendering Two Sample Grids Split Into Three Widgets Each, With A Widget Six Columns Wide Centered And Two Widgets Three Columns Wide On Each Side" width="729" height="162"  /></noscript></p>
<p>And that was the last library in this category. For more similar options, take a look at this <a href="https://github.com/vuejs/awesome-vue#frameworks">list of Vue-based UI frameworks</a>.</p>
<h2 id="gridstack-vanilla-js-data-grid-library-vue-support">Gridstack — A vanilla JS data grid library with Vue support</h2>
<p>The third approach is to use a vanilla JS library to build your Vue grid layout. Use this option if you want to make your project more flexible or if you want to port it to different libraries.</p>
<p>The only option we’ll explore here is <a href="https://gridstackjs.com/">GridstackJS</a>. It’s pretty similar to Vue Grid Layout, but can be used with any frontend library.</p>
<p>GridstackJS is a powerful and flexible TypeScript-based library offering the following features:</p>
<ul>
<li>Mobile support</li>
<li>Draggable and resizable items</li>
<li>Responsive column-based layouts</li>
<li>Ability to save and restore layout structure</li>
<li>Support for dragging between multiple grids</li>
<li>Nested grids</li>
<li>Integration with popular UI frameworks like Angular, Vue, React, etc.</li>
</ul>
<p>Here is a pretty simple example of Gridstack capabilities:</p>
<pre class="language-html hljs">&lt;style type="text/css">
  .grid-stack { background-color: lightblue; }
  .grid-stack-item-content { background-color: lightyellow; }
&lt;/style>

&lt;div class="grid-stack">&lt;/div>

&lt;script type="text/javascript">
 var items = [
    {x:0,y:0,w:2,h:2, content: "1"},
    {x:2,y:0, content: "2"},
    {x:3,y:0,w:3,h:2, content: "3"},
    {x:6,y:3,w:1,h:3, content: "4"},
    {x:7,y:0,w:2,h:3, content: "5"},
  ];

  var grid = GridStack.init();
  grid.load(items);
&lt;/script>
</pre>
<p>Here is the result of the above code:</p>
<p><img             class="aligncenter size-full wp-image-165718 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img7-Data-grid-Gridstack-JS-library.png" alt="Data Grid Example Built With Gridstack Js Library To Demonstrate Vue Support For Grid Layouts With Five Widgets Of Various Sizes In A Row" width="730" height="193"    /><noscript><img               class="aligncenter size-full wp-image-165718" src="https://blog.logrocket.com/wp-content/uploads/2023/03/img7-Data-grid-Gridstack-JS-library.png" alt="Data Grid Example Built With Gridstack Js Library To Demonstrate Vue Support For Grid Layouts With Five Widgets Of Various Sizes In A Row" width="730" height="193"  /></noscript></p>
<p>This is a great library if you need to build complex interactive layouts. Additionally, Gridstack may be a good option if you work with two or more UI frameworks — Vue and React, for example — and want a universal data grid solution for all of them instead of using different solutions for each one.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Building layouts is an unavoidable task in a developer’s life. No matter what you are building — a website, a web app, or something else — you are bound to add some kind of layout at some point.</p>
<p>Luckily, in this tutorial, you learned the best ways to build data grids in Vue to display content, as well as how to choose the most appropriate option for your case.</p>
<p>We also discussed how data tables differ from data grids. Since developers often incorrectly use both terms interchangeably, this distinction is important to understand when you are searching for an appropriate layout library.</p>
<p>Now you’re ready to start building layouts with Vue.</p><div class="code-block code-block-20" >
<div class="blog-plug inline-plug vue-inline"><h2>Experience your Vue apps exactly how a user does</h2> Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, <a href="https://lp.logrocket.com/blg/vue-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. </p><p>The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.</p><p>Modernize how you debug your Vue apps - <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-8 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-8 .fadeOut {
    opacity:0 !important;
}

.code-block-8 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165703" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/building-vue-js-grid-layouts/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/building-vue-js-grid-layouts/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165703" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/building-vue-js-grid-layouts/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165703" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/building-vue-js-grid-layouts/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/09/ivaylogerchev.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/09/ivaylogerchev.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
 <a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ivaylogerchev/">
Ivaylo Gerchev <span class="btn follow">Follow</span></a>
<span class="author-description d-block">All things are difficult before they are easy.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/vue/">#vue</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/create-smooth-page-transitions-barba-js/" rel="prev">Create smooth page transitions with Barba.js</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/react-table-complete-guide/" rel="next">React Table: A complete guide with updates for TanStack Table</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/building-vue-js-grid-layouts/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Building a TypeScript CLI with Node.js and Commander - LogRocket Blog</title>
			<link>https://blog.logrocket.com/building-typescript-cli-node-js-commander/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/building-typescript-cli-node-js-commander/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Building a TypeScript CLI with Node.js and Commander - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/building-typescript-cli-node-js-commander/">Building a TypeScript CLI with Node.js and Commander - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-139072 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-node tag-typescript" id="post-139072">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/stanleyulili/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/12/stanley-ulili.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/12/stanley-ulili.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/stanleyulili/">
Stanley Ulili <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a freelance web developer and researcher from Malawi. I love learning new things, and writing helps me understand and solidify concepts. I hope by sharing my experience, others can learn something from them.</span>
</div>
</div>
<h1 class="posttitle">Building a TypeScript CLI with Node.js and Commander</h1>
<p>
<span class="post-date"><time class="post-date">
April 13, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">18 min read</span>
<span class="wordcount">5194</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/10/building-typescript-cli-commander-js-node-js.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Building a TypeScript CLI with Node.js and Commander"                /> <article class="article-post">
<p><em><strong>Editor’s note:</strong> This post was updated on 13 April 2023 to include instructions on how to use GitHub Actions to publish the Node.js CLI to npm so it will be accessible to all users.</em></p>
<p>The command line has thousands of tools, such as <code>awk</code>, <code>sed</code>, <code>grep</code>, and <code>find</code> available at your disposal that cut development time and automate tedious tasks. Creating a command line tool in Node.js isn’t very complicated, thanks to a powerful library like <a href="https://github.com/tj/commander.js">Commander.js</a>.</p>
<p>Pairing Node.js with TypeScript helps you catch bugs early during the development process so that you can ship CLIs that are more reliable and have fewer bugs.</p>
<p>In this tutorial, we will talk about what a CLI is and then demonstrate how to use Commander.js with TypeScript to build one. We will then make the CLI globally accessible so that users can access it anywhere in their system. Lastly, we’ll use GitHub Actions to publish it to npm so that it will be readily available to all developers.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#why-commander-js">Why Commander.js?</a></li>
<li><a href="#understanding-command-line-interface">Understanding the command-line interface</a></li>
<li><a href="#getting-started-configuring-typescript">Getting started and configuring TypeScript</a></li>
<li><a href="#creating-cli-typescript">Creating a CLI with TypeScript</a>
<ul >
<li><a href="#creating-name-cli">Creating the name of the CLI</a></li>
<li><a href="#creating-cli-options-using-commander-js">Creating the CLI options using Commander.js</a></li>
<li><a href="#defining-options-using-commander-js">Defining options using Commander.js</a></li>
</ul>
</li>
<li><a href="#creating-actions-cli">Creating actions for the CLI</a></li>
<li><a href="#showing-help-page">Showing the help page</a></li>
<li><a href="#making-cli-globally-accessible">Making the CLI globally accessible</a></li>
<li><a href="#publishing-npm-using-github-actions">Publishing to npm using GitHub Actions</a>
<ul >
<li><a href="#creating-git-repository">Creating a Git repository</a></li>
<li><a href="#creating-access-token">Creating an access token</a></li>
<li><a href="#setting-up-github-actions-publish-package">Setting up GitHub Actions to publish the package</a></li>
</ul>
</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow this tutorial, you will need:</p>
<ul>
<li>Node.js v ≥ 16 installed on your system</li>
<li>Familiarity with how to <a href="https://blog.logrocket.com/understanding-asynchronous-javascript/">write asynchronous code in JavaScript</a></li>
<li>Working knowledge of Node.js and TypeScript</li>
<li>A GitHub account</li>
<li>An npm account</li>
</ul>
<h2 id="why-commander-js">Why Commander.js?</h2>
<p>A command-line interface, often referred to as a CLI, is a program that allows users to type instructions and interact with a script that processes the input and produces an output. Node.js has many packages that allow you to build CLIs. Some examples are <a href="https://github.com/leo/args">args</a>, <a href="https://github.com/minimistjs/minimist">minimist</a>, and <a href="https://github.com/oclif/oclif">oclif</a>.</p>
<p>Commander.js provides a lot of features that allow you to succinctly build command-line interfaces. Furthermore, the Node.js community provides libraries such as <a href="https://github.com/chalk/chalk">Chalk</a> and <a href="https://github.com/patorjk/figlet.js">Figlet</a> that complement Commander.js CLIs to make them look visually appealing.</p>
<p>We will use Commander.js because of the following features:</p>
<ul>
<li>Support for sub-commands</li>
<li>Support for various command-line options, such as required, variadic, or optional</li>
<li>Custom event listeners</li>
<li>Automated help</li>
</ul>
<h2 id="understanding-command-line-interface">Understanding the command-line interface</h2>
<p>Before we dive into building CLIs, let’s look at how an existing CLI works.</p>
<p>If you are following this tutorial, you probably have Node.js installed on your machine. Node.js provides a CLI that you can access by typing the following command:</p>
<pre class="language-bash hljs">node
</pre>
<p>This allows you to access the Node.js read–eval–print loop (REPL) where you can enter and execute JavaScript code.</p>
<p>You can modify the Node.js CLI to do something else with the use of command-line flags, or options. Exit the REPL by typing <strong>CTRL+D</strong>, then check the Node.js version, like so:</p>
<pre class="language-bash hljs">node -v
// v18.11.0
</pre>
<p>As you can see in the output, passing the <code>-v</code> option changed the behavior of the CLI to show the Node.js version. You can also use the long-form options:</p>
<pre class="language-bash hljs">node --version
// v18.11.0
</pre>
<p>Other Node.js CLI options require an argument to be passed along with the option. For example, the <code>-e</code> option, which is a short form of <code>--eval</code>, accepts an argument of a string that contains JavaScript code. Node executes the code and logs the result in the terminal:</p>
<pre class="language-bash hljs">node -e "console.log(4 * 2)"
// 8
</pre>
<p>The <code>-e</code> option returns an error if no argument is passed:</p>
<pre class="language-bash hljs">node -e
// node: -e requires an argument
</pre>
<p>Now that we have an idea of how a CLI works. Let’s look at the Commander.js terminology for the Node CLI options we have seen far:</p>
<ul>
<li>Boolean option: These options don’t require arguments. <code>-v</code> is an example of a Boolean option; other familiar examples are <code>ls -l</code> or <code>sudo -i</code></li>
<li>Required option: These options require arguments. For example, <code>node -e "console.log(4 * 2)"</code> throws an error if an argument isn’t passed</li>
<li>Option-argument: These are the arguments passed to an option. In the <code>node -e "console.log(4 * 2)"</code> command, <code>"console.log(4 * 2)"</code> is an option-argument; another example is <code>git status -m "commit message"</code>, where the <code>"commit message"</code> is an option-argument for the <code>-m</code> option</li>
</ul>
<p>Now that you have an idea of what a CLI is, we will create a directory and configure it to use TypeScript and Commander.js.</p>
<h2 id="getting-started-configuring-typescript">Getting started and configuring TypeScript</h2>
<p>In this section, we will create a directory for the project, initialize it as an npm package, install all the necessary dependencies, and configure TypeScript.</p>
<p>To begin, create the directory for the project:</p>
<pre class="language-bash hljs">mkdir directory_manager
</pre>
<p>Change into the directory:</p>
<pre class="language-bash hljs">cd directory_manager
</pre>
<p>Initialize the directory as an npm project:</p>
<pre class="language-bash hljs">npm init -y
</pre>
<p>This creates a <code>package.json</code> file, which contains important information about your project and track dependencies.</p>
<p>Next, run the following command:</p>
<pre class="language-bash hljs">npm install commander figlet
</pre>
<p>Commander.js is our library for building a CLI, and Figlet will be used for turning CLI text into ASCII art.</p>
<p>Next, download the TypeScript and <code>ts-node</code> packages:</p>
<pre class="language-bash hljs">npm install @types/node typescript --save-dev
</pre>
<p>Now, create a <code>tsconfig.json</code> file in your text editor and add the following configuration settings for TypeScript:</p>
<pre class="language-json hljs">{
  "compilerOptions": {
    "rootDir": "src",
    "outDir": "dist",
    "strict": true,
    "target": "es6",
    "module": "commonjs",
    "sourceMap": true,
    "esModuleInterop": true,
    "moduleResolution": "node"
  }
}
</pre>
<p>Let’s go over some of the options:</p>
<ul>
<li><code>rootDir</code>: Directory containing the TypeScript files(<code>.ts</code> files) for the CLI, which we’ll keep in the <code>src</code> directory</li>
<li><code>outDir</code>: Directory containing TypeScript-compiled JavaScript source code. We will use the <code>dist</code> directory</li>
<li><code>strict</code>: Disables optional typing and ensures that all the TypeScript code you write has types</li>
<li><code>target</code>: Version of <a href="https://en.wikipedia.org/wiki/ECMAScript">ECMAScript</a> to which TypeScript should compile JavaScript</li>
</ul>
<p>For a comprehensive look at all the options, visit the <a href="https://www.typescriptlang.org/tsconfig">TypeScript documentation</a>.</p>
<p>Next, in the <code>package.json</code> file, create a <code>build</code> script that you will use to compile TypeScript(omit the comments in the JSON file:</p>
<pre class="language-json hljs">{
  ...
  "scripts": {
    // add the following line
    "build": "npx tsc",
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  ...
}
</pre>
<p>To compile TypeScript later in the tutorial, you will run the build script with <code>npm run build</code>, which will run the <code>npx tsc</code> command that compiles TypeScript to JavaScript.</p>
<p>We have now configured TypeScript and added a script for compiling TypeScript. We will start building a CLI next.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h2 id="creating-cli-typescript">Creating a CLI with TypeScript</h2>
<p>In this section, we will begin building a CLI using TypeScript and Commander.js. It will look as follows:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli.png" alt="Screenshot of the CLI" width="730" height="333"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli.png" alt="Screenshot of the CLI" width="730" height="333"/></noscript></p>
<p>The CLI will be used to manage a directory and it will have a <code>-l</code> option that will list directory contents in a table format. For each item, it will display its name, size, and date of creation. It will also have a <code>-m</code> for creating directories and a <code>-t</code>option for creating empty files.</p>
<p>Now that you have an idea of what we will be building, we will break the CLI into smaller chunks and start building each part.</p>
<h3 id="creating-name-cli">Creating the name of the CLI</h3>
<p>In this section, we will create the name of the CLI and use the Figlet package to turn it into ASCII art text.</p>
<p>It will look like this when finished:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-name-ascii-art.png" alt="Screenshot of CLI name in ASCII Art" width="730" height="123"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-name-ascii-art.png" alt="Screenshot of CLI name in ASCII Art" width="730" height="123"/></noscript></p>
<p>In your project directory, create the <code>src</code> directory and navigate into it:</p>
<pre class="language-bash hljs">mkdir src &amp;&amp; cd src
</pre>
<p>This directory will contain the TypeScript files. You might recall, we specified this directory in the <code>rootDir</code> option when we configured TypeScript with the <code>tsconfig.js</code> file earlier in the tutorial.</p>
<p>Next, create an <code>index.ts</code> file and add the following contents:</p>
<pre class="language-typescript hljs">const figlet = require("figlet");

console.log(figlet.textSync("Dir Manager"));
</pre>
<p>In the first line, we import the Figlet module. Next, we invoke the <code>figlet.textSync()</code> method with the string <code>Dir Manager</code> as the argument to turn the text into ASCII Art. Finally, we log the text in the console.</p>
<p>To verify that the changes work, save your file. Compile the TypeScript file to JavaScript with the following command:</p>
<pre class="language-bash hljs">npm run build
</pre>
<p>When TypeScript finishes compiling, you will see output like this:</p>
<pre class="language-bash hljs">// output
> <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="34404d44514757465d44406b55444474051a041a04">[email protected]</a> build
> npx tsc
</pre>
<p>If successful, you won’t see any errors here.</p>
<p>You may recall that we added an <code>outDir</code> option and set it to the <code>dist</code> directory in the <code>tsconfig.json</code> file. After compiling TypeScript, the directory will be created automatically in the root directory.</p>
<p>Change into the <code>dist</code> directory:</p>
<pre class="language-bash hljs">cd ../dist
</pre>
<p>List the directory contents:</p>
<pre class="language-bash hljs">ls

// output
index.js  index.js.map
</pre>
<p>You will see that the <code>index.js</code> file has been created. You can run the file with Node.js as follows:</p>
<pre class="language-bash hljs">node index.js
</pre>
<p>Upon running the command, you will see the CLI name in ASCII art:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-name-ascii-art-1.png" alt="Screenshot of the CLI name" width="730" height="123"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-name-ascii-art-1.png" alt="Screenshot of the CLI name" width="730" height="123"/></noscript></p>
<p>Now, go back to the root directory:</p>
<pre class="language-bash hljs">cd ..
</pre>
<p>Going forward, we won’t log into the <code>dist</code> directory to run the file. We will do it while in the root directory as <code>node dist/index.js</code>.</p>
<p>Now that you can create the name of the CLI in ASCII text, we will create the CLI options.</p>
<h3 id="creating-cli-options-using-commander-js">Creating the CLI options using Commander.js</h3>
<p>In this section, we will use Commander.js to create a description for the CLI and its options.<br/>
We will create the following options:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/cli-options.png" alt="Using Commander.js to create a description for the CLI and its options." width="730" height="216"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/cli-options.png" alt="Using Commander.js to create a description for the CLI and its options." width="730" height="216"/></noscript></p>
<p>The <code>-V</code> option will invoke the Commander.js <code>version()</code> method, and the <code>-h</code>will be provided by default. We are now left to define three options:</p>
<ul>
<li><code>-l</code> / <code>--ls</code> : Modifies the CLI to list directory contents in a table. It will also accept an optional directory path argument</li>
<li><code>-m</code> / <code>--mkdir</code>: Used to create a directory. It will require an option-argument, which is the name of the directory to be created</li>
<li><code>-t</code> / <code>--touch</code>: Modifies the CLI to create an empty file. It will require an option-argument, which is the name of the file</li>
</ul>
<p>Now that we know the options we’ll be creating, we will define them using Commander.js.</p>
<h3 id="defining-options-using-commander-js">Defining options using Commander.js</h3>
<p>In your text editor, open the <code>index.ts</code> file in the <code>src</code> directory and add the following code to import and initialize Commander.js:</p>
<pre class="language-typescript hljs">const { Command } = require("commander"); // add this line
const figlet = require("figlet");

//add the following line
const program = new Command();

console.log(figlet.textSync("Dir Manager"));
</pre>
<p>In the first line, we import the Commander.js module and extract the <code>Command</code> class. We then set the <code>program</code> variable to an instance of the <code>Command</code> class. The class gives us several methods that can be used to set the version, description, and CLI options.</p>
<p>Next, define the CLI options in your <code>index.ts</code> file:</p>
<pre class="language-typescript hljs">...

program
  .version("1.0.0")
  .description("An example CLI for managing a directory")
  .option("-l, --ls  [value]", "List directory contents")
  .option("-m, --mkdir &lt;value>", "Create a directory")
  .option("-t, --touch &lt;value>", "Create a file")
  .parse(process.argv);

const options = program.opts();
</pre>
<p>In the preceding code, we use the <code>program</code> variable containing the Commander instance to invoke the <code>version()</code> method. The method takes a string containing the version of the CLI and Commander creates the <code>-V</code> option for you.</p>
<p>Next, we chain the <code>description()</code> method call with the text that describes the CLI program. Following this, you chain a call to the <code>option()</code> method of Commander package, which takes two arguments: an option and a description. The first argument is a string that specifies the <code>-l</code> option and the long name <code>--ls</code>. We then wrap <code>value</code> in <code>[]</code> so that the option can accept an optional argument. The second argument is the help text that will be shown when users use the <code>-h</code> flag.</p>
<p>After that, we chain another <code>option()</code> method call to define the <code>-m</code> / <code>--mkdir</code>option. The <code>&lt;></code> in the <code>&lt;value></code> signifies that it requires an argument. Following this, we chain another <code>option()</code> to define the <code>-t</code> option and the long name <code>--touch</code>, which also requires an argument.</p>
<p>We then chain the <code>parse()</code> method call, which processes the arguments in the <code>process.argv</code>, which is an array containing the arguments the user passed. The first argument is <code>node</code>, the second argument is the program filename, and the rest are additional arguments.</p>
<p>Finally, we set the <code>options</code> variable to the <code>program.opts()</code> call, which returns an object. The object has CLI options as properties, whose values are the arguments the user passed.</p>
<p>At this point, the <code>index.ts</code> file will look like the following:</p>
<pre class="language-typescript hljs">const { Command } = require("commander");
const figlet = require("figlet");

const program = new Command();

console.log(figlet.textSync("Dir Manager"));

program
  .version("1.0.0")
  .description("An example CLI for managing a directory")
  .option("-l, --ls  [value]", "List directory contents")
  .option("-m, --mkdir &lt;value>", "Create a directory")
  .option("-t, --touch &lt;value>", "Create a file")
  .parse(process.argv);

const options = program.opts();
</pre>
<p>When you are finished making changes, save the file, then compile TypeScript:</p>
<pre class="language-bash hljs">npm run build
</pre>
<p>Run the <code>index.js</code> with the <code>-h</code> option to see the CLI help page:</p>
<pre class="language-bash hljs">node dist/index.js -h
</pre>
<p>Upon running the command, the page will look like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-help-page-1.png" alt="Screenshot of the CLI help page" width="730" height="333"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-help-page-1.png" alt="Screenshot of the CLI help page" width="730" height="333"/></noscript></p>
<p>Let’s also try the <code>-V</code> option:</p>
<pre class="language-bash hljs">node dist/index.js -V
// 1.0.0
</pre>
<p>So far, the <code>-h</code> and the <code>-V</code> option work without any issues. If you try the other options we defined, you will only see the CLI name:</p>
<pre class="language-bash hljs">node dist/index.js -l
</pre>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/cli-name-after-using-option.png" alt="Screenshot of CLI name in ASCII art after using the &lt;code>-l&lt;/code> option" width="730" height="123"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/cli-name-after-using-option.png" alt="Screenshot of CLI name in ASCII art after using the &lt;code>-l&lt;/code> option" width="730" height="123"/></noscript></p>
<p>This is happening because we have not defined the actions for the other options.</p>
<h2 id="creating-actions-cli">Creating actions for the CLI</h2>
<p>So far, we have defined options for the CLI but they have no actions associated with them. In this section, we will create actions for the options so that when a user uses the options, the CLI will perform the relevant task.</p>
<p>We will begin with the <code>-l</code> option. We want the CLI to show directory contents in a table with the following fields:</p>
<ul>
<li>Filename</li>
<li>Size(KB)</li>
<li><code>created_at</code></li>
</ul>
<p>A user can also provide an optional directory path:</p>
<pre class="language-bash hljs">node dist/index.js -l /home/username/Documents
</pre>
<p>If the user doesn’t pass any option-argument, the CLI will only show contents in the location of the <code>index.js</code> file we are executing:</p>
<pre class="language-bash hljs">node dist/index.js -l
</pre>
<p>In your <code>index.ts</code> file, import the <code>fs</code> and <code>path</code> modules:</p>
<pre class="language-typescript hljs">const { Command } = require("commander");
// import fs and path modules
const fs = require("fs");
const path = require("path");
const figlet = require("figlet");
</pre>
<p>Define a <code>listDirContents()</code> function with an <a href="https://blog.logrocket.com/exception-handling-in-javascript/">exception handler</a> at the end of the file:</p>
<pre class="language-typescript hljs">const { Command } = require("commander");
...
const options = program.opts();

//define the following function
async function listDirContents(filepath: string) {
  try {

  } catch (error) {
    console.error("Error occurred while reading the directory!", error);
  }
}
</pre>
<p>The <code>listDirContents()</code> asynchronous function takes a <code>filepath</code> parameter, which has a TypeScript type declaration of <code>string</code>. The type ensures that the function only accepts strings as arguments, and the <code>async</code> keyword you prefix makes the function asynchronous. This will allow us to use the <code>await</code> keyword inside the function, which we’ll do soon.</p>
<p>Within the function, we define the <code>try</code> block, which is empty for now. It will contain the functionality that lists the directory contents and format the result into a table. After that, we define the <code>catch</code> block that will log a message in the console if the code contained in the <code>try</code> block has an exception.</p>
<p>Let’s add the code that lists the directory contents in the <code>listDirContents()</code>function:</p>
<pre class="language-typescript hljs">async function listDirContents(filepath: string) {
  try {
    // add the following
    const files = await fs.promises.readdir(filepath);
    const detailedFilesPromises = files.map(async (file: string) => {
      let fileDetails = await fs.promises.lstat(path.resolve(filepath, file));
      const { size, birthtime } = fileDetails;
      return { filename: file, "size(KB)": size, created_at: birthtime };
    });
  } catch (error) {
    console.error("Error occurred while reading the directory!", error);
  }
}
</pre>
<p>First, we call <code>fs.promises.readdir()</code> with the value in the <code>filepath</code>parameter to read the directory contents. The function returns a promise, so we prefix it with the <code>await</code> keyword to wait for it to resolve. Once resolved, <code>files</code>is set to an array.</p>
<p>Second, we iterate over each element in the <code>files</code> array and return a new array using the <code>map()</code> method, which takes an asynchronous callback. The callback accepts the <code>file</code> parameter. In the callback, we invoke <code>fs.promises.lstat()</code>with the full path of the file to get more details about the file, such as <code>size</code>, <code>birthtime</code>, and <code>info</code>. We then extract the <code>size</code> and <code>birthtime</code> properties and the return an object with the <code>filename</code>, <code>size(KB)</code>, and <code>created_at</code>properties into the array that the <code>map()</code> method returns into the <code>detailedFilesPromise</code> variable.</p>
<p>Now, add the following code toward the end of the <code>try</code> block to create a table that displays the directory contents:</p>
<pre class="language-typescript hljs">async function listDirContents(filepath: string) {
  try {
    const files = await fs.promises.readdir(filepath);
    const detailedFilesPromises = files.map(async (file: string) => {
      let fileDetails = await fs.promises.lstat(path.resolve(filepath, file));
      const { size, birthtime } = fileDetails;
      return { filename: file, "size(KB)": size, created_at: birthtime };
    });
    // add the following
    const detailedFiles = await Promise.all(detailedFilesPromises);
    console.table(detailedFiles);
  } catch (error) {
    console.error("Error occurred while reading the directory!", error);
  }
}
</pre>
<p>Now, each element in the the <code>detailedFilesPromise</code> will return a promise and evaluate to an object once resolved. To wait for all of them to resolve, we call the <code>Promise.all()</code> method.</p>
<p>Finally, we invoke <code>console.table()</code> with the <code>detailedFiles</code> array to log the data in the console.<br/>
Let’s now define an action for the <code>-m</code> option. To do that, define the <code>createDir()</code> function below the <code>listDirContents()</code> function:</p>
<pre class="language-typescript hljs">async function listDirContents(filepath: string) {
  ...
}

// create the following function
function createDir(filepath: string) {
  if (!fs.existsSync(filepath)) {
    fs.mkdirSync(filepath);
    console.log("The directory has been created successfully");
  }
}
</pre>
<p>In the <code>CreateDir()</code> function, we check if the given directory path exists. If it doesn’t exist, we call <code>fs.mkdirSync()</code> to create a directory, then log a success message.</p>
<p>Before we invoke the function, define a <code>createFile()</code> function for the <code>-t</code> flag:</p>
<pre class="language-typescript hljs">async function listDirContents(filepath: string) {
  ...
}

function createDir(filepath: string) {
  ...
}
// create the following function
function createFile(filepath: string) {
  fs.openSync(filepath, "w");
  console.log("An empty file has been created");
}
</pre>
<p>In the <code>createFile()</code> function, we invoke <code>fs.openSync()</code> to create an empty file in the given path. We then log a confirmation message to the terminal.</p>
<p>So far, we have created three functions but we haven’t called them. To do that, we need to check if the user has used the option, so that we can invoke the suitable function.</p>
<p>To check if the user has used the <code>-l</code> or <code>--ls</code> option, add the following in <code>index.ts</code>:</p>
<pre class="language-typescript hljs">...
function createFile(filepath: string) {
  ...
}
// check if the option has been used the user
if (options.ls) {
  const filepath = typeof options.ls === "string" ? options.ls : __dirname;
  listDirContents(filepath);
}
</pre>
<p>If <code>options.ls</code> is set to a value, we set the <code>filepath</code> variable to the path the user provided, if <code>option.ls</code> is a string; otherwise, it’s set to the file path of the <code>index.js</code> file in the <code>dist</code> directory. After that, we call the <code>listDirContents()</code> with the <code>filepath</code> variable.</p>
<p>Now, let’s invoke the <code>createDir()</code> and <code>createFile()</code> function when the user uses the appropriate option:</p>
<pre class="language-typescript hljs">if (options.ls) {
  ...
}

// add the following code
if (options.mkdir) {
  createDir(path.resolve(__dirname, options.mkdir));
}
if (options.touch) {
  createFile(path.resolve(__dirname, options.touch));
}
</pre>
<p>If the user uses the <code>-m</code> flag and passes an argument, we invoke <code>createDir()</code>with the full path to the <code>index.js</code> file to create the directory.</p>
<p>If the user uses the <code>-t</code> flag and passes an argument, we invoke the <code>createFile()</code> function with the full path to the <code>index.js</code> location.</p>
<p>At this point, the complete <code>index.ts</code> file will look like this:</p>
<pre class="language-typescript hljs">const { Command } = require("commander");
const fs = require("fs");
const path = require("path");
const figlet = require("figlet");

const program = new Command();

console.log(figlet.textSync("Dir Manager"));

program
  .version("1.0.0")
  .description("An example CLI for managing a directory")
  .option("-l, --ls  [value]", "List directory contents")
  .option("-m, --mkdir &lt;value>", "Create a directory")
  .option("-t, --touch &lt;value>", "Create a file")
  .parse(process.argv);

const options = program.opts();

async function listDirContents(filepath: string) {
  try {
    const files = await fs.promises.readdir(filepath);
    const detailedFilesPromises = files.map(async (file: string) => {
      let fileDetails = await fs.promises.lstat(path.resolve(filepath, file));
      const { size, birthtime } = fileDetails;
      return { filename: file, "size(KB)": size, created_at: birthtime };
    });
    const detailedFiles = await Promise.all(detailedFilesPromises);
    console.table(detailedFiles);
  } catch (error) {
    console.error("Error occurred while reading the directory!", error);
  }
}
function createDir(filepath: string) {
  if (!fs.existsSync(filepath)) {
    fs.mkdirSync(filepath);
    console.log("The directory has been created successfully");
  }
}

function createFile(filepath: string) {
  fs.openSync(filepath, "w");
  console.log("An empty file has been created");
}

if (options.ls) {
  const filepath = typeof options.ls === "string" ? options.ls : __dirname;
  listDirContents(filepath);
}
if (options.mkdir) {
  createDir(path.resolve(__dirname, options.mkdir));
}
if (options.touch) {
  createFile(path.resolve(__dirname, options.touch));
}
</pre>
<p>Save your file and compile TypeScript:</p>
<pre class="language-bash hljs">npm run build
</pre>
<p>Let’s verify that the options work. In your terminal, enter the following to try the <code>-l</code> option:</p>
<pre class="language-bash hljs">node dist/index.js -l
</pre>
<p>You will see the directory contents in a table that looks similar to this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-directory-contents-table.png" alt="Screenshot of directory contents in a table" width="730" height="224"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-directory-contents-table.png" alt="Screenshot of directory contents in a table" width="730" height="224"/></noscript></p>
<p>Next, pass the directory path of your choosing as an argument:</p>
<pre class="language-bash hljs">node dist/index.js -l /home/&lt;your_username>/
</pre>
<p>In the output, you will see the directory contents of your chosen path:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/directory-contents-home-directory.png" alt="Screenshot of directory contents in the home directory" width="730" height="432"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/directory-contents-home-directory.png" alt="Screenshot of directory contents in the home directory" width="730" height="432"/></noscript></p>
<p>Using the <code>-m</code> option, create a new directory with any name you prefer:</p>
<pre class="language-bash hljs">node dist/index.js -m new_directory
// The directory has been created successfully
</pre>
<p>Let’s also create an empty file using the <code>-t</code> option:</p>
<pre class="language-bash hljs">node dist/index.js -t empty_file.txt
// An empty file has been created
</pre>
<p>Following this, let’s check if the directory and the empty file have been created with the following:</p>
<pre class="language-bash hljs">node dist/index.js -l
</pre>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/new-directory-empty-filme-1.png" alt="Screenshot of directory contents showing a new directory and an empty file that was created" width="730" height="272"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/new-directory-empty-filme-1.png" alt="Screenshot of directory contents showing a new directory and an empty file that was created" width="730" height="272"/></noscript></p>
<p>The output shows the <code>new_directory</code> and the <code>empty_file.txt</code> file, confirming that they were created.</p>
<p>Now, if you use the <code>node dist/index.js</code> command without any option, it will show the CLI name:</p>
<pre class="language-bash hljs">node dist/index.js
</pre>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-name-ascii-art-2.png" alt="Screenshot of CLI name in ASCII Art" width="730" height="123"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-name-ascii-art-2.png" alt="Screenshot of CLI name in ASCII Art" width="730" height="123"/></noscript></p>
<h2 id="showing-help-page">Showing the help page</h2>
<p>It would be a good idea to show the help page when no options have been passed. In the <code>index.ts</code> file, add the following at the end of the file:</p>
<pre class="language-typescript hljs">...
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
</pre>
<p>If the number of arguments passed is equal to two — that is, <code>process.argv</code> has only <code>node</code> and the filename as the argument — you can invoke <code>outputHelp()</code>to show the output.</p>
<p>As with any changes, compile TypeScript to JavaScript:</p>
<pre class="language-bash hljs">npm run build
</pre>
<p>Run the following command:</p>
<pre class="language-bash hljs">node dist/index.js
</pre>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-help-page-2.png" alt="Screenshot of the CLI help page" width="730" height="333"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/screenshot-cli-help-page-2.png" alt="Screenshot of the CLI help page" width="730" height="333"/></noscript></p>
<h2 id="making-cli-globally-accessible">Making the CLI globally accessible</h2>
<p>At this point, our CLI is now complete. You might notice that using the CLI is tedious. On a daily basis, we would have to change the directory into the CLI project directory, then invoke <code>index.js</code> to use it. It would be easier if we could give it a name like <code>dirmanager</code> that works anywhere in our system, like so:</p>
<pre class="language-bash hljs">dirmanager -l
</pre>
<p>To do this, open the <code>package.json</code> file and add the following:</p>
<pre class="language-json hljs">{
  ...
  "main": "dist/index.js",    // &lt;- update this
  // add the following lines
  "bin": {
    "dirmanager": "./dist/index.js"
  },
  ...
}
</pre>
<p>In the preceding code, we update <code>main</code> to the compiled <code>index.js</code> file. You then add <code>bin</code> with an object as its value. In the object, we set <code>dirmanager</code> to <code>./dist/index.js</code>, which is the location of the compiled script. We will be using <code>dirmanager</code> to access the CLI, but you can use any name you like.</p>
<p>Next, open the <code>index.ts</code> file and add the following line at the top of the file:</p>
<pre class="language-typescript hljs">#! /usr/bin/env node

const { Command } = require("commander");
const fs = require("fs");
</pre>
<p>The line is called a <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang line</a>, which tells the OS to run the file with the <code>node</code>interpreter.<br/>
Save your file and compile TypeScript once more:</p>
<pre class="language-bash hljs">npm run build
</pre>
<p>Run the following command:</p>
<pre class="language-bash hljs">npm install -g .
</pre>
<p>The <code>-g</code> option tells npm to install the package globally.</p>
<p>At this point, you can open a new terminal or use the current terminal, then enter the following command:</p>
<pre class="language-bash hljs">dirmanager
</pre>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/typing-cli-name-terminal-1.png" alt="Screenshot of CLI after typing the CLI name in the terminal" width="730" height="339"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/10/typing-cli-name-terminal-1.png" alt="Screenshot of CLI after typing the CLI name in the terminal" width="730" height="339"/></noscript></p>
<p>You can also try the other options and they will work fine:</p>
<pre class="language-bash hljs">dirmanager -l
</pre>
<p>We have now successfully created a TypeScript CLI that works anywhere in the system.</p>
<h2 id="publishing-npm-using-github-actions">Publishing to npm using GitHub Actions</h2>
<p>Now that we have our CLI, let’s publish it on npm so that other developers will be able to use it anywhere on their systems. First, we’ll create a GitHub repository and push the source code to the repo. Next, we’ll set up an access token in our npm account and then set up <a href="https://github.com/features/actions">GitHub Actions</a> to publish the repo to npm using the access token. When finished, users will be able to access the app anywhere.</p>
<h3 id="creating-git-repository">Creating a Git repository</h3>
<p>To get started, enter the following code in the project root directory to create a <code>git</code> repo:</p>
<pre class="language-bash hljs">git init
</pre>
<p>Next, create a <code>.gitignore</code> file and add the following contents:</p>
<pre class="language-bash hljs"># Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo\
</pre>
<p>The <code>.gitignore</code> file contains specifies files and directories that <code>git</code> should ignore. We have added a few directories for brevity’s sake, but on a real world project, be sure to add all the contents <a href="https://github.com/github/gitignore/blob/main/Node.gitignore">on Node.gitignore file on GitHub</a>.</p>
<p>Next, create a <code>README.md</code> file in the root directory with a short description of the project:</p>
<pre class="language-bash hljs">A CLI directory manager that can be used to create directories, list directory contents and create files
</pre>
<p>Now, stage the files in the repository:</p>
<pre class="language-bash hljs">git add .
</pre>
<p>Make the first commit for the repo:</p>
<pre class="language-bash hljs">git commit -am "initial commit"
</pre>
<p>Next, open your browser and visit <a href="https://github.com/new">https://github.com/new</a> to create a remote repository with the name “directory_manager” and click <strong>Create repository</strong>:</p>
<figure id="attachment_168564"   class="wp-caption aligncenter"><img             class="wp-image-168564 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/creating-github-repository.png" alt="Creating GitHub Repository" width="720" height="202"    /><noscript><img               class="wp-image-168564 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/creating-github-repository.png" alt="Creating GitHub Repository" width="720" height="202"  /></noscript><figcaption id="caption-attachment-168564" class="wp-caption-text">Creating a GitHub repository.</figcaption></figure>
<p>On the repository page, copy the commands under “…or push an existing repository from the command line” and paste them into the terminal:</p>
<figure id="attachment_168565"   class="wp-caption aligncenter"><img             class="wp-image-168565 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/commands-push-existing-repo-github.png" alt="Commands Push Existing Repo GitHub" width="720" height="336"    /><noscript><img               class="wp-image-168565 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/commands-push-existing-repo-github.png" alt="Commands Push Existing Repo GitHub" width="720" height="336"  /></noscript><figcaption id="caption-attachment-168565" class="wp-caption-text">Commands that will push an existing repo to GitHub.</figcaption></figure>
<p>If you are unable to copy those commands for some reason, just copy and paste the below code and replace with your GitHub username for this and subsequent examples in this article:</p>
<pre class="language-bash hljs">git remote add origin <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="47202e3307202e332f32256924282a">[email protected]</a>:&lt;username>/directory_manager.git
git branch -M main
git push -u origin main
</pre>
<p>You’ll see that the local directory contents have been added to the repository on GitHub.</p>
<h3 id="creating-access-token">Creating an access token</h3>
<p>Now, let’s create an access token in your npm account. We’ll use the token to create a GitHub Actions secret.</p>
<p>First, update your <code>package.json</code> file with the package name, name, keywords, and GitHub repository links:</p>
<pre class="language-json hljs">{
  "name": "@&lt;Github_username>/directory_manager",
  "version": "1.0.0",
  "description": "",
  "main": "dist/index.js",
  "bin": {
    "dirmanager": "./dist/index.js"
  },
  "scripts": {
    "build": "npx tsc",
  },
  "keywords": [
    "cli",
    "npmtool"
  ],
  "author": "Your full name",
  "license": "ISC",
  "repository": "https://github.com/&lt;your_github_username>/directory_manager",
  "homepage": "https://github.com/&lt;your_github_username>/directory_manager#readme",
  "dependencies": {
    "commander": "^10.0.1",
    "figlet": "^1.6.0"
  },
  "devDependencies": {
    "typescript": "^5.0.4"
  }
}
</pre>
<p>In the <code>package.json</code> file, we update the <code>name</code> property with a new name containing the GitHub repository name. This is optional, you can leave the name unchanged if you prefer. We also updated the following properties:</p>
<ul>
<li><code>keywords</code>: Contains keywords that help users discover the package</li>
<li><code>author</code>: Your full name</li>
<li><code>repository</code>: Link to your GitHub repository</li>
<li><code>homepage</code>: Link to your GitHub repository <code>README.md</code> file, which will be displayed on the package’s npm page</li>
</ul>
<p>Next, visit your npm account and click your avatar; this will open the drop-down navigation. In the navigation, click <strong>Access Tokens</strong>:</p>
<figure id="attachment_168566"   class="wp-caption aligncenter"><img             class="wp-image-168566 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/npm-account-page.png" alt="Npm Account Page" width="720" height="413"    /><noscript><img               class="wp-image-168566 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/npm-account-page.png" alt="Npm Account Page" width="720" height="413"  /></noscript><figcaption id="caption-attachment-168566" class="wp-caption-text">npm Account page, showing Access Tokens option.</figcaption></figure>
<p>On the Access Tokens page, click the <strong>Generate New Token</strong> button, then click on the <strong>Classic Token</strong> button:</p>
<figure id="attachment_168567"   class="wp-caption aligncenter"><img             class="wp-image-168567 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/npm-generate-new-token.png" alt="Npm Generate New Token" width="720" height="397"    /><noscript><img               class="wp-image-168567 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/npm-generate-new-token.png" alt="Npm Generate New Token" width="720" height="397"  /></noscript><figcaption id="caption-attachment-168567" class="wp-caption-text">npm Access Tokens page, showing Generate New Token button.</figcaption></figure>
<p>Next, on the New Access Token page, enter a name for your access token, select the <strong>Publish</strong><em> option, and click <strong>Generate Token</strong>:</em></p>
<figure id="attachment_168568"   class="wp-caption aligncenter"><img             class="wp-image-168568 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/npm-pubish-token.png" alt="Npm Publish Token" width="720" height="394"    /><noscript><img               class="wp-image-168568 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/npm-pubish-token.png" alt="Npm Publish Token" width="720" height="394"  /></noscript><figcaption id="caption-attachment-168568" class="wp-caption-text">npm New Access Token Page, showing Publish option.</figcaption></figure>
<p>You will see that a new key has been generated. Copy the key somewhere safe as it will not be displayed again:</p>
<figure id="attachment_168569"   class="wp-caption aligncenter"><img             class="wp-image-168569 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/npm-generated-access-token-key.png" alt="Npm Generated Access Token Key" width="720" height="390"    /><noscript><img               class="wp-image-168569 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/npm-generated-access-token-key.png" alt="Npm Generated Access Token Key" width="720" height="390"  /></noscript><figcaption id="caption-attachment-168569" class="wp-caption-text">npm generated access token key.</figcaption></figure>
<p>Next, open a new tab and visit <a href="https://github.com//directory_manager/settings/secrets/actions">https://github.com//directory_manager/settings/secrets/actions</a>, which is under the repository settings page, and click <strong>New repository secret</strong>:</p>
<figure id="attachment_168571"   class="wp-caption aligncenter"><img             class="wp-image-168571 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/github-actions-repository-settings-page.png" alt="GitHub Actions Repository Settings Page" width="720" height="413"    /><noscript><img               class="wp-image-168571 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/github-actions-repository-settings-page.png" alt="GitHub Actions Repository Settings Page" width="720" height="413"  /></noscript><figcaption id="caption-attachment-168571" class="wp-caption-text">GitHub Actions repository settings page.</figcaption></figure>
<p>On the New secret page, enter “NPM<em>AUTH</em>TOKEN” as the name of the key, and paste the npm access token in the “Secret” field:</p>
<p><img             class="aligncenter wp-image-168572 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/github-actions-new-secret-page.png" alt="GitHub Actions New Secret Page" width="720" height="413"    /><noscript><img               class="aligncenter wp-image-168572 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/github-actions-new-secret-page.png" alt="GitHub Actions New Secret Page" width="720" height="413"  /></noscript></p>
<p>You can see that the secret key has been created:</p>
<figure id="attachment_168573"   class="wp-caption aligncenter"><img             class="wp-image-168573 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/github-actions-secret-key-created.png" alt="GitHub Actions Secret Key Created" width="730" height="419"    /><noscript><img               class="wp-image-168573 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/github-actions-secret-key-created.png" alt="GitHub Actions Secret Key Created" width="730" height="419"  /></noscript><figcaption id="caption-attachment-168573" class="wp-caption-text">GitHub Actions secret key created.</figcaption></figure>
<p>Next, we’ll set up GitHub Actions to publish the package on npm.</p>
<h3 id="setting-up-github-actions-publish-package">Setting up GitHub Actions to publish the package</h3>
<p>In the root directory, create a <code>.github/workflows</code> directory:</p>
<pre class="language-bash hljs">mkdir -p .github/workflows
</pre>
<p>Now, move into the directory:</p>
<pre class="language-bash hljs">cd .github/workflows/
</pre>
<p>Next, create a <code>publish.yml</code> with the following code:</p>
<pre class="language-yaml hljs">name: "publish package to npm"

on: push

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="781b101d1b13170d0c380e4a">[email protected]</a>
      - name: node
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5724322322277a39383332172165">[email protected]</a>
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org
      - name: publish
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
</pre>
<p>Stage the new changes:</p>
<pre class="language-yaml hljs">git add .
</pre>
<p>Commit the new changes:</p>
<pre class="language-yaml hljs">git commit -am "set up github actions"
</pre>
<p>Push the new changes to remove the repository:</p>
<pre class="language-yaml hljs">git push
</pre>
<p>Now, go to https://github.com//directory_manager/actions:</p>
<figure id="attachment_168575"   class="wp-caption aligncenter"><img             class="wp-image-168575 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/github-sctions-page-green-checkmark-finished.png" alt="GitHub Actions Page Green Checkmark Finished" width="720" height="253"    /><noscript><img               class="wp-image-168575 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/github-sctions-page-green-checkmark-finished.png" alt="GitHub Actions Page Green Checkmark Finished" width="720" height="253"  /></noscript><figcaption id="caption-attachment-168575" class="wp-caption-text">GitHub Actions page with green checkmark, indicating GitHub Actions has finished without any issues.</figcaption></figure>
<p>If you see a green checkmark, it means that GitHub Actions finished without any issues — it might take some time to see this.</p>
<p>Next, visit <a href="https://www.npmjs.com/settings//packages">https://www.npmjs.com/settings//packages</a> to see if the package has been published:</p>
<figure id="attachment_168638"   class="wp-caption aligncenter"><img             class="wp-image-168638 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/05/package-published-npm-github-actions.png" alt="Package Published Npm GitHub Actions" width="720" height="413"    /><noscript><img               class="wp-image-168638 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/05/package-published-npm-github-actions.png" alt="Package Published Npm GitHub Actions" width="720" height="413"  /></noscript><figcaption id="caption-attachment-168638" class="wp-caption-text">package published to npm using GitHub Actions.</figcaption></figure>
<p>Now go to https://www.npmjs.com/package/@/directory_manager to see the package homepage:</p>
<figure id="attachment_168577"   class="wp-caption aligncenter"><img             class="wp-image-168577 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/npm-package-homepage.png" alt="Npm Package Homepage" width="720" height="413"    /><noscript><img               class="wp-image-168577 size-full" src="http://blog.logrocket.com/wp-content/uploads/2022/10/npm-package-homepage.png" alt="Npm Package Homepage" width="720" height="413"  /></noscript><figcaption id="caption-attachment-168577" class="wp-caption-text">npm package homepage.</figcaption></figure>
<p>With that, you have successfully published the package using GitHub Actions.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we looked at what a CLI is and then used Commander.js and TypeScript to build a CLI. We then made the CLI globally accessible anywhere in the system and used GitHub Actions to publish the project on npm so that others can use it. Now you are equipped with knowledge on how to create CLIs with TypeScript.</p>
<p>Commander is a powerful library, and we have only scratched the surface of its capabilities. The following are some of the other interesting features:</p>
<ul>
<li>Creating subcommands that <a href="https://github.com/tj/commander.js#stand-alone-executable-subcommands">execute standalone scripts</a>: You can check the <a href="https://github.com/tj/commander.js/blob/master/examples/pm">pm</a> example in the documentation or read this <a href="https://maxschmitt.me/posts/nested-subcommands-commander-node-js">guide</a>.</li>
<li>Display [help to the user(https://github.com/tj/commander.js#display-help-after-errors) after the CLI throws an error, which improves the user experience.</li>
<li>Specifying <a href="https://github.com/tj/commander.js#required-option">mandatory options</a>.</li>
<li>Adding <a href="https://github.com/tj/commander.js#custom-help">extra information</a> to the built-in help.</li>
</ul>
<p>Visit the <a href="https://www.npmjs.com/package/commander">Commander documentation</a> to learn more about it. To continue your TypeScript journey, visit the <a href="https://www.typescriptlang.org/docs/handbook/2/basic-types.html">TypeScript documentation</a>. You can also check out TypeScript tutorials on <a href="https://blog.logrocket.com/tag/typescript/">this blog</a>.</p><div class="code-block code-block-23" >
<div class="blog-plug inline-plug node-plug"><h2>200’s only <img  src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"/></noscript> Monitor failed and slow network requests in production</h2> Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/node-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer"><img src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"/></noscript></a><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens while a user interacts with your app. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.</p> LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>. </div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-139072" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/building-typescript-cli-node-js-commander/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/building-typescript-cli-node-js-commander/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-139072" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/building-typescript-cli-node-js-commander/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-139072" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/building-typescript-cli-node-js-commander/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/12/stanley-ulili.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/12/stanley-ulili.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/stanleyulili/">
Stanley Ulili <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a freelance web developer and researcher from Malawi. I love learning new things, and writing helps me understand and solidify concepts. I hope by sharing my experience, others can learn something from them.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/node/">#node</a></li> <li><a href="https://blog.logrocket.com/tag/typescript/">#typescript</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/build-keepawake-react-native-app/" rel="prev">How to build <code>keepAwake</code> into your React Native app</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/ux-design/11-figma-widgets-speed-up-workflow/" rel="next">11 Figma widgets to speed up your workflow</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/building-typescript-cli-node-js-commander/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Building a prototype with Chunk - LogRocket Blog</title>
			<link>https://blog.logrocket.com/building-prototype-with-chunk/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/building-prototype-with-chunk/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Building a prototype with Chunk - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/building-prototype-with-chunk/">Building a prototype with Chunk - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166509 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-166509">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/nefejames/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nefejames/">
Nefe James <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nefe is a frontend developer who enjoys learning new things and sharing his knowledge with others.</span>
</div>
</div>
<h1 class="posttitle">Building a prototype with Chunk</h1>
<p>
<span class="post-date"><time class="post-date">
April 10, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">3 min read</span>
<span class="wordcount">1041</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/build-prototype-with-chunk.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build a Prototype With Chunk"                /> <article class="article-post">
<p>Across the tech ecosystem, developers are constantly building new tools and technologies to make life easier for us. We use many such tools today, significantly improving our productivity and efficiency.</p>
<p>In this article, we will learn about another excellent dev tool called Chunk. Chunk was <a href="https://twitter.com/deletethistheo/status/1557046835193290752">recently released</a> and comes with benefits for developers, particularly those who write server-side code. Let’s get started.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#chunk">What is Chunk?</a>
<ul >
<li><a href="#what-chunk">What is a chunk?</a></li>
</ul>
</li>
<li><a href="#exploring-chunk-platform">Exploring the Chunk platform</a>
<ul >
<li><a href="#user-profile-page">The user profile page</a></li>
<li><a href="#editor">The Chunk editor</a></li>
</ul>
</li>
<li><a href="#applications-chunk">Applications of Chunk</a></li>
<li><a href="#creating-simple-products-api-with-chunk">Creating a simple products API with Chunk</a>
<ul >
<li><a href="#consuming-products-api">Consuming the products API</a></li>
</ul>
</li>
</ul>
<h2 id="chunk">What is Chunk?</h2>
<p><a href="https://chunk.run/">Chunk.run</a> is an online platform that allows us to write server-side code without deploying them. Instead of deploying, Chunk runs the code for us on its platform; hence the name Chunk.run. Chunk gives us different methods for running code. We can do it manually, use <a href="https://blog.logrocket.com/receive-webhooks-python-flask-or-django/">webhooks</a>, or schedule it using <a href="https://blog.logrocket.com/setting-up-cron-jobs-in-deno/">cron jobs</a>.</p>
<p>A great thing about Chunk is that its easy-to-use interface takes away the complexity of writing and running server-side code. Instead, it makes it easier for us.</p>
<p><img             class="aligncenter size-full wp-image-166519 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/protype-with-chunk-homepage.png" alt="Using Chunk to Prototype" width="730" height="340"    /><noscript><img               class="aligncenter size-full wp-image-166519" src="https://blog.logrocket.com/wp-content/uploads/2023/04/protype-with-chunk-homepage.png" alt="Using Chunk to Prototype" width="730" height="340"  /></noscript></p>
<h3 id="what-chunk">What is a chunk?</h3>
<p>To use the Chunk platform properly, we must understand what a chunk is. A chunk is a project on Chunk that contains some code and exports a single function called <code>run()</code>. The <code>run()</code> function acts as the entry point to the chunk. From there, a chunk can take in JSON as <code>input</code> and return JSON as its <code>output</code>.</p>
<p>This is a simple chunk that sends back some JSON data. Here’s a code snippet of what a chunk looks like:</p>
<pre class="language-javascript hljs">export const run: RunFunction = async (context: RunContext) => {
    return { message: `Hello world!` };
};
</pre>
<p><img             class="aligncenter size-full wp-image-166521 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/chunk-intro.png" alt="Example of a Chunk in the Chunk Platform" width="730" height="250"    /><noscript><img               class="aligncenter size-full wp-image-166521" src="https://blog.logrocket.com/wp-content/uploads/2023/04/chunk-intro.png" alt="Example of a Chunk in the Chunk Platform" width="730" height="250"  /></noscript></p>
<h2 id="exploring-chunk-platform">Exploring the Chunk platform</h2>
<p>Let’s have a quick rundown of the Chunk platform. Its UI comprises a profile page, an online editor, and an explore section where we can review the chunks of other developers.</p>
<h3 id="user-profile-page">The user profile page</h3>
<p>The user profile page allows us to see and access all the chunks created on our profile page or dashboard. The image below shows us what the user profile page looks like:</p>
<p><img             class="aligncenter size-full wp-image-166523 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/chunk-profile-page.png" alt="Exploring the Chunk Profile Page" width="730" height="341"    /><noscript><img               class="aligncenter size-full wp-image-166523" src="https://blog.logrocket.com/wp-content/uploads/2023/04/chunk-profile-page.png" alt="Exploring the Chunk Profile Page" width="730" height="341"  /></noscript></p>
<h3 id="editor">The Chunk editor</h3>
<p>The Chunk.run editor is broken into three parts: the editor on the left, the Response section on the top right, and the Logs section on the bottom right. The left side of the editor has two tab sections: the <code>code</code> section for writing code and the <code>env</code> section for environment variables.</p>
<blockquote><p>Note, if <code>envs</code> are present, we will need to use <a href="https://blog.logrocket.com/getting-started-deno-fresh/">Deno</a> to access them in the code section</p></blockquote>
<p>In the top right corner of the editor, there is a link we can use to access the data a chunk returns to us. The image below shows us the editor:</p>
<p><img             class="aligncenter size-full wp-image-166525 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/chunk-editor.png" alt="The Chunk Editor" width="730" height="333"    /><noscript><img               class="aligncenter size-full wp-image-166525" src="https://blog.logrocket.com/wp-content/uploads/2023/04/chunk-editor.png" alt="The Chunk Editor" width="730" height="333"  /></noscript></p>
<h2 id="applications-chunk">Applications of Chunk</h2>
<p>Chunk is a platform for <a href="https://blog.logrocket.com/improve-app-performance-react-server-side-rendering/">running server-side code</a>. This means there are so many possibilities for its applications that are only limited by our imagination or the problem we are trying to solve. We can use Chunk for web scraping, creating bots, developing APIs and utilities, setting up automated processes, and much more.</p>
<p>Chunk provides a few starter templates that cover some specific use cases, and we can use these templates to get started quickly. It also offers several community chunks, which are projects that other developers have created.</p>
<blockquote><p>Note, that if we want our chunks to be added to the community, we must change the visibility settings in the online editor.</p></blockquote>
<h2 id="creating-simple-products-api-with-chunk">Creating a simple products API with Chunk</h2>
<p>We’ve learned a bit about Chunk and its applications. Now, let’s use it to create a simple ecommerce products API that we will later consume. Here’s a sample of the product data we will create:</p>
<pre class="language-javascript hljs">const products = [
  {
    id: 1,
    title: "Laptop Backpack",
    price: 109.95,
    description: "A cool laptop backpack",
    image: "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg",
    rating: 3.9,
  },
  ....
]    
</pre>
<p>Follow along by getting the complete data for the API from this <a href="https://gist.github.com/nefejames/bbeda8f257d7fa94b3e863926e730875">GitHub gist</a>, or use the chunk I created <a href="https://chunk.run/c/product-api">here</a>. Here’s the complete code for the products API:</p>
<pre class="language-javascript hljs">export const run: RunFunction = async () => {
  const products = [
    {
      id: 1,
      title: "Laptop Backpack",
      price: 109.95,
      description: "A cool laptop backpack",
      image: "https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg",
      rating: 3.9,
    },
    ....
  ];
  return { products };
};
</pre>
<p>That’s it! With that, we have a working API.</p>
<h3 id="consuming-products-api">Consuming the products API</h3>
<p>This products API chunk returns an array of products. We can access this data through the chunk’s link. Here’s <a href="https://live.chunk.run/product-api">mine</a>. Now, let’s consume the API. Enter the following code:</p>
<pre class="language-javascript hljs">import { useEffect, useRef, useState } from "react";

function App() {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    async function fetchData() {
      const res = await fetch("https://live.chunk.run/product-api");
      const data = await res.json();
      setProducts(data.products);
    }

    fetchData();
  }, []);

    return (
      &lt;main>
        {products.map((product) => (
          &lt;div class="card" key={product.id}>
            &lt;div class="img-box">
              &lt;img src={product.image} alt={product.name} />
            &lt;/div>
            &lt;p class="prod-title">{product.title}&lt;/p>
            &lt;p class="prod-description">{product.description}&lt;/p>

            &lt;ul>
              &lt;li>Price: {product.price}&lt;/li>
              &lt;li>Rating: {product.rating}&lt;/li>
            &lt;/ul>          
          &lt;/div>
        ))}
      &lt;/main>
    );
  }
}
</pre>
<p>In the code above, we used the <a href="https://blog.logrocket.com/useeffect-hook-complete-guide/"><code>useEffect</code> Hook</a> to fetch the data from the chunk API, we stored the data in the <code>products</code> state, mapped through the array, and displayed the different products in the UI. Here’s the full project:</p>
<p class="codepen"  data-height="399.66796875" data-default-tab="html,result" data-slug-hash="GRXNoVN" data-user="nefejames">See the Pen <a href="https://codepen.io/nefejames/pen/GRXNoVN"><br/>
logrocket chunk products api</a> by Emadamerho Nefe (<a href="https://codepen.io/nefejames">@nefejames</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://cpwebassets.codepen.io/assets/embed/ei.js"/></p>
<h2>Conclusion</h2>
<p>Chunk is an excellent tool for creating simple projects and demos. It has an easy-to-use interface and removes the complexities of running server-side code. No complex setup or installations are required on our end.</p>
<p>As of this writing, the only issue I spotted with Chunk is the poor approach to product education, as no documentation exists. This makes it difficult to truly understand what Chunk is, how it works, its inner workings, and how to use it best. Chunk currently expects the user to find their way. It makes some assumptions about the technical knowledge users should have, and ultimately the responsibility rests on the user to learn how to use Chunk properly. Explore some of the <a href="https://chunk.run/explore">chunks that the Chunk community has built here.</a></p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166509" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/building-prototype-with-chunk/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/building-prototype-with-chunk/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166509" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/building-prototype-with-chunk/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166509" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/building-prototype-with-chunk/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nefejames/">
Nefe James <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nefe is a frontend developer who enjoys learning new things and sharing his knowledge with others.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/churn-rate-formula-definition-how-to-reduce/" rel="prev">What is churn rate? Formula, definition, and how to reduce churn</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/build-typescript-app-vite/" rel="next">How to build a TypeScript app with Vite</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/building-prototype-with-chunk/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Building a simple login form with Node.js - LogRocket Blog</title>
			<link>https://blog.logrocket.com/building-simple-login-form-node-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/building-simple-login-form-node-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Building a simple login form with Node.js - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/building-simple-login-form-node-js/">Building a simple login form with Node.js - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-135144 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-node" id="post-135144">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
 <div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/kingsleyubah/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/kingsleyubah/">
Kingsley Ubah <span class="btn follow">Follow</span></a>
<span class="author-description d-block">21. Web Developer. Technical Writer. African in Tech.</span>
</div>
</div>
<h1 class="posttitle">Building a simple login form with Node.js</h1>
<p>
<span class="post-date"><time class="post-date">
March 29, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2275</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/10/Building-simple-login-form-node-js.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Building a Simple Login Form with Node.js"                /> <article class="article-post">
<p><em><strong>Editor’s note: </strong></em><em>This guide to building a simple login form with Node.js was last updated on 29 March 2023 to include more information on login forms and add a new section on styling the login form with CSS. Visit our <a href="https://blog.logrocket.com/tag/node/">archives here</a> to learn more about Node.js.</em></p>
<p>A login form is used on the frontend of a website, web app, or mobile app to collect information needed to verify whether a user has been registered in a system’s database. The authentication process is simple.</p>
<p>First, the user submits some credentials — typically an email and password — to the backend through a login form. Then, the backend application checks if the email and password are in the database. From there, the backend app will grant users access or require them to register.</p>
<p>In this tutorial, we’ll learn how to build a simple login form with <a href="https://blog.logrocket.com/tag/node/" target="_blank" rel="noopener">Node.js</a>. The form will require a user to register an account. Then, we’ll use the entered information and store it in a MySQL database before signing the user in.</p>
<p>Now that we have an overview of the project let’s start building!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#getting-started-building-node-js-login-form">Getting started with building a Node.js login form</a></li>
<li><a href="#building-node-js-login-form">Building a Node.js login form</a>
<ul >
<li><a href="#setting-up-node-js-application">Setting up the Node.js application</a></li>
</ul>
</li>
<li><a href="#setting-up-database-connection">Creating a database connection in Node.js</a></li>
<li><a href="#setting-up-homepage-layout">Setting up the homepage and layout</a></li>
<li><a href="#styling-login-form-with-css">Styling the login form with CSS</a></li>
<li><a href="#creating-login-register-forms">Creating the login and register forms in Node.js</a></li>
<li><a href="#registering-user">Registering the user</a></li>
</ul>
<h2 id="getting-started-building-node-js-login-form">Getting started with building a Node.js login form</h2>
<p>You’ll need <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a> and <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> installed on your local development machine to follow this tutorial. If you’re not sure if you have them installed, run the following commands to check their availability:</p>
<pre class="language-bash hljs"># To check if Node is installed, run:
node -v

# To check if Node is installed, run:
npm -v
</pre>
<p>Besides Node.js, you’ll need a <a href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/">MySQL server</a> installed and running. You can use the <a href="https://dev.mysql.com/downloads/installer/" target="_blank" rel="noopener">standalone MySQL</a> installer or server distributions with MySQL built-in, such as <a href="https://www.wampserver.com/en/" target="_blank" rel="noopener">WAMP</a> and <a href="https://www.apachefriends.org/download.html" target="_blank" rel="noopener">XAMP</a>.</p>
<h2 id="building-node-js-login-form">Building a Node.js login form</h2>
<p>Before granting a user access to resources on the server side, you’d need to identify them and validate their request. This process is known as user authentication.</p>
<p>The most common way to authenticate users in your application is by building a login system. A login system comprises a page with a form that the user will use to submit their login details (typically username and password). The authentication will then take place on the server side.</p>
<p>Another strategy is to integrate OAuth into your login system. This lets users log into your application using their accounts with third-party platforms such as GitHub, Google, or Facebook. This method is known as third-party authentication.</p>
<p>Node.js is the perfect framework for building a login system, thanks to its minimal design. With just a few lines of code, you can set up the route and validate the user’s login information sent in the request. Node.js also works well with a wide variety of databases, including SQL and NoSQL databases.</p>
<h3 id="setting-up-node-js-application">Setting up the Node.js application</h3>
<p>Let’s create a new folder for the app and navigate to the folder using the command line with the <code>cd</code> directive:</p>
<pre class="language-bash hljs">cd path/to/your/folder
</pre>
<p>Then, run the following command to install the dependencies required for this tutorial:</p>
<pre class="language-bash hljs">npm i express mysql dotenv hbs bcryptjs
</pre>
<p>Let me explain what each library is for:</p>
<ul>
<li><a href="https://www.npmjs.com/package/express" target="_blank" rel="noopener">Express.js</a>: For creating API and web routes and setting up the app backend</li>
<li><a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">MySQL</a>: For connecting to our local MySQL server</li>
<li><a href="https://www.npmjs.com/package/dotenv" target="_blank" rel="noopener">dotenv</a>: For storing environmental variables that should not be exposed in the app source code</li>
<li><a href="https://www.npmjs.com/package/hbs" target="_blank" rel="noopener">hbs</a>: For rendering HTML on the server</li>
<li><a href="https://www.npmjs.com/package/bcrypt" target="_blank" rel="noopener">Bcryptjs</a>: For hashing passwords</li>
</ul>
<p>In addition, I recommend installing <a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="noopener">nodemon</a>, which automatically restarts the server when file changes are detected, saving you precious time in development. Install it with the following command:</p>
<pre class="language-bash hljs">npm i nodemon --save
</pre>
<p>Finally, open your app’s <code>package.json</code> file with a code editor and add the following field inside the <code>scripts</code> object:</p>
<pre class="language-javascript hljs">"start": "nodemon app.js"
</pre>
<p>Now, we’re finished with the project setup. Next, we’ll connect to our MySQL database and create a table to store user login information.</p>
<h2 id="setting-up-database-connection">Creating a database connection in Node.js</h2>
<p>Start by creating a new database in your MySQL environment named <code>login-db</code>. After that, build a <code>users</code> table with the ID, name, email, and password. Set the ID to <code>INT</code> and <code>AUTOINCREMENT</code>, and the name, email, and password to <code>VARCHAR</code>.</p>
<p>In the end, the database in <code>phpMyAdmin</code> will look like this:</p>
<p><img             class="aligncenter size-full wp-image-135164 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Login-form-database-schema-node-js.png" alt="Database Schema for a Node.js Login Form" width="894" height="218"    /><noscript><img               class="aligncenter size-full wp-image-135164" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Login-form-database-schema-node-js.png" alt="Database Schema for a Node.js Login Form" width="894" height="218"  /></noscript></p>
<p>Then, create an <code>.env</code> file in your app’s root folder. Inside <code>.env</code>, add your database name, host domain, username, and password values to their corresponding variable names. These are the default values for MySQL:</p>
<pre class="language-javascript hljs">DATABASE = login-db
DATABASE_HOST = localhost
DATABASE_ROOT = root
DATABASE_PASSWORD =
</pre>
<p>Once you’ve set the variables, create <code>app.js</code> in the root folder. Open it with your text editor and import the following dependencies:</p>
<pre class="language-javascript hljs">const express = require('express');
const mysql = require("mysql")
const dotenv = require('dotenv')
</pre>
<p>Then, create an Express.js app:</p>
<pre class="language-javascript hljs">const app = express();
</pre>
<p>After that, specify the path to the environmental variables:</p>
<pre class="language-javascript hljs">dotenv.config({ path: './.env'})
</pre>
<p>Here, we’re telling the server to find <code>.env</code> inside the same directory as <code>app.js</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Next, access the variables from <code>process.env</code> and pass them to their respective connection properties:</p>
<pre class="language-javascript hljs">const db = mysql.createConnection({
    host: process.env.DATABASE_HOST,
    user: process.env.DATABASE_USER,
    password: process.env.DATABASE_PASSWORD,
    database: process.env.DATABASE
})
</pre>
<p>Now that you have configured the connection with your database credentials, go ahead and connect the database:</p>
<pre class="language-javascript hljs">db.connect((error) => {
    if(error) {
        console.log(error)
    } else {
        console.log("MySQL connected!")
    }
})
</pre>
<p>The connection will either succeed or fail. If it fails, we’ll see <code>error</code> in the callback and print it on the console. Otherwise, we output the <code>"MySQL connected!"</code> string.</p>
<p>Finally, start the server by running the following command on your terminal:</p>
<pre class="language-bash hljs">npm start
</pre>
<p>If everything goes well, you’ll see <code>MySQL is connected</code>. Let’s create the homepage.</p>
<h2 id="setting-up-homepage-layout">Setting up the homepage and layout</h2>
<p>Inside your project’s root folder, create the <code>views</code> folder. Then, in <code>views</code>, create <code>index.hbs</code>, <code>register.hbs</code>, and <code>login.hbs</code>. As you may have guessed, these are the Handlebars files for the home, login, and register pages.</p>
<p>Now, for each of them, include the base HTML markup:</p>
<pre class="language-html hljs">&lt;!DOCTYPE html>
&lt;html lang="en">
&lt;head>    
    &lt;link href="https://cdn.jsdelivr.net/npm/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="71131e1e05020503100131445f435f40">[email protected]</a>/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT" crossorigin="anonymous">
  &lt;/head>
&lt;/head>
&lt;body>

{{!-- Navigation links --}}
    &lt;nav>
        &lt;h4>Node MySQL Login&lt;/h4>
        &lt;ul>
            &lt;li>&lt;a href="/">Home&lt;/a>&lt;/li>
            &lt;li>&lt;a href="/login">Login&lt;/a>&lt;/li>
            &lt;li>&lt;a href="/register">Register&lt;/a>&lt;/li>
        &lt;/ul>
    &lt;/nav>

    {{!-- Body of each page will go here --}}
&lt;/body>
&lt;/html>
</pre>
<p>In the <code>head</code> section, we linked the two <code>link</code> elements to our custom <code>style sheet</code> and the Bootstrap CSS library. We also created a navigation menu that will be reused across all pages to include links to the <code>login</code> and <code>register</code> pages.</p>
<h2 id="styling-login-form-with-css">Styling the login form with CSS</h2>
<p>The frontend of this application will be styled using the Bootstrap CSS library, which we linked in the <code>head</code> section of our markup. Styling will be applied to all elements via Bootstrap classes, such as <code>m-5</code>, <code>p-5</code>, <code>text-white</code>, and so on. Next, inside <code>index.hbs</code>, use the following markup within the <code>&lt;body></code> tags to add a <a href="https://getbootstrap.com/docs/4.0/components/jumbotron/" target="_blank" rel="noopener">jumbotron</a> to your website’s homepage:</p>
<pre class="language-html hljs">    {{!-- Body --}}
    &lt;div class="container mt-4">
        &lt;div class="mt-4 p-5 bg-primary text-white rounded">
            &lt;h1>My Login Project&lt;/h1>
            &lt;p>This project demonstrates how to implement login and register functionalities with Node.js and MySQL &lt;/p>
        &lt;/div>
    &lt;/div>
</pre>
<p>Then, specify the <code>view engine</code> as Handlebars in <code>app.js</code>:</p>
<pre class="language-javascript hljs">app.set('view engine', 'hbs')
</pre>
<p>From there, import <code>path</code> to specify the static assets used in your Handlebars templates:</p>
<pre class="language-javascript hljs">// other imports
const path = require("path")

const publicDir = path.join(__dirname, './public')

app.use(express.static(publicDir))</pre>
<p>Next, register a route for rendering <code>index.hbs</code> on the homepage:</p>
<pre class="language-javascript hljs">app.get("/", (req, res) => {
    res.render("index")
})
</pre>
<p>At the file bottom, add the following code to configure the port for the app in <code>app.listen()</code>:</p>
<pre class="language-javascript hljs">app.listen(5000, ()=> {
    console.log("server started on port 5000")
})
</pre>
<p>Start your server by running <code>npm start</code>, then navigate to <code>localhost:5000</code> to view the homepage:</p>
<p><img             class="aligncenter size-full wp-image-135162 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Node-js-mysql-login-form.png" alt="Node.js Login Project Using MySQL" width="603" height="345"    /><noscript><img               class="aligncenter size-full wp-image-135162" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Node-js-mysql-login-form.png" alt="Node.js Login Project Using MySQL" width="603" height="345"  /></noscript></p>
<p>Next, we’ll create the register and login forms.</p>
<h2 id="creating-login-register-forms">Creating the login and register forms in Node.js</h2>
<p>Open <code>register.hbs</code> in <code>views</code> and include the following markup within <code>&lt;body></code> and after <code>&lt;nav></code>:</p>
<pre class="language-html hljs">&lt;div class="container mt-4">
        &lt;div class="card" >            
            &lt;div class="card-header">Register Form&lt;/div>    
            &lt;div class="card-body">
                &lt;form action="/auth/register" method="POST">
                    &lt;div class="mb-3">
                        &lt;label for="name-reg" class="form-label">Name&lt;/label>
                        &lt;input type="text" class="form-control" id="name-reg" name="name">                        
                    &lt;/div>
                    &lt;div class="mb-3">
                        &lt;label for="email-reg" class="form-label">Email&lt;/label>
                        &lt;input type="text" class="form-control" id="email-reg" name="email">                        
                    &lt;/div>
                    &lt;div class="mb-3">
                        &lt;label for="password-reg" class="form-label">Password&lt;/label>
                        &lt;input type="password" class="form-control" id="password-reg" name="password">
                    &lt;/div>
                    &lt;div class="mb-3">
                        &lt;label for="password-conf-reg" class="form-label">Confirm Password&lt;/label>
                        &lt;input type="password" class="form-control" id="password-conf-reg" name="password-confirm">
                    &lt;/div>

                    &lt;button type="submit" class="btn btn-primary">Submit&lt;/button>
                &lt;/form>
            &lt;/div>
        &lt;/div>
    &lt;/div>
</pre>
<p>This creates an HTML form with inputs for the user’s name, email, password, and password confirmation. The form will post the data to the route we specified in the <code>action</code> attribute.</p>
<p>Next, in <code>app.js</code>, register the route to the register page and save the file:</p>
<pre class="language-javascript hljs">app.get("/register", (req, res) => {
    res.render("register")
})
</pre>
<p>After that, navigate to your browser and select <strong>Register</strong> in the navigation bar. You should see the registration form:</p>
<p><img             class="aligncenter size-full wp-image-135160 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Node-js-login-registration-form.png" alt="Node.js Login and Registration Form" width="645" height="591"    /><noscript><img               class="aligncenter size-full wp-image-135160" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Node-js-login-registration-form.png" alt="Node.js Login and Registration Form" width="645" height="591"  /></noscript></p>
<p>To create the login form, open <code>login.hbs</code> inside <code>views</code> and use the same form as above. Delete <code>inputs</code> and <code>labels</code> for the email and password confirmation. In addition, change <code>id</code> attributes and the card title from <strong>Register Form</strong> to <strong>Login Form</strong>.</p>
<p>Next, register the login route in <code>app.js</code>:</p>
<pre class="language-javascript hljs">app.get("/login", (req, res) => {
    res.render("login")
})
</pre>
<p>Save the files and go to the browser. It should appear like this when you select <strong>Login</strong> on the navigation bar:</p>
<p><img             class="aligncenter size-full wp-image-135158 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Node-js-login-form-name-password.png" alt="Node.js Login Form With Name and Password" width="648" height="437"    /><noscript><img               class="aligncenter size-full wp-image-135158" src="https://blog.logrocket.com/wp-content/uploads/2022/09/Node-js-login-form-name-password.png" alt="Node.js Login Form With Name and Password" width="648" height="437"  /></noscript></p>
<p>Now that we’ve finished the work on the frontend, let’s shift our focus to registering the user in the backend.</p>
<h2 id="registering-user">Registering the user</h2>
<p>The form values will be sent to the <code>/auth/register</code> route when the registration form is submitted. Let’s build it!</p>
<p>In <code>app.js</code>, begin by importing <code>bcrypt</code>:</p>
<pre class="language-javascript hljs">const bcrypt = require("bcryptjs")
</pre>
<p>Next, configure the Express.js server to receive the form values as <code><a href="https://blog.logrocket.com/reading-writing-json-files-nodejs-complete-tutorial/" target="_blank" rel="noopener">JSON</a></code>:</p>
<pre class="language-javascript hljs">app.use(express.urlencoded({extended: 'false'}))
app.use(express.json())
</pre>
<p>Then, create <code>auth/register</code> and retrieve the user’s form values:</p>
<pre class="language-javascript hljs">app.post("/auth/register", (req, res) => {    
    const { name, email, password, password_confirm } = req.body

    // db.query() code goes here
})
</pre>
<p>Now that you have the values query the database to check if the email is on the server. That way, a user cannot register multiple times with the same email:</p>
<pre class="language-javascript hljs">    db.query('SELECT email FROM users WHERE email = ?', [email], async (error, res) => {
       // remaining code goes here
    })
</pre>
<p>If there is an error while executing the query, we’ll access <code>error</code> and display it on the server’s terminal:</p>
<pre class="language-javascript hljs">        if(error){
            console.log(error)
        }
        // other code
</pre>
<p>Next, check if there is a result and if the two passwords are a match. If any conditions are true, re-render the <code>register</code> page to notify the user the email is already in use or that the passwords don’t match:</p>
<pre class="language-javascript hljs">        if( result.length > 0 ) {
            return res.render('register', {
                message: 'This email is already in use'
            })
        } else if(password !== password_confirm) {
            return res.render('register', {
                message: 'Passwords do not match!'
            })
        }
       // other code
</pre>
<p>If the conditions above are not true, the user will be added to the database. Encrypt the password and post it to the database along with the other values:</p>
<pre class="language-javascript hljs">        let hashedPassword = await bcrypt.hash(password, 8)

        db.query('INSERT INTO users SET?', {name: name, email: email, password: hashedPassword}, (err, res) => {
            if(error) {
                console.log(error)
            } else {
                return res.render('register', {
                    message: 'User registered!'
                })
            }
        })
</pre>
<p>If there is an error, we’ll print it on the console. Otherwise, re-render the page and send a message to the user that they are registered. It’s important to note that to show the user messages, you’ll need to edit <code>register.hbs</code> and include the following template below <code>&lt;div></code>:</p>
<pre class="language-html hljs">{{#if message }}
    &lt;h4 class="alert alert-danger mt-4">{{message}}&lt;/h4>
{{/if}}
</pre>
<p>Finally, save all file changes and test the app on your browser:</p>
<p><img             class="aligncenter size-full wp-image-135156 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/User-registered-node-js-login-form.png" alt="User Registered Alert in Node.js Login Form" width="396" height="579"    /><noscript><img               class="aligncenter size-full wp-image-135156" src="https://blog.logrocket.com/wp-content/uploads/2022/09/User-registered-node-js-login-form.png" alt="User Registered Alert in Node.js Login Form" width="396" height="579"  /></noscript></p>
<p><img             class="aligncenter size-full wp-image-135154 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/User-node-js-login-information-database.png" alt="Node.js User Login Form Database" width="885" height="134"    /><noscript><img               class="aligncenter size-full wp-image-135154" src="https://blog.logrocket.com/wp-content/uploads/2022/09/User-node-js-login-information-database.png" alt="Node.js User Login Form Database" width="885" height="134"  /></noscript></p>
<h2>Conclusion</h2>
<p>I hope you had as much fun following this tutorial as I did creating it. Feel free to fork the from the <a href="https://github.com/KingsleyUbah/Nodejs-form" target="_blank" rel="noopener">GitHub repository</a> and play with the code. After all, getting your hands dirty is the best way to learn. If you have questions, comment below!</p><div class="code-block code-block-23" >
<div class="blog-plug inline-plug node-plug"><h2>200’s only <img  src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"/></noscript> Monitor failed and slow network requests in production</h2> Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/node-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer"><img src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"/></noscript></a><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens while a user interacts with your app. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.</p> LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>. </div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-135144" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/building-simple-login-form-node-js/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/building-simple-login-form-node-js/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-135144" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/building-simple-login-form-node-js/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-135144" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/building-simple-login-form-node-js/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/kingsleyubah/">
Kingsley Ubah <span class="btn follow">Follow</span></a>
<span class="author-description d-block">21. Web Developer. Technical Writer. African in Tech.</span>
</div>
</div>
<div class="after-post-tags">
 <ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/node/">#node</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/product-pricing-strategies-models-4-step-process/" rel="prev">How to price your product in 4 steps</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/using-react-lifecycle-methods-clojure-re-frame/" rel="next">Using React lifecycle methods in Clojure apps with re-frame</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/building-simple-login-form-node-js/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Building an adaptive, accessible UI library with React Aria - LogRocket Blog</title>
			<link>https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Building an adaptive, accessible UI library with React Aria - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/">Building an adaptive, accessible UI library with React Aria - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-165253 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-165253">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/hulyakarakaya/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/07/1530813605455.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/07/1530813605455.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/hulyakarakaya/">
Hulya Karakaya <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A frontend developer interested in open source and building amazing websites. I believe in building through collaboration and contribution.</span>
</div>
</div>
<h1 class="posttitle">Building an adaptive, accessible UI library with React Aria</h1>
<p>
<span class="post-date"><time class="post-date">
April 4, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2138</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/building-adaptive-accessible-ui-library-react-aria.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Building An Adaptive, Accessible UI Library With React Aria"                /> <article class="article-post">
<p>In recent years, React has become one of the most popular frontend frameworks, thanks to its component-based architecture and powerful rendering capabilities. However, building a UI library that is both adaptive and accessible can be a challenging task. But with the right tools and techniques, it’s achievable.</p>
<p>In this post, we’ll look at how to use React Aria to create adaptive and accessible UI components in React. By leveraging the power of React Aria, you can build UI components that are accessible to all users, including those with disabilities.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-react-aria">What is React Aria?</a></li>
<li><a href="#what-react-spectrum">What is React Spectrum?</a></li>
<li><a href="#getting-started-react-aria">Getting started with React Aria</a></li>
<li><a href="#react-aria-interaction-hooks">React Aria interaction hooks</a>
<ul >
<li><a href="#usebutton-hook"><code>useButton</code> Hook</a></li>
<li><a href="#usetogglebutton-hook"><code>useToggleButton</code> Hook</a></li>
</ul>
</li>
<li><a href="#accessibility-considerations-ui-library">Accessibility considerations for a UI library</a></li>
<li><a href="#adaptive-design-considerations">Adaptive design considerations</a></li>
<li><a href="#customization-react-context">Customization with React Context</a></li>
<li><a href="#testing-accessibility">Testing for accessibility</a></li>
<li><a href="#documentation-examples">Documentation and examples</a></li>
</ul>
<h2 id="what-react-aria">What is React Aria?</h2>
<p><a href="https://react-spectrum.adobe.com/react-aria/index.html">React Aria</a> is a set of <a href="https://reactjs.org/docs/hooks-intro.html">React Hooks</a> designed to help developers build accessible UI components using <a href="https://www.w3.org/WAI/standards-guidelines/aria/">ARIA</a> (Accessible Rich Internet Applications) patterns. It supports various input modes, such as mouse, touch, keyboard, and screen reader interactions, and provides focus management to ensure keyboard and screen reader users can navigate through UI components in an accessible way.</p>
<p>Key qualities of React Aria:</p>
<ul>
<li><strong>Accessible</strong>: Supports keyboard navigation, screen reader support, and ARIA patterns for creating UI components that are accessible to all users</li>
<li><strong>International</strong>: Supports more than 30 languages, including bidirectional text and localized date and number formatting, to create internationalized UI components</li>
<li><strong>Fully customizable</strong>: Can be integrated into any design or styling framework without imposing specific rendering, DOM structure, or design details</li>
<li><strong>Adaptive</strong>: Supports various input modes, making UI components adaptable to different user needs and assistive technologies</li>
</ul>
<p>With React Aria, developers can create accessible UI components that cater to a diverse global audience.</p>
<h2 id="what-react-spectrum">What is React Spectrum?</h2>
<p><a href="https://react-spectrum.adobe.com/react-spectrum/index.html">React Spectrum</a> is a UI component library developed by Adobe. It provides a set of pre-built, accessible and customizable components built on top of React Aria. React Spectrum’s components are built using React Aria’s hooks, ensuring that they are accessible by default. React Spectrum offers a wide range of UI components, including buttons, checkboxes, text fields, and more. The library is built using React and follows modern web standards such as accessibility, responsive design, and internationalization.</p>
<p>By leveraging the accessibility features provided by React Aria, React Spectrum’s components are designed to be accessible by default, and its powerful theming system allows developers to easily customize the look and feel of their web page.</p>
<h2 id="getting-started-react-aria">Getting started with React Aria</h2>
<p>To get started with React Aria, you can install it via <code>npm</code> or <code>yarn</code>, like so:</p>
<pre class="language-yarn hljs">npm install react-aria
yarn add react-aria
</pre>
<p>Once you have installed the library, you can import the hooks you need for your project.</p>
<h2 id="react-aria-interaction-hooks">React Aria interaction hooks</h2>
<p>React Aria offers a variety of hooks and components, such as <code>useButton</code>, <code>useCheckbox</code>, <code>useSlider</code>, <code>useFocusRing</code>, <code>useCombobox</code>, and many others. These hooks provide you with the necessary ARIA attributes and events that you need to make your components accessible.</p>
<p>Let’s look at some of the examples.</p>
<h3 id="usebutton-hook"><code>useButton</code> Hook</h3>
<p>The <a href="https://react-spectrum.adobe.com/react-aria/useButton.html">useButton Hook</a> provides accessibility and interaction support for button elements. It ensures that the button can be triggered using keyboard events, such as the Enter or Space keys, as well as mouse and touch events:</p>
<pre class="language-javascript hljs">import { useButton, mergeProps } from "react-aria";

function MyButton(props) {
  let { children, onPress, ...otherProps } = props;
  let { buttonProps } = useButton({ onPress }, otherProps);
  return &lt;button {...mergeProps(buttonProps, otherProps)}>{children}&lt;/button>;
}
</pre>
<p>Here, we defined a functional component called <code>MyButton</code> that utilizes the <code>useButton</code> hook from <code>react-aria</code> to create an accessible button. The <code>useButton</code> Hook generates accessibility properties and event handlers for a button element, such as <code>aria-pressed</code>, <code>onPress</code>, and <code>onKeyUp</code>. These props ensure that the button is keyboard accessible and that it works with screen readers.</p>
<p>The <a href="https://react-spectrum.adobe.com/react-aria/mergeProps.html"><code>mergeProps</code> utility function</a> from <code>react-aria</code> is used to merge the accessibility properties generated by <code>useButton</code> with any additional props passed down to <code>MyButton</code> via <code>otherProps</code>. The resulting merged props are then spread onto a button element using the JSX syntax.</p>
<p>To use <code>MyButton</code>, you can simply import it and render it with any desired props, including <code>children</code>, <code>onPress</code>, and any other props that a regular HTML button element would accept:</p>
<pre class="language-javascript hljs">import MyButton from "./MyButton";

function App() {
  const handleClick = () => console.log("Button clicked!");

  return (
    &lt;div>
      &lt;MyButton onPress={handleClick}>Click me!&lt;/MyButton>
    &lt;/div>
  );
}
</pre>
<p>In this example, a click event handler, <code>handleClick</code>, is passed as the <code>onPress</code> prop to <code>MyButton</code>, and the text <code>Click me!</code> is passed as a child prop. When the button is clicked, the <code>handleClick</code> function will be invoked and <code>"Button clicked!"</code> will be logged to the console.</p>
<h3 id="usetogglebutton-hook"><code>useToggleButton</code> Hook</h3>
<p>The <a href="https://react-spectrum.adobe.com/react-aria/useToggleButton.html">useToggleButton Hook</a> helps create a toggle button component that can be used for toggling states like on/off or open/close. It manages the state of the button and returns the required props to apply to the button element:</p>
<pre class="language-javascript hljs">import { useToggleButton, mergeProps } from "react-aria";

function ToggleButton(props) {
  const { children, isPressed, onPress, ...otherProps } = props;
  const { buttonProps } = useToggleButton({ isPressed, onPress }, otherProps);
  return (
    &lt;button {...mergeProps(buttonProps, otherProps)}>
      {isPressed ? "ON" : "OFF"} - {children}
    &lt;/button>
  );
}

export default function App() {
  const [isPressed, setIsPressed] = useState(false);

  return (
    &lt;ToggleButton
      isPressed={isPressed}
      onPress={() => setIsPressed(!isPressed)}
    >
      Toggle Me
    &lt;/ToggleButton>
  );
}
</pre>
<p>In this example, we’re using the <code>useToggleButton</code> Hook to manage the state and event handling for the button. We’re passing the <code>isPressed</code> and <code>onPress</code> props to the hook to control the state of the button, and the <code>buttonProps</code> object returned by the hook is spread onto the <code>button</code> element to ensure proper accessibility attributes and event handling.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>The <code>ToggleButton</code> component also accepts a <code>children</code> prop, which is used to render the content of the button, and any other additional props are spread onto the <code>button</code> element using <code>mergeProps</code> to ensure that they’re properly merged with the <code>buttonProps</code> returned by the hook.</p>
<p>Finally, we’re using this <code>ToggleButton</code> component in the <code>App</code> component, where we’re managing the state of the button using the <code>useState</code> Hook.</p>
<h2 id="accessibility-considerations-ui-library">Accessibility considerations for a UI library</h2>
<p>Accessibility is an important consideration for any UI library, as it ensures that all users can access and use the components provided. To build accessible components with React Aria, you can follow best practices such as:</p>
<ul>
<li>Ensuring that all components have a label or accessible name</li>
<li>Providing keyboard navigation and focus management</li>
<li>Ensuring that components meet WCAG standards for contrast and color</li>
<li>Ensuring that components are screen reader accessible</li>
</ul>
<p>React Aria provides several hooks and components that help with accessibility, such as <a href="https://react-spectrum.adobe.com/react-aria/useFocusRing.html"><code>useFocusRing</code></a>. <code>useFocusRing</code> provides an accessibility feature known as the “focus ring.” When an element receives focus, a focus ring is displayed around it to indicate to the user that the element is currently in focus.</p>
<p>Here’s an example of how you might use <code>useFocusRing</code> to ensure keyboard navigation and focus management in your custom button component:</p>
<pre class="language-javascript hljs">import { useState } from "react";
import { useFocusRing } from "react-aria";

export default function CustomInput() {
  const [value, setValue] = useState("");
  const { isFocusVisible, focusProps } = useFocusRing();

  function handleChange(event) {
    setValue(event.target.value);
  }
  return (
    &lt;div>
      &lt;label>Type something:&lt;/label>
      &lt;input
        {...focusProps}
        value={value}
        onChange={handleChange}
        style={{
          boxShadow: isFocusVisible ? "0 0 3px 3px #4D90FE" : "none",
          padding: "5px",
          fontSize: "16px"
        }}
      />
    &lt;/div>
  );
}
</pre>
<p>In this example, we’re using <code>useFocusRing</code> to detect when the input is focused and to apply a custom focus style. By using these hooks, we’re able to improve the accessibility of our custom input component:</p>
<pre class="language-javascript hljs">import CustomInput from "./CustomInput";

function App() {
  return (
    &lt;div>
      &lt;label htmlFor="custom-input">Enter your name:&lt;/label>
      &lt;CustomInput id="custom-input" />
    &lt;/div>
  );
}
export default App;
</pre>
<p>In this example, the <code>CustomInput</code> component is being imported from a file called <code>CustomInput.js</code>, and is being used inside the <code>App</code> component. The <code>label</code> element is associated with the <code>CustomInput</code> component using the <code>htmlFor</code> attribute and the <code>id</code> attribute on the <code>CustomInput</code> component.</p>
<p>This is important for accessibility purposes, as it enables screen readers to read the label when the input is focused:</p>
<p><img             class="aligncenter size-full wp-image-165276 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/focusing-input-using-custominput-component.gif" alt="Focusing The Input Using The CustomInput Component" width="730" height="212"  /><noscript><img               class="aligncenter size-full wp-image-165276" src="https://blog.logrocket.com/wp-content/uploads/2023/03/focusing-input-using-custominput-component.gif" alt="Focusing The Input Using The CustomInput Component" width="730" height="212"/></noscript></p>
<h2 id="adaptive-design-considerations">Adaptive design considerations</h2>
<p>Adaptive design is another important consideration for any UI library, as it ensures that components work well on different screen sizes and device types. To build adaptive components with React Aria, you can follow best practices such as:</p>
<ul>
<li>Using responsive design to adjust component layout and behavior based on screen size</li>
<li>Providing accessibility features like high-contrast mode and zoom support</li>
<li>Using CSS media queries to adjust component styles based on screen size</li>
</ul>
<h2 id="customization-react-context">Customization with React Context</h2>
<p>Customization with <a href="https://beta.reactjs.org/learn/passing-data-deeply-with-context">React Context</a> allows you to easily customize the behavior and appearance of components across your entire application. React Context provides a way to pass data through the component tree without having to pass props manually at every level.</p>
<p>Here’s an example of how you might use React Context to allow consumers of your UI library to customize the color scheme of your custom button component:</p>
<pre class="language-javascript hljs">import { useButton, mergeProps } from "react-aria";
import { createContext, useContext } from "react";

let ButtonContext = createContext({ colorScheme: "light" });

export function MyButton(props) {
  let { children, onPress, ...otherProps } = props;
  let { colorScheme } = useContext(ButtonContext);
  let { buttonProps } = useButton({ onPress }, otherProps);
  return (
    &lt;button
      {...mergeProps(buttonProps, otherProps)}
      style={{
        backgroundColor: colorScheme === "dark" ? "black" : "white",
        color: colorScheme === "dark" ? "white" : "black"
      }}
    >
      {children}
    &lt;/button>
  );
}


export function MyButtonProvider(props) {
  let { children, colorScheme } = props;
  return (
    &lt;ButtonContext.Provider value={{ colorScheme }}>
      {children}
    &lt;/ButtonContext.Provider>
  );
}
</pre>
<p>Here, we create a <code>ButtonContext</code> using <code>createContext</code> with a default value of <code>colorScheme:</code> <code>"light"</code>. Then, we define a <code>MyButton</code> component that consumes <code>ButtonContext</code> using the <code>useContext</code> Hook.</p>
<p>Inside this component, we use <code>useButton</code> from <code>react-aria</code> to create an accessible button with <code>buttonProps</code>. We then merge these <code>buttonProps</code> with <code>otherProps</code> using <code>mergeProps</code> from <code>react-aria</code>. Finally, we set the <code>style</code> attribute of the button to change its <code>backgroundColor</code> and <code>color</code> based on the <code>colorScheme</code> from <code>ButtonContext</code>.</p>
<p>Then, in the <code>App</code> component, we wrap the <code>MyButton</code> component in a <code>MyButtonProvider</code> component with a <code>colorScheme</code> of “dark.” This changes the appearance of the button to have a dark background color and light text color:</p>
<pre class="language-javascript hljs">import { MyButtonProvider, MyButton } from "./MyButton";

function App() {
  return (
    &lt;MyButtonProvider colorScheme="dark">
      &lt;div>
        &lt;MyButton onPress={() => console.log("Button pressed")}>
          Click me!
        &lt;/MyButton>
      &lt;/div>
    &lt;/MyButtonProvider>
  );
}
export default App;
</pre>
<p>By using React Context, we can easily customize the appearance of components throughout our entire application by simply changing the values in the <code>Provider</code> component:</p>
<p><img             class="aligncenter size-full wp-image-165282 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/customizing-component-appearance-provider-component.gif" alt="Customizing The Appearance Of Comoponents Using The Provider Component" width="730" height="596"  /><noscript><img               class="aligncenter size-full wp-image-165282" src="https://blog.logrocket.com/wp-content/uploads/2023/03/customizing-component-appearance-provider-component.gif" alt="Customizing The Appearance Of Comoponents Using The Provider Component" width="730" height="596"/></noscript></p>
<h2 id="testing-accessibility">Testing for accessibility</h2>
<p>Testing for accessibility is crucial when building a UI library, as it ensures that the components you provide are accessible to all users. There are many accessibility testing tools available, such as <a href="https://github.com/dequelabs/axe-core">axe-core</a> and <a href="https://pa11y.org/">pa11y</a>. To test your components, you can use these tools in combination with React testing libraries like <a href="https://testing-library.com/docs/react-testing-library/intro/">react-testing-library,</a> <a href="https://jestjs.io/">Jest</a>, or <a href="https://enzymejs.github.io/enzyme/">Enzyme</a>. Check out this comparison post between the <a href="https://blog.logrocket.com/testing-react-apps-jest-react-testing-library/">rest-testing-library and Jest</a> or this article comparing <a href="https://blog.logrocket.com/react-testing-library-vs-enzyme/">react-testing-library and Enzyme</a>.</p>
<h2 id="documentation-examples">Documentation and examples</h2>
<p>To make your UI library accessible to others, it’s important to provide documentation and examples. Use tools like <a href="https://blog.logrocket.com/using-storybook-to-develop-react-components-faster/">Storybook</a> to create a living style guide that documents your components and shows how to use them. You can also include documentation and examples on your website or in your repository’s README file.</p>
<p>Here’s an example of how you might provide documentation and examples for your custom button component:</p>
<pre class="language-javascript hljs">># MyButton

A customizable button component.

## Props

| Prop   | Type      | Description                  | Default Value |
| ------ | --------- | ---------------------------- | ------------- |
| onPress | function | Function to call when button is pressed | none |
| colorScheme | string | The color scheme for the button (either 'light' or 'dark') | 'light' |

## Example

```jsx
import { MyButton } from "my-ui-library";

&lt;MyButton onPress={() => console.log("Clicked!")}>Click me&lt;/MyButton>
</pre>
<p>This is an example of a documentation for a React component called “MyButton.” It lists the props that can be passed to the component, along with their types and descriptions, as well as their default values if applicable. The example code shows how to use the component with the <code>onPress</code> prop and a text child element. This kind of documentation can help developers understand how to use a component and what kind of functionality it provides.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Building an adaptive, accessible UI library with React Aria can seem like a daunting task, but it is a valuable investment in providing an inclusive user experience. By leveraging the power of React Aria, you can build UI components that are accessible to all users, including those with disabilities.</p>
<p>In this post, we covered the basics of building a UI library with React Aria, including using Aria props, providing customization with React Context, testing for accessibility, and providing documentation and examples.</p>
<p>By following these best practices, you can build a UI library that is not only accessible, but also flexible and customizable to suit the needs of a wide range of users.</p>
<p>We hope this post has provided you with some valuable insights into building an adaptive, accessible UI library with React Aria.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165253" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165253" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165253" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/07/1530813605455.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/07/1530813605455.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/hulyakarakaya/">
Hulya Karakaya <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A frontend developer interested in open source and building amazing websites. I believe in building through collaboration and contribution.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/what-is-a-steering-committee-definition-template/" rel="prev">What is a steering committee? Definition, purpose, responsibilities, and template</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/practical-guide-typescript-decorators/" rel="next">A practical guide to TypeScript decorators</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Building custom maps with React Native Mapbox - LogRocket Blog</title>
			<link>https://blog.logrocket.com/building-custom-maps-react-native-mapbox/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/building-custom-maps-react-native-mapbox/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Building custom maps with React Native Mapbox - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/">Building custom maps with React Native Mapbox - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168173 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react-native" id="post-168173">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/andrewbaisden/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/andrewbaisden/">
Andrew Baisden <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I’m a full-stack developer from London. Programming is one of my passions in life. A majority of my most recent skills have been self-taught. I find this is one of the best ways to learn because you can go at your own pace.</span>
</div>
</div>
<h1 class="posttitle">Building custom maps with React Native Mapbox</h1>
<p>
<span class="post-date"><time class="post-date">
April 27, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1854</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="486" src="https://blog.logrocket.com/wp-content/uploads/2023/04/react-native-mapbox.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="React Native Mapbox"                /> <article class="article-post">
<p>Mapbox is a technology startup that provides developers and organizations with configurable and high-performance mapping, geospatial, and location-based services. It provides a suite of tools and APIs for developing interactive maps, geocoding, navigation, routing, and other location-based applications.</p>
<p><a href="https://www.mapbox.com/">Mapbox</a> is based on open data and open source software, allowing developers to access and utilize maps, add unique styles, and integrate location features into their apps, websites, and other digital goods. Vector tiles power Mapbox’s maps, allowing for rapid loading and seamless interactions.</p>
<p>In this article, we’ll build a React Native mobile app with a Mapbox integration using the <a href="https://github.com/rnmapbox/maps">Mapbox Maps SDK for React Native</a> and the popular React Native command-line tool <a href="https://docs.expo.dev/get-started/installation/">Expo CLI</a>.</p>
<p>I’ll use a Mac for development, however, you could also use either Windows, Linux, or a physical Android or iOS device. However, iOS development and deployment require macOS, so just bear that in mind if you ever plan on publishing apps to the Apple App Store. You can create Android apps on macOS, Windows, and Linux.</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#project-setup">Project setup</a></li>
<li><a href="#eas-build-setup">EAS Build setup</a></li>
<li><a href="#customizing-mapbox-app">Customizing our Mapbox app</a>
<ul >
<li><a href="#adding-custom-markers-pop-ups">Adding custom markers and pop-ups</a></li>
<li><a href="#mapview"><code>MapView</code></a></li>
<li><a href="#camera">Camera</a></li>
<li><a href="#point-annotation"><code>PointAnnotation</code></a></li>
<li><a href="#displaying-user-location">Displaying a user’s location</a></li>
</ul>
</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>The <a href="https://www.mapbox.com/">Mapbox</a> package requires <a href="https://github.com/rnmapbox/maps/blob/main/plugin/install.md">custom native code</a>, so if you’re developing on iOS, then you’ll need an <a href="https://developer.apple.com/">Apple Developer Account</a>. Apple Developer accounts aren’t free; you have to enroll and pay an annual fee to develop iOS apps; at the time of writing, the fee is less than $100.</p>
<p>Install and set up the following tools and services:</p>
<ul>
<li><a href="https://developer.apple.com/">Apple Developer account</a></li>
<li><a href="https://docs.expo.dev/get-started/installation/">Expo CLI</a></li>
<li><a href="https://nodejs.org/en">Node and npm</a>: I used Node v18.15.0 (LTS)</li>
<li><a href="https://www.mapbox.com/">Mapbox account</a></li>
<li><a href="https://expo.dev/client">Expo Go Mobile App</a></li>
</ul>
<p>If you plan on developing apps for Android or testing on an Android simulator, then you’ll need to install and set up <a href="https://developer.android.com/studio">Android Studio</a> on your computer beforehand. Additionally, testing on an iOS physical device requires <a href="https://developer.apple.com/documentation/xcode/enabling-developer-mode-on-a-device">Enabling Developer Mode on a device</a>.</p>
<h2 id="project-setup">Project setup</h2>
<p>Now, let’s set up our project. Navigate into a directory using the command line and then <a href="https://blog.logrocket.com/native-routing-expo-react-native/">initiate the commands below to scaffold an Expo project</a>:</p>
<pre class="language-bash hljs">npx create-expo-app mapbox-app
cd mapbox-app
</pre>
<p>Next, install the Mapbox package:</p>
<pre class="language-bash hljs">npm i @rnmapbox/maps
</pre>
<p>Open the project in the IDE of your choice and add the following code to the bottom of the <code>app.json</code> file:</p>
<pre class="language-javascript hljs">{
  "expo": {
    "plugins": [
      [
        "@rnmapbox/maps",
        {
          "RNMapboxMapsImpl": "mapbox",
          "RNMapboxMapsDownloadToken": "sk.ey...qg"
        }
      ]
    ]
  }
}
</pre>
<p>Now, you’ll need to create an access token that will replace the <code>"sk.ey...qg"</code> string in the <code>json</code> file under the <code>RNMapboxMapsDownloadToken</code>. Sign into your Mapbox account and find the <code>Tokens</code> page in the menu:</p>
<p><img             class="aligncenter wp-image-168189 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/react-mapbox-access-token-create-token.jpeg" alt="React Mapbox Access Token Create Token" width="730" height="190"    /><noscript><img               class="aligncenter wp-image-168189 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/react-mapbox-access-token-create-token.jpeg" alt="React Mapbox Access Token Create Token" width="730" height="190"  /></noscript></p>
<p>Create a token with the configurations in the following image. It’s important that you select <code>DOWNLOADS:READ</code>; when you’re building with Expo, this allows the token to download Mapbox into the Expo project:</p>
<p><img             class="aligncenter wp-image-168190 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/create-access-token-react-mapbox-expo.jpeg" alt="Create Access Token React Mapbox Expo" width="730" height="835"    /><noscript><img               class="aligncenter wp-image-168190 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/create-access-token-react-mapbox-expo.jpeg" alt="Create Access Token React Mapbox Expo" width="730" height="835"  /></noscript></p>
<p>Copy and paste your newly created token in the <code>app.json</code> file in the key-value pair, like in the following example:</p>
<pre class="language-javascript hljs">{
  "expo": {
    "plugins": [
      [
        "@rnmapbox/maps",
        {
          "RNMapboxMapsImpl": "mapbox",
          "RNMapboxMapsDownloadToken": "put your access token here"
        }
      ]
    ]
  }
}
</pre>
<p>Now, to see if everything is working and properly configured, we’ll create a simple map in our application. Copy and paste the following code into your <code>app.js</code> file:</p>
<pre class="language-javascript hljs">import 'expo-dev-client';

import React from 'react';

import { StyleSheet, View } from 'react-native';

import Mapbox from '@rnmapbox/maps';

Mapbox.setAccessToken('put your public access token here');

const App = () => {
  return (
    &lt;View style={styles.page}>
      &lt;View style={styles.container}>
        &lt;Mapbox.MapView style={styles.map} />
      &lt;/View>
    &lt;/View>
  );
};

export default App;

const styles = StyleSheet.create({
  page: {
    flex: 1,

    justifyContent: 'center',

    alignItems: 'center',
  },

  container: {
    height: 300,

    width: 300,
  },

  map: {
    flex: 1,
  },
});
</pre>
<p>In our <code>app.js</code> file, we require another access token for Mapbox. Go back to your Mapbox account, copy and paste your default public token, and replace the string in the code in the <code>app.js</code> file:</p>
<pre class="language-javascript hljs">Mapbox.setAccessToken('put your public access token here');
</pre>
<h2 id="eas-build-setup">EAS Build setup</h2>
<p><a href="https://docs.expo.dev/build/introduction/">EAS Build</a> is a hosted service that we can use to build app binaries in Expo and React Native projects.</p>
<p>To manage your native projects, EAS Builds are recommended. EAS Build provides a seamless experience, particularly if you’re unfamiliar with Xcode and Android Studio builds, or you don’t have them installed locally on your PC.</p>
<p>First, we have to set up our project to <a href="https://docs.expo.dev/development/create-development-builds/">create development builds</a>. It’s recommended to install the EAS CLI globally as follows:</p>
<pre class="language-bash hljs">npm install -g eas-cli
</pre>
<p>Make sure that you’re inside of the root folder for the <code>mapbox-app</code> project. Run the command below to initialize a development build:</p>
<pre class="language-bash hljs">npx expo install expo-dev-client expo-location
</pre>
<p>Add the following code inside of the newly created <code>eas.json</code> file. We’re adding a new object for the <code>development-simulator</code>:</p>
<pre class="language-javascript hljs">{
  "build": {
    "development-simulator": {
      "developmentClient": true,
      "distribution": "internal",
      "ios": {
        "simulator": true
      }
    }
  }
}
</pre>
<p>Run the command below to create the development build on an iOS Simulator, then go through the steps:</p>
<pre class="language-javascript hljs">eas build --profile development-simulator --platform ios
</pre>
<p>This step can take a long time to complete while it builds everything. You can check the progress by clicking on the <strong>Build details:</strong> link in the command line:</p>
<p><img             class="aligncenter wp-image-168191 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/create-ios-simulator-progress-bar.jpeg" alt="Create ios Simulator Progress Bar" width="730" height="62"    /><noscript><img               class="aligncenter wp-image-168191 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/create-ios-simulator-progress-bar.jpeg" alt="Create ios Simulator Progress Bar" width="730" height="62"  /></noscript></p>
<p><img             class="aligncenter wp-image-168192 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ios-simulator-build-complete-start-expo.jpeg" alt="Ios Simulator Build Complete Start Expo" width="730" height="789"    /><noscript><img               class="aligncenter wp-image-168192 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/ios-simulator-build-complete-start-expo.jpeg" alt="Ios Simulator Build Complete Start Expo" width="730" height="789"  /></noscript></p>
<p>Wait for the build to complete, then start your Expo project with the development server command. Open it with iOS, and you should see the iOS Simulator with a map on the screen:</p>
<pre class="language-bash hljs">npx expo start --dev-client
</pre>
<p>To make your app run on a physical iOS or Android device, you can <a href="https://docs.expo.dev/develop/development-builds/create-a-build/?redirected">follow the steps under the <strong>On a device</strong> section</a>.</p>
<h2 id="customizing-mapbox-app">Customizing our Mapbox app</h2>
<h3 id="adding-custom-markers-pop-ups">Adding custom markers and pop-ups</h3>
<p>We can create custom markers to represent a point on our map. First, let’s learn about three Mapbox structures, <code><a href="https://docs.mapbox.com/android/maps/api/10.0.0-beta.12/-mapbox%20-maps%20-android/com.mapbox.maps/-map-view/">MapView</a></code>, <a href="https://docs.mapbox.com/help/glossary/camera/">camera</a>, and <a href="https://docs.mapbox.com/android/maps/guides/annotations/annotations/"><code>PointAnnotation</code></a>.</p>
<h3 id="mapview"><code>MapView</code></h3>
<p><code>MapView</code> is an embeddable map interface that we can use to show all of the map data. In our codebase, we use the <code>Mapbox.MapView</code> class as the main wrapper component.</p>
<h3 id="camera">camera</h3>
<p>With Mapbox maps, the camera represents the map’s field of view. The viewport of the camera is governed by numerous elements, including the centre, zoom level, pitch, and bearing.</p>
<h3 id="point-annotation"><code>PointAnnotation</code></h3>
<p><code>PointAnnotation</code> essentially puts a point on our map, which is determined by the coordinates we set in the state value <code>const [coordinates] = useState([-5, 55]);</code>. <code>PointAnnotation</code> uses longitude and latitude to determine where the point should be placed on the map.</p>
<p>Now, replace the code in the <code>App.js</code> file with the following. Don’t forget to save your access token because you’ll need to add it to the new code at the top:</p>
<pre class="language-javascript hljs">import 'expo-dev-client';

import React, { useState } from 'react';

import { StyleSheet, View } from 'react-native';

import Mapbox from '@rnmapbox/maps';

Mapbox.setAccessToken('put your token here');

const App = () => {
  const [calloutVisible, setCalloutVisible] = useState(false);

  const [coordinates] = useState([-5, 55]);

  const onMarkerPress = () => {
    setCalloutVisible(true);
  };

  const loadAnnotationUK = () => {
    return (
      &lt;Mapbox.PointAnnotation
        key="annotationUK"
        id="annotationUK"
        coordinate={[0.1, 51.5]}
        onSelected={onMarkerPress}
      >
        &lt;View
          style={{
            height: 20,

            width: 20,

            backgroundColor: 'green',

            borderColor: 'black',

            borderWidth: 2,

            borderRadius: 50,
          }}
        >&lt;/View>

        &lt;Mapbox.Callout
          title="Welcome to London!"
          contentStyle={{ borderRadius: 5 }}
        >&lt;/Mapbox.Callout>
      &lt;/Mapbox.PointAnnotation>
    );
  };

  return (
    &lt;View style={styles.page}>
      &lt;View style={styles.container}>
        &lt;Mapbox.MapView style={styles.map}>
          &lt;Mapbox.Camera zoomLevel={4} centerCoordinate={coordinates} />

          &lt;Mapbox.PointAnnotation id="uk" coordinate={coordinates} />

          &lt;View>{loadAnnotationUK()}&lt;/View>
        &lt;/Mapbox.MapView>
      &lt;/View>
    &lt;/View>
  );
};

export default App;

const styles = StyleSheet.create({
  page: {
    flex: 1,

    justifyContent: 'center',

    alignItems: 'center',
  },

  container: {
    height: '100%',

    width: '100%',
  },

  map: {
    flex: 1,
  },
});
</pre>
<p>We create a function for a custom pointer with a callout that is displayed when you click on it. We’ve also made the map full-screen so it is no longer cropped in the middle.</p>
<p>Reload the application by hitting the <strong>R</strong> button in the command line for the Expo app, and it will update. Now, you should see a full-screen map with a custom pointer marker on London, UK. Clicking on it will bring up a callout box.</p>
<h3 id="displaying-user-location">Displaying a user’s location</h3>
<p>It’s very common to display a user’s location inside of a map application, so let’s run through a quick demo. We’ll use the <a href="https://docs.expo.dev/versions/latest/sdk/location/"><code>expo-location</code></a> package to detect a user’s location.</p>
<p>Whenever you install a new package in Expo, you’ll have to rebuild the application over again using the <code>eas build --profile development-simulator --platform iOS</code> command or the Android command. It can be quite time-consuming, however, the steps below outline the build process for developing mobile apps with EAS.</p>
<p>Replace the code in the <code>App.js</code> file with the following code. Like we did before, transfer over your token as well:</p>
<pre class="language-javascript hljs">import 'expo-dev-client';

import React, { useState, useEffect } from 'react';

import { StyleSheet, View } from 'react-native';

import Mapbox from '@rnmapbox/maps';

import * as Location from 'expo-location';

Mapbox.setAccessToken('put your token here');

const App = () => {
  const [location, setLocation] = useState(null);

  useEffect(() => {
    (async () => {
      const { status } = await Location.requestForegroundPermissionsAsync();

      if (status !== 'granted') {
        console.error('Permission to access location was denied');

        return;
      }

      const currentLocation = await Location.getCurrentPositionAsync({});

      setLocation(currentLocation.coords);
    })();
  }, []);

  return (
    &lt;View style={styles.container}>
      {location &amp;&amp; (
        &lt;Mapbox.MapView style={styles.map} styleURL={Mapbox.StyleURL.Street}>
          &lt;Mapbox.Camera
            zoomLevel={15}
            centerCoordinate={[location.longitude, location.latitude]}
            animationMode="flyTo"
            animationDuration={2000}
          />

          &lt;Mapbox.PointAnnotation
            id="userLocation"
            coordinate={[location.longitude, location.latitude]}
            title="Your location"
          />
        &lt;/Mapbox.MapView>
      )}
    &lt;/View>
  );
};

export default App;

const styles = StyleSheet.create({
  container: {
    flex: 1,

    backgroundColor: '#fff',
  },

  map: {
    flex: 1,
  },
});
</pre>
<p>Reload the application, open it again in the iOS Simulator, and you should see a dialogue that asks you to allow <code>"mapbox-app"</code> and use the location. Allow it, and the map should load a location on the simulated iPhone.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>You can choose your own location or use one listed by using the iOS Simulator menu, which lets you handle permissions when requesting a user’s location on iOS. It’s possible to spoof a location and create a virtual one.</p>
<p>See the screenshots below for an example of how to do this. With the help of Google Maps or a search engine, you can find the longitude and latitude of any location on earth:</p>
<p><img             class="aligncenter wp-image-168193 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/find-latitude-longitude-google.jpeg" alt="Find Latitude Longitude Google" width="730" height="539"    /><noscript><img               class="aligncenter wp-image-168193 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/find-latitude-longitude-google.jpeg" alt="Find Latitude Longitude Google" width="730" height="539"  /></noscript></p>
<p><img             class="aligncenter wp-image-168195 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/simulate-custom-location-react-native-mapbox.jpeg" alt="Simulate Custom Location React Native Mapbox" width="730" height="414"    /><noscript><img               class="aligncenter wp-image-168195 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/simulate-custom-location-react-native-mapbox.jpeg" alt="Simulate Custom Location React Native Mapbox" width="730" height="414"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>React Native Mapbox provides a strong and versatile method for introducing interactive and visually appealing maps into your mobile applications. By utilizing Mapbox’s vast ecosystem along with React Native’s cross-platform capabilities, developers can create feature-rich, location-based experiences suited to their specific needs.</p>
<p>In this article, we’ve discussed the advantages of utilizing React Native Mapbox, including its customizability and compatibility with both iOS and Android platforms. By implementing Mapbox APIs, developers can accomplish a seamless integration of mapping services with the React Native environment.</p>
<p>Lastly, don’t forget to take advantage of the thriving development communities that surround both React Native and Mapbox. There are many tools, tutorials, and examples available to assist you in overcoming obstacles and learning best practices for designing custom maps for your applications.</p>
<p>With the strong combination of React Native and Mapbox at your disposal, the possibilities for developing compelling, location-based experiences are nearly unlimited. So, go ahead and let your imagination run wild to create personalized maps that actually stand out and bring value to your users.</p>
<p>I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168173" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168173" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168173" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/andrew-baisden.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/andrewbaisden/">
Andrew Baisden <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I’m a full-stack developer from London. Programming is one of my passions in life. A majority of my most recent skills have been self-taught. I find this is one of the best ways to learn because you can go at your own pace.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react-native/">#react native</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/what-is-requirements-gathering-template-examples/" rel="prev">What is requirements gathering? Template and examples</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/" rel="next">Exploring the best GraphQL data visualization tools</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/building-custom-maps-react-native-mapbox/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Create customizable and shareable calendars in React Native - LogRocket Blog</title>
			<link>https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Create customizable and shareable calendars in React Native - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/">Create customizable and shareable calendars in React Native - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-136109 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react-native" id="post-136109">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/shalithasuranga/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/shalithasuranga/">
Shalitha Suranga <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Programmer | Author of Neutralino.js | Technical Writer</span>
</div>
</div>
<h1 class="posttitle">Create customizable and shareable calendars in React Native</h1>
<p>
<span class="post-date"><time class="post-date">
April 14, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
<span class="wordcount">4413</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/10/create-customized-shareable-calendar-react-native.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Create customized and shareable calendars in React Native"                /> <article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was last updated on 14 April 2023 to include additional information about props.</em></p>
<p>Mobile app developers typically use common GUI elements like buttons, lists, input boxes, and text regions within app screens. However, we sometimes need to use more complex GUI elements, like calendars, timetables, and agenda views.</p>
<p><a href="https://blog.logrocket.com/build-native-ui-components-react-native/">React Native offers several built-in components</a> for adding primary GUI elements. But, we’ll either have to build more complex GUI components from scratch with built-in core elements or reuse pre-implemented components from third-party libraries.</p>
<p>The <a href="https://github.com/wix/react-native-calendars">React Native Calendars library</a> offers pre-implemented, customizable components for adding calendars to your React Native application. In this tutorial, we’ll learn how to use these calendar components to create a customizable, shareable calendar that can display date-based data and capture date values from the user. We’ll also review several alternative packages for creating customizable calendars in React Native. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#why-use-calendar-library">Why should you use a calendar library?</a></li>
<li><a href="#highlighted-features-react-native-calendars">React Native Calendars: Highlighted features</a>
<ul >
<li><a href="#multiple-components-needs">Multiple components for your needs</a></li>
<li><a href="#cross-platform-support">Cross-platform support and consistent look and feel</a></li>
<li><a href="#extensive-customizations-features">Extensive customizations</a></li>
</ul>
</li>
<li><a href="#react-native-calendars-tutorial">React Native Calendars tutorial</a>
<ul >
<li><a href="#creating-basic-calendar">Creating a basic calendar</a></li>
<li><a href="#attaching-touch-event-callbacks">Attaching touch event callbacks</a></li>
<li><a href="#setting-initial-min-max-dates">Setting initial, min, and max dates</a></li>
<li><a href="#making-calendar-component-reusable">Making the <code>Calendar</code> component reusable</a></li>
</ul>
</li>
<li><a href="#supported-calendar-ui-customizations">Supported calendar UI customizations</a>
<ul >
<li><a href="#disabling-month-navigation-icons">Disabling the month navigation icons</a></li>
<li><a href="#changing-default-first-weekday-numbers">Changing the default first weekday and showing week numbers</a></li>
<li><a href="#marking-individual-days">Marking individual days</a></li>
<li><a href="#marking-date-ranges">Marking date ranges</a></li>
</ul>
</li>
<li><a href="#customizing-calendar-theme">Customizing the calendar theme</a>
<ul >
<li><a href="#styling-weekend-day-headers">Styling weekend day headers</a></li>
<li><a href="#creating-scrollable-calendar-lists">Creating scrollable calendar lists</a></li>
</ul>
</li>
<li><a href="#using-agenda-component-advanced-use-cases">Using the <code>Agenda</code> component for advanced use cases</a></li>
<li><a href="#place-calendar-components">How to place calendar components</a></li>
<li><a href="#react-native-calendars-components">React Native Calendars components</a></li>
<li><a href="#react-native-calendars-alternatives">React Native Calendars alternatives</a></li>
<li><a href="#consider-choosing-react-native-calendar-library">What to consider when choosing a React Native calendar library</a></li>
</ul>
<h2 id="why-use-calendar-library">Why should you use a calendar library?</h2>
<p>In older React Native versions, we could find <code><a href="https://reactnative.dev/docs/datepickerandroid">DatePickerAndroid</a></code> and <a href="https://reactnative.dev/docs/datepickerios"><code>DatePickerIOS</code></a>, two built-in native components for adding date pickers on Android and iOS. These components rendered platform-specific calendar GUI elements for selecting a date. For example, <code>DatePickerAndroid</code> displayed the Android system calendar dialog, and <code>DatePickerIOS</code> rendered the scrollable native iOS date picker. However, at the time of writing, the React Native team has marked these components as deprecated in the official documentation.</p>
<p>As an alternative option, you could build your own calendar component with <code>View</code> and other atomic building blocks, but that’s  undoubtedly a time-consuming activity for a modern fixed-budget app.</p>
<p>Using a calendar library is usually the best approach because it pre-implements common calendar UI features in a customizable way. Moreover, some calendar libraries offer additional components and features, like date range selectors, agenda views, etc.</p>
<p>Based on GitHub stars and <a href="https://www.npmjs.com/package/react-native-calendars">npm downloads</a> at the time of writing, the React Native Calendars library is one of the most popular and full-featured libraries among all of the available React Native community calendar packages. Also, as a recommended library in the <a href="https://reactnative.directory/?search=react-native-calendars&amp;order=recommended">React Native Directory</a>, React Native Calendars also benefits from more popularity among React Native developers.</p>
<h2 id="highlighted-features-react-native-calendars">React Native Calendars: Highlighted features</h2>
<p>React Native Calendars offers the following features to add customizable and high-quality calendar components.</p>
<h3 id="multiple-components-needs">Multiple components for your needs</h3>
<p>React Native Calendars offers various components for creating calendars, agenda views, and timelines. Below are the popular ones for creating calendars:</p>
<ul>
<li><code>Calendar</code>: Renders a <code>Calendar</code> component with built-in month navigation support</li>
<li><code>CalendarList</code>: A modern and stylish component that renders a semi-infinite, scrollable calendar list</li>
<li><code>Agenda</code>: A complex calendar component that helps developers implement timetables, appointment tables, and date schedulers</li>
</ul>
<h3 id="cross-platform-support">Cross-platform support and consistent look and feel</h3>
<p>When selecting a React Native library, it’s crucial to consider cross-platform support. With official support for both Android and iOS platforms, the React Native Calendars package offers a consistent look and feel with primary React Native components, like <code>Text</code>, <code>TouchableOpacity</code>, etc., that look nearly the same on both operating systems. Because it doesn’t contain native code, React Native Calendars works on <a href="https://expo.dev/client">Expo Go</a>.</p>
<h3 id="extensive-customizations-features">Extensive customizations</h3>
<p>Each library component exposes several props to customize the particular component’s behavior and features. For example, by providing a <code>theme</code> object, React Native Calendars lets you customize the calendar component’s fonts and colors. You can also mark individual dates and date ranges with built-in customizable indicators and custom shapes.</p>
<p>By overriding stylesheet definitions, you can achieve advanced styling customizations. So, if you use your own theme for your app, using the existing theme colors is easy. React Native Calendars also lets you attach callbacks for various events, so you can build a customized, modern date picker.</p>
<h2 id="react-native-calendars-tutorial">React Native Calendars tutorial</h2>
<p>Now that we have an overview of the React Native Calendars package, let’s use it practically by testing its features in a React Native application. To continue with the tutorial, you can use the following code examples directly in an existing app or create a new experimental app.</p>
<p>To get started with a new project, run the following command:</p>
<pre class="language-javascript hljs">npx react-native init CalendarsExample
cd CalendarsExample
</pre>
<p>Next, run the app to make sure that everything is working fine:</p>
<pre class="language-javascript hljs">npx react-native run-android
# --- or ---
npx react-native run-ios
</pre>
<p>Install React Native Calendars by running the following command:</p>
<pre class="language-javascript hljs">npm install react-native-calendars
# --- or ---
yarn install react-native-calendars
</pre>
<p>Let’s start with the <code>Calendar</code> component and explore its customization options and features in depth.</p>
<h3 id="creating-basic-calendar">Creating a basic calendar</h3>
<p>The <code>Calendar</code> component lets you render a traditional calendar element that supports month navigation. There are no mandatory props here. To create a calendar with the default setup, use the component without props in <code>App.js</code>:</p>
<pre class="language-javascript hljs">import React from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  View,
} from 'react-native';
import { Calendar } from 'react-native-calendars';

function App() {
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;Calendar />
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center'
  },
});

export default App;
</pre>
<p>The code above will render a <code>Calendar</code> component with the default features and styles, as shown in the preview below:</p>
<p><img             class="aligncenter wp-image-168447 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1calendar-component-default-features-styles.gif" alt="Calendar Component Default Features Styles" width="730" height="1542"  /><noscript><img               class="aligncenter wp-image-168447 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/1calendar-component-default-features-styles.gif" alt="Calendar Component Default Features Styles" width="730" height="1542"/></noscript></p>
<p>Keep in mind that selecting a date won’t render a highlighted background style, which everyone expects as a built-in feature ; we’ll have to write some code for that ourselves later.</p>
<h3 id="attaching-touch-event-callbacks">Attaching touch event callbacks</h3>
<p>The <code>Calendar</code> component is interactive, so users can perform actions by pressing the month navigation arrows and day elements.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>React Native Calendars exposes several props to attach callbacks for these crucial user actions. Check out the following sample callback implementations:</p>
<pre class="language-javascript hljs">&lt;Calendar
  onDayPress={(day) => console.log('onDayPress', day) }
  onDayLongPress={(day) => console.log('onDayLongPress', day) }
  onMonthChange={(date) => console.log('onMonthChange', date) }
  onPressArrowLeft={(goToPreviousMonth) => {
    console.log('onPressArrowLeft'); goToPreviousMonth();
  }}
  onPressArrowRight={(goToNextMonth) => {
    console.log('onPressArrowRight'); goToNextMonth();
  }}
/>
</pre>
<p>Handlers are executed on the following inputs:</p>
<ul>
<li><code>onDayPress</code>: The user taps a specific day element</li>
<li><code>onDayLongPress</code>: The user long presses a day element</li>
<li><code>onMonthChange</code>: The calendar month changes</li>
<li><code>onPressArrowLeft</code>: The user clicks the left-side month navigation arrow</li>
<li><code>onPressArrowRight</code>: The user clicks the right-side month navigation arrow</li>
</ul>
<p>Run the code snippet above, inspect the code, modify it, and become familiar with all the callbacks. For example, you can get the user-pressed date as follows:</p>
<pre class="language-javascript hljs">onDayPress={(day) => console.log('Selected date: ', day.dateString) }
</pre>
<p>You can experiment with all the other callbacks by attaching function implementations.</p>
<h3 id="setting-initial-min-max-dates">Setting initial, min, and max dates</h3>
<p>In some scenarios, using a default calendar with callback implementations is not enough to satisfy app specifications. Sometimes, we need to set the initially selected month as well as the minimum and maximum end dates.</p>
<p>The <code>Calendar</code> component offers props to set initial, min, and max dates. Let’s assume that you need to make a calendar component that initially shows December 2022 and only lets you select a day between the 1st of December 2022 and the 30th of January 2023. The code snippet below satisfies this specification:</p>
<pre class="language-javascript hljs">&lt;Calendar
  initialDate="2022-12-01"
  minDate="2022-12-01"
  maxDate="2023-01-30"
  disableAllTouchEventsForDisabledDays={true}
/>
</pre>
<p>The <code>disableAllTouchEventsForDisabledDays</code> boolean prop helps us disable touch feedback for disabled date elements. Run the code snippet above and compare the result with the specification above:</p>
<p><img             class="aligncenter wp-image-168448 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-calendar-component-disabled-date-elements.gif" alt="Calendar Component Disabled Date Elements" width="730" height="1542"  /><noscript><img               class="aligncenter wp-image-168448 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/2-calendar-component-disabled-date-elements.gif" alt="Calendar Component Disabled Date Elements" width="730" height="1542"/></noscript></p>
<h3 id="making-calendar-component-reusable">Making the <code>Calendar</code> component reusable</h3>
<p>If you need to use the calendar in several places, creating a reusable component is undoubtedly a good practice:</p>
<pre class="language-javascript hljs">import React from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  View,
} from 'react-native';
import { Calendar } from 'react-native-calendars';

function CustomCalendar(props) {
  return (
    &lt;Calendar
      initialDate="2022-12-01"
      minDate="2022-12-01"
      maxDate="2023-01-30"
      disableAllTouchEventsForDisabledDays={true}
      {...props}
    />
  );
}

function App() {
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;CustomCalendar onDayPress={(day) => console.log(`Date pressed: ${day.dateString}`)} />
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
});

export default App;
</pre>
<p>The <code>CustomCalendar</code> component above uses custom initial, min, and max dates. For further customizations, it accepts all supported <code>Calendar</code> props. Later in the article, we’ll discuss how to develop a reusable date picker component. Then, you can learn more about creating shareable calendars.</p>
<h2 id="supported-calendar-ui-customizations">Supported calendar UI customizations</h2>
<p>The <code>Calendar</code> component offers built-in framework components like <code>View</code>, <code>TouchableOpacity</code>, and <code>Text</code>. Unlike the platform-specific, native date picker component in Android and iOS, the <code>Calendar</code> component offers numerous props for extensive UI customizations.</p>
<p>For example, you can disable the left and right arrows with the <code>disableLeftArrow</code> and <code>disableRightArrow</code> boolean props in the previous <code>CustomCalendar</code> implementation:</p>
<pre class="language-javascript hljs">function CustomCalendar(props) {
  return (
    &lt;Calendar
      initialDate="2022-12-01"
      minDate="2022-12-01"
      maxDate="2022-12-31"
      disableAllTouchEventsForDisabledDays={true}
      disableArrowLeft={true}
      disableArrowRight={true}
      {...props}
    />
  );
}
</pre>
<p>Now, you’ll only see December 2022 because month-by-month navigation is not possible:</p>
<p><img             class="aligncenter wp-image-168449 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-disabling-month-navigation-icons.png" alt="Disabling Month Navigation Icons" width="730" height="276"    /><noscript><img               class="aligncenter wp-image-168449 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/3-disabling-month-navigation-icons.png" alt="Disabling Month Navigation Icons" width="730" height="276"  /></noscript></p>
<h3 id="disabling-month-navigation-icons">Disabling the month navigation icons</h3>
<p>Hiding both arrows is possible using the <code>hideArrows</code> boolean prop:</p>
<pre class="language-javascript hljs">function CustomCalendar(props) {
  return (
    &lt;Calendar
      initialDate="2022-12-01"
      minDate="2022-12-01"
      maxDate="2022-12-31"
      disableAllTouchEventsForDisabledDays={true}
      hideArrows={true}
      {...props}
    />
  );
}
</pre>
<p>By default, week rows start with Sunday. With the following props, you can start every week row with Monday and show week numbers on the calendar:</p>
<pre class="language-javascript hljs">firstDay={1}
showWeekNumbers={true}
</pre>
<p>Check out the following preview:</p>
<p><img             class="aligncenter wp-image-168464 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/4-changing-default-first-weekday.png" alt="Changing Default First Weekday" width="730" height="621"    /><noscript><img               class="aligncenter wp-image-168464 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/4-changing-default-first-weekday.png" alt="Changing Default First Weekday" width="730" height="621"  /></noscript></p>
<h3 id="changing-default-first-weekday-numbers">Changing the default first weekday and showing week numbers</h3>
<p>Using a custom month format is also possible with the <code>dateFormat</code> prop. For example, the following setup will render month strings like <code>Dec/2020</code>:</p>
<pre>monthFormat="MMM/yyyy"
</pre>
<p>I recommend browsing the <a href="https://wix.github.io/react-native-calendars/docs/Components/Calendar#api">official documentation</a> and identifying all of the supported calendar props that help in customizing the calendar UI.</p>
<h3 id="marking-individual-days">Marking individual days</h3>
<p>If you look at a physical paper calendar, you’ll probably see several day boxes that are marked with background colors or symbols to indicate special days or national holidays. To mark day elements in the <code>Calendar</code> component, you can use the <code>markedDates</code> prop.</p>
<p>Let’s learn how to mark individual days first! Use the following code for <code>CustomCalendar</code>:</p>
<pre class="language-javascript hljs">function CustomCalendar(props) {
  const marked = {
    '2022-12-10': { marked: true },
    '2022-12-12': { selected: true }
  };
  return (
    &lt;Calendar
      initialDate="2022-12-01"
      minDate="2022-12-01"
      maxDate="2022-12-31"
      disableAllTouchEventsForDisabledDays={true}
      markedDates={marked}
      {...props}
    />
  );
}
</pre>
<p>If the <code>marked</code> boolean prop is set to <code>true</code>, the component will render a dot on a specific day; if the <code>selected</code> boolean prop is set to <code>true</code>, the component will render a filled circle around the particular day element:</p>
<p><img             class="aligncenter wp-image-168463 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/5-marking-day-elements-circle-shape.png" alt="Marking Day Elements Circle Shape" width="730" height="177"    /><noscript><img               class="aligncenter wp-image-168463 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/5-marking-day-elements-circle-shape.png" alt="Marking Day Elements Circle Shape" width="730" height="177"  /></noscript></p>
<p>You can customize the indicators and shapes above as follows:</p>
<pre class="language-javascript hljs">const marked = {
    '2022-12-10': { marked: true, dotColor: 'red' },
    '2022-12-12': { selected: true, selectedColor: '#aa2222', selectedTextColor: 'yellow' },
    '2022-12-13': {
      marked: true,
      selected: true,
      selectedColor: '#222222',
      selectedTextColor: 'yellow',
      dotColor: 'white'
    }
  };
</pre>
<p>Once you use the definition above for <code>marked</code>, you’ll see the following result:</p>
<p><img             class="aligncenter wp-image-168462 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/6-using-custom-styles-default-marking-indicators.png" alt="Using Custom Styles Default Marking Indicators" width="730" height="183"    /><noscript><img               class="aligncenter wp-image-168462 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/6-using-custom-styles-default-marking-indicators.png" alt="Using Custom Styles Default Marking Indicators" width="730" height="183"  /></noscript></p>
<p>The <code>markedDates</code> prop helps us to mark the currently pressed day element with a simple implementation. We can store the current date in the component state and update the <code>markedDates</code> object accordingly, as shown in the code below:</p>
<pre class="language-javascript hljs">import React, { useState, useMemo } from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  View,
} from 'react-native';
import { Calendar } from 'react-native-calendars';

function CustomCalendar(props) {
  const initDate = '2022-12-01';
  const [selected, setSelected] = useState(initDate);
  const marked = useMemo(() => ({
    [selected]: {
      selected: true,
      selectedColor: '#222222',
      selectedTextColor: 'yellow',
    }
  }), [selected]);
  return (
    &lt;Calendar
      initialDate={initDate}
      markedDates={marked}
      onDayPress={(day) => {
        setSelected(day.dateString);
        props.onDaySelect &amp;&amp; props.onDaySelect(day);
      }}
      {...props}
    />
  );
}

function App() {
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;CustomCalendar onDaySelect={(day) => console.log(`Date selected: ${day.dateString}`)}/>
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
});

export default App;
</pre>
<p>In the code above, we memoized the <code>marked</code> object using the <code>useMemo</code> Hook and  recompute it only if <code>selected</code> is changed for performance optimization. The example below shows how the code above implements the selectable day elements:</p>
<p><img             class="aligncenter wp-image-168461 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/7-implementing-date-selection-feature.gif" alt="Implementing Date Selection Feature" width="730" height="1542"  /><noscript><img               class="aligncenter wp-image-168461 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/7-implementing-date-selection-feature.gif" alt="Implementing Date Selection Feature" width="730" height="1542"/></noscript></p>
<p>The <code>marked</code> boolean element renders a circle shape with several pre-included styles, but React Native Calendars is flexible enough to offer the <code>customStyles</code> prop for defining the shape style. When you press a day element, the following code snippet renders a green rectangle:</p>
<pre class="language-javascript hljs">function CustomCalendar(props) {
  const initDate = '2022-12-01';
  const [selected, setSelected] = useState(initDate);
  const marked = useMemo(() => ({
    [selected]: {
      customStyles: {
        container: {
          backgroundColor: 'green',
          borderRadius: 0,
        },
        text: {
          color: 'white',
        }
      }
    }
  }), [selected]);
  return (
    &lt;Calendar
      initialDate="2022-12-01"
      markingType="custom"
      markedDates={marked}
      onDayPress={(day) => {
        setSelected(day.dateString);
        props.onDaySelect &amp;&amp; props.onDaySelect(day);
      }}
      {...props}
    />
  );
}
</pre>
<p>In the code above, we used <code>markingType="custom"</code> to turn on the custom markers feature. The <code>multi-dot</code> marking type lets us add multiple dot indicators into day elements, as if to indicate events on a particular day, as shown in the following code:</p>
<pre class="language-javascript hljs">import React from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  View,
} from 'react-native';
import { Calendar } from 'react-native-calendars';

function App() {
  const running = {key: 'running', color: 'blue'};
  const cycling = {key: 'cycling', color: 'green'};
  const walking = {key: 'walking', color: 'orange'};
  const marked = {
    '2022-12-01': {
      dots: [running, walking]
    },
    '2022-12-02': {
      dots: [running, walking, cycling]
    }
  };
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;Calendar
        initialDate="2022-12-01"
        markingType="multi-dot"
        markedDates={marked}
      />
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
});

export default App;
</pre>
<p>The code above generates a calendar component with multiple dot indicators in day elements:</p>
<p><img  src="https://blog.logrocket.com/wp-content/uploads/2022/10/adding-multiple-custom-dot-indicators.png" alt="Adding multiple custom dot indicators"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2022/10/adding-multiple-custom-dot-indicators.png" alt="Adding multiple custom dot indicators"/></noscript></p>
<h3 id="marking-date-ranges">Marking date ranges</h3>
<p>We can implement a date range marking style ourselves with <code>customStyles</code>, but React Native Calendars boosts productivity by offering a built-in date range marking feature. For example, you can mark the first ten days of December 2022 as follows:</p>
<pre class="language-javascript hljs">function App() {
  const getMarked = () => {
    let marked = {};
    for(let i = 1; i &lt;= 10; i++) {
      let day = i.toString().padStart(2, '0');
      marked[`2022-12-${day}`] = {
        startingDay: i == 1,
        endingDay: i == 10,
        color: 'yellow',
        textColor: '#aaa',
        disabled: true,
      };
    }
    return marked;
  };

  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;Calendar
        initialDate="2022-12-01"
        markingType="period"
        markedDates={getMarked()}
      />
    &lt;/SafeAreaView>
  );
};
</pre>
<p>We use the <code>getMarked</code> function to generate a ten-day-long period. The period start and end edge styling will change according to the <code>startingDay</code> and <code>endingDay</code> booleans. Once you run the code snippet above, you’ll see the following result:</p>
<p><img             class="aligncenter wp-image-168460 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/9-marking-date-range-preferred-background-color.png" alt="Marking Date Range Preferred Background Color" width="730" height="443"    /><noscript><img               class="aligncenter wp-image-168460 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/9-marking-date-range-preferred-background-color.png" alt="Marking Date Range Preferred Background Color" width="730" height="443"  /></noscript></p>
<p>You can also build a date range selector component with this period marking feature. You can see a sample implementation in <a href="https://github.com/codezri/react-native-date-range-picker">my GitHub repository</a>. React Native Calendars offers a built-in multi-period-marking feature, too:</p>
<pre class="language-javascript hljs">function App() {
  const getMarked = () => {
    let marked = {};
    for(let i = 1; i &lt;= 10; i++) {
      let day = i.toString().padStart(2, '0');
      let periods = [
        {
          startingDay: i == 1,
          endingDay: i == 10,
          color: 'teal',
        },
        (i >= 2 &amp;&amp; i &lt;= 6) &amp;&amp; {
          startingDay: i == 2,
          endingDay: i == 6,
          color: 'orange',
        }
      ];
      marked[`2022-12-${day}`] = {
        periods
      };
    }
    return marked;
  };
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;Calendar
        initialDate="2022-12-01"
        markingType="multi-period"
        markedDates={getMarked()}
      />
    &lt;/SafeAreaView>
  );
};
</pre>
<p>The above <code>App</code> component implementation renders two date period lines between the first and the tenth of December 2022:</p>
<p><img             class="aligncenter wp-image-168459 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/10-using-multi-period-marking-feature.png" alt="Using Multi Period Marking Feature" width="730" height="474"    /><noscript><img               class="aligncenter wp-image-168459 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/10-using-multi-period-marking-feature.png" alt="Using Multi Period Marking Feature" width="730" height="474"  /></noscript></p>
<p>Want to display a quick summary of a few bookings in a calendar? Try the <code>multi-period</code> marking type.</p>
<h2 id="customizing-calendar-theme">Customizing the calendar theme</h2>
<p>So far, we already know how to do basic UI customizations; we changed the first weekday, disabled and hid the month navigation arrows, and changed the month format. But, what if we need to change the day element, header, weekday name colors, and fonts?</p>
<p>As mentioned in the highlighted features section, React Native Calendars lets you change the look and feel by passing a custom <code>theme</code> object. If you feel that using a custom <code>theme</code> object is limiting, you can directly override the <code>Calendar</code> component’s stylesheet definitions. You can also customize the <code>Calendar</code> component’s container styles.</p>
<p>In the following example, we customize the calendar’s look and feel via the <code>theme</code> prop and the calendar container’s styles via the <code>style</code> prop:</p>
<pre class="language-javascript hljs">&lt;Calendar
  initialDate="2022-12-01"
  style={{
    borderRadius: 5,
    margin: 12,
    elevation: 5,
    borderWidth: 4,
    borderColor: 'rgba(100, 100, 100, 0.2)'
  }}
  theme={{
    calendarBackground: '#222',
    dayTextColor: '#fff',
    textDisabledColor: '#444',
    monthTextColor: '#888'
  }}
/>
</pre>
<p>The code snippet above applies a dark color scheme to the calendar via the <code>theme</code> prop and adds some styling enhancements for the calendar container via the <code>style</code> prop:</p>
<p><img             class="aligncenter wp-image-168458 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/11-implementing-custom-dark-color-theme-calendar.gif" alt="Implementing Custom Dark Color Theme Calendar" width="730" height="1542"  /><noscript><img               class="aligncenter wp-image-168458 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/11-implementing-custom-dark-color-theme-calendar.gif" alt="Implementing Custom Dark Color Theme Calendar" width="730" height="1542"/></noscript></p>
<p>The <code>theme</code> prop offers a way to customize text styles and colors. But sometimes, we need to add advanced customizations using styling definitions. In these scenarios, you can override stylesheet definitions. For example, you can override the calendar header style as follows:</p>
<pre class="language-javascript hljs">theme={{
  'stylesheet.calendar.header': {
    headerContainer: {
      flexDirection: 'row',
      backgroundColor: '#eee',
      borderRadius: 12
    },
  }
}}
</pre>
<p>Look at your <code>style.ts</code> files by <a href="https://github.com/wix/react-native-calendars/tree/master/src">browsing the source code</a> and identifying all the style definitions that you can override via <code>theme</code>. Check the end of a particular <code>style.ts</code> file to find the stylesheet identifier, for example, <code>style.calendar.header</code>.</p>
<h3 id="styling-weekend-day-headers">Styling weekend day headers</h3>
<p>We can use stylesheet-overriding in the <code>theme</code> prop to apply different styles for weekend day headers. For example, we can use green for Saturday headers and red for Sunday headers with the following <code>theme</code> object:</p>
<pre class="language-javascript hljs">theme={{
  'stylesheet.calendar.header': {
    dayTextAtIndex0: {
      color: 'red'
    },
    dayTextAtIndex6: {
      color: 'green'
    }
  }
}}
</pre>
<p>Below is the preview for the setup above:</p>
<p><img             class="aligncenter wp-image-168457 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/12-changing-weekend-days-header-styles-theme-object.png" alt="Changing Weekend Days Header Styles Theme Object" width="730" height="279"    /><noscript><img               class="aligncenter wp-image-168457 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/12-changing-weekend-days-header-styles-theme-object.png" alt="Changing Weekend Days Header Styles Theme Object" width="730" height="279"  /></noscript></p>
<p>Using two different colors for weekend day headers is also a good UI improvement. But, React Native Calendars doesn’t support customizing indexed day element styling, which we used to customize day headers via the <code>theme</code> prop. So, we have to style weekend day numbers with <code>markedDates</code> until the maintainers and contributors implement <a href="https://github.com/wix/react-native-calendars/pull/1495">this pull request</a>.</p>
<h3 id="creating-scrollable-calendar-lists">Creating scrollable calendar lists</h3>
<p>Modern mobile apps often use swipe events more than traditional taps. For example, most popular social media apps load more posts when the user swipes up , not when the user taps a button.</p>
<p>The <code>Calendar</code> component is designed to navigate with arrows and show one month at a time, but you can use the <code>CalendarList</code> component to create a modern infinite scroll-like calendar component:</p>
<pre class="language-javascript hljs">import React from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  View,
} from 'react-native';
import { CalendarList } from 'react-native-calendars';

function App() {
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;CalendarList/>
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
});

export default App;
</pre>
<p>Now, you’ll see a scrollable calendar:</p>
<p><img             class="aligncenter wp-image-168456 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/13-using-calendar-list-create-scrollable-calendar.gif" alt="Using Calendar List Create Scrollable Calendar" width="730" height="1542"  /><noscript><img               class="aligncenter wp-image-168456 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/13-using-calendar-list-create-scrollable-calendar.gif" alt="Using Calendar List Create Scrollable Calendar" width="730" height="1542"/></noscript></p>
<p>The <code>Calendar</code> component is minimal, traditional, and generic, so consider selecting <code>CalendarList</code> only if the screen is calendar-oriented, for example, it is displayed within a <code>Modal</code> and users need to see multiple months at a time. The <code>CalendarList</code> component accepts all <code>Calendar</code> props and <a href="https://wix.github.io/react-native-calendars/docs/Components/CalendarList#api">some additional props</a>.</p>
<h2 id="using-agenda-component-advanced-use-cases">Using the <code>Agenda</code> component for advanced use cases</h2>
<p>In some scenarios, we need to implement agenda views in our React Native apps. The <code>Calendar</code> and <code>CalendarList</code> components support adding multi-period markers via the <code>markedDates</code> prop, but the calendar component doesn’t have enough space to add a title and a description for each marker line. So, implementing an agenda view with the <code>Calendar</code> or <code>CalendarList</code> component is not a good decision.</p>
<p>The <code>Agenda</code> component lets you create agenda views by displaying records for each day in a second view that is opened after tapping a day element. Run the following code to display a sample agenda view:</p>
<pre class="language-javascript hljs">import React from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
} from 'react-native';
import { Agenda } from 'react-native-calendars';

function App() {
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;Agenda
        selected="2022-12-01"
        items={{
          '2022-12-01': [{name: 'Cycling'}, {name: 'Walking'}, {name: 'Running'}],
          '2022-12-02': [{name: 'Writing'}]
        }}
        renderItem={(item, isFirst) => (
          &lt;TouchableOpacity style={styles.item}>
            &lt;Text style={styles.itemText}>{item.name}&lt;/Text>
          &lt;/TouchableOpacity>
        )}
      />
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center'
  },
  item: {
    backgroundColor: 'white',
    flex: 1,
    borderRadius: 5,
    padding: 10,
    marginRight: 10,
    marginTop: 17,
  },
  itemText: {
    color: '#888',
    fontSize: 16,
  }
});

export default App;
</pre>
<p>We used the <code>Agenda</code> component by providing day items via the <code>items</code> prop. You can use the <code>renderItem</code> callback to design a GUI for each day item. You can check the <code>Agenda</code> component’s other callbacks and supported props in the <a href="https://wix.github.io/react-native-calendars/docs/Components/Agenda#api">official documentation</a>.</p>
<p>Once you run the code above, you’ll see the following minimal agenda view:</p>
<p><img             class="aligncenter wp-image-168455 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/14-agenda-component-preview-android.gif" alt="Agenda Component Preview Android" width="730" height="346"  /><noscript><img               class="aligncenter wp-image-168455 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/14-agenda-component-preview-android.gif" alt="Agenda Component Preview Android" width="730" height="346"/></noscript></p>
<p>For demonstration purposes, we hardcoded several day items, but you can also use a remote web server to <a href="https://blog.logrocket.com/comprehensive-guide-data-fetching-react/">fetch data for your agenda view</a> in production apps.</p>
<h2 id="place-calendar-components">How to place calendar components</h2>
<p>There are two key ways to render any GUI element in a mobile app: rendering on an app screen surface or rendering in a popup. I’ve demonstrated all the above calendar component customizations directly on an app screen. If you use a calendar component as a user input element, showing it in a popup saves the current app screen’s space and improves overall usability.</p>
<p>Consider the following code:</p>
<pre class="language-javascript hljs">import React, { useState } from 'react';
import {
  SafeAreaView,
  ScrollView,
  StyleSheet,
  View,
  Modal,
  Button,
} from 'react-native';
import { Calendar } from 'react-native-calendars';

function DatePicker({visible, onDateSelected}) {
  return (
    &lt;Modal visible={visible} transparent={true} animationType="fade">
      &lt;View style={styles.overlay}>
        &lt;Calendar onDayPress={onDateSelected}/>
      &lt;/View>
    &lt;/Modal>
  );
}

function App() {
  const [modalVisible, setModalVisible] = useState(false);
  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;Button title="Show Modal" onPress={() => setModalVisible(true)}/>
      &lt;DatePicker
        visible={modalVisible}
        onDateSelected={() => setModalVisible(false)}/>
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center'
  },
  overlay: {
    flex: 1,
    justifyContent: 'center',
    padding: 40,
    backgroundColor: 'rgba(100, 100, 100, 0.6)',
  },
});

export default App;
</pre>
<p>We created the reusable <code>DatePicker</code> component and showed a calendar component within a <code>Modal</code>. Once you tap the button, the modal will appear with an overlay and a calendar component, as shown in the following preview:</p>
<p><img             class="aligncenter wp-image-168454 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/15-showing-calendar-within-modal-component.gif" alt="Showing Calendar Within Modal Component" width="730" height="1542"  /><noscript><img               class="aligncenter wp-image-168454 size-full" src="http://blog.logrocket.com/wp-content/uploads/2023/04/15-showing-calendar-within-modal-component.gif" alt="Showing Calendar Within Modal Component" width="730" height="1542"/></noscript></p>
<h2 id="react-native-calendars-components">React Native Calendars components</h2>
<p>In this tutorial, we discussed three popular components that React Native Calendars offers: <code>Calendar</code>, <code>CalendarList</code>, and <code>Agenda</code>.</p>
<p>We mainly focused on the <code>Calendar</code> component because it lets you create customizable and shareable calendar components in your React Native apps, but the library offers the following additional components:</p>
<ul>
<li><code>WeekCalendar</code>: A week calendar component</li>
<li><code>Timeline</code>: A timeline component implementation that displays ordered events per day based on start and end times</li>
<li><code>ExpandableCalendar</code>: A special calendar component that the user can collapse into a week calendar and expand into a month calendar</li>
<li><code>AgendaList</code>: An agenda list component that you can integrate with the <code>ExpandableCalendar</code> component</li>
<li><code>CalendarProvider</code>: Calendar context provider for integrating <code>ExpandableCalendar</code> and <code>AgendaList</code> components</li>
</ul>
<p>You can check out all the officially supported components from <a href="https://wix.github.io/react-native-calendars/docs/Components/Agenda">the official documentation</a>. There are a few undocumented components, but you can check them out in <a href="https://github.com/wix/react-native-calendars/blob/master/src/index.ts">the source code</a>.</p>
<h2 id="react-native-calendars-alternatives">React Native Calendars alternatives</h2>
<p>Like any other popular package, there are alternatives to the React Native Calendars library. However, these alternatives aren’t so competitive compared to the React Native Calendars package.</p>
<p>The reasons for this include:</p>
<ul>
<li>Most alternative packages focus on creating date pickers , not calendar views</li>
<li>Some packages are no longer actively maintained or are deprecated, i.e., <a href="https://github.com/christopherdro/react-native-calendar"><code>react-native-calendar</code></a></li>
<li>Some packages are newer and are still gaining popularity within the React Native community</li>
</ul>
<p>However, it’s worth learning about the alternatives because they may become popular in the future and may offer unique features for your requirements. So, check out the following alternative libraries:</p>
<ul>
<li><code><a href="https://www.npmjs.com/package/react-native-calendario">react-native-calendario</a></code>: A minimal, modern, scrollable calendar component that supports built-in range selection, date marking, and extensive style customization</li>
<li><code><a href="https://www.npmjs.com/package/react-native-calendar-strip">react-native-calendar-strip</a></code>: A modern and customizable calendar component that displays days in one row</li>
<li><a href="https://www.npmjs.com/package/react-native-calendar-picker"><code>react-native-calendar-picker</code></a>: A date picker component that supports extensive style customization</li>
<li><a href="https://www.npmjs.com/package/react-native-date-picker">React Native Date Picker</a>: A library that offers platform-specific date and time picker components implemented in Java and Objective-C for better performance</li>
</ul>
<h2 id="consider-choosing-react-native-calendar-library">What to consider when choosing a React Native calendar library</h2>
<p>The React Native Calendars library offers features for almost every scenario where you need a calendar. But, we also mentioned a few alternative libraries that offer some unique features. Additionally, the developer community will likely open source more modern React Native libraries into the npm registry in the future.</p>
<p>We undoubtedly want to select the most suitable calendar library for our project from all the available libraries. Before choosing a calendar UI library, you should consider the following factors.</p>
<h3>Component type</h3>
<p>Do you need a platform-specific date and time picker or a platform-agnostic calendar component? React Native Date Picker renders platform-specific date and time pickers, and the other libraries mentioned above construct cross-platform calendar UIs.</p>
<h3>Available features</h3>
<p>You should make sure that your selected calendar library offers all of the features you need. From the features perspective, React Native Calendars undoubtedly wins, but nonetheless, an alternative library might offer a unique feature that you want in your project. For example, <code>react-native-calendario</code> supports built-in date range selection and weekend container style customization.</p>
<h3>Popularity</h3>
<p>Popularity usually increases for stable, fully-featured, and actively-maintained packages, so you may want to consider npm downloads and GitHub stars when choosing a third-party library.</p>
<h3>Documentation and developer-support</h3>
<p>A good, established library typically has a separate documentation website for developers to check API references, sample code snippets, and tutorials. In addition, a library’s maintainers and users communicate regarding GitHub issues. It’s helpful to select a calendar library that comes with well-organized, up-to-date documentation and active, friendly developer support.</p>
<h3>Bundle size</h3>
<p>It’s good practice to ensure that your preferred calendar library doesn’t increase the app’s bundle size too much. Fortunately, all of the libraries listed in this article don’t affect the final bundle size considerably compared to the React Native framework size.</p>
<h3 id="ui-ux-practices-customizability">UI/UX practices and customizability</h3>
<p>Compare the calendar’s behavior or visibility with other parts of your app and make sure that you have the same UI practices. If not, verify that your preferred calendar library supports customizing themes, i.e., changing colors, date formats, etc.</p>
<p>React Native Date Picker excels at these factors, but if you need a platform-specific time and date picker, a pre-developed lightweight date picker, or a pre-developed lightweight date range picker, you may have to consider other alternatives.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we’ve learned how to create shareable, customizable calendars with the React Native Calendars library.</p>
<p>Code reusability boosts your whole team’s productivity and improves software quality, so if you repeat the same calendar props with the same values in multiple places, you should always strive to define a shareable calendar component.</p>
<p>You should also consider your app’s UI/UX factors by using a matching color theme for the <code>Calendar</code> component and other UI elements. The React Native Calendars library offers the <code>Calendar</code> component as the main component, but you should review <code>CalendarList</code>, <code>Agenda</code>, and others before selecting one for your project.</p>
<p>I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-136109" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-136109" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-136109" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/shalithasuranga/">
Shalitha Suranga <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Programmer | Author of Neutralino.js | Technical Writer</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react-native/">#react native</a></li> </ul>
 </div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/" rel="prev">3 ways to implement infinite scroll in React</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/build-swiftui-segmented-customizable-control/" rel="next">Build a SwiftUI customizable segmented control</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/create-customizable-shareable-calendars-react-native/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Create smooth page transitions with Barba.js - LogRocket Blog</title>
			<link>https://blog.logrocket.com/create-smooth-page-transitions-barba-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/create-smooth-page-transitions-barba-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Create smooth page transitions with Barba.js - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/create-smooth-page-transitions-barba-js/">Create smooth page transitions with Barba.js - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-164523 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-js-libraries" id="post-164523">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/nelsonmichael/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/03/nelson-michael.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/03/nelson-michael.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nelsonmichael/">
Nelson Michael <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nelson Michael is a frontend developer from Nigeria. When he's not meddling with CSS, he spends his time writing, sharing what he knows, and playing games.</span>
</div>
</div>
<h1 class="posttitle">Create smooth page transitions with Barba.js</h1>
<p>
<span class="post-date"><time class="post-date">
April 3, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2557</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/create-smooth-page-transitions-barba-js-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Create Smooth Page Transitions Barba.js"                /> <article class="article-post">
<p>Page transitions can greatly impact the overall user experience for a website or application. A seamless and effortless flow between webpages can be helpful in maintaining a user’s focus and interest. Conversely, clunky or slow transitions can be a major turnoff, resulting in a higher bounce rate and a reduction in engagement and conversions.</p>
<p>In this article, we’ll discuss improving user experience by creating smooth page transitions with Barba.js, a popular JavaScript library.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-is-barba-js">What is Barba.js?</a></li>
<li><a href="#setting-up-barba-js">Setting up Barba.js</a>
<ul >
<li><a href="#installation">Installation</a></li>
<li><a href="#markup">Markup</a></li>
</ul>
</li>
<li><a href="#understanding-barba-js-transition-logic">Understanding Barba.js transition logic</a></li>
<li><a href="#implementing-page-transitions">Implementing page transitions</a>
<ul >
<li><a href="#defining-function-handle-animation-gsap">Defining a function to handle the animation with GSAP</a></li>
<li><a href="#defining-leave-transition-barba-js">Defining a <code>leave()</code> transition with Barba.js</a></li>
</ul>
</li>
<li><a href="#defining-specific-transitions-transition-resolution">Defining specific transitions (transition resolution)</a>
<ul >
<li><a href="#keywords">Keywords</a></li>
<li><a href="#conditions">Conditions</a></li>
</ul>
</li>
</ul>
<h2 id="what-is-barba-js">What is Barba.js?</h2>
<p>Barba.js is a JavaScript library that handles the transition between webpages, allowing the user to experience a seamless page change with an animation, rather than a jarring browser reload with a blank page. This improves the overall look and feel of the website and enhances user experience.</p>
<p>Barba.js operates by updating the content of a page dynamically, without having to reload the entire page. This results in a faster and more seamless experience for the user, as they can move between pages without any interruptions or delays. The library is designed to be lightweight, making it easy to implement and use in a wide range of projects.</p>
<p>A key feature of Barba.js is its ability to cache pages, ensuring a fast loading experience — even when a user navigates back and forth between pages. It also provides a range of customization options, allowing developers to create unique and tailored page transitions. In addition, the library supports the preloading of pages, providing a smooth and uninterrupted experience, even when a user clicks on a link.</p>
<h2 id="setting-up-barba-js">Setting up Barba.js</h2>
<p>Let’s look at the different ways we can bring Barba.js into our project.</p>
<h3 id="installation">Installation</h3>
<p>We can install Barba.js with a bundler or via a CDN.</p>
<h4 id="via-bundler">Via a bundler</h4>
<p>Barba.js is available on the npm registry and can be installed through the command line using a package manager such as npm or yarn:</p>
<pre class="language-bash hljs"># npm
npm install @barba/core

# yarn
yarn add @barba/core
</pre>
<p>Then, you can import it into your project like any other module:</p>
<pre class="language-javascript hljs">import barba from '@barba/core';
</pre>
<h4 id="via-cdn">Via a CDN</h4>
<p>The fastest way to use Barba.js in your project is to simply load the latest build from your favorite CDN; this approach requires minimal setup:</p>
<pre class="language-html hljs">// HTML
&lt;!-- unpkg -->
&lt;script src="https://unpkg.com/@barba/core">&lt;/script>

&lt;!-- jsdelivr -->
&lt;script src="https://cdn.jsdelivr.net/npm/@barba/core">&lt;/script>
</pre>
<p>Next, <code>init</code> Barba.js, like so:</p>
<pre class="language-html hljs">// HTML
&lt;script>
  barba.init({
    // ...
  })
&lt;/script>
</pre>
<p>You can also use an external script file and just link it:</p>
<pre class="language-html hljs">// HTML
&lt;script src="./app.js">&lt;/script>
</pre>
<h3 id="markup">Markup</h3>
<p>Barba.js needs to understand your site architecture so that it knows which elements to swap and which elements to retain.<br/>
Here’s how your markup should look:</p>
<pre class="language-html hljs">// HTML
&lt;body data-barba="wrapper">

&lt;!-- You can have contents that will not be swapped in here, like &lt;div class="navbar"> -->

&lt;main data-barba="container" data-barba-namespace="home">
&lt;!-- put here the content you wish to swap -->
&lt;/main>

&lt;!-- You can have contents that will not be swapped in here, like &lt;footer> -->
&lt;/body>
</pre>
<p>Let’s take a closer look at the Barba.js attributes:</p>
<ul>
<li><code>wrapper</code><strong>:</strong> Central component of Barba.js that holds the entire page structure. Any elements within the <code>barba-wrapper</code>, but outside of the <code>barba-container</code>, will not be swapped during transition, making it a safe area to place items such as headers, footers, or navigation bars. The <code>wrapper</code> is typically placed on the <code>&lt;body></code> tag, but it can also be placed within a <code>&lt;div></code> or <code>&lt;section></code> element</li>
<li><code>container</code><strong>:</strong> <em>*</em>*Section of the page that gets swapped during transition; this is where you should place the <code>&lt;main></code> content of a particular page. The <code>container</code> is typically defined within the <code>&lt;main></code> tag, but it can also be placed within a <code>&lt;div></code> or <code>&lt;section></code> element. One thing to note is that Barba.js appends the <code>container</code> to the <code>wrapper</code>, meaning it will always be at the bottom of the <code>wrapper</code></li>
<li><code>namespace</code><strong>:</strong> Provides the ability to assign a unique name to each page, which can then be used to create specific transition rules for each page, if desired</li>
</ul>
<h2 id="understanding-barba-js-transition-logic">Understanding Barba.js transition logic</h2>
<p>Barba.js alters the behavior of a website making it work like a single page application and thereby enabling the library to create smooth transitions without having to reload the entire site.</p>
<p>Here are the three steps of the Barba.js lifecycle when navigating between two pages:</p>
<ol>
<li>On <code>mouseover</code> or <code>touchstart</code> events, Barba.js pre-fetches and caches the next page’s content in the background, so that the transition between pages is seamless and fast</li>
<li>The <code>data-barba=container</code> of the next page is added to the end of the element with the attribute <code>"data-barba='wrapper"</code></li>
<li>Once the transition is completed, the element with the <code>data-barba=container</code> attribute is removed from the DOM</li>
</ol>
<p>Barba.js provides us with different hooks at different stages of the transition lifecycle. One example is the <code>afterLeave</code> hook, which enables us to perform any necessary post-transition actions, such as updating the page’s title:</p>
<p><img             class="aligncenter wp-image-164527 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/barba-js-transition-lifecycle-stages.png" alt="Barba.js Transition Lifecycle Stages" width="720" height="309"    /><noscript><img               class="aligncenter wp-image-164527 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/barba-js-transition-lifecycle-stages.png" alt="Barba.js Transition Lifecycle Stages" width="720" height="309"  /></noscript></p>
<p>Great! Now that we have all the setup and transition logic covered, let’s build a simple example so that we can really see Barba.js in action.</p>
<h2 id="implementing-page-transitions">Implementing page transitions</h2>
<p>Barba.js is a transition library, not an animation library. You’ll still need an animation library, like GSAP, to handle animations.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
 <h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>The transition consists of two parts:</p>
<ul>
<li><code>leave</code> <code>()</code> animation: Takes place when leaving the current page</li>
<li><code>enter</code> <code>()</code> animation: Occurs when entering the next page</li>
</ul>
<p>Let’s get started!</p>
<p>First, we’ll need to set up a new project. Our example will be built with plain HTML, CSS, and JavaScript.</p>
<p>Here’s what our project folder structure should look like:</p>
<pre class="language-bash hljs">- Root folder
  |
  |- index.html
  |- about.html
  |- app.js
  |- styles
  |   |
  |   |- main.scss
</pre>
<p><img             class="aligncenter wp-image-164529 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/barba-js-project-folder-structure.png" alt="Barba.js Project Folder Structure" width="450" height="514"    /><noscript><img               class="aligncenter wp-image-164529 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/barba-js-project-folder-structure.png" alt="Barba.js Project Folder Structure" width="450" height="514"  /></noscript></p>
<p>Once our project folder structure is complete, we’ll need to add two libraries, GSAP and Barba.js, into our project. For this example, we’ll use a CDN to import both libraries.</p>
<p>Here’s what that will look like for each page:</p>
<pre class="language-html hljs">&lt;!DOCTYPE html>
&lt;html lang="en">
      &lt;head>
            &lt;meta charset="UTF-8" />
            &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" />
            &lt;meta
                  name="viewport"
                  content="width=device-width, initial-scale=1.0"
            />
            &lt;title>Barba-demo Home&lt;/title>
            &lt;link rel="stylesheet" href="main.css" />
      &lt;/head>
      &lt;body data-barba="wrapper">
            &lt;main data-barba="container">&lt;/main>
            &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js">&lt;/script>
            &lt;script src="https://cdn.jsdelivr.net/npm/@barba/core">&lt;/script>
            &lt;script src="app.js">&lt;/script>
      &lt;/body>
&lt;/html>
</pre>
<p>In both the <code>index.html</code> and <code>about.html</code> pages, the custom stylesheet is linked at the <code>&lt;head></code> element, and the libraries are imported through CDN links in the <code>&lt;body></code> element.</p>
<p>In the code above, we inform Barba.js about the structure of our website by using the attributes <code>data-barba="wrapper"</code> and <code>data-barba="container"</code>. These attributes are applied to each page of our site so that Barba.js knows what part of each webpage to swap.</p>
<p>Here’s a CodeSandbox with the entire project:</p>
<blockquote class="embedly-card" data-card-controls="1" data-card-align="center" data-card-theme="light">
<h4><a href="https://codesandbox.io/embed/suspicious-architecture-l6mqlt?fontsize=14&amp;hidenavigation=1&amp;theme=dark">suspicious-architecture-l6mqlt</a></h4>
<p>CodeSandbox is an online editor tailored for web applications.</p>
</blockquote>
<p><meta async="async" src="//cdn.embedly.com/widgets/platform.js" charset="UTF-8"/></p>
<p>Here’s the entire code for the <code>index.html</code> page:</p>
<pre class="language-html hljs">&lt;!DOCTYPE html>
&lt;html lang="en">
      &lt;head>
            &lt;meta charset="UTF-8" />
            &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" />
            &lt;meta
                  name="viewport"
                  content="width=device-width, initial-scale=1.0"
            />
            &lt;title>Barba-demo Home&lt;/title>
            &lt;link rel="stylesheet" href="styles/main.css" />
      &lt;/head>
      &lt;body data-barba="wrapper">
            &lt;div class="page-transition-container">
                  &lt;span class="page-transition">&lt;/span>
                  &lt;span class="page-transition">&lt;/span>
            &lt;/div>
            &lt;nav>
                  &lt;p>Wivalow&lt;/p>
                  &lt;ul>
                        &lt;li>&lt;a href="/index.html">Home&lt;/a>&lt;/li>
                        &lt;li>&lt;a href="/about.html">About&lt;/a>&lt;/li>
                  &lt;/ul>
            &lt;/nav>
            &lt;main data-barba="container">
              &lt;div class="img-container">
                &lt;img src="https://images.unsplash.com/photo-1675873725360-b15df4950952?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=465&amp;q=80" alt=""/>
                  &lt;div class="bg-underlay">&lt;/div>
                  &lt;/div>
                  &lt;div class="desc">
                    &lt;h1>Top&lt;br />Echelon&lt;br />Luxury&lt;/h1>
                    &lt;p>Experience the epitome of luxury and style with Wivalow.&lt;br> Shop with us and elevate your wardrobe to new heights.&lt;/p>
                  &lt;/div>
            &lt;/main>
            &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js">&lt;/script>
            &lt;script src="https://cdn.jsdelivr.net/npm/@barba/core">&lt;/script>
            &lt;script src="app.js">&lt;/script>
      &lt;/body>
&lt;/html>
</pre>
<p>Our <code>about.html</code> page is exactly the same; we’re only changing the images, just for the sake of distinction.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>The <code>index.html</code> file includes the below code. This is the element that will be animated during transition. We’re using the element as an overlay over the entire page:</p>
<pre class="language-html hljs">&lt;div class="page-transition-container">
    &lt;span class="page-transition">&lt;/span>
    &lt;span class="page-transition">&lt;/span>
&lt;/div>
</pre>
<p>Here’s the CSS for the above overlay code:</p>
<pre class="language-css hljs">.page-transition-container{
      display: flex;
      flex-direction: column;
      position: absolute;
      z-index:15;
      height:100vh;
      width:100%;
      top:0;
      left:0;
      margin:0;
      pointer-events: none;
      .page-transition{
            transform: scaleX(0);
            background: #2c2c2c;
            height:50%;
      }
}
</pre>
<p>Now, let’s get to the main bit of our code.</p>
<p>I’m going to summarize the process in just two steps: defining a function to handle the animation with GSAP and defining a <code>leave()</code> transition with Barba.js.</p>
<h3 id="defining-function-handle-animation-gsap">Defining a function to handle the animation with GSAP</h3>
<p>First, we define a <code>transition function</code> that uses GSAP to animate our overlay element that has a class of <code>.page-transition</code>:</p>
<pre class="language-javascript hljs">const transition=()=>{
      let tl = gsap.timeline();
      tl.to('.page-transition', { duration: .5, scaleX:1, transformOrigin: "bottom right", stagger: .2})
      tl.to('.page-transition', { duration: .5, scaleX: 0, transformOrigin: "bottom right", stagger: .1 , delay:.1})
}
</pre>
<p>The animation consists of two parts: first, the element scales up on the x-axis over 0.5s with a stagger of 0.2s; then it scales down over 0.5s with a stagger of 0.1s and a delay of 0.1s.</p>
<h3 id="defining-leave-transition-barba-js">Defining a <code>leave()</code> transition with Barba.js</h3>
<p>Next, we initialize Barba.js and define a <code>leave()</code> transition within an object inside the <code>transitions</code> array:</p>
<pre class="language-javascript hljs">barba.init({
        transitions: [{
            leave(){
                  transition();
            }
      }]
})
</pre>
<p>Barba.js offers various hooks that can be utilized to initiate a transition animation at various stages during the page change process. Here’s a comprehensive <a href="https://barba.js.org/docs/advanced/hooks/">list</a> of the available hooks.</p>
<p>The <code>leave()</code> hook instructs Barba.js to immediately switch the content of the current page, defined by the element with the <code>data-barba="container"</code> attribute, with the content of the next page while animating the overlay element to create a smooth page transition.</p>
<p>Now any time we leave a page, we have a smooth transition animation, instead of a hard page reload.</p>
<p>What if we want a different kind of animation for specific pages? Well, we can easily achieve that by setting a <code>data-barba-namespace="unique-name"</code> attribute on the element with the <code>data-barba="container"</code> attribute. We can now reference that name in the <code>transitions</code> array, like so:</p>
<pre class="language-javascript hljs">barba.init({
        transitions: [{
            name: "unique-name"
            leave(){
                  differentTransition();
            }
      }, 
      {
          name: "another-unique-name"
          enter(){
                anotherDifferentTransition();
        }
      }
]
})
</pre>
<h2 id="defining-specific-transitions-transition-resolution">Defining specific transitions (transition resolution)</h2>
<p>What if we want to specify different types of animation for specific pages? Well, we can easily achieve that with transition rules. We can set a <code>data-barba-namespace="unique-name"</code> attribute on the element with the <code>data-barba="container"</code> attribute and then reference that name in the <code>transitions</code> array, like so:</p>
<pre class="language-javascript hljs">// JavaScript

barba.init({
        transitions: [{
            namespace: "unique-name"
            leave(){
                  differentTransition();
            }
      }, 
      {
          namespace: "another-unique-name"
          enter(){
                anotherDifferentTransition();
        }
      }
]
})
</pre>
<p>But here’s the real gist of the Barba.js transition resolution feature — by using rules, we can define specific transitions based on a <code>namespace</code>, route, or custom logic to be initiated when a user visits a specific page.</p>
<p>The transition resolution rules are made up of keywords and conditions.</p>
<p>Think of rules as simple <code>if</code> statements:</p>
<pre class="language-javascript hljs">if(condition is met){
  runTransition()
}
</pre>
<p>Let’s take a closer look at this feature.</p>
<h3 id="keywords">Keywords</h3>
<p>Keywords simply define our logic flow. For example, we could use the <code>from</code> keyword to indicate that the transition should be triggered when a user leaves the current page. Or, we could use the <code>to</code> keyword to indicate that the transition should occur when the user enters the next page. We could even use both keywords in one transition:</p>
<pre class="language-javascript hljs">barba.init({
  transitions: [

    {
      from: {
        //
      },
      leave() {
        transition();
      }
    }


  ]
});
</pre>
<p>Keywords and their conditions are fulfilled based on priority. This impacts how the keywords should be used and what precedence they will take:</p>
<table>
<thead>
<tr>
<th><strong>Keyword</strong></th>
<th><strong>Priority</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code> and <code>from</code></td>
<td>high</td>
</tr>
<tr>
<td><code>to</code></td>
<td>medium</td>
</tr>
<tr>
<td><code>from</code></td>
<td>low</td>
</tr>
</tbody>
</table>
<h3 id="conditions">Conditions</h3>
<p>Conditions define the logic that must be fulfilled before a transition can be carried out. There are three kinds of conditions that we can declare:</p>
<ul>
<li><code>custom</code>: We provide Barba.js with a custom function that returns either <code>true</code> or <code>false</code>; the transition only runs if <code>true</code> is returned</li>
<li><code>route</code>: When using the <a href="https://barba.js.org/docs/plugins/router/">Barba.js router</a>, we can use this condition to check that the route matches</li>
<li><code>namespace</code>: We tell Barba.js to only trigger the transition if the declared <code>namespace</code> matches. For more context, if a transition is declared with the <code>from</code> keyword, Barba.js checks that the <code>namespace</code> provided matches the <code>namespace</code> declared on the current page; if a transition is declared with the <code>to</code> keyword, Barba.js ensures that it matches the <code>namespace</code> of the next page</li>
</ul>
<p>We can also declare multiple conditions and Barba.js will apply a transition if all conditions are met:</p>
<pre class="language-javascript hljs">barba.init({
  transitions: [
    {
      //keyword
      from: {
        // namespace condition
        namespace: ["home"]
        // or route condition
        route: ["index"]
        // or custom condition
      custom: ({ trigger }) => {
        return trigger.classList &amp;&amp; trigger.classList.contains('use-custom-transition');
      },
      },
      // transition that would run only if conditions are met
      leave() {
        transition();
      }
    }
  ]
});
</pre>
<p><em><strong>N.B.,</strong> in the above example, the<code>custom</code> condition code was selected from the <a href="https://barba.js.org/docs/advanced/transitions/">Barba.js docs</a>. Here, <code>trigger</code> is the link that prompts the transition</em></p>
<p>It’s also important to note a condition’s priority. Just like keywords, some conditions will take precedence over others due to their higher priority:</p>
<table>
<thead>
<tr>
<th><strong>Condition</strong></th>
<th><strong>Priority</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>custom</code></td>
<td>high</td>
</tr>
<tr>
<td><code>route</code></td>
<td>medium</td>
</tr>
<tr>
<td><code>namespace</code></td>
<td>low</td>
</tr>
</tbody>
</table>
<h2 id="conclusion">Conclusion</h2>
<p>Barba.js is a powerful tool for creating smooth page transitions and enhancing user experience on your website. With its easy setup and customizable options, Barba.js provides a wide range of options to create transitions that match your specific needs. Whether you’re looking to add a touch of animation to your site or simply make the flow between pages more seamless, Barba.js is an excellent choice.</p><div class="code-block code-block-28" >
<div class="blog-plug inline-plug js-libraries-plug"><h2>Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?</h2><p>There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.</p>
<p><a href="https://lp.logrocket.com/blg/javascript-signup">LogRocket</a> is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively. </p><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.
</p><p>Build confidently — <a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-30 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-30 .fadeOut {
    opacity:0 !important;
}

.code-block-30 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-164523" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/create-smooth-page-transitions-barba-js/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/create-smooth-page-transitions-barba-js/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-164523" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/create-smooth-page-transitions-barba-js/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-164523" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/create-smooth-page-transitions-barba-js/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/03/nelson-michael.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/03/nelson-michael.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nelsonmichael/">
Nelson Michael <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nelson Michael is a frontend developer from Nigeria. When he's not meddling with CSS, he spends his time writing, sharing what he knows, and playing games.</span>
</div>
</div>
 <div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/js-libraries/">#js libraries</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/what-is-a-sprint-agile-scrum-teams/" rel="prev">What is a sprint for agile and scrum teams?</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/building-vue-js-grid-layouts/" rel="next">Building Vue.js grid layouts: Best libraries and components</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/create-smooth-page-transitions-barba-js/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Creating a custom CSS range slider with JavaScript upgrades - LogRocket Blog</title>
			<link>https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Creating a custom CSS range slider with JavaScript upgrades - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/">Creating a custom CSS range slider with JavaScript upgrades - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166870 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-css" id="post-166870">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ibadehinmojeed/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ibadehinmojeed/">
Ibadehin Mojeed <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an advocate of project-based learning. I also write technical content around web development.</span>
</div>
</div>
<h1 class="posttitle">Creating a custom CSS range slider with JavaScript upgrades</h1>
<p>
<span class="post-date"><time class="post-date">
April 11, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2460</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/Creating-custom-CSS-range-slider-JavaScript-upgrades.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Creating A Custom Css Range Slider With Optional Javascript Upgrades"                /> <article class="article-post">
<p>Range sliders are an awesome tool for letting users select a value or filter items based on numeric ranges. They’re often used by developers to create progress bars, <a href="https://blog.logrocket.com/building-audio-player-react/">volume controls in audio and video players</a>, product filters on ecommerce websites, and even for zooming features.</p>
<p>But adding a slider widget to a web page can be trickier than you might think. Sure, you can simply use an <code>&lt;input /></code> element of type <code>range</code>, but styling it consistently across different browsers can be a real headache.</p>
<p>That’s why we’ve put together this guide to show you how to create a custom range slider using CSS only. If you’re feeling adventurous, we’ll even show you how to take it to the next level with JavaScript.</p>
<p>We will cover:</p>
<ul>
<li><a href="#understanding-html-range-input-type">Understanding the HTML </a><code><a href="#understanding-html-range-input-type">range</a></code><a href="#understanding-html-range-input-type"> input type</a></li>
<li><a href="#creating-custom-range-slider-css-only">Creating a custom range slider with CSS only</a></li>
<li><a href="#styling-range-slider-show-track-progress">Styling the range slider to show track progress</a></li>
<li><a href="#how-improve-css-range-slider-javascript">How to improve the CSS range slider with JavaScript</a></li>
<li><a href="#applying-custom-image-slider-control">Applying a custom image to our slider control</a></li>
</ul>
<p>Here is the final project:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="ibaslogic" data-slug-hash="ZEqzXwe" data-pen-title="Custom CSS range slider">See the Pen <a href="https://codepen.io/ibaslogic/pen/ZEqzXwe">Custom CSS range slider</a> by Ibadehin Mojeed (<a href="https://codepen.io/ibaslogic">@ibaslogic</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>You can interact with it, and after that, get started!</p>
<h2 id="understanding-html-range-input-type">Understanding the HTML <code>range</code> input type</h2>
<p>In its simplest form, an input element of type range will look like this:</p>
<pre class="language-html hljs">&lt;input type="range"/>
</pre>
<p>This code will result in a widget that is inconsistent across browsers, as we can see below:</p>
<p><img             class="aligncenter size-full wp-image-166875 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img1-HTML-range-input-type-browser-inconsistencies.png" alt="Html Range Input Type Inconsistencies Across Chrome, Firefox, Edge, And Safari Browsers" width="730" height="363"    /><noscript><img               class="aligncenter size-full wp-image-166875" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img1-HTML-range-input-type-browser-inconsistencies.png" alt="Html Range Input Type Inconsistencies Across Chrome, Firefox, Edge, And Safari Browsers" width="730" height="363"  /></noscript></p>
<p>These irregularities call for customization if we want the slider widget to fit a particular theme or brand.</p>
<h3>Why is the input range tricky to style?</h3>
<p>As you can see in the image below, a range slider widget consists of certain key elements — a thumb (label 1) and a slider track (label 2) contained within a container input element (label 3, shown in gray):</p>
<p><img             class="aligncenter size-full wp-image-166877 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img2-Range-widget-components.png" alt="Input Range Example With Three Numbered Labels Indicating Different Components. Label One Indicates Slider Thumb, Label Two Indicates Slider Track, and Label Three Indicates Container Input Element" width="730" height="215"    /><noscript><img               class="aligncenter size-full wp-image-166877" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img2-Range-widget-components.png" alt="Input Range Example With Three Numbered Labels Indicating Different Components. Label One Indicates Slider Thumb, Label Two Indicates Slider Track, and Label Three Indicates Container Input Element" width="730" height="215"  /></noscript></p>
<p>To customize this slider widget, we only need to target the different components. However, inspecting the widget from the browser’s developer tools shows that the components are not exposed to us:</p>
<p><img             class="aligncenter size-full wp-image-166879 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img3-Inspecting-widget-browser-developer-tools.png" alt="Range Input Type As Shown When Inspecting Widget From Browser Developer Tools With No Exposed Components" width="730" height="167"    /><noscript><img               class="aligncenter size-full wp-image-166879" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img3-Inspecting-widget-browser-developer-tools.png" alt="Range Input Type As Shown When Inspecting Widget From Browser Developer Tools With No Exposed Components" width="730" height="167"  /></noscript></p>
<p>In the image above, we see only the rendered <code>&lt;input /></code> and not those elements responsible for the slider track and the thumb.</p>
<p>This is because the range element is implemented as a web component. Browsers internally encapsulate and hide elements and styles that make up the input slider <a href="https://blog.logrocket.com/virtual-dom-react/#how-virtual-dom-different-shadow-dom">inside a shadow DOM</a>.</p>
<p>If you’re on Chrome, you can enable the <code>Show user agent shadow DOM</code> option from <code>Settings</code> to see the shadow DOM:</p>
<p><img             class="aligncenter size-full wp-image-166881 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img4-Chrome-shadow-DOM-inspect-range-input-widget.png" alt="Chrome Developer Tools With Shadow Dom View Enabled To Show Range Input Type Sub Component Elements" width="730" height="207"    /><noscript><img               class="aligncenter size-full wp-image-166881" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img4-Chrome-shadow-DOM-inspect-range-input-widget.png" alt="Chrome Developer Tools With Shadow Dom View Enabled To Show Range Input Type Sub Component Elements" width="730" height="207"  /></noscript></p>
<p>In the shadow DOM, as seen above, we can see the sub-component elements in a structured manner.</p>
<p>This shadow DOM helps isolate components — in our case, the input range — from the actual DOM, including their styles. Doing so prevents those isolated components from conflicting with the styles of other elements in the real DOM.</p>
<p>For instance, targeting the thumb component using its ID from our CSS file will not affect the thumb appearance:</p>
<pre class="language-css hljs">#thumb {
  color: red;
}
</pre>
<p>This implementation is beneficial because we can use web components without worrying about style conflicts from the hosting document. However, the inconsistencies between how the different browsers implement those web components make them tricky to style.</p>
<h2 id="creating-custom-range-slider-css-only">Creating a custom range slider with CSS only</h2>
<p>Let’s create a range slider that looks like the below with a CSS-only solution:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="ibaslogic" data-slug-hash="KKBLMxy" data-pen-title="Custom CSS range slider">See the Pen <a href="https://codepen.io/ibaslogic/pen/KKBLMxy">Custom CSS range slider</a> by Ibadehin Mojeed (<a href="https://codepen.io/ibaslogic">@ibaslogic</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>As we mentioned earlier, we’ll target the different slider parts to add a custom style. Since we don’t have access to the parts directly, we’ll capitalize on the various browser vendor prefixes.</p>
<p>For instance, to customize the range slider for the WebKit and Blink-based browsers — like Safari, Chrome, Opera, and Edge — we’ll use the <code>::-webkit-slider-runnable-track</code> pseudo-element to target the slider track and the <code>::-webkit-slider-thumb</code> pseudo-element to target the thumb.</p>
<p>For Mozilla Firefox, we’ll use <code>::-moz-range-track</code> pseudo-element to target the track and <code>::-moz-range-thumb</code> for the thumb.</p>
<p>Now that we know <a href="https://blog.logrocket.com/css-pseudo-elements-guide/">which CSS pseudo-elements to use</a>, let’s start by adding the base styles.</p>
<h3>Adding the base styles</h3>
<p>We’ll start by removing the default styles of the native range input and then adding custom styles:</p>
<pre class="language-css hljs">input[type="range"] {
  /* removing default appearance */
  -webkit-appearance: none;
  appearance: none;
  /* creating a custom design */
  width: 100%;
  cursor: pointer;
  outline: none;
}
</pre>
<p>The range input’s <code>appearance</code> property tells the browser to remove the default appearance styles so that we can apply a custom style.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Setting the <code>-webkit-appearance</code> property to <code>none;</code> on the container element only removes the track and not the thumb:</p>
<p><img             class="aligncenter size-full wp-image-166883 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img5-Chrome-before-after-appearance-property.png" alt="Chrome Range Input Type Before And After Appearance Property Is Set To None" width="730" height="157"    /><noscript><img               class="aligncenter size-full wp-image-166883" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img5-Chrome-before-after-appearance-property.png" alt="Chrome Range Input Type Before And After Appearance Property Is Set To None" width="730" height="157"  /></noscript></p>
<p>The above is what it looks like in Chrome. The other WebKit-based browsers will also remove the track bar only.</p>
<p>However, Mozilla does not only remove the track; it also eliminates some default appearances from the thumb:</p>
<p><img             class="aligncenter size-full wp-image-166885 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img6-Mozilla-before-after-appearance-property.png" alt="Mozilla Range Input Type Before And After Appearance Property Is Set To None" width="730" height="160"    /><noscript><img               class="aligncenter size-full wp-image-166885" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img6-Mozilla-before-after-appearance-property.png" alt="Mozilla Range Input Type Before And After Appearance Property Is Set To None" width="730" height="160"  /></noscript></p>
<p>Let’s move on to customizing the track and slider thumb.</p>
<h3>Customizing the track</h3>
<p>We can style the slider track in two ways. The first method is applying the custom styles directly in the <code>input[type="range"]</code> selector:</p>
<pre class="language-css hljs">input[type="range"] {
  /* ... */

  /*  styling the track  */
  height: 15px;
  background: #ccc;
  border-radius: 16px;
}
</pre>
<p>With this method, we don’t have to target the track component specifically. The input container element takes the slider role.</p>
<p>However, for this project, we’ll go with the next approach — using the browser’s vendor prefixes to specifically target the slider track. So, let’s remove the just-added style declarations.</p>
<p>As we mentioned above, the <code>::-webkit-slider-runnable-track</code> pseudo-element will target the slider track for WebKit-based browsers. Meanwhile, the <code>::-moz-range-track</code> pseudo-element will target the track for Mozilla Firefox:</p>
<pre class="language-css hljs">/* Track: webkit browsers */
input[type="range"]::-webkit-slider-runnable-track {
  height: 15px;
  background: #ccc;
  border-radius: 16px;
}

/* Track: Mozilla Firefox */
input[type="range"]::-moz-range-track {
  height: 15px;
  background: #ccc;
  border-radius: 16px;
}
</pre>
<p>The range slider should now look like so:</p>
<p><img             class="aligncenter size-full wp-image-166887 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img7-Range-slider-browser-vendor-prefixes-Mozilla.png" alt="Range Slider Resulting From Using Browser's Vendor Prefixes To Target Slider Track" width="730" height="333"    /><noscript><img               class="aligncenter size-full wp-image-166887" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img7-Range-slider-browser-vendor-prefixes-Mozilla.png" alt="Range Slider Resulting From Using Browser's Vendor Prefixes To Target Slider Track" width="730" height="333"  /></noscript></p>
<h3>Customizing the slider thumb</h3>
<p>For WebKit-based browsers, we’ll start by removing the default styles of the native slider thumb and then adding custom styles:</p>
<pre class="language-css hljs">/* Thumb: webkit */
input[type="range"]::-webkit-slider-thumb {
  /* removing default appearance */
  -webkit-appearance: none;
  appearance: none;
  /* creating a custom design */
  height: 15px;
  width: 15px;
  background-color: #fff;
  border-radius: 50%;
  border: 2px solid #f50;
}
</pre>
<p>For Mozilla Firefox, we’ll only apply the custom styles:</p>
<pre class="language-css hljs">/* Thumb: Firefox */
input[type="range"]::-moz-range-thumb {
  height: 15px;
  width: 15px;
  background-color: #fff;
  border-radius: 50%;
  border: 1px solid #f50;
}
</pre>
<p>Due to how Mozilla handles the thumb, we reduced the border from the <code>2px</code> applied for WebKit browsers to <code>1px</code> so the thumb can fit appropriately in the range slider.</p>
<p>Keep in mind that Mozilla applies a grey border to the thumb by default. You can add a <code>border: none;</code> property if you don’t want to apply a border.</p>
<p>The slider should now look like so:</p>
<p><img             class="aligncenter size-full wp-image-166889 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img8-Customizing-range-slider.png" alt="Customizing Range Slider Thumb Styles And Adjusting Border Property" width="730" height="316"    /><noscript><img               class="aligncenter size-full wp-image-166889" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img8-Customizing-range-slider.png" alt="Customizing Range Slider Thumb Styles And Adjusting Border Property" width="730" height="316"  /></noscript></p>
<p>As we can see, both the slider track and thumb have rounded shapes. If you want to make the shape rectangular, you can remove the <code>border-radius</code> CSS property from the components:</p>
<pre class="language-css hljs">input[type="range"]::-webkit-slider-runnable-track {
 /* border-radius: 16px; */
}

/* Track: Mozilla Firefox */
input[type="range"]::-moz-range-track {
 /* border-radius: 16px; */
}

input[type="range"]::-webkit-slider-thumb {
 /* border-radius: 50%; */
}

input[type="range"]::-moz-range-thumb {
 /* border-radius: 50%; */
}
</pre>
<h2 id="styling-range-slider-show-track-progress">Styling the range slider to show track progress</h2>
<p>With CSS only, we can style the range slider to show track progress by filling the space to the left of the thumb with <code>box-shadow</code> and then hiding the overflow from the <code>input[type="range"]</code> selector.</p>
<p>Let’s locate the <code>::-webkit-slider-thumb</code> and <code>::-moz-range-thumb</code> pseudo-elements and then add the following <code>box-shadow</code> declaration:</p>
<pre class="language-css hljs">/* Thumb: webkit */
input[type="range"]::-webkit-slider-thumb {
  /*  ...  */
  /*  slider progress trick  */
  box-shadow: -407px 0 0 400px #f50;
}

/* Thumb: Firefox */
input[type="range"]::-moz-range-thumb {
  /*  ...  */
  /*  slider progress trick  */
  box-shadow: -407px 0 0 400px #f50;
}
</pre>
<p>After that, in the <code>input[type="range"]</code> selector, let’s add the following declarations:</p>
<pre class="language-css hljs">input[type="range"] {
  /*  ...  */
  /*  slider progress trick  */
  overflow: hidden;
  border-radius: 16px;
}
</pre>
<p>The styled slider should now behave like the first example in the GIF below:</p>
<p><img             class="aligncenter size-full wp-image-166891 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img9-Styled-slider-track-progress.gif" alt="Styled Range Slider Showing Track Progress" width="730" height="312"  /><noscript><img               class="aligncenter size-full wp-image-166891" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img9-Styled-slider-track-progress.gif" alt="Styled Range Slider Showing Track Progress" width="730" height="312"/></noscript></p>
<h2 id="how-improve-css-range-slider-javascript">How to improve the CSS range slider with JavaScript</h2>
<p>With the addition of JavaScript, we’ll create a range slider that looks like so:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="ibaslogic" data-slug-hash="abjgwVG" data-pen-title="Custom CSS range slider">See the Pen <a href="https://codepen.io/ibaslogic/pen/abjgwVG">Custom CSS range slider</a> by Ibadehin Mojeed (<a href="https://codepen.io/ibaslogic">@ibaslogic</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>Due to the <code>overflow: hidden</code> and <code>box-shadow</code> tricks we used to customize the slider progress with the CSS-only solution, the slider thumb cannot be larger than the track, the way it’s shown below:</p>
<p><img             class="aligncenter size-full wp-image-166893 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img10-Styled-thumb-JavaScript.png" alt="Styled Slider Thumb Displaying Larger Than Track Size Using Javascript" width="730" height="331"    /><noscript><img               class="aligncenter size-full wp-image-166893" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img10-Styled-thumb-JavaScript.png" alt="Styled Slider Thumb Displaying Larger Than Track Size Using Javascript" width="730" height="331"  /></noscript></p>
<p>To achieve the above design, we’ll modify the CSS style rules and apply a bit of JavaScript.</p>
<p>On the <code>input[type="range"]</code> selector, let’s remove the <code>overflow: hidden</code> declaration and then set a <code>height</code> and <code>background</code> color properties:</p>
<pre class="language-css hljs">input[type="range"] {
  /* removing default appearance */
  -webkit-appearance: none;
  appearance: none;
  /* creating a custom design */
  width: 100%;
  cursor: pointer;
  outline: none;
  border-radius: 15px;
  /*  overflow: hidden;  remove this line*/

  /* New additions */
  height: 6px;
  background: #ccc;
}
</pre>
<p>With the height and background color on the input element, we don’t need to specifically target the track component.</p>
<p>So, we can remove the pseudo-elements that we used earlier to target the track lines for each browser’s vendors:</p>
<pre class="language-css hljs">// input[type="range"]::-webkit-slider-runnable-track {}
// input[type="range"]::-moz-range-track {}
</pre>
<p>For the slider thumb, we’ll remove the <code>box-shadow</code> declaration that we added in the CSS-only solution:</p>
<pre class="language-css hljs">/* Thumb: webkit */
input[type="range"]::-webkit-slider-thumb {
  /* removing default appearance */
  -webkit-appearance: none;
  appearance: none;
  /* creating a custom design */
  height: 15px;
  width: 15px;
  background-color: #f50;
  border-radius: 50%;
  border: none;

  /* box-shadow: -407px 0 0 400px #f50; emove this line */
  transition: .2s ease-in-out;
}

/* Thumb: Firefox */
input[type="range"]::-moz-range-thumb {
  height: 15px;
  width: 15px;
  background-color: #f50;
  border-radius: 50%;
  border: none;

  /* box-shadow: -407px 0 0 400px #f50; emove this line */
  transition: .2s ease-in-out;
}
</pre>
<p>Notice we added <a href="https://blog.logrocket.com/css-transitions-animating-hamburger-menu-button/">a CSS </a><code><a href="https://blog.logrocket.com/css-transitions-animating-hamburger-menu-button/">transition</a></code><a href="https://blog.logrocket.com/css-transitions-animating-hamburger-menu-button/"> property</a> for a smooth transition effect. We’ll see the effect when we implement the hover, active, and focus states for the slider thumb.</p>
<h3>Adding hover, active, and focus states</h3>
<p>For the sake of accessibility and a positive UX, we’ll add styles for focus, hover, and active states to provide a visual effect while interacting with the slider.</p>
<p>If you take a look at the <code>input[type="range"]</code> selector, we applied the CSS <code>outline: none;</code> property to remove the default focus styles. We can now target the slider thumb using the pseudo-elements, then use the <code>:focus</code>, <code>:hover</code>, and <code>:active</code> pseudo-classes on them to provide a custom style:</p>
<pre class="language-css hljs">/* Hover, active &amp; focus Thumb: Webkit */

input[type="range"]::-webkit-slider-thumb:hover {
  box-shadow: 0 0 0 10px rgba(255,85,0, .1)
}
input[type="range"]:active::-webkit-slider-thumb {
  box-shadow: 0 0 0 13px rgba(255,85,0, .2)
}
input[type="range"]:focus::-webkit-slider-thumb {
  box-shadow: 0 0 0 13px rgba(255,85,0, .2)
}

/* Hover, active &amp; focus Thumb: Firfox */

input[type="range"]::-moz-range-thumb:hover {
  box-shadow: 0 0 0 10px rgba(255,85,0, .1)
}
input[type="range"]:active::-moz-range-thumb {
  box-shadow: 0 0 0 13px rgba(255,85,0, .2)
}
input[type="range"]:focus::-moz-range-thumb {
  box-shadow: 0 0 0 13px rgba(255,85,0, .2)   
}
</pre>
<p>The second example in the GIF below demonstrates how the slider should behave with the custom styling we just added:</p>
<p><img             class="aligncenter size-full wp-image-166895 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img11-Styled-thumb-JavaScript-demo.gif" alt="Demo Of Styled Thumb Using Javascript" width="730" height="312"  /><noscript><img               class="aligncenter size-full wp-image-166895" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img11-Styled-thumb-JavaScript-demo.gif" alt="Demo Of Styled Thumb Using Javascript" width="730" height="312"/></noscript></p>
<h3>Adding JavaScript to style the range slider progress</h3>
<p>We’ll start with a quick way of adding the slider progress. Let’s add an <code>id</code> attribute to the <code>input</code> element so that we can reference it with JavaScript:</p>
<pre class="language-css hljs">&lt;input type="range" id="range" oninput="progressScript()" /> 
</pre>
<p>We also added an <code>oninput</code> attribute in the HTML that’ll trigger an event when the user drags the range slider.</p>
<p>In JavaScript, we’ll create the <code>progressScript()</code> function to handle the input event:</p>
<pre class="language-javascript hljs">const sliderEl = document.querySelector("#range")

function progressScript() {
  const sliderValue = sliderEl.value;
  sliderEl.style.background = `linear-gradient(to right, #f50 ${sliderValue}%, #ccc ${sliderValue}%)`;
}

progressScript()
</pre>
<p>We achieved the progress style effect with the code by <a href="https://blog.logrocket.com/complex-patterns-using-css-gradients/">applying a </a><code><a href="https://blog.logrocket.com/complex-patterns-using-css-gradients/">linear-gradient</a></code> to the background of the runnable track.</p>
<p>The result now looks like so:</p>
<p><img             class="aligncenter size-full wp-image-166897 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img12-Styled-progress-indicator-custom-thumb.gif" alt="Custom Larger Thumb With Styled Progress Indicator" width="730" height="312"  /><noscript><img               class="aligncenter size-full wp-image-166897" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img12-Styled-progress-indicator-custom-thumb.gif" alt="Custom Larger Thumb With Styled Progress Indicator" width="730" height="312"/></noscript></p>
<p>By default, the range input has a minimum and maximum value of <code>0</code> and <code>100</code>, respectively. We can specify a <code>min</code> and <code>max</code> attributes to change the default.</p>
<p>Let’s change the default while also displaying the input value as we interact with the widget. We’ll update the HTML to include the <code>min</code>, <code>max</code>, and <code>value</code> attributes:</p>
<pre class="language-html hljs">&lt;input type="range" min="0" max="50" value="0" id="range" /> 
&lt;div class="value">0&lt;/div>
</pre>
<p>Then, we’ll target these elements in JavaScript and dynamically update the display value and slider progress when the user drags the range slider:</p>
<pre class="language-javascript hljs">const sliderEl = document.querySelector("#range")
const sliderValue = document.querySelector(".value")

sliderEl.addEventListener("input", (event) => {
  const tempSliderValue = event.target.value;
  sliderValue.textContent = tempSliderValue;

  const progress = (tempSliderValue / sliderEl.max) * 100;

  sliderEl.style.background = `linear-gradient(to right, #f50 ${progress}%, #ccc ${progress}%)`;
})
</pre>
<p>We <a href="https://blog.logrocket.com/custom-events-in-javascript-a-complete-guide/">used the </a><code><a href="https://blog.logrocket.com/custom-events-in-javascript-a-complete-guide/">addEventListener()</a></code><a href="https://blog.logrocket.com/custom-events-in-javascript-a-complete-guide/"> method</a> in the code to handle the input event. The result now looks like so:</p>
<p><img             class="aligncenter size-full wp-image-166899 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img13-Input-indicator-demo.gif" alt="Demo Of Input Event Used To Show Progress Bar Value" width="730" height="312"  /><noscript><img               class="aligncenter size-full wp-image-166899" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img13-Input-indicator-demo.gif" alt="Demo Of Input Event Used To Show Progress Bar Value" width="730" height="312"/></noscript></p>
<p>As we can see, the progress bar is always in sync with the max attribute of the input range. We can also customize the thumb to have a rectangular shape by removing the <code>border-radius</code> property:</p>
<pre class="language-css hljs">input[type="range"]::-webkit-slider-thumb {
  /* ... */
  height: 30px;
  width: 15px;
  /* border-radius: 50%; */
}
</pre>
<p>The above style rule also modifies the <code>height</code> property to achieve the following result:</p>
<p><img             class="aligncenter size-full wp-image-166901 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img14-Modified-height-property-style-rectangular-thumb.png" alt="Modified Thumb With Rectangular Shape And Updated Height" width="730" height="359"    /><noscript><img               class="aligncenter size-full wp-image-166901" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img14-Modified-height-property-style-rectangular-thumb.png" alt="Modified Thumb With Rectangular Shape And Updated Height" width="730" height="359"  /></noscript></p>
<h2 id="applying-custom-image-slider-control">Applying a custom image to our slider control</h2>
<p>Let’s get more creative and create a slider control using emoji or custom image as the thumb, like so:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="ibaslogic" data-slug-hash="GRYRgay" data-pen-title="Custom CSS range slider">See the Pen <a href="https://codepen.io/ibaslogic/pen/GRYRgay">Custom CSS range slider</a> by Ibadehin Mojeed (<a href="https://codepen.io/ibaslogic">@ibaslogic</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>On top of the last slider example, we’ll replace the background color that we applied on the thumb with a background image so that the thumb becomes an image rather than a colored circle:</p>
<pre class="language-css hljs">/* Thumb: webkit */
input[type="range"]::-webkit-slider-thumb {
  /* ... */
  height: 30px;
  width: 30px;
  /* background-color: #f50; remove this*/
  background-image: url("https://ibaslogic.github.io/hosted-assets/smile.png");
  background-size: cover;
}

/* Thumb: Firefox */
input[type="range"]::-moz-range-thumb {
  /* ... */
  height: 30px;
  width: 30px;
  /* background-color: #f50; */
  background-image: url("https://ibaslogic.github.io/hosted-assets/smile.png");
  background-size: cover;
}
</pre>
<p>We’ve also increased the thumb size via the <code>height</code> and <code>width</code> properties. Furthermore, notice that we included a <code>background-size</code> property. Without this property, we won’t be able to see the thumb image.</p>
<h3>Rotating the thumb emoji</h3>
<p>To make the thumb rotate when we drag it, we will apply a <code>transform</code> property on it like so:</p>
<pre class="language-css hljs">/* Thumb: webkit */
input[type="range"]::-webkit-slider-thumb {
  /* ... */
  /* rotate thumb */
  transform: rotateZ(var(--thumb-rotate, 0deg));
}

/* Thumb: Firefox */
input[type="range"]::-moz-range-thumb {
  /* ... */
  /* rotate thumb */
  transform: rotateZ(var(--thumb-rotate, 0deg));
}
</pre>
<p>In the style rule, we used a CSS variable so we can dynamically update the amount of rotation. Let’s grab the CSS variable in our JavaScript file and update it based on the slider progress to get the angle of rotation:</p>
<pre class="language-css hljs">sliderEl.addEventListener("input", (event) => {
  // ...
  sliderEl.style.setProperty("--thumb-rotate", `${(tempSliderValue/100) * 2160}deg`)
})
</pre>
<p>The widget should now behave like so:</p>
<p><img             class="aligncenter size-full wp-image-166903 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img15-Custom-rotating-emoji-thumb.gif" alt="Custom Emoji Thumb With Rotation Animation" width="730" height="313"  /><noscript><img               class="aligncenter size-full wp-image-166903" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img15-Custom-rotating-emoji-thumb.gif" alt="Custom Emoji Thumb With Rotation Animation" width="730" height="313"/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>Creating a custom range slider that looks great and works seamlessly on any browser without sacrificing accessibility can be daunting.</p>
<p>This guide walked you through how to customize a range slider using CSS only, ensuring a consistent look and feel across browsers. We also showed how to enhance this slider widget with JavaScript if you want to take it up a notch.</p>
<p>But wait, there’s more! We’ve even created <a href="https://blog.logrocket.com/building-audio-player-react/">an audio player guide</a> that demonstrates how you can use this slider to create a progress bar and volume control in your projects.</p>
<p>Have questions or suggestions? Share them in the comments section below. And if you found this guide helpful, don’t forget to spread the word!</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166870" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166870" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166870" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ibadehinmojeed/">
Ibadehin Mojeed <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an advocate of project-based learning. I also write technical content around web development.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/css/">#css</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/next-js-vs-nuxt-js/" rel="prev">Next.js vs. Nuxt.js: Ultimate guide</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/what-is-voice-of-the-customer-voc/" rel="next">What is voice of the customer (VOC)?</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/creating-custom-css-range-slider-javascript-upgrades/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Creating custom CSS typography with COLRv1 specification - LogRocket Blog</title>
			<link>https://blog.logrocket.com/creating-custom-css-typography-colrv1/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/creating-custom-css-typography-colrv1/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Creating custom CSS typography with COLRv1 specification - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/creating-custom-css-typography-colrv1/">Creating custom CSS typography with COLRv1 specification - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166496 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-css" id="post-166496">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rahulchhodde/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/02/Te5wxbOQuOqQUuKkiQGL_tIZO61SQ_400x400.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/02/Te5wxbOQuOqQUuKkiQGL_tIZO61SQ_400x400.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rahulchhodde/">
Rahul Chhodde <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer with over seven years of experience in different web technologies.</span>
</div>
</div>
<h1 class="posttitle">Creating custom CSS typography with COLRv1 specification</h1>
<p>
<span class="post-date"><time class="post-date">
April 7, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1524</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/Creating-custom-CSS-typography-COLRv1-specification.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Creating Custom Css Typography With Colrv1 Specification"                /> <article class="article-post">
<p>The COLRv1 font format is a new and exciting development in digital typography. <a href="https://caniuse.com/colr-v1">Chrome, Edge, and Firefox now support it</a> without requiring you to enable experimental features. The fonts encoded under COLRv1 are generally called “color fonts” because of their coloring capabilities.</p>
<p>CSS can bring color to web fonts, but color fonts offer more than just colored text. This article delves into how color fonts operate and how they can be utilized and customized in web design. We will cover:</p>
<ul>
<li><a href="#what-color-fonts">What are color fonts?</a></li>
<li><a href="#how-colrv1-better-colrv0">How COLRv1 is better than COLRv0</a></li>
<li><a href="#exploring-colrv1-features">Exploring COLRv1 features</a></li>
<li><a href="#creating-custom-css-typography-web-projects-colrv1">Creating custom CSS typography for web projects with COLRv1</a></li>
<li><a href="#using-colrv1-color-fonts-dark-mode-typography">Using COLRv1 color fonts for dark mode typography</a></li>
<li><a href="#caveats-using-colrv1-custom-css-typography">Caveats to consider while using COLRv1 for custom CSS typography</a></li>
<li><a href="#browser-support-colrv1-font-format">Browser support for the COLRv1 font format</a></li>
</ul>
<h2 id="what-color-fonts">What are color fonts?</h2>
<p>Color fonts are web fonts that come with integrated, customizable color palettes. COLRv1 is a format for vector fonts that resulted from the collaboration between Google Fonts and Blink, with the support of Microsoft and other organizations.</p>
<p>Although other font formats exist for creating color fonts, such as SVG, CBDT/CBLC, and SBIX, each with unique encoding methods and capabilities, COLRv1 is considered the contemporary and most efficient method for developing color fonts.</p>
<p>The COLRv1 format presents an improvement over its predecessor, COLRv0. The COLRv0 format’s primary limitation was due to its reliance on bitmap technology, which resulted in large file sizes. <a href="#how-colrv1-better-colrv0">Jump ahead to read more about COLRv1 and COLRv0</a>.</p>
<p>Color fonts are a recent innovation in typography and are not yet widely available in font libraries. The Google Fonts library, however, offers a collection of color fonts that have their own built-in color palettes, independent of the <code>color</code> property in CSS:</p>
<p><img             class="aligncenter size-full wp-image-166499 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img1-Google-Fonts-color-fonts-collection.png" alt="Google Fonts Library Showing Collection Of Color Fonts With Samples Demonstrating How Each Color Font Looks" width="730" height="658"    /><noscript><img               class="aligncenter size-full wp-image-166499" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img1-Google-Fonts-color-fonts-collection.png" alt="Google Fonts Library Showing Collection Of Color Fonts With Samples Demonstrating How Each Color Font Looks" width="730" height="658"  /></noscript></p>
<p>The <a href="https://fonts.google.com/specimen/Bungee+Spice?coloronly=true">Bungee Google Font</a> showcases a signboard-style effect and comes with a single color palette, serving as a simple example of what a color font appears to be.</p>
<p>Check the “Show only color fonts” checkbox for quicker access to the color fonts available on the Google Fonts website or check out <a href="https://fonts.google.com/?coloronly=true">this list of all the COLRv1-base Google Fonts</a>.</p>
<p>Another example of where COLRv1 is currently in use is in <a href="https://fonts.google.com/icons?icon.style=Two+tone&amp;icon.set=Material+Icons">material two-tone icons</a>. Two-tone icons use an additional lighter or darker variation of the primary color to draw more attention to important symbols. This is another example of the capabilities of color fonts:</p>
<p><img             class="aligncenter size-full wp-image-166501 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img2-Material-two-tone-icons-COLRv1.png" alt="Library Of Material Two Tone Icons That Can Be Adjusted Using Colrv1 Specification" width="730" height="483"    /><noscript><img               class="aligncenter size-full wp-image-166501" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img2-Material-two-tone-icons-COLRv1.png" alt="Library Of Material Two Tone Icons That Can Be Adjusted Using Colrv1 Specification" width="730" height="483"  /></noscript></p>
<h2 id="how-colrv1-better-colrv0">How COLRv1 is better than COLRv0</h2>
<p>COLRv0 used bitmap techniques like CBDT and CBLC for font glyph representation, which resulted in blurry images when scaled or in large file sizes.</p>
<p>While the <a href="https://helpx.adobe.com/in/fonts/using/ot-svg-color-fonts.html">OpenType-SVG font format</a> does enable you to encode color vector graphics as SVG artwork, it is not space-efficient. Additionally, the complexity of working with this font format makes it difficult to implement or integrate with existing font concepts.</p>
<p>The COLRv1 format solves the limitations of COLRv0 and OpenType-SVG and enhances overall font quality through vector-based rasterization of glyphs. This algorithm uses a directed acyclic graph of paint operations and allows font designers to efficiently reuse glyphs, gradients, and shapes, eliminating the need for constant re-encoding.</p>
<h2 id="exploring-colrv1-features">Exploring COLRv1 features</h2>
<p>By discussing the benefits of COLRv1 in the last section, we have essentially outlined its main features as well. Nonetheless, let us delve deeper into its key attributes and how they bring value to both users and font creators.</p>
<h3>Predefined and customizable palettes</h3>
<p>As discussed earlier, COLRv1 color fonts have inbuilt color palettes that we can adjust to match the desired look and feel of our projects. This gives designers more control over the overall appearance of their text.</p>
<h3>High rendering fidelity</h3>
<p>COLRv1 uses vector-based rasterization to provide high-quality rendering. This ensures that glyphs retain their sharpness and clarity at all sizes.</p>
<h3>Lightweight</h3>
<p>Unlike COLRv0 fonts, COLRv1 fonts are more lightweight and do not bloat file sizes. This makes them ideal for use on the web and in other contexts where file size is a concern.</p>
<h2 id="creating-custom-css-typography-web-projects-colrv1">Creating custom CSS typography for web projects with COLRv1</h2>
<p>You can easily assign a color font to any element using CSS in the same way as you would with a regular font. By default, the applied font will take on the colors from its default palette. Here’s an example:</p>
<pre class="language-css hljs">h1 {
  font-family: "Bungee", sans-serif;
}
</pre>
<p>You can see the output of the above code in this CodePen:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="_rahul" data-slug-hash="poZKxPz" data-pen-title="COLRv1 Fonts w/ CSS: A basic demo">See the Pen <a href="https://codepen.io/_rahul/pen/poZKxPz">COLRv1 Fonts w/ CSS: A basic demo</a> by Rahul C (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>If you wish to select a different palette, you can use the <code>@font-palette-values</code> directive and specify the <code>base-palette</code> property. Naming the directive is as simple and straightforward as <a href="https://blog.logrocket.com/using-property-loosely-typed-css-custom-properties/">using CSS custom properties</a>:</p>
<pre class="language-css hljs">@font-palette-values --nabla-2 {
  font-family: "Nabla";
  base-palette: 2;
}
</pre>
<p>To apply the new palette values, simply add the <code>font-palette</code> property to the element and include the previously defined directive:</p>
<pre class="language-css hljs">h1 {
  font-family: "Nabla", sans-serif;
  font-palette: --nabla-2;
}
</pre>
<p>The below demonstrates how the default color palette looks alongside a color palette variation of Nabla, another Color Font from the Google Fonts library:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="_rahul" data-slug-hash="bGjJZbE" data-pen-title="COLRv1 Fonts w/ multiple palettes">See the Pen <a href="https://codepen.io/_rahul/pen/bGjJZbE">COLRv1 Fonts w/ multiple palettes</a> by Rahul C (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>Additionally, you can customize the colors of a given palette using the <code>override-colors</code> property, as demonstrated below:</p>
<pre class="language-css hljs">@font-palette-values --custom-palette {
  font-family: 'Bungee Spice';
  override-colors: 0 #00c, 1 #39c;
}
</pre>
<p>The demonstration below utilizes the <code>override-colors</code> property to alter the only palette supported by the Bungee Spice Font. Observe the difference between the default palette colors and the modified colors by commenting out the <code>override-colors</code> property:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="_rahul" data-slug-hash="abjPxzB" data-pen-title="Overriding palette colors in COLRv1 Fonts w/ CSS">See the Pen <a href="https://codepen.io/_rahul/pen/abjPxzB">Overriding palette colors in COLRv1 Fonts w/ CSS</a> by Rahul C (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>It is important to note that both the <code>base-palette</code> and <code>override-colors</code> properties can only be used within the <code>@font-palette-values</code> directive.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h2 id="using-colrv1-color-fonts-dark-mode-typography">Using COLRv1 color fonts for dark mode typography</h2>
<p>Implementing color fonts for dark mode is effortless, as the process is similar to that of setting up regular elements. The only distinction is the utilization of color font CSS properties. Here is a brief CSS code snippet to provide a clearer illustration:</p>
<pre class="language-css hljs">@font-palette-values --custom-palette {
  font-family: 'Bungee Spice';
  override-colors: 0 hsl(0 55% 55%), 1 hsl(0 15% 15%);
}

@media (prefers-color-scheme: dark) {
  @font-palette-values --custom-palette {
    font-family: 'Bungee Spice';
    override-colors: 0 hsl(0 65% 65%), 1 hsl(0 85% 85%);
  }
}
</pre>
<p>You can see the output below:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="_rahul" data-slug-hash="jOpdOae" data-pen-title="COLRv1 Fonts in Light/Dark Modes">See the Pen <a href="https://codepen.io/_rahul/pen/jOpdOae">COLRv1 Fonts in Light/Dark Modes</a> by Rahul C (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<p>If you previously utilized the <code>prefers-color-scheme</code> media feature to automatically switch color schemes based on the device’s color mode, then this process should be relatively straightforward. Verify the above implementation by enabling and disabling the dark mode on your device.</p>
<p>If you choose not to use the <code>prefers-color-scheme</code> feature for automatic dark mode activation, you can specify different color states as demonstrated below and utilize simple JavaScript to toggle between these states upon clicking a button or toggling a checkbox:</p>
<pre class="language-css hljs">@font-palette-values --custom-palette {
  font-family: 'Bungee Spice';
  override-colors: 0 hsl(0 55% 55%), 1 hsl(0 15% 15%);
}

.is-dark {
  @font-palette-values --custom-palette {
    font-family: 'Bungee Spice';
    override-colors: 0 hsl(0 65% 65%), 1 hsl(0 85% 85%);
  }
}
</pre>
<p>Switching between these states with JavaScript is a relatively simple task that can be considered a minor assignment.</p>
<p>I also have an interactive demo for you that demonstrates how you can use JavaScript to switch color states as the font’s color palette changes. Note that I’ve used a different background for each palette color to make things look more balanced, colorwise.</p>
<p>Try using the range slider in the demo below to see it in action:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="_rahul" data-slug-hash="yLqGwqW" data-pen-title="Interactive demo of COLRv1 Fonts w/ multiple palettes">See the Pen <a href="https://codepen.io/_rahul/pen/yLqGwqW">Interactive demo of COLRv1 Fonts w/ multiple palettes</a> by Rahul C (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><meta async="async" src="https://static.codepen.io/assets/embed/ei.js"/></p>
<h2 id="caveats-using-colrv1-custom-css-typography">Caveats to consider while using COLRv1 for custom CSS typography</h2>
<p>Unfortunately, the availability of color fonts is still limited, and the options available may not align with your user interface requirements.</p>
<p>Additionally, the lack of information about available color palettes from various font libraries makes it necessary to invest extra time and effort to find this information, often through the use of <a href="https://wakamaifondue.com/">tools like Wakamai Fondue</a>:</p>
<p><img             class="aligncenter size-full wp-image-166503 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img3-Wakamai-Fondue-tool.png" alt="Homepage Of Wakamai Fondue Homepage Showing Seven Available Colorv1 Palettes For Queried Font, Which Is Not Shown" width="730" height="498"    /><noscript><img               class="aligncenter size-full wp-image-166503" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img3-Wakamai-Fondue-tool.png" alt="Homepage Of Wakamai Fondue Homepage Showing Seven Available Colorv1 Palettes For Queried Font, Which Is Not Shown" width="730" height="498"  /></noscript></p>
<p>Currently, it is not possible to theme color fonts with CSS custom properties, as color font properties in CSS do not support custom properties. For example, you can’t follow the approach below to theme custom fonts for now:</p>
<pre class="language-css hljs">:root {
  --font-hue: 180;
}

@font-palette-values --my-color-font-palette {
  font-family: 'My Color Font';
  /* 
   * We can't do something like below, as Custom Font CSS 
   * properties don't support CSS custom properties as 
   * values yet.
   */
  override-colors: 
    0 hsl(var(--font-hue) 65% 65%), 1 hsl(var(--font-hue) 85% 85%);
}
</pre>
<p>Also, popular graphic tools such as Figma and Adobe XD do not offer support for color fonts as of this writing. However, it is anticipated that they will include this functionality in the near future.</p>
<h2 id="browser-support-colrv1-font-format">Browser support for the COLRv1 font format</h2>
<p><a href="https://caniuse.com/colr-v1">Browser support for COLRv1</a> is on the rise, as previously mentioned, with solid support already present in Chrome, Edge, and Firefox. Additionally, it is expected to be compatible with Safari in the near future.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we explored the COLRv1 font format, its superiority over COLRv0, its features, and its application on the web for custom CSS typography. Through various demonstrations, we have seen the power of color fonts and their ability to be customized to meet design needs.</p>
<p>Although there are some limitations, the advancement of the format is expected to resolve these issues in the future.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>I hope this discussion has provided valuable insights and sparked further interest in color fonts. If you have any further questions, comments, or suggestions, please don’t hesitate to share them with us. Thank you for reading!</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166496" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-typography-colrv1/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-typography-colrv1/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166496" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-typography-colrv1/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166496" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/creating-custom-css-typography-colrv1/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/02/Te5wxbOQuOqQUuKkiQGL_tIZO61SQ_400x400.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/02/Te5wxbOQuOqQUuKkiQGL_tIZO61SQ_400x400.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rahulchhodde/">
Rahul Chhodde <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer with over seven years of experience in different web technologies.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/css/">#css</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/how-to-conduct-informative-after-action-reviews-aars/" rel="prev">How to conduct informative after action reviews (AARs)</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/translate-react-app-using-format-js/" rel="next">Translate your React app using Format.js</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/creating-custom-css-typography-colrv1/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Creating responsive mobile layouts with Pure.css - LogRocket Blog</title>
			<link>https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Creating responsive mobile layouts with Pure.css - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/">Creating responsive mobile layouts with Pure.css - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166937 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-css" id="post-166937">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/emmanuelodioko/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/05/emanuel-odioko.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/05/emanuel-odioko.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emmanuelodioko/">
Emmanuel Odioko <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a frontend technology enthusiast, intrigued by frameworks and how they work, presently specializing in React, and would love to teach on any topic under it.</span>
</div>
</div>
<h1 class="posttitle">Creating responsive mobile layouts with Pure.css</h1>
<p>
<span class="post-date"><time class="post-date">
April 18, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2206</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/creating-responsive-mobile-layouts-with-pure-css.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Creating Responsive Mobile Layouts With Pure.css"                /> <article class="article-post">
<p>Have you ever set out to build a layout and found that once you shrink the screen, some elements are missing because they had fixed widths or unoptimized images? Why does this happen? Well, in simple words, this means that <a href="https://blog.logrocket.com/ux-design/app-designers-guide-responsive-mobile-ux/">your layout was not responsive</a>. If you fail to keep mobile users in mind when building layouts, you will have to adjust your designs. You may not need to start from scratch, but it will be stressful.</p>
<p>You can save yourself the headache in two ways. Your first plan of attack could be fixing your widths, optimizing your images, and using <a href="https://blog.logrocket.com/choose-between-media-container-queries/">media queries</a><a href="https://blog.logrocket.com/choose-between-media-container-queries/">.</a> However, you could also remedy this annoying situation using a framework like <a href="https://purecss.io/">Pure.css</a>.</p>
<p>This article will focus on creating responsive mobile layouts with Pure.css. However, before getting started, you will need a <a href="https://blog.logrocket.com/best-practices-improving-css-performance/">fundamental knowledge of CSS</a> and its frameworks, an <a href="https://blog.logrocket.com/html-tags-every-frontend-developer-should-know/">understanding of HTML</a>, <a href="https://blog.logrocket.com/flexible-layouts-without-media-queries/">media queries</a>, and a code editor installed on your machine. Using Pure.css, we will recreate a demo of LogRocket’s blog interface, and at the end of the article, we should have the image below:</p>
<p><img             class="aligncenter size-full wp-image-166940 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-responsive-mobile-layout.jpeg" alt="Example of the Responsive Mobile Layout With Pure.css" width="730" height="1333"    /><noscript><img               class="aligncenter size-full wp-image-166940" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-responsive-mobile-layout.jpeg" alt="Example of the Responsive Mobile Layout With Pure.css" width="730" height="1333"  /></noscript></p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-pure-css">What is Pure.css?</a>
<ul >
<li><a href="#understanding-pure-css-modules">Understanding the Pure.css modules</a></li>
</ul>
</li>
<li><a href="#importance-using-pure-css">Importance of using Pure.css</a>
<ul >
<li><a href="#cross-browser-compatibility">Cross-browser compatibility</a></li>
<li><a href="#mobile-responsiveness">Mobile responsiveness</a></li>
<li><a href="#speed">Speed</a></li>
</ul>
</li>
<li><a href="#using-pure-css-classes">Using Pure.css classes</a></li>
<li><a href="#building-responsive-mobile-layout-with-pure-css">Building a responsive mobile layout with Pure.css</a>
<ul >
<li><a href="#creating-horizontal-menu">Creating the horizontal menu</a></li>
<li><a href="#making-image-responsive">Making the image responsive</a></li>
<li><a href="#adding-featured-post">Adding a featured post</a></li>
</ul>
</li>
</ul>
<h2 id="what-pure-css">What is Pure.css?</h2>
<p>Pure.css is an open source <a href="https://blog.logrocket.com/css-grid-or-css-frameworks/">CSS framework</a> developed by Yahoo. It is a minimalist CSS framework that provides basic styles for HTML elements, making it easier to create clean, fast-loading websites. It is designed to be incredibly small, and the entire set of modules does not exceed three and a half kilobytes. Pure.css was also designed with mobile layouts in mind, making it responsive and modular — enabling developers to include the styles they need in their projects.</p>
<p>With minimal styling and <a href="https://blog.logrocket.com/deep-dive-css-specificity/">low specificity</a>, Pure.css is easy to override, making it an excellent choice for building custom styles. According to a general rule about responsiveness, “it is a good practice to create for mobile displays first, then move on to medium screen sizes like the iPad mini or air, and then move on to large screen sizes like the monitor or laptop.”</p>
<p>Because some features are not required for mobile users, building for desktop first could involve a lot of responsive work. This is where CSS frameworks like <a href="https://blog.logrocket.com/comparing-tailwind-css-bootstrap-time-ditch-ui-kits/">Bootstrap CSS</a>, <a href="https://blog.logrocket.com/bulma-vs-tailwind-css-better-bootstrap-alternative/">Bulma CSS</a>, <a href="https://blog.logrocket.com/how-to-use-tailwind-css-react-vue-js/">Tailwind CSS</a>, and <a href="https://purecss.io/">Pure.css</a> shine. With Pure.css, you can easily handle mobile-first designs.</p>
<h2 id="understanding-pure-css-modules">Understanding the Pure.css modules</h2>
<p>Below are lists of the main modules in Pure.css, along with a brief explanation of each:</p>
<ul>
<li><a href="https://purecss.io/base/">Base</a>: A set of basic styles used to reset styles and provide a consistent look and feel across different browsers</li>
<li><a href="https://purecss.io/grids/">Grids</a>: A flexible and responsive grid system for creating layouts. It provides several different classes for controlling the size and placement of elements within the grid</li>
<li><a href="https://purecss.io/buttons/">Buttons</a>: A collection of styles for creating buttons with different sizes, shapes, and colors</li>
<li><a href="https://purecss.io/forms/">Forms</a>: A set of styles for creating forms with a consistent look and feel, including styles for <code>inputs</code>, <code>labels</code>, and <code>form</code> fields</li>
<li><a href="https://purecss.io/menus/">Menus</a>: Styles for creating dropdown menus and horizontal menus</li>
<li><a href="https://purecss.io/tables/">Tables</a>: Styles for creating tables with a consistent look and feel, including styles for headers, rows, and cells</li>
</ul>
<p>These are the main modules in Pure.css, and they are all made to be responsive.</p>
<h2 id="importance-using-pure-css">Importance of using Pure.css</h2>
<p>Every framework has its distinct qualities and strengths. Pure.css strength covers three significant features making it important to use. Pure.css excels because of its cross-browser compatibility, mobile responsiveness, and speed.</p>
<h3 id="cross-browser-compatibility">Cross-browser compatibility</h3>
<p>Cross-browser compatibility refers to the ability of a website or web application to function correctly on different web browsers. Pure.css modules were built on top of <a href="https://necolas.github.io/normalize.css/">normalize.css</a>, which helps the framework maintain cross-browser consistency.</p>
<h3 id="mobile-responsiveness">Mobile responsiveness</h3>
<p>Pure.css’ key feature is its ability to be responsive. Its use of a mobile-first approach prioritizes the design and styles for smaller screens, such as those found on smartphones. Then it expands those styles to accommodate larger screens, such as those on desktop computers.</p>
<h3 id="speed">Speed</h3>
<p>As mentioned earlier, the entirety of Pure.css modules does not equal five kilobytes. The small size of the framework means that it loads quickly, reducing the time it takes for your website to become usable. Prioritizing the design for smaller screens and then expanding to accommodate larger screens ensures that the framework is optimized for fast performance on devices with limited processing power, such as smartphones.</p>
<h2 id="using-pure-css-classes">Using Pure.css classes</h2>
<p>This section covers the classes that contributed to building our responsive mobile layout, and we’ll start with the grid system. The grid system in Pure.css is a responsive layout system used to create dynamic layouts. For example, it allows you to divide your webpage into rows and columns. To use the grid system, you will need to include Pure.css’ <code>grids-responsive.css</code> on your page:</p>
<pre class="language-html hljs">&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="38484d4a5d5b4b4b780b16081608">[email protected]</a>/build/grids-responsive-min.css">
</pre>
<p>Grids are implemented using Pure.css classes in your elements:</p>
<table class="table-top-header" data-ace-table-col-widths="179;;;">
<tbody>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z">Pure.css classes</span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z">Screen size</span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z">Classes for columns</span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z">Number of columns</span></div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-</code></span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Small</span> <span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 h-lparen">(min-width:</span><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"> 35.5em)</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Example: Mobile phones</span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-</code> </span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-1-2</code> </span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-1-3</code></span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">One column</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Two columns</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Three columns</span></div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>md</strong>-</code></span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Med</span><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt4z75zvplz90zyvz74zpy4tlbyz66zz65zz65zez73zz80zz87z92z75zcz80zz88z">iu</span><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">m</span> <span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 h-lparen">(min-width:</span><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"> 48em)</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Example: Tablets</span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>md</strong>-</code></span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>md</strong>-1-2</code></span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>md</strong>-1-3</code></span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">One column</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Two columns</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Three columns</span></div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>lg</strong>-</code></span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Large</span> <span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 h-lparen">(min-width:</span><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"> 64em)</span></div>
<div dir="auto">Example: Desktop</div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>lg</strong>-1</code></span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>lg</strong>-1-2</code></span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-<strong>lg</strong>-1-3</code></span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class="inline-code author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3"><code>pure-u-lg-1-4</code></span></div>
</td>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">One column</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Two columns</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Three columns</span></div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3 ace-ltr" dir="auto"><span class=" author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zsz68zz90zs3z67zz65zwtxz75zz65zkz85zk12yaz89zz122zz71zz84zz84zjfz71zig3">Four Columns</span></div>
</td>
</tr>
</tbody>
</table>
<p>Next, we’ll look at the image classes in Pure.css. Pure image classes are added to <code>&lt;img></code> tags for responsivity. Below is the implementation:</p>
<pre class="language-css hljs">&lt;img class="pure-img" src="...">.
</pre>
<p>Lastly, Pure.css menus can be vertical or horizontal and are very responsive. Check out this <a href="https://purecss.io/menus/">reference post</a> to see the various implementations and how it was used in this article.</p>
<h2 id="building-responsive-mobile-layout-with-pure-css">Building a responsive mobile layout with Pure.css</h2>
<p>In this section, we will build a responsive mobile layout starting from the menu. Before you start, you will need to set up the development area. Pure can be installed in two ways. You can follow the steps below or visit the <a href="https://purecss.io/start/">documentation</a> to learn more.</p>
<p>The recommended way to integrate Pure.css in a project is by installing it via <a href="https://purecss.io/tools/">package managers</a>:</p>
<pre class="language-shell hljs">$ npm install purecss --save
</pre>
<p>To integrate Pure.css into your webpage, you can use the free <a href="https://www.jsdelivr.com/">jsDelivr CDN</a>. Just add the following <code>&lt;link></code> element to your page’s <code>&lt;head></code> before adding your project’s style sheets. Here’s what that should look like:</p>
<pre class="language-html hljs">&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="601015120503131320534e504e50">[email protected]</a>/build/pure-min.css" integrity="sha384-X38yfunGUhNzHpBaEBsWLO+A0HDYOQi8ufWDkZ0k9e0eXz/tH3II7uKZ9msv++Ls" crossorigin="anonymous">
</pre>
<h3 id="creating-horizontal-menu">Creating the horizontal menu</h3>
<p>Here, we will build our horizontal menu containing the LogRocket logo, Podcast, Blog, and Sign In texts. This can be quickly done with Pure.css with the following code:</p>
<pre class="language-html hljs">//Implementing our Menu
  &lt;header>
    &lt;div class="header">
        &lt;div class="home-menu pure-menu pure-menu-horizontal pure-menu-fixed">
            &lt;img width="100em" height="100%" src="https://blog.logrocket.com/wp-content/uploads/2022/09/logrocket-logo-frontend-analytics.png" alt="" class="pure-img-responsive">

            &lt;ul class="pure-menu-list">
                &lt;li class="pure-menu-item pure-menu-selected">&lt;a href="#" class="pure-menu-link">BLOG&lt;/a>&lt;/li>
                &lt;li class="pure-menu-item">&lt;a href="https://podrocket.logrocket.com/" class="pure-menu-link">PODCAST&lt;/a>&lt;/li> 
                &lt;li class="pure-menu-item">&lt;a href="https://blog.logrocket.com/tech-meetups/" class="pure-menu-link">SIGN IN&lt;/a>&lt;/li>

            &lt;/ul>
        &lt;/div>
    &lt;/div>
  &lt;/header> 
</pre>
<p>The HTML code above creates a header for a website. It includes a LogRocket logo (<code>image</code> tag) and a navigation menu (unordered list) with three <code>menu items</code>: <code>BLOG</code>, <code>PODCAST</code>, and <code>SIGN IN</code>.</p>
<p>The logo and the menu are contained within a <code>div</code> with the class <code>header</code>. These have a fixed position at the top of the page and are horizontally aligned using the <code>pure-menu-horizontal</code> class from the Pure.css framework.</p>
<p>However, we will need to add our styles for a preferred look. Add the following code:</p>
<pre class="language-css hljs">CSS
.home-menu {
    padding: 0.5em;
    text-align: left;
    background: white;
}
.home-menu ul {
        float: right;
    }
</pre>
<p>At the end of this, we should have the desktop and mobile images:</p>
<p><img             class="aligncenter size-full wp-image-166942 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/desktop-pure-css-layout.jpeg" alt="Pure.css Responsive Layout for Desktop" width="730" height="31"    /><noscript><img               class="aligncenter size-full wp-image-166942" src="https://blog.logrocket.com/wp-content/uploads/2023/04/desktop-pure-css-layout.jpeg" alt="Pure.css Responsive Layout for Desktop" width="730" height="31"  /></noscript></p>
<p><img             class="aligncenter size-full wp-image-166944 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-mobile-layout.jpeg" alt="Pure.css Responsive Layout for Mobile" width="730" height="199"    /><noscript><img               class="aligncenter size-full wp-image-166944" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-mobile-layout.jpeg" alt="Pure.css Responsive Layout for Mobile" width="730" height="199"  /></noscript></p>
<h3 id="making-image-responsive">Making the image responsive</h3>
<p>Looking at our demo above, we had an image below the menu. Let’s copy the image URL from the LogRocket blog and use Pure.css class to make it responsive. Copy the code below:</p>
<pre class="language-html hljs">HTML
IMAGE RIGHT BELOW THE MENU.
&lt;img src="https://blog.logrocket.com/wp-content/uploads/2019/05/logrocket-blog.jpg" class="pure-img-responsive">
</pre>
<p>This is what it looks like for desktop and <a href="https://blog.logrocket.com/ux-design/optimizing-images-mobile-browsers-ux-mindset/">mobile users</a>:</p>
<p><img             class="aligncenter size-full wp-image-166946 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-format-layout.jpeg" alt="Creating Responsive Formats With Pure.css for Desktop" width="730" height="322"    /><noscript><img               class="aligncenter size-full wp-image-166946" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-format-layout.jpeg" alt="Creating Responsive Formats With Pure.css for Desktop" width="730" height="322"  /></noscript></p>
<p><img             class="aligncenter size-full wp-image-166948 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-mobile-format-layout.jpeg" alt="Creating Responsive Formats With Pure.css for Mobile" width="730" height="285"    /><noscript><img               class="aligncenter size-full wp-image-166948" src="https://blog.logrocket.com/wp-content/uploads/2023/04/pure-css-mobile-format-layout.jpeg" alt="Creating Responsive Formats With Pure.css for Mobile" width="730" height="285"  /></noscript></p>
<p>Hanging in there? Don’t worry; we’re almost done.</p>
<h2 id="adding-featured-post">Adding a featured post</h2>
<p>To make our featured post section responsive with Pure.css, our code should resemble the code block below:</p>
<pre class="language-html hljs">HTML
  &lt;div class="content-wrapper">
        &lt;div class="content">
            &lt;h3 class="content-head is-center">Featured Posts&lt;/h3>

            &lt;div class="pure-g ">
                &lt;div class="l-box  pure-u-lg-1-4  ">

                        &lt;h3 class="content-subhead">
                            &lt;img  class="pure-img" src="https://blog.logrocket.com/wp-content/uploads/2023/01/creating-interactive-svg-circle-fifths-nocdn.png" alt="">
                            &lt;i class="fa fa-rocket">&lt;/i>
                            Responsive Layouts
                        &lt;/h3>
                        &lt;p>
                            Learn how to create and style a circle of fifths image into an interactive SVG using CSS functions.
                        &lt;/p> 

                &lt;/div>
                &lt;div class="l-box  pure-u-lg-1-4">

                        &lt;h3 class="content-subhead">
                            &lt;img class="pure-img" src="https://blog.logrocket.com/wp-content/uploads/2023/01/phoenix-react-typescript-to-do-list-nocdn.png" alt="">
                            &lt;i class="fa fa-rocket">&lt;/i>
                            Create a to-do list app with Phoenix, React, and TypeScript
                        &lt;/h3>
                        &lt;p>
                            Create a simple to-do list application by combining the power of a Phoenix API with the flexibility of a...
                        &lt;/p> 


            &lt;/div>
            &lt;div class="l-box  pure-u-lg-1-4">

                    &lt;h3 class="content-subhead">
                        &lt;img class="pure-img" src="https://blog.logrocket.com/wp-content/uploads/2023/01/how-create-double-border-css-nocdn.png" alt="">
                        &lt;i class="fa fa-rocket">&lt;/i>
                        How to create a double border in CSS
                    &lt;/h3>
                    &lt;p>
                        Explore a number of alternatives to the conventional CSS border-style: double method for creating a double border for a...
                    &lt;/p> 

        &lt;/div>
        &lt;div class="l-box  pure-u-lg-1-4">

                &lt;h3 class="content-subhead">
                    &lt;img class="pure-img" src="https://blog.logrocket.com/wp-content/uploads/2023/01/medusa-shopify-alternative-nocdn.png" alt="">
                    &lt;i class="fa fa-rocket">&lt;/i>
                    Using Medusa as a Shopify alternative
                &lt;/h3>
                &lt;p>
                    Explore Medusa, a headless CMS that offers many benefits like decoupled architecture, scalability, and the ability to write and...
                &lt;/p> 


    &lt;/div>
        &lt;/div>
</pre>
<p>The HTML code above contains four posts, each represented by a box. Each box contains an image, a title with an icon, and a short description of the post. The titles and descriptions are wrapped in a <code>content-subhead</code> class, which styles the text, and an image is included in each box with the <code>pure-img</code> class.</p>
<p>The boxes are set up using the Pure.css grid modules and are evenly spaced across the page like a <a href="https://blog.logrocket.com/how-to-use-css-grid-to-build-a-responsive-web-layout/">grid layout</a>. The layout is divided into four columns, with each box occupying a quarter of the page width. The titles of the posts each have an icon represented by the <code>fa fa-rocket</code> class, which styles a rocket icon next to the text. The images are loaded from LogRocket.</p>
<p>Here is a little tweak using the <code>grid</code> class in Pure.css. If <code>pure-u-</code> or <code>pure-u-<strong>md</strong>-</code> were used, you may not end up with a responsive website. For example, if <code>pure-u-1-3</code> were used, the bigger screen would have three columns. However, when we get to the smaller screen, it will have three columns. This means it’s not entirely responsive because the bigger screen should have four columns when the screen shrinks and be left with one for the sake of mobile users.</p>
<p>It’s advisable to use a large grid class (<code>pure-u-<strong>lg</strong>-</code>) for a large screen, so the responsivity goes to a smaller screen size when it shrinks. Let’s style our app a bit:</p>
<pre class="language-css hljs">CSS
.pure-u-lg-1-4{
    margin:30px;

}
.div1{
    width: 100%;
}
.content {
    padding: 1em 1em 3em;
}
/* This is the class used for the main content headers (&lt;h2>) */
.content-head {
    font-weight: 200;
    letter-spacing: 0.10em;
    margin: 2em 0 1em;
}
/* This is the class used for the content sub-headers (&lt;h3>) */
.content-subhead {
    color: rgb(81, 9, 81);
}
.content-subhead i {
    margin-right: 5px;
}
</pre>
<p>At this point, we should have our mobile layout in our demo up and running:</p>
<p><img             class="aligncenter size-full wp-image-166950 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/responsive-mobile-layout-with-pure-css.gif" alt="Final Product of Responsive Mobile Layouts With Pure.css" width="730" height="353"  /><noscript><img               class="aligncenter size-full wp-image-166950" src="https://blog.logrocket.com/wp-content/uploads/2023/04/responsive-mobile-layout-with-pure-css.gif" alt="Final Product of Responsive Mobile Layouts With Pure.css" width="730" height="353"/></noscript></p>
<h2>Conclusion</h2>
<p>In this article, we learned how to build a responsive mobile layout with Pure.css. Using Pure.css is an excellent option for those who want to create basic layouts for websites quickly and easily, focus on content and functionality over styling, or have a minimalistic design aesthetic.</p>
<p>It is also designed with mobile-first responsiveness in mind. However, it’s important to consider the specific requirements of your projects and choose the framework or library that is the best fit.</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166937" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166937" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166937" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/05/emanuel-odioko.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/05/emanuel-odioko.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emmanuelodioko/">
Emmanuel Odioko <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a frontend technology enthusiast, intrigued by frameworks and how they work, presently specializing in React, and would love to teach on any topic under it.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/css/">#css</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/product-charter-what-to-include-how-to-create/" rel="prev">Product charter: What’s included and how to create one (with examples)</a></div></div>
 <div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/what-is-market-demand-how-to-find-it/" rel="next">What is market demand and how to find it</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/creating-responsive-mobile-layouts-with-pure-css/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Customize a reusable React dropdown menu component - LogRocket Blog</title>
			<link>https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Customize a reusable React dropdown menu component - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/">Customize a reusable React dropdown menu component - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-240 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-240">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/dbilgili/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/dogcan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/dogcan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/dbilgili/">
Doğacan Bilgili <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A software developer who is also into 3D-modeling and animation.</span>
</div>
</div>
<h1 class="posttitle">Customize a reusable React dropdown menu component</h1>
<p>
<span class="post-date"><time class="post-date">
April 4, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2312</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2020/12/react-custom-dropdown.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="React Custom Dropdown"                />  <article class="article-post">
<p><em><strong>Editor’s Note:</strong> This blog post was reviewed for accuracy on 4 April 2023. You can also read our blog post on creating <a href="https://blog.logrocket.com/how-create-multilevel-dropdown-menu-react/">multi-level dropdown menus in React</a>.</em></p>
<p>When it comes to adding styling and other specific requirements to your application, adapting an existing component into your project might not always go as smoothly as you’d like. Considering the time you might spend on the adaptation process, building your own component may be in your best interest.</p>
<p>A dropdown component, which is a <a href="https://blog.logrocket.com/creating-multilevel-dropdown-menu-react/">custom version of the dropdown select option with extended styles</a>, sorts and filters content on webpages. In this tutorial, we’ll walk through an approach that I’ve followed in my personal projects to create a custom dropdown menu component in React.</p>
<p>For the complete source code and the styling files, you can refer to the <a href="https://github.com/dbilgili/Custom-ReactJS-Dropdown-Components">GitHub repo</a>. Let’s get started!</p>
<ul >
<li><a href="#visual-structure-dropdown-menu-component">The visual structure of a dropdown menu component</a></li>
<li><a href="#parent-child-relations-components">Parent-child relations in dropdown components</a></li>
<li><a href="#controlling-parent-state-child-component">Controlling a parent state from a child component</a></li>
<li><a href="#single-multi-select-dropdown">Single or multi-select dropdown</a>
<ul >
<li><a href="#dynamic-header-title">Dynamic header title</a></li>
<li><a href="#single-select-dropdown-menu">Single-select dropdown menu</a></li>
<li><a href="#multi-select-dropdown">Multi-select dropdown menu</a></li>
</ul>
</li>
<li><a href="#handling-outside-clicks">Handling outside clicks</a></li>
<li><a href="#popular-dropdowm-component-libraries">Popular dropdown component libraries</a></li>
</ul>
<h2 id="visual-structure-dropdown-menu-component">The visual structure of a dropdown menu component</h2>
<p>Before diving into the technical stuff, let’s quickly understand the visual structure of the dropdown menu component to decide on the requirements:</p>
<p><img             class="aligncenter wp-image-120988 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/06/visual-structure-dropdown-component.jpeg" alt="Visual Structure Dropdown Component" width="730" height="424"    /><noscript><img               class="aligncenter wp-image-120988 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/visual-structure-dropdown-component.jpeg" alt="Visual Structure Dropdown Component" width="730" height="424"  /></noscript></p>
<p>A dropdown menu consists of four basic components: the header wrapping, header title, list wrapping, and list items.</p>
<p>The corresponding HTML would look like the following code:</p>
<pre>&lt;div className="dd-wrapper">
  &lt;div className="dd-header">
    &lt;div className="dd-header-title">&lt;/div>
  &lt;/div>
  &lt;div className="dd-list">
    &lt;button className="dd-list-item">&lt;/button>
    &lt;button className="dd-list-item">&lt;/button>
    &lt;button className="dd-list-item">&lt;/button>
  &lt;/div>
&lt;/div>
</pre>
<p>We need to be able to toggle the <code>dd-list</code> upon clicking <code>dd-header</code> and close it when the user clicks outside of the <code>dd-wrapper</code>. We also need to populate the <code>&lt;button></code> tags automatically based on the data, and we need to be able to dynamically control the header title.</p>
<p>Keep in mind that you should not use a dropdown component if you are looking to display and compare nested items, or if you only have two options to choose from. In that case, a radio button would be a better option.</p>
<h2 id="parent-child-relations-components">Parent-child relations in dropdown components</h2>
<p>A parent component holds a single or multiple dropdown menus. Since each dropdown menu has unique content, we need to parameterize it by passing information as props. Let’s imagine that we have a dropdown menu where we can select multiple locations.</p>
<p>Consider the following state variable inside the parent component:</p>
<pre>constructor(){
  super()
  this.state = {
    location: [
      {
          id: 0,
          title: 'New York',
          selected: false,
          key: 'location'
      },
      {
          id: 1,
          title: 'Dublin',
          selected: false,
          key: 'location'
      },
      {
          id: 2,
          title: 'California',
          selected: false,
          key: 'location'
      },
      {
          id: 3,
          title: 'Istanbul',
          selected: false,
          key: 'location'
      },
      {
          id: 4,
          title: 'Izmir',
          selected: false,
          key: 'location'
      },
      {
          id: 5,
          title: 'Oslo',
          selected: false,
          key: 'location'
      }
    ]
   }
  }
</pre>
<p>In the code above, when populating the <code>location</code> array, we have a unique <code>id</code> to use with a key prop of map method. We have a <code>title</code> for each item in the list, a boolean variable called <code>selected</code> to toggle the selected items in the list in case of multiple selections in a dropdown menu, and finally, a <code>key</code> variable, which comes in handy for using with the <code>setState</code> function. We’ll cover that later.</p>
<p>Let’s take a look at what we’ve passed to the <code>Dropdown</code> component as props so far. Below, you’ll see the <code>Dropdown</code> component used in a parent component where we have passed a title and an array of data to populate the dropdown list:</p>
<pre>&lt;Dropdown  
  title="Select location"
  list={this.state.location}
/>
</pre>
<p>Before editing the <code>render()</code> method, we need to include the following state variables in our <code>Dropdown</code> component:</p>
<pre>&lt;constructor(props){
  super(props)
  this.state = {
    isListOpen: false,
    headerTitle: this.props.title
  }
}
</pre>
<p>We have a boolean variable called <code>isListOpen</code> for toggling the menu list and a <code>headerTitle</code>, which is equal to the <code>title</code> prop by default.</p>
<p>Now, take a look at the <code>render()</code> method of our component. Note that the <a href="https://fontawesome.com/">Font Awesome</a> package used in the render JSX markup is an external npm package. You should install it and import it inside the <code>Dropdown</code> component as follows:</p>
<pre>import FontAwesome from 'react-fontawesome';
</pre>
<p>You also need to include the following <code>&lt;link></code> tag in the <code>index.html</code> of your project, which is required for Font Awesome to work properly:</p>
<pre>&lt;link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
</pre>
<p>In the <code>render()</code> method, we have the aforementioned structure with the header and the list containing the list items. You’ll notice that we have <code>toggleList()</code> and <code>selectItem()</code> functions used in the render method. Let’s create those functions now:</p>
<pre>render() {
  const { isListOpen, headerTitle } = this.state;
  const { list } = this.props;

  return (
    &lt;div className="dd-wrapper">
      &lt;button
        type="button"
        className="dd-header"
        onClick={this.toggleList}
      >
        &lt;div className="dd-header-title">{headerTitle}&lt;/div>
        {isListOpen
          ? &lt;FontAwesome name="angle-up" size="2x" />
          : &lt;FontAwesome name="angle-down" size="2x" />}
      &lt;/button>
      {isListOpen &amp;&amp; (
        &lt;div
          role="list"
          className="dd-list"
        >
          {list.map((item) => (
            &lt;button
              type="button"
              className="dd-list-item"
              key={item.id}
              onClick={() => this.selectItem(item)}
            >
              {item.title}
              {' '}
              {item.selected &amp;&amp; &lt;FontAwesome name="check" />}
            &lt;/button>
          ))}
        &lt;/div>
      )}
    &lt;/div>
  )
}
</pre>
<p>The <code>toggleList()</code> function simply toggles the <code>isListOpen</code> state variable, showing or hiding the items list:</p>
<pre>toggleList = () => {
   this.setState(prevState => ({
     isListOpen: !prevState.isListOpen
  }))
}
</pre>
<p>The <code>selectItem()</code> function, on the other hand, sets the <code>headerTitle</code> state to a selected item’s title and sets the <code>isListOpen</code> state to <code>false</code> to close the list upon selection.</p>
<p>After setting these states, it calls the <code>resetThenSet()</code> callback function, which is a prop we need to pass to <code>Dropdown /</code>. Calling this callback function updates the <code>location</code> state in the parent component, marking the clicked list item as <code>selected</code>:</p>
<pre>selectItem = (item) => {
  const { resetThenSet } = this.props;
  const { title, id, key } = item;

  this.setState({
    headerTitle: title,
    isListOpen: false,
  }, () => resetThenSet(id, key));
}
</pre>
<p><img             class="aligncenter wp-image-120991 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/06/custom-dropdown-menu-open-close.jpeg" alt="Custom Dropdown Menu Open Close" width="730" height="293"    /><noscript><img               class="aligncenter wp-image-120991 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/custom-dropdown-menu-open-close.jpeg" alt="Custom Dropdown Menu Open Close" width="730" height="293"  /></noscript></p>
<h2 id="controlling-parent-state-child-component">Controlling a parent state from a child component</h2>
<p>When you pass something as a prop to a child component, you can only use that data, and you cannot change it unless you deploy additional props. If you define a function in the parent component, which controls the state, and then pass this function as a prop to child component, then you can call this function from the child component and set the parent component’s state.</p>
<p>In the case of the dropdown menu, when a list element is clicked, we need to be able to toggle the <code>selected</code> key for the corresponding object in the <code>location</code> state of the parent component. We do so by passing the <code>resetThenSet()</code> function as a prop to <code>Dropdown</code> component.</p>
<p>The <code>resetThenSet()</code> function clones the <code>location</code> state, then sets the <code>selected</code> key of each object in the array to <code>false</code>. Then, it only sets the clicked item’s <code>selected</code> key to <code>true</code>, hence the name <code>resetThenSet</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>We define this function in the parent component:</p>
<pre>resetThenSet = (id, key) => {
  const temp = [...this.state[key]];

  temp.forEach((item) => item.selected = false);
  temp[id].selected = true;

  this.setState({
    [key]: temp,
  });
}
</pre>
<p>We then pass the function to the <code>&lt;Dropdown /></code> component as a prop:</p>
<pre>&lt;Dropdown
  title="Select location"
  list={this.state.location}
  resetThenSet={this.resetThenSet}
/>
</pre>
<h2 id="single-multi-select-dropdown">Single or multi-select dropdown</h2>
<p>So far, the setup we’ve used is required for a single-select dropdown. However, if we want to be able to select multiple items in the dropdown menu, we need a different function in place of <code>resetThenSet()</code>.</p>
<p>We’ll name that function <code>toggleItem()</code> because it only toggles the <code>selected</code> key of the items in the <code>location</code> array:</p>
<pre>toggleItem = (id, key) => {
  const temp = [...this.state[key]];

  temp[id].selected = !temp[id].selected;

  this.setState({
    [key]: temp,
  });
}
</pre>
<p>Then, we pass this function as a prop like we did before:</p>
<pre>&lt;Dropdown
  title="Select location"
  list={this.state.location}
  toggleItem={this.toggleItem}
/>
</pre>
<p>When using the function in the <code>&lt;Dropdown/></code> component, we can directly call it without an intermediate function. This approach is different than the one we followed for a single select dropdown, given that we don’t need to set the <code>headerTitle</code> or close the list.</p>
<p>However, we still need to handle the <code>headerTitle</code> so that we can show how many locations are selected:</p>
<pre>render() {
  const { list, toggleItem } = this.props;

  return (
    //
    //
      &lt;button
        type="button"
        className="dd-list-item"
        key={item.id}
        onClick={() => toggleItem(item.id, item.key)}
      >
    //
    //
  )
}
</pre>
<h3 id="dynamic-header-title">Dynamic header title</h3>
<p>As previously mentioned, we didn’t set the <code>headerTitle</code> in the case of a multi-select dropdown. However, regardless of whether it’s a single or multi-select dropdown, we need to handle the <code>headerTitle</code> separately due to the fact that the <code>list</code> array passed might contain items with the <code>selected</code> key set to <code>true</code> by default. The component should be able to detect this and set the <code>headerTitle</code> accordingly.</p>
<p>To handle this, we’ll use the <code>static getDerivedStateFromProps</code> lifecycle Hook.</p>
<p>The purpose of <code>getDerivedStateFromProps</code> is to enable a component to update its internal state as a result of changes in props. It should return an object to update the state or return null if nothing needs to be updated.</p>
<h3 id="single-select-dropdown-menu">Single-select dropdown menu</h3>
<p>First, filter the <code>list</code> prop to see if there is any object with the <code>selected</code> key set to <code>true</code>. If there is one, that will be returned and will be made available in <code>selectedItem</code>. Then, we use this object’s <code>title</code> key to set the <code>headerTitle</code>. If <code>selectedItem</code> is empty, then we simply return an object where we set the <code>title</code> prop to <code>headerTitle</code>:</p>
<pre>static getDerivedStateFromProps(nextProps) {
  const { list, title } = nextProps;
  const selectedItem = list.filter((item) => item.selected);

  if (selectedItem.length) {
    return {
      headerTitle: selectedItem[0].title,
    };
  }
  return { headerTitle: title };
}
</pre>
<h3 id="multi-select-dropdown">Multi-select dropdown menu</h3>
<p>When dealing with a multi-selection dropdown menu, we check the length of the items with the <code>selected</code> key set to <code>true</code>. If this count is equal to <code>0</code>, then we simply set <code>headerTitle</code> to the default <code>title</code> prop.</p>
<p>If the count is equal to <code>1</code>, then we use a prop called <code>titleHelper</code>. In our case, this is a string value equal to <code>"Location"</code>, allowing us to display <code>1 location</code> on the title.</p>
<p>If the <code>count</code> is greater than <code>1</code>, then we use the plural form of <code>location</code>, which we provide to our component through the <code>titleHelperPlural</code> prop. In our case, this prop is equal to <code>"Locations"</code>:</p>
<pre>static getDerivedStateFromProps(nextProps) {
  const {
    list,
    title,
    titleHelper,
    titleHelperPlural
  } = nextProps;

  const count = list.filter((item) => item.selected).length;

  if (count === 0) {
    return { headerTitle: title };
  }
  if (count === 1) {
    return { headerTitle: `${count} ${titleHelper}` };
  }
  if (count > 1) {
    return { headerTitle: `${count} ${titleHelperPlural}` };
  }
  return null;
}
</pre>
<p>So, our component will have the following props if it’s a multi-select dropdown:</p>
<pre>&lt;Dropdown
  titleHelper="Location"
  titleHelperPlural="Locations"
  title="Select location"
  list={this.state.location}
  toggleItem={this.toggleItem}
/>
</pre>
<p><img             class="aligncenter wp-image-120995 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/06/dropdown-menu-dynamic-header-title.jpeg" alt="Dropdown Menu Dynamic Header Title" width="730" height="264"    /><noscript><img               class="aligncenter wp-image-120995 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/06/dropdown-menu-dynamic-header-title.jpeg" alt="Dropdown Menu Dynamic Header Title" width="730" height="264"  /></noscript></p>
<h2 id="handling-outside-clicks">Handling outside clicks</h2>
<p>The last thing we need to handle is closing the dropdown menu when a user clicks outside of it. It is quite straightforward to listen to click events on the <code>window</code> object and toggle the <code>isListOpen</code> state variable. However, this approach requires some small tricks to make it work properly.</p>
<p>Consider the following code snippet where we add an event listener to the <code>window</code> object that depends on the <code>isListOpen</code> state variable. However, this attempt results in a tooltip opening and closing almost simultaneously:</p>
<pre>close = () => {
  this.setState({
    isListOpen: false,
  });
}

componentDidUpdate(){
  const { isListOpen } = this.state;

  if(isListOpen){
    window.addEventListener('click', this.close)
  }
  else{
    window.removeEventListener('click', this.close)
  }
}
</pre>
<p>The solution is to use the <code>setTimeout</code> method with either a <code>0</code> millisecond delay or without any time delay defined. Therefore, it queues a new task to be executed by the next event loop. Although using <code>0</code> milliseconds usually describes a task that should be executed immediately, this is not the case with the single-thread synchronous nature of JavaScript. When the <code>setTimeout</code> is used, it simply creates an asynchronous callback. You can refer to the specific MDN web docs for a detailed explanation on the topic:</p>
<pre>componentDidUpdate(){
  const { isListOpen } = this.state;

  setTimeout(() => {
    if(isListOpen){
      window.addEventListener('click', this.close)
    }
    else{
      window.removeEventListener('click', this.close)
    }
  }, 0)
}
</pre>
<p>There is one more thing we need to take into account. When using the dropdown menu in multi-select mode, it is likely that we don’t want to close the list when an item is selected, unlike in single select mode. To fix this issue, we need to call the <code>stopPropagation()</code> method on the <code>onClick</code> event of the list items.</p>
<p>Doing so prevents propagation of the same event bubbling up to the parent elements and therefore keeps the item list open when items are being clicked:</p>
<pre>&lt;button
  type="button"
  className="dd-list-item"
  key={item.id}
  onClick={(e) => {
    e.stopPropagation();
    this.selectItem(item);
  }}
>
</pre>
<h2 id="popular-dropdowm-component-libraries">Popular dropdown component libraries</h2>
<p>Although though this tutorial covered all the steps involved in building a reusable dropdown component from scratch, there are some popular dropdown component libraries based on React that you can leverage to achieve the same goal. The list below includes some libraries and their corresponding weekly downloads on the npm registry at the time of writing:</p>
<ul>
<li><a href="https://www.npmjs.com/package/rc-dropdown">rc-dropdown</a>: 909,409 weekly downloads</li>
<li><a href="https://www.npmjs.com/package/react-dropdown">react-dropdown</a>: 84,472 weekly downloads</li>
<li><a href="https://www.npmjs.com/package/react-dropdown-select">react-dropdown-select</a>: 20,355 weekly downloads</li>
<li><a href="https://www.npmjs.com/package/react-simple-dropdown">React Simple Dropdown</a>: 11,874 weekly downloads</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, we structured a dropdown menu component that supports both single and multi-select functionalities. We learned how to control the parent component’s state from a child component by passing functions as props to child component and calling them inside the child component.</p>
<p>In addition, we used the static <code>getDerivedStateFromProps</code> method to update the state variables upon prop changes.</p>
<p>Note that this tutorial just gives an introductory approach on how to create a custom dropdown menu. To create a fully fledged dropdown component, you need to bear accessibility in mind as well. I hope you enjoyed this article, and happy coding!</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-240" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-240" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-240" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/dogcan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/dogcan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/dbilgili/">
Doğacan Bilgili <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A software developer who is also into 3D-modeling and animation.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/exploring-lerna-second-era/" rel="prev">Exploring Lerna’s second era</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/user-onboarding-how-to-create-smooth-experience/" rel="next">User onboarding: How to create a smooth user experience</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Exploring Lerna’s second era - LogRocket Blog</title>
			<link>https://blog.logrocket.com/exploring-lerna-second-era/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/exploring-lerna-second-era/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Exploring Lerna’s second era - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/exploring-lerna-second-era/">Exploring Lerna’s second era - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-165769 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized" id="post-165769">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
 <div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/austinroyomondi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/austinroyomondi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/austinroyomondi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/austinroyomondi/">
Austin Roy Omondi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Live long and prosper 👌</span>
</div>
</div>
<h1 class="posttitle">Exploring Lerna’s second era</h1>
<p>
<span class="post-date"><time class="post-date">
April 4, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1713</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/exploring-lernas-second-era.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Exploring Lernas Second Era"                /> <article class="article-post">
<p>In this article, we’ll explore the newest version of <a href="https://lerna.js.org">Lerna</a> at the time of writing, v6.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#why-use-monorepo">Why use a monorepo?</a></li>
<li><a href="#importance-lerna">Importance of tools like Lerna</a></li>
<li><a href="#lernas-new-era">Lerna’s new era</a></li>
<li><a href="#integration-nx">Integration with Nx</a></li>
<li><a href="#remote-caching-nx-cloud">Remote caching via Nx Cloud</a></li>
<li><a href="#target-dependencies-defining-task-pipeline">Target dependencies: Defining a task pipeline</a></li>
<li><a href="#pnpm-support">pnpm support</a></li>
<li><a href="#plugin-ecosystem-vs-code-extension">Plugin ecosystem:VS Code extension</a></li>
<li><a href="#prettier-support">Prettier support</a></li>
<li><a href="#dynamic-terminal-output">Dynamic terminal output</a></li>
<li><a href="#lerna-repair"><code>lerna repair</code></a></li>
</ul>
<h2 id="why-use-monorepo">Why use a monorepo?</h2>
<p>Using a <a href="https://monorepo.tools/#what-is-a-monorepo:~:text=%23%20What%20is%20a-,Monorepo,-%3F">m</a><a href="https://monorepo.tools/#what-is-a-monorepo:~:text=%23%20What%20is%20a-,Monorepo,-%3F">onorepo</a> is a great approach for defining an application’s architecture, particularly for maintaining distinct projects with well-defined relationships. When working on a team, a <a href="https://blog.logrocket.com/build-monorepo-next-js/#what-monorepo">monorepo provides better dependency management and code sharing</a>. You also get a fast, unified CI, which makes it possible to develop multiple packages in the same repository and share configurations like <a href="https://blog.logrocket.com/using-prettier-eslint-automate-formatting-fixing-javascript/">Prettier and ESLint</a> throughout your different projects, thereby ensuring uniformity.</p>
<h2 id="importance-lerna">Importance of tools like Lerna</h2>
<p>Publishing individual packages and sequential builds takes a long time, so monorepos can be challenging to manage, especially in bigger projects. To help us manage this, we can use tools like pnpm, Yarn, or npm.</p>
<p>However, these tools lack some vital features that you can only get with a tool like Lerna. Lerna modularizes the code into smaller, more manageable packages and abstracts out shareable code, thereby making monorepos more scalable. <a href="https://blog.logrocket.com/build-full-stack-typescript-application-turborepo/">Other major players in the monorepo space</a> include Rush Stack, Nx, and Turborepo.</p>
<h2 id="lernas-new-era">Lerna’s new era</h2>
<p>Lerna was among the first monorepo tools. However, Lerna was considered obsolete or deprecated in April 2022 after an announcement was published in its main README file notifying users that it would no longer be maintained.</p>
<p>Barely a month after this new development, <a href="https://github.com/nrwl">Nrwl</a>, the company that created <a href="https://nx.dev/">Nx</a>, a build system developed by ex-Googlers, took over Lerna. Given their long history in the monorepo space, this was good news for developers.</p>
<p>In addition to conducting a cleanup on the Lerna repository and updating the outdated packages, starting with v5.1+, the first version, Lerna received several notable upgrades that have since improved usability for large monorepo projects. Some of these include:</p>
<ul>
<li>Integration with Nx</li>
<li>The launch of a brand new website</li>
<li>Updated documentation</li>
<li>10x faster speed than previous Lerna versions and around 4x faster speed than Turborepo</li>
<li>Caching by default, which improved Lerna’s build times and made the build process generally <a href="https://blog.nrwl.io/lerna-reborn-whats-new-in-v6-10aec6e9091c#3d67:~:text=v6%20is%20out!-,Fast,-Lerna%20with%20caching">faster</a></li>
</ul>
<h2 id="integration-nx">Integration with Nx</h2>
<p>In v6, Lerna can integrate with and defer a lot of tasks to Nx, resulting in an array of features including:</p>
<ul>
<li>Smart rebuilds: Lerna only rebuilds and retests whatever is affected by our changes</li>
<li>Caching capabilities</li>
<li>Project graph: Lerna has a <a href="https://lerna.js.org/docs/features/project-graph">powerful interactive visualizer</a> that simplifies the understanding of your workspaces</li>
<li>Distributed task execution</li>
<li>Computation and remote caching</li>
<li>Improved developer experience: Lerna now has a beautiful terminal output that improves usability and makes it easier to see what has failed and why it failed</li>
<li>Ownership management</li>
</ul>
<p>To enable Nx in Lerna v5, you had to enable Nx support by setting the <code>useNX</code> flag to <code>true</code> in <code>lerna.json</code>:</p>
<pre class="language-json hljs">// lerna.json
{
    ...
    "useNx": true
}
</pre>
<p>However in v6, all Lerna workspaces set the <code>useNX</code> flag to <code>true</code> by default, even if you don’t have it in your Lerna config file.</p>
<p>Before Lerna was acquired, npm packages were used to delegate scheduling. However, after its change in stewardship, Nx integration was made possible.</p>
<p>With Nx’s built-in caching, Lerna has support for caching included, thereby improving its speed. By using a computation cache, Lerna never rebuilds or retests the same code twice. It knows when the task you are about to run has been executed before and uses the cache to restore the results of previously running that task, resulting in cost and resource savings.</p>
<p>To ensure you have default caching, you can run the following command:</p>
<pre class="language-bash hljs">npx lerna add-caching
</pre>
<p>The command above will automatically scan the workspace, find the <code>package.json</code> scripts, guide you through the configuration of both your cacheable operations as well as your task pipeline, and then generate a <code>nx.json</code> file based on the existing Lerna workspace.</p>
<p>An alternative method is to create a <code>nx.json</code> file at the root of the workspace where you define your cacheable operations:</p>
<pre class="language-json hljs">// nx.json
{ 
 "tasksRunnerOptions": { 
 "default": { 
 "runner": "nx/tasks-runners/default", 
 "options": { 
 "cacheableOperations": ["build", "test"] 
       } 
     } 
   } 
} 
</pre>
<h2 id="remote-caching-nx-cloud">Remote caching via Nx Cloud</h2>
<p>Remote caching is an improvement Lerna gets from adopting Nx as its task scheduler. <a href="https://blog.nrwl.io/lerna-reborn-whats-new-in-v6-10aec6e9091c#3d67:~:text=existing%20Lerna%20workspace.-,Remote,-caching%20with%20Lerna">Remote caching</a> and distributed task execution (DTE) are especially helpful when working on a project as a team. It makes it possible for you to distribute your local cache with the rest of the team as well as the CI system. All of this is possible via the <a href="https://nx.app/">Nx Cloud</a>.</p>
<p><code>Run view</code>, an option in Nx Cloud, also makes it possible to visualize your CI run and distribute the project tasks dynamically across several machines. It does so by optimizing the best machine utilization and parallelization. Lastly, Nx Cloud also has multi-platform integration that integrates with all popular CI providers on any OS.</p>
<h3>Sample project</h3>
<p>To better demonstrate the new features, clone the following <a href="https://github.com/lerna/getting-started-example">repo</a> from Lerna’s official documentation. Once it is cloned, <code>checkout</code> to the <code>prelerna</code> branch, which contains three projects, each with its own <code>package.json</code> file. We’ll use the project to try out the new features.</p>
<p>To add Lerna to the <code>prelerna</code> branch, run the following command:</p>
<pre class="language-bash hljs">npx <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d8b4bdaab6b998b4b9acbdabac">[email protected]</a> init
</pre>
<p>Before we can use Nx Cloud, we need to have a workspace configured:</p>
<pre class="language-bash hljs">npx <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f5968790948190d89b8dd8829a879e8685949690b5999481908681">[email protected]</a> &lt;workspace name>
</pre>
<p>The command above will install the <code>create-nx-workspace</code> package. To configure the type of workspace we want, we’ll need to answer several questions. In our case, we select a React project, webpack as the bundler for the workspace, CSS for styling, and enabled distributed caching:</p>
<p><img             class="aligncenter wp-image-165774 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1-lerna-example-app-configuratio.png" alt="Lerna Example App Configuration" width="730" height="411"    /><noscript><img               class="aligncenter wp-image-165774 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1-lerna-example-app-configuratio.png" alt="Lerna Example App Configuration" width="730" height="411"  /></noscript></p>
<p>To use remote caching, run the following command:</p>
<pre class="language-bash hljs">npx nx connect-to-nx-cloud
</pre>
<p>The command above will guide you through a set of questions and help you set up an <a href="https://nx.app/">Nx Cloud</a>.</p>
<h2 id="target-dependencies-defining-task-pipeline">Target dependencies: Defining a task pipeline</h2>
<p>We mentioned that integrating Nx with Lerna maximizes parallelization, however, when running tasks in a monorepo, we also need to account for any potential dependencies among different tasks.</p>
<p>For example, in our sample project, we may depend on a library for an example chat UI library. In this case, this library needs to be built before we can build the applications that depend on it. With Lerna v6, we specify this in the <code>nx.json</code> file by defining the <code>targetDefaults</code>:</p>
<pre class="language-json hljs">// nx.json
{
  ...
  "targetDefaults": {
    "build": {
      "dependsOn": ["^build"]
    },
    "dev": {
      "dependsOn": ["^build"]
    }
  }
}
</pre>
<p>The code above shows an example in our project with <code>chat</code>, <code>navbar</code>, and <code>secondera</code>:</p>
<ul>
<li><code>npx lerna run build</code>: Runs the build targets in the right order</li>
<li><code>npx lerna run dev --scope=secondera</code>: Runs the build targets for <code>navbar</code> and <code>chat</code> first, then runs the dev target for <code>secondera</code></li>
<li><code>npx lerna run test</code>: Runs all three test targets in parallel</li>
</ul>
<h2 id="pnpm-support">pnpm support</h2>
<p>Now, it’s possible to use Lerna in a pnpm workspace, making it possible to utilize the best qualities of both tools. When Lerna is used in a pnpm workspace, it will <a href="https://pnpm.io/workspaces">resolve</a> package locations with <code>pnpm-workspace.yaml</code>, <a href="https://pnpm.io/cli/install">restrict</a> the use of Bootstrap and link, and add commands replacing their usage with pnpm commands to manage the dependencies directly.</p>
<p>Using pnpm with Lerna also enforces <code>useWorkspaces:true</code> in <code>lerna.json</code> and ignores packages in <code>package.json</code>.</p>
<p>Lastly, it will ensure that workspace protocol for package dependencies is respected. This is important when updating dependencies. In cases where a workspace alias is used, <code>lerna version</code> will not update the version because aliases do not specify version numbers that need to be updated.</p>
<h2 id="plugin-ecosystem-vs-code-extension">Plugin ecosystem: VS Code extension</h2>
<p>To help when navigating the monorepo, Lerna provides a VS Code extension. With the extension installed, you can run commands directly by right-clicking on the project. You can also visualize the project and how it relates to other projects in the workspace. Finally, you also get intelligent autocompletion when writing configuration files.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>To run the project visualization, we run the following command:</p>
<pre class="language-javascript hljs">nx graph
</pre>
<p>In the example above, running the <code>nx graph</code> command gives us the following interactive visual representation in the browser window of our project, which shows the dependency links between <code>secondera</code>, <code>chat</code>, and <code>navbar</code>, providing a good overview of the project:</p>
<p><img             class="aligncenter wp-image-165776 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-lerna-vscode-extension.png" alt="Lerna Vscode Extension" width="730" height="411"    /><noscript><img               class="aligncenter wp-image-165776 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-lerna-vscode-extension.png" alt="Lerna Vscode Extension" width="730" height="411"  /></noscript></p>
<h3/>
<p><img             class="aligncenter wp-image-165778 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-vscode-extension.png" alt="VSCode Extension" width="730" height="456"    /><noscript><img               class="aligncenter wp-image-165778 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-vscode-extension.png" alt="VSCode Extension" width="730" height="456"  /></noscript></p>
<h2 id="prettier-support">Prettier support</h2>
<p>Formatting can be time-consuming. In Lerna v6, there is a feature that auto-detects if Prettier is set up in the workspace. Once the <code>lerna version</code> command is run, it applies the formats set to all the files in the project.</p>
<h2 id="dynamic-terminal-output">Dynamic terminal output</h2>
<p>When working on different packages or projects, we may need to run tasks from these packages in parallel. In these situations, it becomes increasingly difficult to keep track of what tasks were built and which tasks failed as the project grows.</p>
<p>With the introduction of dynamic terminal output in the new Lerna, only the most relevant output is displayed at any given moment.</p>
<h2 id="lerna-repair"><code>lerna repair</code></h2>
<p>The new Lerna has the <code>lerna repair</code> command, which ensures that any configuration file changes for the latest version of <code>lerna</code> are applied. Running this command automatically updates the <code>lerna.json</code> file with the new configuration details, keeping the application you are working on from breaking and taking away the need to manually update the configuration, reducing the possibility of errors.</p>
<p>It is recommended that you run this command after upgrading to the latest version, as shown below:</p>
<pre>$ npm i <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1e727b6c707f5e727f6a7b6d6a">[email protected]</a>
$ lerna repair
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>Although monorepos provide a great architectural approach for many projects, they have their share of limitations. Tools like Lerna help to alleviate these, making monorepos a more appealing option.</p>
<p>The change in stewardship has brought about significant improvements to Lerna as a tool for managing monorepos. Integration with Nx has resulted in the most notable changes, making caching by default and remote caching possible. Caching translates to faster build times, making Lerna faster than most tools available in the monorepo space.</p>
<p>The new Lerna also allows integration with Prettier and pnpm, which reduce redundancy and improve usability for large monorepo projects. New commands like <code>lerna repair</code> ease the process when updating from previous versions.</p>
<p>Finally, the addition of features like dynamic terminal output and the plugin ecosystem improve the user experience and simplify the workspace by visually showing the relationships between different packages.</p>
<p>I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165769" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/exploring-lerna-second-era/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/exploring-lerna-second-era/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165769" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/exploring-lerna-second-era/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165769" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/exploring-lerna-second-era/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/austinroyomondi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/austinroyomondi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/austinroyomondi/">
Austin Roy Omondi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Live long and prosper 👌</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
</ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/understanding-exclamation-mark-typescript/" rel="prev">Understanding the exclamation mark in TypeScript</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/customize-reusable-react-dropdown-menu-component/" rel="next">Customize a reusable React dropdown menu component</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/exploring-lerna-second-era/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Exploring the best GraphQL data visualization tools - LogRocket Blog</title>
			<link>https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Exploring the best GraphQL data visualization tools - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/">Exploring the best GraphQL data visualization tools - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168424 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-graphql" id="post-168424">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/samson-omojola/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/samson-omojola/">
Samson Omojola <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an experienced software engineer. I love creating applications with responsive, beautiful, intuitive, state-of-the-art designs. I'm skilled in HTML, CSS, JavaScript, Ionic, React, PHP, Laravel, and Flutter.</span>
</div>
</div>
<h1 class="posttitle">Exploring the best GraphQL data visualization tools</h1>
<p>
<span class="post-date"><time class="post-date">
April 27, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2861</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/Exploring-best-GraphQL-data-visualization-tools.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Exploring The Best Graphql Data Visualization Tools"                /> <article class="article-post">
<p>GraphQL is a popular, powerful query tool for APIs. It provides developers with an efficient and flexible way to access and manipulate data in our databases.</p>
<p>With its increasing popularity, many developers are seeking new ways to better understand and visualize their GraphQL data. There are a number of visualization tools that satisfy this need efficiently.</p>
<p>In this article, we will discuss using GraphQL Voyager, GraphiQL, and Altair for data visualization, exploring how you can use these tools to enhance your workflow and gain deeper insights into your data. We will cover:</p>
<ul>
<li><a href="#use-cases-graphql-data-visualizers">Use cases for GraphQL data visualizer</a></li>
<li><a href="#exploring-data-graphql-voyager">Exploring data with GraphQL Voyager</a></li>
<li><a href="#graphql-voyager-caveats-consider">GraphQL Voyager caveats to consider</a></li>
<li><a href="#using-powerful-graphiql-features-construct-queries">Using powerful GraphiQL features to construct queries</a></li>
<li><a href="#important-considerations-using-graphiql">Important considerations while using GraphiQL</a></li>
<li><a href="#using-graphql-altair-work-apis">Using GraphQL Altair to work with APIs</a></li>
<li><a href="#considerations-graphql-altair">Considerations to keep in mind for GraphQL Altair</a></li>
</ul>
<h2 id="use-cases-graphql-data-visualizers">Use cases for GraphQL data visualizers</h2>
<p>GraphQL data visualizers are useful tools for various scenarios, including:</p>
<ul>
<li>Debugging GraphQL APIs</li>
<li>Collaborating with teams</li>
<li>Optimizing performance</li>
<li>Understanding API dependencies</li>
<li>Testing GraphQL APIs</li>
</ul>
<p>Let’s explore each of these use cases in more detail now.</p>
<p>GraphQL data visualizers can help developers <a href="https://blog.logrocket.com/debugging-graphql-apis-insomnia/">debug their GraphQL APIs</a> by giving them visual representations of the data they fetch from their servers. These data visualization tools show you how your queries work and which data they call so you can easily identify any mistakes or errors in your query.</p>
<p>You can also use GraphQL data visualizers to highlight performance issues in your queries and show you how you can optimize said queries. With GraphQL data visualization tools, it’s easy to debug your APIs and ensure that your app works as expected.</p>
<p>In a team setting, different members bring various skills from different areas of focus. A GraphQL data visualizer can help team members communicate better and leverage the team’s collective expertise more efficiently by allowing them to visualize the API and its components.</p>
<p>By visualizing a GraphQL API, developers can identify performance bottlenecks and inefficiencies in query execution. They can then optimize queries to improve response times and overall application performance.</p>
<p>In complex systems with multiple APIs and microservices, a GraphQL visualizer can help developers visualize dependencies between different services, making it easier to identify and resolve issues or bottlenecks.</p>
<p>Data visualization tools also help in testing GraphQL Apis by providing a good view of expected responses and identifying issues with queries.</p>
<h2 id="exploring-data-graphql-voyager">Exploring data with GraphQL Voyager</h2>
<p>One of the most popular and open source data visualization tools for GraphQL is <a href="https://ivangoncharov.github.io/graphql-voyager/">GraphQL Voyager</a>.</p>
<p>GraphQL Voyager provides an interactive visual representation of your GraphQL schema and allows you to look through your API by visually browsing its object types, fields, and relationships.</p>
<p>With its simple and user-friendly interface, you can zoom into and out of your schema easily, search for particular fields, and see data types.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h3>GraphQL Voyager demo</h3>
<p>GraphQL Voyager works by parsing a GraphQL schema and generating a visual representation of its types and fields.</p>
<p>The tool uses the GraphQL introspection query to obtain the schema, making it compatible with any GraphQL server that supports this query. Once the schema is obtained, GraphQL Voyager generates the interactive graph that visualizes the schema.</p>
<p>Let’s explore an example of GraphQL Voyager in action.</p>
<p>Navigate to the <a href="https://ivangoncharov.github.io/graphql-voyager/">live demo of GraphQL Voyager on GitHub</a> to see APIs represented as interactive graphs. For this example, we’ll analyze the Star Wars API.</p>
<p>Click on the “Change Schema” button on the top left side of the screen and select Star Wars:</p>
<p><img             class="aligncenter size-full wp-image-168426 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img1-GraphQL-Voyager-select-Star-Wars-preset.png" alt="Graphql Voyager Interface Showing Popup Window To Select Preset Scheme With Star Wars Api Highlighted" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168426" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img1-GraphQL-Voyager-select-Star-Wars-preset.png" alt="Graphql Voyager Interface Showing Popup Window To Select Preset Scheme With Star Wars Api Highlighted" width="730" height="351"  /></noscript></p>
<p>You’ll see a graphical representation of the schema in the center of the screen. Familiarize yourself with the interface.</p>
<p>The pane on the left side of the screen lists all the object types in the Star Wars schema. The pane on the right side of the screen shows information about the currently selected type or field.</p>
<p>This schema is based on the Star Wars universe and includes object types for characters, films, planets, and other entities from the Star Wars saga. Each type is depicted as a node in the graph.</p>
<p>You can click on a node to view the type details, which include the type name, description, and the fields it contains. The lines you see on the interface represent the relationships between different types and fields in the schema.</p>
<p>In GraphQL, types are connected to each other through their fields, and these connections are represented as edges in the visualization. The edges are directed, meaning that they point from the type that declares the field to the type that the field returns:</p>
<p><img             class="aligncenter size-full wp-image-168427 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img2-GraphQL-Voyager-types-connected-fields-directed-edges.png" alt="Graphql Voyager Interface Showing Arrows Pointing From Type Declaring Field To Type Returned By Field" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168427" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img2-GraphQL-Voyager-types-connected-fields-directed-edges.png" alt="Graphql Voyager Interface Showing Arrows Pointing From Type Declaring Field To Type Returned By Field" width="730" height="351"  /></noscript></p>
<h3>Select a type to explore</h3>
<p>To explore a type in your schema, you can click on its name in the left pane. This will highlight the type in the graphical representation and display its information in the right pane.</p>
<p>As an example, select <code>Film</code>. The <code>Film</code> object type represents a film in the Star Wars universe. It has fields like <code>title</code>, <code>episodeID</code>, <code>openingCrawl</code>, <code>characters</code>, etc.</p>
<p>In GraphQL Voyager, fields are used to define the data that can be queried for a given type. You can explore the fields in <code>Film</code> by clicking on them in the left-side pane.</p>
<p>Once you have selected a field to explore, you can view its details, which include the field name, description, and the arguments it takes. You can also view the type of data returned by the field. Also, it highlights the fields in the right pane.</p>
<h3>View relationships between types</h3>
<p>You can explore relationships between types by clicking on the links between types in the graphical representation. This will highlight the related types and display information about the relationship in the right pane.</p>
<h3>Search for types and fields</h3>
<p>If you have a large schema with many types and fields, you can use the search box at the top of the screen to search for specific types and fields. Just type in a few letters of the name of the type or field you’re looking for, and GraphQL Voyager will filter the list of types and fields accordingly:</p>
<p><img             class="aligncenter size-full wp-image-168428 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img3-GraphQL-Voyager-search-bar.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Left To Search Bar" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168428" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img3-GraphQL-Voyager-search-bar.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Left To Search Bar" width="730" height="351"  /></noscript></p>
<h3>Filtering your search</h3>
<p>GraphQL Voyager offers various options to help you refine your search further:</p>
<p><img             class="aligncenter size-full wp-image-168429 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img4-GraphQL-Voyager-refine-search-options.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Down To Filter Options To Refine Search" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168429" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img4-GraphQL-Voyager-refine-search-options.png" alt="Graphql Voyager Interface With Bold Black Outlined Arrow Pointing Down To Filter Options To Refine Search" width="730" height="351"  /></noscript></p>
<p>The “Sort by Alphabet” setting allows you to sort the nodes — i.e., types — in the schema alphabetically. By default, the nodes are sorted by the order in which they appear in the schema, but using this option can make it easier to find a specific node in a large schema.</p>
<p>Relay is a framework developed by Facebook for building data-driven React applications. If your schema includes Relay-specific types and fields, you can use the “Skip Relay” setting to exclude them from the visualization. This can be useful if you are not using Relay in your application and want to simplify the visualization.</p>
<p>The “Skip deprecated” setting allows you to exclude deprecated fields and types from the visualization. Deprecated fields and types are marked with a strikethrough in the visualization, but excluding them entirely can make the visualization easier to read.</p>
<p>By default, GraphQL Voyager only shows the top-level fields of each type in the visualization. Enabling the “Show leaf fields” setting will also show any “leaf” fields, which are fields that do not have any subfields. This can make it easier to see all the fields available on a type at a glance.</p>
<h2 id="graphql-voyager-caveats-consider">GraphQL Voyager caveats to consider</h2>
<p>It’s important to consider compatibility when working with GraphQL Voyager. This data visualization tool relies on introspection queries to generate its visual representation of the schema. If the GraphQL server doesn’t support introspection, Voyager won’t work.</p>
<p>When it comes to performance, Voyager generates a visual representation of the entire schema, which can be a challenge for large and complex schemas. Make sure you monitor performance metrics and optimize queries as needed.</p>
<h2 id="using-powerful-graphiql-features-construct-queries">Using powerful GraphiQL features to construct queries</h2>
<p><a href="https://github.com/graphql/graphiql">GraphiQL is an interactive web-based IDE</a> that provides a user-friendly interface for writing and executing GraphQL queries.</p>
<p>The GraphiQL IDE is widely used by developers, as it allows you to explore and visualize your GraphQL schema by displaying the useable types and fields, as well as their documentation. With its built-in support explorer, you can easily view the information you need to write your queries.</p>
<p>One of the most useful features of GraphiQL is its power to provide real-time feedback on the GraphQL queries that are constructed.</p>
<p>As a user types a query into GraphiQL, it will immediately highlight any syntax errors and provide autocomplete suggestions for fields and arguments. This makes it easy to quickly write complex queries without having to remember the right syntax for each field.</p>
<p>Let’s go ahead and explore the GraphiQL interface with the <a href="http://graphql.org/swapi-graphql">Star Wars API (SWAPI)</a> as an example.</p>
<p>SWAPI is a public API that provides data about Star Wars movies, characters, planets, and more. We will use GraphiQL to explore SWAPI and demonstrate some of the key features of the GraphiQL interface.</p>
<p>The GraphiQL interface has two main sections — the query editor and the results pane:</p>
<p><img             class="aligncenter size-full wp-image-168430 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img5-GraphiQL-interface.png" alt="Graphiql Interface Showing Query Editor Panel On Left And Result Pane On Right With Smaller Labels For Other Interface Elements" width="730" height="349"    /><noscript><img               class="aligncenter size-full wp-image-168430" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img5-GraphiQL-interface.png" alt="Graphiql Interface Showing Query Editor Panel On Left And Result Pane On Right With Smaller Labels For Other Interface Elements" width="730" height="349"  /></noscript></p>
<p>The query editor section is where we construct our GraphQL queries. The results pane displays the results of our queries in real-time. In the results pane, we can find the data that is returned by the API. <a href="https://blog.logrocket.com/handling-graphql-errors-like-a-champ-with-unions-and-interfaces/">Errors or warnings that are generated by our queries</a> appear there as well.</p>
<p>Now let’s start with a simple query that retrieves information about all Star Wars films. To construct this, we will use the <code>allFilms</code> field and retrieve three fields under it. Run the query below in the editor:</p>
<pre class="language-graphql hljs">{
    allFilms{
      totalCount
      films{
        director
      }
    }
}
</pre>
<p>Click the “play” button after pasting. This will transport the query to the SWAPI API, and display the results in the results pane. As you can see, the results pane displays the data that is returned by the API:</p>
<p><img             class="aligncenter size-full wp-image-168431 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img6-GraphiQL-results-pane.png" alt="Graphiql Interface Showing Data Returned By Api In Results Pane On Right" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168431" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img6-GraphiQL-results-pane.png" alt="Graphiql Interface Showing Data Returned By Api In Results Pane On Right" width="730" height="351"  /></noscript></p>
<h3>Using autocomplete in GraphiQL</h3>
<p>One of the most powerful features of GraphiQL is its autocomplete functionality. As you type a query into the query editor, GraphiQL will provide autocomplete suggestions for fields and arguments. This way, you can create queries quickly without needing to remember the precise syntax for each field.</p>
<p>You can try creating a query that retrieves information about Luke Skywalker to test how autocomplete operates. As you start to type, GraphiQL will display autocomplete suggestions for available fields and arguments:</p>
<pre class="language-graphql hljs">query {
  person(personID: 1) {
    name
    birthYear
    homeworld {
      name
    }
    species {
      name
    }
  }
}
</pre>
<p>The GraphiQL interface includes a number of buttons, features, and settings that allow you to customize GraphQL queries and view the data that is returned by the API. Here are some of the features you’ll find on the GraphiQL interface:</p>
<p><img             class="aligncenter size-full wp-image-168432 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img7-GraphiQL-interface-features.png" alt="Graphiql Interface Showing Query Editor Panel On Left, Result Pane On Right, Icon To Open Documentation Explorer Indicated With Arrow And Label At Top Left, Icon To Open Query History Indicated With Arrow And Label Underneath, And Query Variables Panel Indicated With Small Label At Bottom Left" width="730" height="349"    /><noscript><img               class="aligncenter size-full wp-image-168432" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img7-GraphiQL-interface-features.png" alt="Graphiql Interface Showing Query Editor Panel On Left, Result Pane On Right, Icon To Open Documentation Explorer Indicated With Arrow And Label At Top Left, Icon To Open Query History Indicated With Arrow And Label Underneath, And Query Variables Panel Indicated With Small Label At Bottom Left" width="730" height="349"  /></noscript></p>
<p>The query editor is the main text editor in the GraphiQL interface where you can write and edit your GraphQL queries. The editor program provides syntax highlighting, autocompletion, and error highlighting, making it easy to construct and debug complex queries.</p>
<p>The “play” button is one of the most important features on the GraphiQL interface, this button executes the GraphQL query that is currently in the query editor. When the Play button is clicked, your query is sent to the API and the results are displayed in the results pane.</p>
<p>The query variables panel allows you to define variables that can be used in your GraphQL queries. Variables can be defined with different data types and can be either required or optional.</p>
<p>As previously mentioned, the results panel displays the information that is returned by the GraphQL API in response to the query. The results are displayed in JSON format and can be expanded or collapsed to view nested data.</p>
<p>The query history feature allows you to save and manage your GraphQL queries. Saved queries can be easily retrieved and executed with a single click.</p>
<p>The settings panel allows you to customize the behavior of GraphiQL. The settings include options for enabling or disabling query validation, enabling or disabling schema introspection, and changing the theme of the interface:</p>
<p><img             class="aligncenter size-full wp-image-168433 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img8-GraphiQL-settings-panel.png" alt="Graphiql Interface With Settings Panel Open In Popup" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168433" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img8-GraphiQL-settings-panel.png" alt="Graphiql Interface With Settings Panel Open In Popup" width="730" height="351"  /></noscript></p>
<p>Finally, the documentation explorer feature provides support for the GraphQL API, including descriptions of types, fields, and arguments. This feature allows users to quickly and easily search for information about the API and its model.</p>
<h2 id="important-considerations-using-graphiql">Important considerations while using GraphiQL</h2>
<p>Security is important in modern development. GraphiQL is a tool for debugging and exploring GraphQL APIs, but it’s not intended for production use. Ensure that proper security measures are in place when you’re interacting with sensitive data.</p>
<p>Additionally, like GraphQL Voyager, GraphiQL also relies on introspection queries to generate its interface. If the GraphQL server doesn’t support introspection, GraphiQL won’t work.</p>
<h2 id="using-graphql-altair-work-apis">Using GraphQL Altair to work with APIs</h2>
<p>GraphQL Altair is a powerful GraphQL client that provides a user-friendly interface for working with GraphQL APIs. It’s an open source project that allows developers to easily interact with GraphQL APIs, making it easier to test, debug, and optimize queries.</p>
<p>Altair’s interface is divided into several panels that allow you to perform various tasks. Here are the key features of the Altair interface:</p>
<p><img             class="aligncenter size-full wp-image-168434 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img9-GraphQL-Altair-interface-features.png" alt="Graphql Altair Interface With Features Labeled In Orange" width="730" height="297"    /><noscript><img               class="aligncenter size-full wp-image-168434" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img9-GraphQL-Altair-interface-features.png" alt="Graphql Altair Interface With Features Labeled In Orange" width="730" height="297"  /></noscript></p>
<p>The endpoint panel allows you to enter the endpoint URL of the GraphQL API you want to connect to. Once you enter the URL, you can click the “Send Request” button to connect to the API and start working with its schema.</p>
<p>The query editor panel allows you to construct your GraphQL queries, mutations, and subscriptions. Altair provides you with syntax highlighting, code auto-completion, and error highlighting to make it easier to write valid GraphQL queries.</p>
<p>The panel labeled “VARIABLES” allows you to define variables that can be used in your GraphQL queries. You can create variables with different data types, and Altair will automatically generate the right input fields in the query editor:</p>
<p><img             class="aligncenter size-full wp-image-168435 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img10-GraphQL-Altair-variables-panel.png" alt="Graphql Altair Interface With User Shown Typing Into Variables Panel At Bottom Left" width="730" height="302"    /><noscript><img               class="aligncenter size-full wp-image-168435" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img10-GraphQL-Altair-variables-panel.png" alt="Graphql Altair Interface With User Shown Typing Into Variables Panel At Bottom Left" width="730" height="302"  /></noscript></p>
<p>Altair also has a feature for setting headers that allows you to add custom headers to your GraphQL requests. You can define headers for authentication, caching, or other purposes:</p>
<p><img             class="aligncenter size-full wp-image-168436 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img11-GraphQL-Altair-custom-headers.png" alt="Graphql Altair Interface With Popup Panel For Setting Custom Headers For Graphql Requests" width="730" height="298"    /><noscript><img               class="aligncenter size-full wp-image-168436" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img11-GraphQL-Altair-custom-headers.png" alt="Graphql Altair Interface With Popup Panel For Setting Custom Headers For Graphql Requests" width="730" height="298"  /></noscript></p>
<p>The response panel displays the response from the GraphQL API you sent your query. You receive the response in either a JSON or a tree view format.</p>
<p>If you select “Docs” at the top right of your screen, to the left of the “Send Request” button, you should see a panel that provides a graphical representation of the GraphQL schema of the API you are working with. You can use this panel to explore the various types, fields, and relationships in the schema:</p>
<p><img             class="aligncenter size-full wp-image-168437 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img12-GraphQL-Altair-docs-panel.png" alt="Graphql Altair With Panel Opened After Selecting Docs At Top Right Of Screen To View Graphical Representation Of Graphql Schema For Currently Used Api" width="730" height="299"    /><noscript><img               class="aligncenter size-full wp-image-168437" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img12-GraphQL-Altair-docs-panel.png" alt="Graphql Altair With Panel Opened After Selecting Docs At Top Right Of Screen To View Graphical Representation Of Graphql Schema For Currently Used Api" width="730" height="299"  /></noscript></p>
<p>The “Settings” panel allows you to customize the appearance and behavior of Altair. You can tinker with settings such as theme, font size, and query timeout.</p>
<p><img             class="aligncenter size-full wp-image-168439 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img13-GraphQL-Altair-settings-panel.png" alt="Graphql Altair Interface With Popup Panel For Settings" width="730" height="351"    /><noscript><img               class="aligncenter size-full wp-image-168439" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img13-GraphQL-Altair-settings-panel.png" alt="Graphql Altair Interface With Popup Panel For Settings" width="730" height="351"  /></noscript></p>
<p>Altair keeps a history of all the queries you have executed, making it easy to revisit previous queries and results. It also provides real-time validation of your GraphQL queries, helping you to highlight errors and syntax issues as you write your queries.</p>
<p>Finally, Altair also provides an easy way to export your GraphQL queries as code snippets in various programming languages.</p>
<h3>Demo of GraphQL Altair features</h3>
<p>To see how Altair works, we can use any online demo of GraphQL Altair with the <a href="https://countries.trevorblades.com/">Trevorblades API</a>.</p>
<p>Open the <a href="https://altair.sirmuel.design/">GraphQL Altair demo page</a>. In the “Endpoint” panel on the left-hand side of the page, paste the following endpoint URL:</p>
<pre class="language-graphql hljs">https://countries.trevorblades.com/
</pre>
<p>Next, click on the “Send Request” button to connect to the Trevorblades API endpoint. If everything is set up correctly, you should see the schema of the API displayed in the right-side panel.</p>
<p>To test a query, mutation, or subscription, click on the “Query” button at the top of the page. This will open the query editor, where you can enter your GraphQL query.</p>
<p>Next, enter a GraphQL query for the <code>countries</code> API in the editor. For example, you can try the following query to get information about all the countries in the API:</p>
<pre class="language-graphql hljs"> query {
      countries {
        code
        name
        currency
      }
    }
</pre>
<p>After you have entered your query, click on the “Send Request” button to execute it. The results of your query will be displayed in the response pane beside the query editor.</p>
<h2 id="considerations-graphql-altair">Considerations to keep in mind for GraphQL Altair</h2>
<p>Altair has a slightly steeper learning curve than Voyager or GraphiQL, as it offers a greater range of features and customization options. This means you may need to invest time in learning the interface and functionality of Altair before you can fully benefit from it.</p>
<p>Furthermore, Altair requires additional dependencies to be installed, such as the Altair GraphQL client library. Ensure that you have the necessary dependencies installed and configured correctly to avoid any issues or errors.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When it comes to visualizing data for GraphQL, there are several great options available.</p>
<p>GraphQL Voyager offers a visually stunning representation of your GraphQL schema, while GraphiQL provides a straightforward and user-friendly interface. Altair, on the other hand, offers advanced features for debugging and testing your GraphQL queries.</p>
<p>Ultimately, the best data visualizer for GraphQL depends on your specific needs and preferences. Whether you’re looking for a simple and intuitive tool or a more advanced debugging and testing environment, there’s a data visualizer out there that’s right for you.</p>
<p>No matter which tool you choose, it’s important to remember that data visualization is a crucial part of working with GraphQL. By using a high-quality data visualizer, you can gain deeper insights into your data, identify potential issues more easily, and streamline your development process.</p>
<p>Don’t be afraid to try out different options and find the one that works best for you!</p><div class="code-block code-block-24" >
<div class="blog-plug inline-plug graphql-plug"><h2>Monitor failed and slow GraphQL requests in production</h2>While GraphQL has some features for debugging requests and responses, making sure GraphQL reliably serves resources to your production app is where things get tougher. If you’re interested in ensuring network requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/graphql-signup" target="_blank">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer"><img src="https://files.readme.io/69aa835-Image_2019-11-09_at_1.28.05_PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://files.readme.io/69aa835-Image_2019-11-09_at_1.28.05_PM.png"/></noscript><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic GraphQL requests to quickly understand the root cause. In addition, you can track Apollo client state and inspect GraphQL queries' key-value pairs.</p>LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/graphql-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-25 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-25 .fadeOut {
    opacity:0 !important;
}

.code-block-25 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168424" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168424" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168424" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/samson-512x512-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/samson-omojola/">
Samson Omojola <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an experienced software engineer. I love creating applications with responsive, beautiful, intuitive, state-of-the-art designs. I'm skilled in HTML, CSS, JavaScript, Ionic, React, PHP, Laravel, and Flutter.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/graphql/">#graphql</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/building-custom-maps-react-native-mapbox/" rel="prev">Building custom maps with React Native Mapbox</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/stakeholder-analysis-template-examples-frameworks/" rel="next">What is stakeholder analysis? Template, examples, frameworks</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/exploring-best-graphql-data-visualization-tools/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Firebase vs. Supabase: Choosing the right tool for your project - LogRocket Blog</title>
			<link>https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Firebase vs. Supabase: Choosing the right tool for your project - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/">Firebase vs. Supabase: Choosing the right tool for your project - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-34656 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-firebase" id="post-34656">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/davidatanda/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/06/david-atanda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/06/david-atanda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/davidatanda/">
David Atanda <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Building scalable applications on the web.</span>
</div>
</div>
<h1 class="posttitle">Firebase vs. Supabase: Choosing the right tool for your project</h1>
<p>
<span class="post-date"><time class="post-date">
April 5, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2834</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="482" src="https://blog.logrocket.com/wp-content/uploads/2021/02/Screen-Shot-2021-02-18-at-3.56.22-PM.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="firebase-vs-supabase"                /> <article class="article-post">
<p><em><strong>Editor’s Note:</strong> This post was reviewed on 5 April 2023 for accuracy and now includes information about scalability, security, and authentication in Firebase and Supabase. </em><em>Since publication, <a href="https://github.com/supabase/supabase/releases">Supabase has consistently released updates</a>, which include Supabase Clippy, support for serving multiple Edge Functions at the same time, new versions of  supabase-js and supabase-flutter, and more. To learn more about Firebase, <a href="https://blog.logrocket.com/tag/firebase/">check out our archive</a> and <a href="https://firebase.google.com/docs">the official docs</a>.</em></p>
<p>Backend-as-a-Service (BaaS) is a service model in which developers outsource all the behind-the-scenes aspects of web or mobile development. This is so they can focus on writing and maintaining the frontend on a plug-and-play basis and avoid the stress of writing server-side code.</p>
<p>BaaS platforms provide software for server-side activities, such as authentication, database management, real-time updating, storage, hosting, and push notifications (for mobile apps). Over the last decade, we’ve seen the rise of companies offering these services, including <a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a>, <a href="http://supabase.io" target="_blank" rel="noopener">Supabase</a>, <a href="https://parseplatform.org/" target="_blank" rel="noopener">Parse</a>, <a href="https://www.back4app.com/" target="_blank" rel="noopener">Back4app</a>, and <a href="https://aws.amazon.com/amplify/" target="_blank" rel="noopener">AWS Amplify</a>, to name a few.</p>
<p>Although these backend services essentially offer the same solution, they use different backend technologies. For many developers, this is a deciding factor when picking the best service for a given project.</p>
<p>For instance, Back4App offers both REST and GraphQL APIs out of the box, while Firebase uses NoSQL syntax and does not offer GraphQL out of the box.</p>
<p>In this tutorial, we’ll focus on Firebase and the open source alternative, Supabase. We’ll start by exploring each platform individually, then we’ll compare Firebase vs. Supabase and offer some tips on how to choose the best tool for your project.</p>
<p>We’ll cover the following in detail:</p>
<ul>
<li><a href="#what-firebase">What is Firebase?</a>
<ul >
<li><a href="#firebases-build-phase">Firebase’s build phase</a></li>
<li><a href="#firebases-release-monitor-phase">Firebase’s release and monitor phase</a></li>
<li><a href="#firebases-engage-phase">Firebase’s engage phase</a></li>
</ul>
</li>
<li><a href="#installing-firebase">Installing Firebase</a></li>
<li><a href="#authentication-firebase">Authentication with Firebase</a></li>
<li><a href="#firebase-firestore">The Firebase Firestore</a></li>
<li><a href="#storage-firebase">Storage in Firebase</a></li>
<li><a href="#using-firebase-web-sdk">Using the Firebase Web SDK</a></li>
<li><a href="#what-supabase">What is Supabase?</a></li>
<li><a href="#installing-supabase">Installing Supabase</a></li>
<li><a href="#firebase-vs-supabase-which-right-project">Firebase vs. Supabase: Which is right for your project?</a>
<ul >
<li><a href="#importing-preexisting-data">Importing preexisting data</a></li>
<li><a href="#pricing">Pricing</a></li>
<li><a href="#relational-database-vs-nosql-database">Relational database vs. NoSQL database</a></li>
<li><a href="#firebase-extensions">Firebase extensions</a></li>
<li><a href="#data-migration">Data migration</a></li>
<li><a href="#scalability-security">Scalability and security</a></li>
</ul>
</li>
</ul>
<h2 id="what-firebase">What is Firebase?</h2>
<p>Firebase was initially founded in 2011 by James Tamplin and Andrew Lee. Google acquired the platform in 2014, and it’s now the company’s flagship offering for app development.</p>
<p>Firebase’s first product was the Firebase Realtime Database, an API that synchronizes application data across iOS, Android, and the web while storing it on Firebase’s cloud. Firebase has evolved into a full-blown BaaS service with products for both development and post-development phases.</p>
<p>Firebase offers products in three phases:</p>
<ol>
<li>Build</li>
<li>Release and monitor</li>
<li>Engage</li>
</ol>
<p><img             class="aligncenter size-full wp-image-134614 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-three-phases.png" alt="Firebase Three Phases" width="730" height="261"    /><noscript><img               class="aligncenter size-full wp-image-134614" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-three-phases.png" alt="Firebase Three Phases" width="730" height="261"  /></noscript></p>
<p>Each phase represents a different stage of development. Firebase has created specific products for each of these phases.</p>
<h3 id="firebases-build-phase">Firebase’s build phase</h3>
<p>The build phase covers products that provide backend infrastructure for active development. These include core services used while building an application, such as authentication, storage, realtime database, Firestore, hosting, cloud functions, cloud messaging, remote config, and Firebase ML.</p>
<p>Let’s explore these features in more detail:</p>
<ul>
<li>Authentication: Firebase provides an authentication service that allows users to register and create accounts on your application, including third-party sign-in services</li>
<li>Storage: Firebase offers storage as part of the firebase platform for user-generated media (images, videos, audio, etc.)</li>
<li>Hosting: Firebase allows hosting, making it possible to build and host your application within the same cloud service</li>
<li>Cloud functions: Cloud functions enable you to run your server-side code directly on Google Cloud, all in a controlled and secured environment</li>
<li>Firestore: Firestore is a NoSQL database that allows you to structure your database however you like and query it at lightning speed</li>
<li>Cloud messaging: This enables you to send push notifications to your users easily on a plug-and-play basis</li>
<li>Remote config: You can use feature flags to determine which features are turned on or off and, ultimately, what makes it to production</li>
<li>Real-time database: This is also a NoSQL database that enables you to sync data in real-time and make seamless changes within your project</li>
<li>Firebase ML: You have access to machine learning APIs that can help you train and deploy your custom models</li>
</ul>
<h3 id="firebases-release-monitor-phase">Firebase’s release and monitor phase</h3>
<p>Firebase tools in the Release and Monitor category are used to monitor the application after it has been developed and released. These tools include the following:</p>
<ul>
<li>Firebase Crashlytics: This monitors crashes, reports them in real-time, and provides insight to help you pinpoint the cause and address issues</li>
<li>Google Analytics: This utility Provides detailed analytics making it easy to study user behavior and act on them</li>
<li>Firebase Performance Monitoring: This data helps you understand performance issues from the user’s perspective, including network behavior and latencies</li>
<li>Remote config: You can customize and make changes to your app on the fly. This feature is most often used in mobile apps</li>
<li>Test lab: This feature enables you to create simulations on both real and virtual devices to test your app before release</li>
<li>App distribution: You can easily distribute exclusive versions of your app to trusted testers</li>
</ul>
<h3 id="firebases-engage-phase">Firebase’s engage phase</h3>
<p>The products in this category are mostly used for mobile apps. They help you engage your users, optimize the user experience, and keep your users happy.</p>
<p>On the paid plan, Firebase provides cool extensions to help you build your app, add functionality, and deploy faster. There are too many to list here, but the most important features include the following.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<ul>
<li>Resize images: This extension lets you set a specified size that can be used to resize images uploaded to the Firebase storage. It stores both the original and resized images in the same storage bucket</li>
<li>Export collections to BigQuery: You can export specified Firestore collections to store in <a href="https://cloud.google.com/bigquery" target="_blank" rel="noopener">BigQuery</a>, a cloud warehouse that allows you to query your database really fast. The process of exporting is incremental, so your Firestore and BigQuery are always in sync</li>
<li>Trigger email: You can trigger an email to be sent to a given mail based on the contents of a document written to a specified Firestore collection</li>
<li>Translate text: You can translate strings in your Firestore into multiple languages because the source language of the string is automatically detected through the Cloud Translation API</li>
<li>Delete user data: This extension automatically deletes a user’s data once the user is removed from your authenticated users. You can configure this extension to delete user data from any or all of the following: Cloud Firestore, realtime database, or cloud storage. Triggering the extension to delete data is keyed to the user’s UUID, which is unique to every authenticated user</li>
</ul>
<h2 id="installing-firebase">Installing Firebase</h2>
<p>To get started with Firebase, we have to create a Firebase account and start a new project:</p>
<p><img             class="aligncenter size-full wp-image-134616 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-first-project.png" alt="Firebase First Project Home Screen" width="730" height="418"    /><noscript><img               class="aligncenter size-full wp-image-134616" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-first-project.png" alt="Firebase First Project Home Screen" width="730" height="418"  /></noscript></p>
<p>Once we create the project, we now have access to the available Firebase’s features to use in our app.</p>
<p><img             class="aligncenter size-full wp-image-134618 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-project-home.png" alt="Firebase First Project Inside Home Screen" width="730" height="418"    /><noscript><img               class="aligncenter size-full wp-image-134618" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-project-home.png" alt="Firebase First Project Inside Home Screen" width="730" height="418"  /></noscript></p>
<p>Next, we can go on to register the app for the web. To do this, click on the web icon and add Firebase to the app.</p>
<p><img             class="aligncenter size-full wp-image-134621 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-web-icon.png" alt="Firebase Web Icon" width="730" height="416"    /><noscript><img               class="aligncenter size-full wp-image-134621" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-web-icon.png" alt="Firebase Web Icon" width="730" height="416"  /></noscript></p>
<p>Once we add the app’s name, it’ll show us how to install the Firebase SDK on our client side. Plus, we now get access to the unique credentials for the app.</p>
<p><img             class="aligncenter size-full wp-image-134626 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/add-firebase-sdk-1.png" alt="Add Firebase Sdk" width="730" height="388"    /><noscript><img               class="aligncenter size-full wp-image-134626" src="https://blog.logrocket.com/wp-content/uploads/2021/02/add-firebase-sdk-1.png" alt="Add Firebase Sdk" width="730" height="388"  /></noscript></p>
<p>Then, we can go on to set up our features for this app. The primary features that are needed within most applications include:</p>
<ol>
<li>Authentication</li>
<li>Firestore</li>
<li>Storage</li>
</ol>
<h2 id="authentication-firebase">Authentication with Firebase</h2>
<p>As mentioned earlier, Firebase provides an auth service that lets us manage the user’s authentication data directly through Firebase. They also provide different sign-in methods that we can use to authenticate the users.</p>
<p><img             class="aligncenter size-full wp-image-134628 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-authentication.png" alt="Firebase Authentication Screen" width="730" height="418"    /><noscript><img               class="aligncenter size-full wp-image-134628" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-authentication.png" alt="Firebase Authentication Screen" width="730" height="418"  /></noscript></p>
<p>These methods include traditional mediums like email/password, phone number/SMS, or even an anonymous method for guests. Also, Firebase allows us to authenticate our users using third-party providers like Google, Twitter, Github, etc.</p>
<h2 id="firebase-firestore">The Firebase Firestore</h2>
<p>The Firebase Firestore is a NoSQL database provided by Firebase as part of its offering. One upside is that it allows you to perform CRUD operations directly on your database from your client-side SDK.</p>
<p><img             class="aligncenter size-full wp-image-134630 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/cloud-firestore.png" alt="Cloud Firestore" width="730" height="725"    /><noscript><img               class="aligncenter size-full wp-image-134630" src="https://blog.logrocket.com/wp-content/uploads/2021/02/cloud-firestore.png" alt="Cloud Firestore" width="730" height="725"  /></noscript></p>
<h2 id="storage-firebase">Storage in Firebase</h2>
<p>Firebase also provides a cloud storage feature that allows us to store media files. A simple use case is the ability to upload an image to the cloud and instantly get a URL for the image.</p>
<p><img             class="aligncenter size-full wp-image-134632 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-storage.png" alt="Firebase Storage" width="730" height="725"    /><noscript><img               class="aligncenter size-full wp-image-134632" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-storage.png" alt="Firebase Storage" width="730" height="725"  /></noscript></p>
<p>A common scenario when building apps is when we need to upload an image and attach it to its related data. We can go on to upload the image, get back the image URL, and save it as text within a document in the Firestore database.</p>
<h2 id="using-firebase-web-sdk">Using the Firebase Web SDK</h2>
<p>Once all of this is set up on our Firebase dashboard, we need to integrate this directly into our frontend. We’ll start by installing Firebase SDK into our project. We can do this using the credentials we got earlier.</p>
<p>We go into our app and install the firebase package from npm.</p>
<pre class="language-bash hljs">npm install firebase
</pre>
<p>Next, we import <code>firebase</code> and initialize our firebase config code.</p>
<pre class="language-javascript hljs">import { initializeApp } from 'firebase/app'
import { getAuth } from 'firebase/auth'

const firebaseConfig = {
    apiKey: "API-KEY",
    authDomain: "AUTH-DOMAIN",
    databaseURL: "DATABASE-URL",
    projectId: "PROJECT-ID",
    storageBucket: "STORAGE-BUCKET",
    messagingSenderId: "MESSAGING-SENDER-ID",
    appId: "APP-ID"
  };

  // Initialize Firebase
initializeApp(firebaseConfig);
</pre>
<p>After initializing Firebase into our client side, let’s go over how to use it to add authentication. In the same file, we’ll install our <code>getAuth</code> from <code>firebase/auth</code> and also initialize it.</p>
<pre class="language-javascript hljs">import firebase from "firebase/app";
import { getAuth } from 'firebase/auth'

const firebaseConfig = {
    apiKey: "API-KEY",
    authDomain: "AUTH-DOMAIN",
    databaseURL: "DATABASE-URL",
    projectId: "PROJECT-ID",
    storageBucket: "STORAGE-BUCKET",
    messagingSenderId: "MESSAGING-SENDER-ID",
    appId: "APP-ID"
  };
// Initialize Firebase
 initializeApp(firebaseConfig)

// Initialize Firebase auth
const auth = getAuth()
</pre>
<p>We can sign up new users on the app using their email and password. We have to pass the user’s <code>email</code> and <code>password</code> as arguments to the <code>auth.createUserWithEmailAndPassword()</code> method.</p>
<pre class="language-javascript hljs">auth.createUserWithEmailAndPassword(auth, email, password)
  .then((res) => {
    let user = res.user;
  })
  .catch((error) => {
    console.log(error.code);
    console.log(error.message);
  });
</pre>
<p>Let’s now use Firestore to add data to our database. We’ll create a database collection called <code>names</code> and add users’ names.</p>
<pre class="language-javascript hljs">import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { doc, setDoc } from "firebase/firestore"; 

// Config and initialize Firebase as shown above

const firebaseConfig = {
    // ...
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

const db = getFirestore(app);

async function addDocs () {
  try {
    const addedDocs = await setDoc(doc(db, "names", "Doe"), {
    fullName: "John Doe",
    city: "London",
    country: "UK"
    });
    console.log("Document's ID: ", addedDocs.id);
  } catch (error) {
    console.error("Error adding document to DB: ", error);
  }
} 
</pre>
<p>Finally, to store a media file, we can get the metadata and store it in our cloud storage.</p>
<pre class="language-javascript hljs">import { initializeApp } from "firebase/app";
import { getStorage, ref, uploadBytes } } from "firebase/storage";

// Initialize Firebase 
const firebaseConfig = {
  // ...
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);


// Initialize cloud storage and get a reference to the service
const storage = getStorage(app);
const storageRef = ref(storage, 'images/logo.png');
const metadataFile = {
  contentType: 'image/png',
};

const uploadImage = uploadBytes(storageRef, file, metadataFile);
</pre>
<h2 id="what-supabase">What is Supabase?</h2>
<p><a href="https://github.com/supabase/supabase" target="_blank" rel="noopener">Supabase</a> describes itself as an open source alternative to Firebase. It’s designed to help developers spin up their backend within minutes. Supabase’s mantra is “Build in a weekend, scale to millions.”</p>
<p><img             class="aligncenter size-full wp-image-134634 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-home.png" alt="Supabase Home" width="730" height="304"    /><noscript><img               class="aligncenter size-full wp-image-134634" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-home.png" alt="Supabase Home" width="730" height="304"  /></noscript></p>
<p>At the time of writing, Supabase products available for use include a Postgres database and authentication service, storage, and Edge functions (serverless functions for backend logic). Supabase and all its tools are mainly open source.</p>
<p><img             class="aligncenter size-full wp-image-134636 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-options.png" alt="Supabase Options" width="730" height="619"    /><noscript><img               class="aligncenter size-full wp-image-134636" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-options.png" alt="Supabase Options" width="730" height="619"  /></noscript></p>
<p><a href="https://blog.logrocket.com/getting-started-with-postgres-in-your-react-app/" target="_blank" rel="noopener">The Postgres database comes with database-related tools</a>, including real-time listening to database changes and an interface for managing them. Plus, Supabase provides instant APIs and syntax that is somewhat similar to Firebase. <a href="https://blog.logrocket.com/building-the-simplest-crud-out-there-with-entity-management/" target="_blank" rel="noopener">This helps us handle CRUD operations</a> in a straightforward pattern so we can focus on building rather than rewriting repetitive CRUD code.</p>
<p>The Postgres database is in the form of a table that allows us to store structured and related data like we would on any spreadsheet. Interestingly, when setting up a project, we can import an existing spreadsheet as our Postgres database.</p>
<h2 id="installing-supabase">Installing Supabase</h2>
<p>To make use of Supabase in our application, we’ll have to set it up on the dashboard. First, we need to create a new project.</p>
<p><img             class="aligncenter size-full wp-image-134638 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-new-project.png" alt="Supabase New Project" width="730" height="634"    /><noscript><img               class="aligncenter size-full wp-image-134638" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-new-project.png" alt="Supabase New Project" width="730" height="634"  /></noscript></p>
<p>Once the project is ready, click on the <strong>SQL editor</strong> button.</p>
<p><img             class="aligncenter size-full wp-image-134640 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/sql-editor.png" alt="Supabase Sql Editor Button" width="730" height="634"    /><noscript><img               class="aligncenter size-full wp-image-134640" src="https://blog.logrocket.com/wp-content/uploads/2021/02/sql-editor.png" alt="Supabase Sql Editor Button" width="730" height="634"  /></noscript></p>
<p>Under the <strong>Quick start</strong> section, there are sample scripts for projects we can run. The aim is to get started quickly and create a database for the project.</p>
<p><img             class="aligncenter size-full wp-image-134642 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/quick-start.png" alt="Supabase Quick Start" width="730" height="691"    /><noscript><img               class="aligncenter size-full wp-image-134642" src="https://blog.logrocket.com/wp-content/uploads/2021/02/quick-start.png" alt="Supabase Quick Start" width="730" height="691"  /></noscript></p>
<p>Let’s select a simple project: A to-do list. It directs us to a <strong>SQL Editor</strong> page. Once we get on this page, we can just click the <strong>Run</strong> button.</p>
<p><img             class="aligncenter size-full wp-image-134645 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-run.png" alt="Supabase Run Option" width="730" height="738"    /><noscript><img               class="aligncenter size-full wp-image-134645" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-run.png" alt="Supabase Run Option" width="730" height="738"  /></noscript></p>
<p>This creates a simple to-do list table that we can then populate with our data.</p>
<p><img             class="aligncenter size-full wp-image-134647 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-table.png" alt="Supabase Table" width="730" height="693"    /><noscript><img               class="aligncenter size-full wp-image-134647" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-table.png" alt="Supabase Table" width="730" height="693"  /></noscript></p>
<p>Now that we’ve set up our to-do list table, the final step is to pull this data from our client side. To do this, we need to get two variables from our dashboard <strong>Project URL</strong> and <strong>API</strong> <strong>key</strong>. We can get that by clicking on <strong>Settings > API</strong>.</p>
<p><img             class="aligncenter size-full wp-image-134650 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-settings-api.png" alt="Supabase Settings Api Setting" width="730" height="590"    /><noscript><img               class="aligncenter size-full wp-image-134650" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-settings-api.png" alt="Supabase Settings Api Setting" width="730" height="590"  /></noscript></p>
<p>We can then save it as part of our environmental variables, in our <code>.env</code> file.</p>
<p>Now, let’s install Supabase using its <code>npm</code> package.</p>
<pre class="language-bash hljs">npm install @supabase/supabase-js
</pre>
<p>Next, we import it into our project and pull the data from the <code>todos</code> table.</p>
<pre class="language-javascript hljs">import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.APP_SUPABASE_URL
const supabaseAnonKey = process.env.APP_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseAnonKey)

const getTodo = async () => {
  try {
    let { data, error } = await supabase.from('todos').select('*')
    if(data) {
      return data
    }
    if(error) {
      throw error
    }
  }
  catch (error) {
    console.log(error)
  }
}
</pre>
<p>The <code>getTodo</code> function returns data from our <code>todos</code> table and also returns an <code>error</code> if that’s the case.</p>
<h2 id="firebase-vs-supabase-which-right-project">Firebase vs. Supabase: Which is right for your project?</h2>
<p>Now that we’ve explained how Firebase and Supabase work individually, let’s dissect and compare both technologies and examine when we should use Supabase over Firebase.</p>
<h3 id="importing-preexisting-data">Importing preexisting data</h3>
<p>With Supabase, we can easily import a CSV or copy and paste a spreadsheet to kickstart the project. This is great if we’re migrating data from another platform to Supabase.</p>
<p><img             class="aligncenter size-full wp-image-134653 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-preexisting-data.png" alt="Supabase Import Preexisting Data" width="730" height="273"    /><noscript><img               class="aligncenter size-full wp-image-134653" src="https://blog.logrocket.com/wp-content/uploads/2021/02/supabase-preexisting-data.png" alt="Supabase Import Preexisting Data" width="730" height="273"  /></noscript></p>
<p>Firebase doesn’t offer inbuilt services that enable us to directly upload bulk data. The best we can do is use a third-party node script or something similar, which looks hackish. Plus, we will have to convert our CSV (or whatever format) to JSON before doing anything at all.</p>
<h3 id="pricing">Pricing</h3>
<p>Supabase is an open source product, meaning it’s currently free. The Supabase team plans to charge for hosting when it is released. There are also contribution plans for individuals and enterprises to help sponsor the product.</p>
<p>Firebase, on the other hand, is not free. The free Spark plan is generous, making it a good fit for side projects that don’t generate any serious traffic. Enterprise applications would need to get on the Blaze plan (pay-as-you-go) to get access to the complete offering, including Firebase extensions and more space for database and storage.</p>
<h3 id="relational-database-vs-nosql-database">Relational database vs. NoSQL database</h3>
<p>Supabase is a relational database whereas Firebase is a NoSQL database. The most appropriate database for your project depends on what kind of app you’re building.</p>
<p>Relational databases are useful when data is related, rigid, and needs to be consistent every time. On the other hand, it might be better to use NoSQL if we have flexible data with different data types and we need to move fast.</p>
<p>Both database types have their pros and cons. For instance, NoSQL databases could be repetitive, but querying the database is fast. That’s why it’s used for search engines and social media feeds. Consistency and performance are two big factors.</p>
<h3 id="firebase-extensions">Firebase extensions</h3>
<p>Firebase provides <a href="https://firebase.google.com/products/extensions?authuser=3&amp;hl=enhttps://firebase.google.com/products/extensions?authuser=3&amp;hl=en" target="_blank" rel="noopener">official extensions</a> that can help us integrate directly with other relevant services like Stripe, Google play, Algolia, Twilio, Mailchimp, etc.</p>
<p><img             class="aligncenter size-full wp-image-134655 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-extensions.png" alt="Firebase Extensions" width="730" height="430"    /><noscript><img               class="aligncenter size-full wp-image-134655" src="https://blog.logrocket.com/wp-content/uploads/2021/02/firebase-extensions.png" alt="Firebase Extensions" width="730" height="430"  /></noscript></p>
<p>Direct integrations like this help us minimize work and abstract certain functionalities that we’d have needed to implement ourselves if we use Supabase.</p>
<h3 id="data-migration">Data migration</h3>
<p>When dealing with enterprise applications, data migration is often a priority, especially as the company scales.</p>
<p>Data migration on a NoSQL database without schema or an ORM such as Firebase could prove difficult compared to using a relational database, which is available with Supabase. It’s even harder when we’re already in production.</p>
<p>You can download all our data and schema as a <code>.sql</code> file in Supabase from the backup section on the dashboard. Alternatively, you can dump the latest data from the command line using <code>pg_dump</code>.</p>
<p>Choosing the right BaaS is heavily dependent on your project’s functional requirements and growth potential. If you’re building a big project, you should do your research to understand the constraints associated with each BaaS platform. This will help you avoid technical debt in the future.</p>
<h3 id="scalability-security">Scalability and security</h3>
<p>Considering the points we’ve highlighted above, we can say both services are relatively scalable. Scalability in this context will now be heavily dependent on the design of the app’s data architecture. Although, the upside that Supabase has, in this case, is mainly around the fact that it uses the Postgres database and its data migration steps.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this post, we covered the basics of Firebase vs. Supabase. We talked about their general architectures, how to install them, and overviewed the main functions and features of both options. We also compared the two side-by-side across a variety of criteria.</p>
<p>Thanks for reading!</p><div class="code-block code-block-1" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-34656" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-34656" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-34656" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/06/david-atanda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/06/david-atanda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/davidatanda/">
David Atanda <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Building scalable applications on the web.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/firebase/">#firebase</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/user-onboarding-how-to-create-smooth-experience/" rel="prev">User onboarding: How to create a smooth user experience</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/create-beautiful-stroked-text-css/" rel="next">Can you create beautiful stroked text in CSS?</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/firebase-vs-supabase-choosing-right-tool-project/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Get started with libSQL, a next-gen fork of SQLite - LogRocket Blog</title>
			<link>https://blog.logrocket.com/libsql-next-gen-fork-sqlite/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/libsql-next-gen-fork-sqlite/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Get started with libSQL, a next-gen fork of SQLite - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/libsql-next-gen-fork-sqlite/">Get started with libSQL, a next-gen fork of SQLite - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-163703 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized" id="post-163703">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/glaubercosta/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2023/03/glauber-costa.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2023/03/glauber-costa.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/glaubercosta/">
Glauber Costa <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Glauber is the founder and CEO of ChiselStrike, makers of Turso: the SQLite-compatible Edge database powered by libSQL. He is a veteran of high-performance and low-level systems, with extensive contributions to Linux Kernel, KVM Hypervisor, and ScyllaDB NoSQL database.</span>
</div>
</div>
<h1 class="posttitle">Get started with libSQL, a next-gen fork of SQLite</h1>
<p>
<span class="post-date"><time class="post-date">
March 31, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2931</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/getting-started-libsql-next-gen-fork-sqlite-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Getting Started libSQL Next-Gen Fork SQLite"                /> <article class="article-post">
<p>There is no database in the world that’s more widely used than SQLite. While this is a <a href="https://sqlite.org/mostdeployed.html">statement</a> made by the project itself, it is easy to believe — SQLite runs everywhere. It’s small, self-contained, and has a reputation for extremely high quality. It also has available source code. After all, it is the 21st century and developers expect to at least see the source code for tools that they rely on.</p>
<p>With that much usage, you might expect SQLite to have contributors from many companies and a robust development ecosystem. But you’d be wrong.</p>
<p>SQLite <a href="https://sqlite.org/copyright.html">claims to be</a> “open source, not open contribution”. There are less than 30 contributors in the whole history of the project, with the vast majority of the contributions made by just three individuals. This is in stark contrast to, for example, the Linux Kernel, <a href="https://www.linux.com/news/30-linux-kernel-developers-30-weeks-glauber-costa/">where I spent the first 10 years of my career</a>, which is also a piece of software that is used everywhere, from cars and IoT devices to supercomputers.</p>
<p>In this article, I’ll introduce you to <a href="https://libsql.org/">libSQL</a>, an open source, open contribution fork of SQLite. I’ll review how to get started with <a href="https://github.com/libsql/sqld">sqld</a>, the networked version of libSQL. Finally, I’ll walk through a tutorial example, demonstrating how to use libSQL with Express.js and Vue.js to build a simple movie list application.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#what-is-libsql">What is libSql?</a></li>
<li><a href="#getting-started-libsql">Getting started with libSQL</a>
<ul >
<li><a href="#installing-binaries">Installing binaries</a></li>
<li><a href="#basic-usage">Basic usage</a></li>
<li><a href="#native-clients">Native clients</a></li>
<li><a href="#replication">Replication</a></li>
</ul>
</li>
<li><a href="#libsql-demo-movie-list-app">libSQL demo: Movie list app</a>
<ul >
<li><a href="#running-seeding">Running and seeding</a></li>
<li><a href="#marking-movies-watched">Marking movies as watched</a></li>
<li><a href="#testing">Testing</a></li>
</ul>
</li>
<li><a href="#what-next">What’s next?</a></li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow along with the tutorial portion of this article, you will need the following:</p>
<ul>
<li>pnpm and Node.js installed on your system</li>
<li>an <a href="https://www.omdbapi.com/apikey.aspx">OMDb API key</a></li>
</ul>
<h2 id="what-is-libsql">What is libSQL?</h2>
<p>libSQL is an open source, open contribution of SQLite created by my team at ChiselStrike. We aim to evolve libSQL to suit many more use cases than those for which SQLite was originally designed.</p>
<p>There are changes happening to our industry that make SQLite a perfect fit for use cases it wasn’t initially intended for, and that may not necessarily be on the SQLite team’s radar. These changes are largely driven by the exponential growth and computing power and storage we’ve seen in the last decade (e.g., yesterday’s big data fits in today’s smartphones). In addition, there’s the Web Edge, represented by platforms like Vercel, Netlify, and Cloudflare.</p>
<p>The Web Edge has significantly fewer resources than the cloud, so full-fledged database replication is expensive. Lightweight embeddable databases are perfect for that, except that you need to actually replicate the data, making it available as soon as possible for queries.</p>
<p>While other solutions exist for using SQLite in a networked fashion, they operate under the constraint that SQLite has to be used as is. My position is that the best technical solutions would involve changes to SQLite to accommodate those requirements. I also believe that an open contribution environment can lead to great developments in unexpected directions.</p>
<h2 id="getting-started-libsql">Getting started with libSQL</h2>
<p>In this article, we’ll cover sqld, the networked version of libSQL. sqld is designed to offer a local development experience that can be easily upgraded to a production-ready, networked database that works well in serverless and edge environments.</p>
<p>Because edge functions are usually very restricted in what they can do, access to sqld happens mostly over HTTP.</p>
<p>Let’s see how it works.</p>
<h3 id="installing-binaries">Installing the binaries</h3>
<p>If you use Homebrew, you can install sqld, like so:</p>
<pre class="language-bash hljs">brew tap libsql/sqld
brew install sqld-beta
</pre>
<p>For instructions on how to build sqld from source, <a href="https://github.com/libsql/sqld">see the docs</a>.</p>
<h3 id="basic-usage">Basic usage</h3>
<p>Now let’s create a local instance of sqld, listening on <code>127.0.0.1:8000</code>:</p>
<pre class="language-bash hljs">sqld -d /tmp/data.db --http-listen-addr=127.0.0.1:8000
</pre>
<p>This will start sqld in standalone mode. Because it works over HTTP, it can be queried with common tools, including curl. First, let’s make sure it’s working:</p>
<pre class="language-bash hljs">$ curl -s -d '{"statements": ["select 1"] }' \
        http://127.0.0.1:8000
[{"results":{"columns":["1"],"rows":[[1]]}}]
</pre>
<p>It works fine! As you can see, the result is a JSON string with similar information to what SQLite would return. A select statement returning just a literal is not very useful, though. So let’s try to query a table:</p>
<pre class="language-bash hljs">$ curl -s -d '{"statements": ["select * from movies"] }' \
        http://127.0.0.1:8000
[{"error":{"message":"no such table: movies"}}]
</pre>
<p>OK, that error message is expected — since we haven’t created any tables yet. We’ll do that soon.</p>
<h3 id="native-clients">Native clients</h3>
<p>HTTP is a universally accessible way to query sqld, but in practice, we most likely want a client library for use in an application. At this time, there are client packages available for <a href="https://www.npmjs.com/package/@libsql/client">TypeScript/JavaScript</a>, <a href="https://crates.io/crates/libsql-client">Rust</a>, and <a href="https://pypi.org/project/libsql-client/">Python</a>, with more to come.</p>
<p>The client libraries handle all communication over HTTP, with the option of talking to a local file or an in-memory database.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Let’s try to create the database and insert some data using one of those drivers. For this example, we’ll choose JavaScript, so the first step is to create a Node.js project and install the libSQL client:</p>
<pre class="language-bash hljs">$ mkdir demo
$ cd demo
$ pnpm init
$ pnpm install @libsql/client
</pre>
<p>This code is simple — we will create a libSQL client from a URL, and use two separate calls to the database. With the first call, we’ll create the table. With the second call, we’ll insert some movie data into the table.</p>
<p>To the best of my knowledge, the movie <em>Logging a Rocket</em> doesn’t exist, but if someone is willing to sponsor it, I’m game!</p>
<p>Here’s the code that should end up in the <code>index.js</code> file:</p>
<pre class="language-javascript hljs">const libsql = require("@libsql/client")

const create = `
create table if not exists movies (
        id integer primary key,
        title varchar(255),
        year integer default 2023,
        rated varchar(20),
        run_time varchar(20) default '120 min',
        plot text,
        genres varchar(255),
        poster varchar(255),
        watched boolean default false
)
`

const insert = `
insert into movies (title, rated, plot, watched) values (
        'logging a rocket',
        'PG-13',
        'faced with the prospect of having to workaround a solution to data distribution, a software engineer forks his favorite embedded database',
        1
)
`

async function initDb() {
        const config = {
                url: process.env.LIBSQL_URL ?? "file:test.db"
        };
        const db = libsql.connect(config);

        const cRet = await db.execute(create);
        console.log(cRet);
        const cIns = await db.execute(insert);
        console.log(cIns);
}
initDb()
</pre>
<p>Notice how we used <code>file:test.db</code> as the default URL. This means we’ll use a local file instead of doing any network calls, leaning on SQLite’s ability as an embedded database. This is a great way to test your application without setting up any external database process. Just add a SQLite database file to your CI pipelines and execute test functions that make database calls against it. Then, check to be sure the database file has the state you expect.</p>
<p>If we execute the code above without setting the <code>LIBSQL_URL</code>, we’ll see a <code>test.db</code> file generated in the current directory, and we can query it with the SQLite standard shell:</p>
<pre class="language-bash hljs">$ node index.js
{ success: true, columns: [], rows: [], meta: { duration: 0 } }
{ success: true, columns: [], rows: [], meta: { duration: 0 } }

$ sqlite3 test.db "select title from movies"
logging a rocket
</pre>
<p>Now let’s execute the code again, but this time setting the environment variable to the HTTP address of the sqld server we used previously:</p>
<pre class="language-bash hljs">$ LIBSQL_URL="http://127.0.0.1:8000" node index.js
{ columns: [], rows: [], success: true, meta: { duration: 0 } }
{ columns: [], rows: [], success: true, meta: { duration: 0 } }
</pre>
<p>Repeating the <code>curl</code> command we used to query the movies over HTTP now yields the expected result:</p>
<pre class="language-bash hljs">$ curl -s -d '{"statements": ["select title from movies"] }' \
        http://127.0.0.1:8000
[{"results":{"columns":["title"],"rows":[["logging a rocket"]]}}]
</pre>
<h3 id="replication">Replication</h3>
<p>Querying the database over HTTP is powerful, but we’re still not really edge-capable if the data is not replicated to a location close to where our end users might be.</p>
<p>To keep the previous example simple, we started sqld in standalone mode, meaning it doesn’t replicate its state anywhere. Replication in sqld works over gRPC, with the replicas asking the primary for new data since the last sync. For that to work, we need to tell the replica who the primary is.</p>
<p>Let’s stop the primary and restart it, but this time we’ll add the <code>--grpc-listen-addr</code> parameter, in order to open a gRPC port that replicas can connect to:</p>
<pre class="language-bash hljs">$ sqld -d /tmp/data.db --http-listen-addr=127.0.0.1:8000 \
        --grpc-listen-addr=127.0.0.1:5001
</pre>
<p>Because we used the same database path, the data we inserted in the previous steps is still there. Now we can initiate a new replica:</p>
<pre class="language-bash hljs">$ sqld -d /tmp/replica.db --http-listen-addr=127.0.0.1:8001 \
    --primary-grpc-url=http://127.0.0.1:5001
</pre>
<p>There are a few things to note here:</p>
<ul>
<li>The replica sqld is using a different port (<code>8001</code>) for HTTP commands</li>
<li>The <code>--primary-grpc-url</code> flag refers to the primary’s gRPC endpoint</li>
<li>The replica and the primary cannot use the same database file; in practice, this would not be an issue, since they would most likely be running on different machines</li>
</ul>
<p>Now let’s query the replica directly using port <code>8001</code>, noting the same result as the primary, without any additional work on our part:</p>
<pre class="language-bash hljs">$ curl -s -d '{"statements": ["select title from movies"] }'  http://127.0.0.1:8001
[{"results":{"columns":["title"],"rows":[["logging a rocket"]]}}]
</pre>
<p>If you’re following along, don’t shut down the sqld processes! We’ll walk through building an example application to tie this all together, and we’ll add more data to this instance soon.</p>
<p>OK, let’s put this to good use!</p>
<h2 id="libsql-demo-movie-list-app">libSQL demo: Movie list app</h2>
<p>To demonstrate how this all fits together, let’s use Express.js, Vue.js, and libSQL to build a simple application that displays information about movies. We’ll call the app Popcorn Time!</p>
<p>Popcorn Time contains a dynamic list of movies that we’d like to watch in the future. We’ll be able to add a movie from the IMDb catalog, search for movies, and mark movies that we’ve watched so they can be removed from our database.</p>
<p>We’ll add new movie entries by submitting their respective IMDb IDs, which is found in the second part of an IMDb movie page URL after /title/. In the below example, the <code>MOVIE_ID</code> is tt0800369:</p>
<p><img             class="aligncenter wp-image-163312 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-movie-page-movie-id.png" alt="IMDb Movie Page Movie ID" width="720" height="233"    /><noscript><img               class="aligncenter wp-image-163312 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/imdb-movie-page-movie-id.png" alt="IMDb Movie Page Movie ID" width="720" height="233"  /></noscript></p>
<p>To make our lives easier, we will use <a href="https://www.omdbapi.com/">OMDb</a>, a REST API service that exposes IMDb metadata.</p>
<p>For this article, we’ll primarily focus on the libSQL-intensive portions of the demo and libSQL’s interaction with Express. For the full source code and a frontend client, visit or clone the <a href="https://github.com/glommer/popcorn-time">GitHub repo</a>.</p>
<h3 id="creating-express-js-app">Creating the Express.js app</h3>
<p>To create the Express app, we’ll initialize the Express server with the following configuration for CORS, HTTP data parsing, and environment variables:</p>
<pre class="language-javascript hljs">// /index.js

const dotenv = require("dotenv");
const path = require("path");
const express = require("express");
const cors = require("cors");
const { connect, Connection } = require("@libsql/client");
dotenv.config({
  path: path.resolve(__dirname, ".env"),
});

const app = express();

// Environment variables
const port = process.env.PORT || 5001;
const dbUrl = process.env.LIBSQL_URL;
const omdbApiKey = process.env.OMDB_API_KEY;
const omdbAPIUrl = process.env.OMDB_URL;
const moviesApi = `${omdbAPIUrl}?apikey=${omdbApiKey}`;

// Database connection
const config = {
  url: dbUrl,
};
const client = connect(config);

// helper functions

// Apply plugins
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// routes

app.listen(port, () => console.log("running server on " + port));
</pre>
<blockquote><p><strong>N.B.</strong>, we’re using this set of CORS rules for local development purposes</p></blockquote>
<h3 id="running-seeding">Running and seeding</h3>
<p>After cloning the project’s repository, we’ll install all the dependencies, like so:</p>
<pre class="language-bash hljs">$ pnpm install --filter ./apps/server &amp;&amp; \
pnpm install --filter ./apps/client
</pre>
<p>As we can see above, our app lives under the apps directory, and there are two subdirectories: server and client. Inside the server directory, let’s rename the <code>.sample.env</code> file to <code>.env,</code> assign our OMDb API key to the <code>OMDB_API_KEY</code> variable, and run the Express server with the following command:</p>
<pre class="language-bash hljs">$ pnpm --filter ./apps/server dev
</pre>
<p>To initialize the project, we’ll add an <code>/init</code> route:</p>
<pre class="language-javascript hljs">app.use("/init", async function (req, res) {
  const movieTableCreationQuery = `
    create table if not exists movies(
        id integer primary key,
        title varchar(255), 
        year integer default 2023,
        rated varchar(20),
        run_time varchar(20) default '120 min',
        plot text, genres varchar(255),
        poster varchar(255),
        watched boolean default false
    )`;
  await client.execute(movieTableCreationQuery);
  const seeAvailableTables = await client.execute(
    "select name from sqlite_schema where name not like 'libsql%'"
  );
  return res.status(200).json(seeAvailableTables);
});
</pre>
<p>The client is similar to what we have already established, using the <code>LIBSQL_URL</code> environment variable to control whether we’ll use a local SQLite file or query over HTTP. Because the table may already exist, it’s important to add the if not exists clause from SQL. We also return all tables present in the database, skipping the internal tables.</p>
<p>Assuming the sqld instances we had started in the previous section are still running, let’s send a POST request to the Express server’s <code>/init</code> path to create the database’s movies table:</p>
<pre class="language-bash hljs">$ curl -X POST http://localhost:3000/init
{"columns":["name"],"rows":[["movies"]],"success":true,"meta":{"duration":0}}
</pre>
<p>Next, we need to seed the database with some actual movie data. We’ll use the seed route: <code>/seed.js</code>. We can issue POST to the <code>/seed</code> path to seed some data to our table:</p>
<pre class="language-bash hljs">$ curl -X POST http://localhost:3000/seed
"Added 10 movies!"
</pre>
<h3 id="adding-new-movies">Adding new movies</h3>
<p>To add a new movie, we need to fetch its information from the OMDb API and then add it to the database. We’ll do this by adding an <code>/add</code> route, which will respond to POST requests with an <code>imdbId</code> variable passed in the submitted JSON payload.</p>
<p>To keep the code concise, we’ll use two helper functions:</p>
<ul>
<li><code>getMovieByImdbId()</code>: Takes an IMDb movie ID as an argument and fetches the movie’s information using the OMDb API</li>
<li><code>addMovieInfoToDatabase()</code>: Adds the movie’s information to the database; this is just a normal SQL insert query</li>
</ul>
<p>The general implementation looks like this:</p>
<pre class="language-javascript hljs">app.use("/add", async function (req, res) {
  const { imdbId } = req.body;
  let responsePayload;

  if (!imdbId) {
    return res.status(422).json("imdbId is missing!");
  }

  try {
    // get movie data
    const movieInfo = await getMovieByIMDBId(imdbId);
    if (!movieInfo) {
      return res.status(404).json("Movie not available");
    }

    // Populate db
    const response = await addMovieInfoToDatabase(movieInfo, client);
    responsePayload = response?.success
      ? "Added movie"
      : "Movie not added";
  } catch (error) { /* handle errors */ }

  return res.json(responsePayload);
});
</pre>
<p>And now, let’s dive into the helper functions. Getting a movie ID is just a matter of fetching it from the OMDb API, like so:</p>
<pre class="language-javascript hljs">async function getMovieByIMDBId(movieId) {
  if (!movieId) throw "Missing arguments";

  try {
    const data = await fetch(`${moviesApi}&amp;i=${movieId}`);
    const movie = await data.json();
    return movie.Response === "False" ? null : movie;
  } catch (error) {
    console.log({ error });
    return null;
  }
}
</pre>
<p>Adding a movie’s information to the database happens with a simple SQL insert query:</p>
<pre class="language-javascript hljs">async function addMovieInfoToDatabase(movie, dbClient) {
  const {
    Title: title, Year: year, Rated: rated, Runtime: run_time,
    Plot: plot, Genre: genres, Poster: poster,
  } = movie;
  const movieAddQuery = 
    `insert into movies(title, year, rated, run_time, plot, genres, poster) values(
      ?, ?, ?, ?, ?, ?, ?
      )`;
  return dbClient.execute(movieAddQuery, [
    title, year, rated, run_time, plot, genres, poster,
  ]);
}
</pre>
<h3 id="marking-movies-watched">Marking movies as watched</h3>
<p>The <code>/update</code> route will handle logical deletes. It’s helpful to retain movies watched in the app, so we’ll just set the watched flag to <code>true</code>. The route takes a <code>movieId</code>, and just uses the SQL UPDATE query:</p>
<pre class="language-javascript hljs">app.use("/update", async function (req, res) {
  const { movieId, watched } = req.body;
  let responsePayload;
  const watchedInt = watched ? 1 : 0;

  try {
    const movieWatchStateUpdateQuery =
      "update movies set watched = ? where id = ?";
    const response = await client.execute(movieWatchStateUpdateQuery, [
      watchedInt,
      movieId,
    ]);
    responsePayload = response.success
      ? "Movie updated"
      : "Failed to update movie";
  } catch (error) { /* handle errors */ }}

  return res.json(responsePayload);
});
</pre>
<h3 id="viewing-searching">Viewing and searching</h3>
<p>Generating a list of the movies is easy. The route is <code>/movies</code>, and all it does is issue a SELECT statement. As we discussed in the <code>/update</code> route, there is a watched flag. To create our movie watch list, we’ll filter based on that flag being <code>false</code>:</p>
<pre class="language-javascript hljs">app.use("/movies", async function (req, res) {
  let responsePayload;
  try {
    const unwatchedMoviesSelectQuery =
      "select * from movies where watched = false order by id desc";
    responsePayload = await client.execute(unwatchedMoviesSelectQuery);
  } catch (error) {
    console.log({ error });
    responsePayload = null;
  }

  return res.json(responseDataAdapter(responsePayload));
});
</pre>
<p>Searching is similar. We’ll add a very simple search under the /search route, without any external search engines. Because we’re searching our watch list, we’ll also filter for movies where <code>watched = false</code>:</p>
<pre class="language-javascript hljs">function responseDataAdapter(data) {
  if (!data?.columns || !data?.rows) {
    return data;
  }

  const { columns, rows } = data;
  const formattedData = [];

  for (const row of rows) {
    const rowData = {};
    for (const key of columns.keys()) {
      rowData[columns[key]] = row[key];
    }
    formattedData.push(rowData);
  }

  return formattedData;
}
</pre>
<p>And now, it’s popcorn time!</p>
<h3 id="testing">Testing</h3>
<p>With these routes set, we can start making API calls to the server to see if everything works.</p>
<p>Let’s try changing the value of <code>LIBSQL_URL</code> inside the server’s <code>.env</code> file to that of a replica database to test data synchronicity between the replica and primary databases.</p>
<p>Here’s the full demonstration of a frontend client consuming data from our Express server:</p>
<p><img             class="aligncenter wp-image-163662 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/libsql-demo-app-vue-express.gif" alt="libSQL Demo App Vue Express" width="720" height="787"  /><noscript><img               class="aligncenter wp-image-163662 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/libsql-demo-app-vue-express.gif" alt="libSQL Demo App Vue Express" width="720" height="787"/></noscript></p>
<h2 id="what-next">What’s next?</h2>
<p>There are many other things that I’d love to tackle next, both in the libSQL core and sqld projects. Here are some examples:</p>
<ul>
<li>Native support for <a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type">CRDTs</a>, similar to the <a href="https://github.com/vlcn-io">VLCN</a> project. This will allow for fast, local writes, for applications that can sustain lower consistency</li>
<li>Asynchronous APIs, allowing for better performance</li>
<li>A new and revamped SQL shell, for a more ergonomic shell experience</li>
</ul>
<p>For a comprehensive view, check out the issues list for <a href="https://github.com/libsql/libsql/issues">libSQL</a> core and <a href="https://github.com/libsql/sqld/issues">sqld</a>. But mostly, I want libSQL to be a home for all builders who believe there is room to take a lean, mean, and SQLite-compatible embedded database to new heights.<br/>
I’d love to see your contribution!</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-163703" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/libsql-next-gen-fork-sqlite/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/libsql-next-gen-fork-sqlite/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-163703" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/libsql-next-gen-fork-sqlite/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-163703" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/libsql-next-gen-fork-sqlite/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2023/03/glauber-costa.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2023/03/glauber-costa.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/glaubercosta/">
Glauber Costa <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Glauber is the founder and CEO of ChiselStrike, makers of Turso: the SQLite-compatible Edge database powered by libSQL. He is a veteran of high-performance and low-level systems, with extensive contributions to Linux Kernel, KVM Hypervisor, and ScyllaDB NoSQL database.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
</ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/keeping-an-eye-on-competition-tiktok-vs-instagram-case-study/" rel="prev">Keeping an eye on competition: TikTok vs. Instagram case study</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/what-is-rapid-application-development-rad/" rel="next">What is rapid application development (RAD)?</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/libsql-next-gen-fork-sqlite/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Getting started with React Native and ClojureScript - LogRocket Blog</title>
			<link>https://blog.logrocket.com/getting-started-react-native-clojurescript/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/getting-started-react-native-clojurescript/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Getting started with React Native and ClojureScript - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/getting-started-react-native-clojurescript/">Getting started with React Native and ClojureScript - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168278 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react-native" id="post-168278">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/kingsleyubah/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/kingsleyubah/">
Kingsley Ubah <span class="btn follow">Follow</span></a>
<span class="author-description d-block">21. Web Developer. Technical Writer. African in Tech.</span>
</div>
</div>
<h1 class="posttitle">Getting started with React Native and ClojureScript</h1>
<p>
<span class="post-date"><time class="post-date">
April 25, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1794</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/Getting-started-React-Native-ClojureScript.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Getting Started With React Native And Clojurescript"                /> <article class="article-post">
<p>React Native is presently one of the best-known frameworks for developing cross-platform mobile apps capable of running on Android, iOS, macOS, Windows, and other platforms. ClojureScript, on the other hand, is slightly less mainstream, being most popular among functional programming enthusiasts.</p>
<p>In recent years, however, more developer teams have begun adopting ClojureScript to create dynamic web applications. The increasing popularity of the language is largely due to its concise, compact, and elegant syntax.</p>
<p>If you’re wondering how React Native and ClojureScript can be integrated together for mobile development, then this article is for you.</p>
<p>Read on to discover:</p>
<ul>
<li><a href="#brief-review-react-native-works">A brief review of how React Native works</a></li>
<li><a href="#benefits-using-clojurescript-react-native-apps">Benefits of using ClojureScript for React Native apps</a></li>
<li><a href="#outdated-methods-integrating-react-native-clojurescript">Outdated methods for integrating React Native and ClojureScript</a></li>
<li><a href="#using-starter-template-integrate-clojurescript-react-native">Using a starter template to integrate ClojureScript with React Native</a></li>
</ul>
<h2 id="brief-review-react-native-works">A brief review of how React Native works</h2>
<p>React Native is an open source framework used to develop cross-platform native applications that run on both Android and iOS. Today, thanks to contributions from developers around the world, React Native now works with major mobile platforms and Linux, macOS, Windows, etc.</p>
<p>The core element of React Native’s architecture is the “bridge,” which it utilizes to convert JavaScript code into native platform components and vice versa. This bridge allows it to access platform-specific features, such as the camera or geolocation, which enables the application to render those features natively.</p>
<p>React Native relies on some external tools and frameworks to run smoothly. An example of such a tool is Node.js.</p>
<h3>The role of Node.js in React Native apps</h3>
<p><a href="https://blog.logrocket.com/what-learn-before-learning-react-native/#jsx">React Native uses JSX</a> to let developers create their components in a similar way to writing HTML markup. However, before JSX can be interpreted, it needs to be transpiled to regular JavaScript that can be interpreted by the JavaScript Virtual Machine (JVM) in your app.</p>
<p>Note that, for bundled applications, the transpilation process automatically happens during the build process. During development, you also need a tool to transpile your JSX to JavaScript on the fly so it can then be executed by the JVM. This is the role Node.js plays.</p>
<p>Node.js transpiles your code, resolves the dependencies, and feeds the code and required modules to the React Native app. These processes take place when you launch the Metro Bundler. Both React Native and React use npm or Yarn to install third-party packages and manage project dependencies.</p>
<h2 id="benefits-using-clojurescript-react-native-apps">Benefits of using ClojureScript for React Native apps</h2>
<p>ClojureScript has a number of features that make it particularly well-suited for React Native applications. Let’s take a look at some of these features.</p>
<h3>Awesome language features</h3>
<p>ClojureScript is a functional programming language, which means that it uses functions as its primary building blocks, instead of objects. This is a huge advantage if you come from a functional background.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>It also supports immutable data structures that let you define data that cannot be changed after it has been created. This makes it easier to reason about code and helps to prevent bugs.</p>
<p>All data types in ClojureScript are checked for validity before the code is executed. This helps to prevent bugs and create maintainable code.</p>
<p>Finally, ClojureScript is designed to be interoperable with other languages. Internally, it compiles down to JavaScript, so it can be integrated with React and React Native easily.</p>
<h3>Easily readable code</h3>
<p>ClojureScript is an expressive language that takes advantage of functional programming techniques. This makes it easier for developers to read and understand code, and also quickly find and fix bugs. Take a look at the following example:</p>
<pre class="language-clojurescript hljs">(defn add-two [x]
  (+ x 2))

(add-two 3) ;; 5
</pre>
<p>With just one look, most people could easily decipher that the above function is adding <code>2</code> to the parameter <code>x</code>. The code is also very concise, which leads to a leaner codebase that’s easier to maintain.</p>
<h3>Smaller codebase size</h3>
<p>Due to ClojureScript’s concise syntax, programs written with it tend to be smaller in volume than those written in other languages, such as JavaScript.</p>
<p>For example, here’s a JavaScript function for adding together two numbers:</p>
<pre class="language-javascript hljs">const addTwoNumbers = (x, y) => {
  return x + y;
}

console.log(addTwoNumbers(1, 2));
</pre>
<p>The above code occupied five lines. The function declaration occupies three lines, the <code>console.log</code> statement occupies one line, and there’s an empty line to space the code. Now compare that to the same program written in ClojureScript:</p>
<pre class="language-clojurescript hljs">(defn add-two-numbers [x y]
  (+ x y))

(println (add-two-numbers 1 2))
</pre>
<p>In ClojureScript, the entire code takes up just four lines. This might seem like a negligible difference, but it adds up quickly when you’re building big projects with a large volume of code.</p>
<p>Using ClojureScript for your React Native application will significantly reduce the volume of code you’ll have to write, resulting in a leaner and more compact codebase, which is always a good thing for maintainability.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h2 id="outdated-methods-integrating-react-native-clojurescript">Outdated methods for integrating React Native and ClojureScript</h2>
<p>Like React Native, ClojureScript compiles to regular JavaScript under the hood. This makes it possible to integrate both tools for mobile app development. There are quite a few ways to achieve this integration. Some older methods include Re-Natal, Krell, and React Native Figwheel Bridge.</p>
<p>The <a href="https://github.com/drapanjanas/re-natal">Re-Natal command-line utility</a> is the first and best-known tool for building with ClojureScript and React Native, but it’s no longer being actively maintained.</p>
<p><a href="https://github.com/vouch-opensource/krell">Krell is a stand-alone approach</a> that uses minimal <code>deps.edn</code> and <code>build.edn</code> config to set up a REPL-based workflow that is clean and understandable.</p>
<p><a href="https://github.com/bhauman/react-native-figwheel-bridge">The </a><code><a href="https://github.com/bhauman/react-native-figwheel-bridge">react-native-figwheel-bridge</a></code><a href="https://github.com/bhauman/react-native-figwheel-bridge"> library</a> takes a simple approach to setting up React Native with ClojureScript, Figwheel, and REPL on top of a standard React Native project.</p>
<p>These methods are either no longer supported or require too many installations and configurations. As a result, any mistake can leave you lost with an app that isn’t working well.</p>
<p>In the next section, I’ll demonstrate the easiest way to set up a React Native app that uses ClojureScript — a simple method that only takes about three minutes.</p>
<h2 id="using-starter-template-integrate-clojurescript-react-native">Using a starter template to integrate ClojureScript with React Native</h2>
<p>In this section, you’ll learn how to create a React Native application that uses ClojureScript as the primary development language in less than five minutes.</p>
<p>To achieve this, we’ll use <a href="https://github.com/PEZ/rn-rf-shadow">the </a><code><a href="https://github.com/PEZ/rn-rf-shadow">rn-rf-shadow</a></code><a href="https://github.com/PEZ/rn-rf-shadow"> template</a>. This method is the easiest and fastest way to bootstrap apps that use ClojureScript with React Native.</p>
<h3>Prerequisites</h3>
<p>Note that there are different toolchains you can use to run this example project:</p>
<ul>
<li>VS Code with Calva</li>
<li>Emacs with CIDER</li>
<li>IntelliJ with Cursive REPL</li>
</ul>
<p>In this guide, I use VS Code and Calva to run the application because VS Code is the most popular IDE and the setup process is super straightforward. I also recommend doing the same to follow without issues, but if you want to use any of the other two, check out the <a href="https://github.com/PEZ/rn-rf-shadow">instructions in the official GitHub repo</a>.</p>
<p>To follow this guide, you’ll also need to install the Chrome browser on your computer to run the project on the web. If you want to run on an emulator instead, make sure you have either <a href="https://developer.apple.com/xcode/">XCode</a> or <a href="https://developer.android.com/studio">Android Studio</a> installed.</p>
<h3>Cloning the project</h3>
<p>Go under the code section in the <a href="https://github.com/PEZ/rn-rf-shadow">official code repository</a> and copy the project’s GitHub URL. Then open a command terminal, <code>cd</code> into your preferred directory, and download the repo as shown below, replacing <code>&lt;repo-url></code> with the URL you copied:</p>
<pre class="language-bash hljs">>git clone &lt;repo-url)
</pre>
<p>Once the process is complete, open the project with VS Code.</p>
<h3>Install dependencies:</h3>
<p>Launch your VS Code terminal and run the following command to install <code>shadow-cljs</code>, React Native, Expo, <code>reagent</code>, <code>re-frame</code>, and other dependencies:</p>
<pre class="language-bash hljs">npm i
</pre>
<p>It might take a while for all the packages to finish installing, so be patient.</p>
<h3>Install and set up Calva</h3>
<p>In VS Code, go to the Extensions tab, search for the <a href="https://calva.io/">Calva extension</a>, and install it. Once installed:</p>
<ul>
<li>Press <code>ctrl</code> + <code>shift</code> + <code>p</code> on your keyboard to bring up the command palette</li>
<li>Search for “Calva: Start a Project REPL and Connect (aka Jack-in)”</li>
<li>Click it, then select the <code>Hello RN Shadow</code> project</li>
</ul>
<p>The last step in the list above starts <code>shadow.js</code> in watch mode, meaning that source code changes are compiled in real time. Wait for the process to finish in the <code>output-calva.repl</code> terminal. You should see something like the below:</p>
<p><img             class="aligncenter size-full wp-image-168280 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img1-Calva-extension-setup.png" alt="Output In Terminal After Installing And Setting Up Calva And Starting Shadow Project In Watch Mode To Compile Source Code Changes In Real Time" width="730" height="441"    /><noscript><img               class="aligncenter size-full wp-image-168280" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img1-Calva-extension-setup.png" alt="Output In Terminal After Installing And Setting Up Calva And Starting Shadow Project In Watch Mode To Compile Source Code Changes In Real Time" width="730" height="441"  /></noscript></p>
<h3>Start the app</h3>
<p>Now that the REPL has been connected to your project, it’s time to run the <code>build</code> task. Follow the steps below:</p>
<ul>
<li>Press <code>ctrl</code> + <code>shift</code> + <code>p</code> on your keyboard to bring up the command palette</li>
<li>Search for “Tasks: Run build task” and click it to start up Expo</li>
<li>On the Metro Bundler UI, choose “Run on Android device/Emulator”
<ul >
<li>If you’re using XCode, choose the “Run in iOS device” option</li>
</ul>
</li>
<li>Wait for your application to start</li>
</ul>
<p>If you see a UI that looks like the one below, then everything went well:</p>
<p><img             class="aligncenter size-full wp-image-168281 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img2-Basic-React-Native-ClojureScript-app-UI.png" alt="Basic Ui For Sample React Native Clojurescript App Showing Clickable Button With Click Counter At Top" width="345" height="730"    /><noscript><img               class="aligncenter size-full wp-image-168281" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img2-Basic-React-Native-ClojureScript-app-UI.png" alt="Basic Ui For Sample React Native Clojurescript App Showing Clickable Button With Click Counter At Top" width="345" height="730"  /></noscript></p>
<p>If you run into an error, it’s most likely because you do not have Android Studio, Android SDK, or XCode installed or properly set up on your machine to run the emulator.</p>
<p>You can also run the application <a href="https://blog.logrocket.com/complete-guide-react-native-web/">on your web browser via </a><code><a href="https://blog.logrocket.com/complete-guide-react-native-web/">react-native-web</a></code> instead of an emulator. Just choose the “Run in web browser” option and the app will open in a new window.</p>
<h3>Customize the app</h3>
<p>Inside the <code>src/main/example/app.cljs</code> file, you can find the source code responsible for what is rendered on the app’s UI. The app makes use of React Native UI components as well as four modules — <code>db.cljs</code>, <code>events.cljs</code>, <code>subs.cljs</code>, and <code>widgets.cljs</code>.</p>
<p>To customize your app, you have to update the <code>app.cljs</code> file with your custom code. For demonstration purposes, replace the code in your <code>app.cljs</code> file with the following:</p>
<pre class="language-clojurescript hljs">(ns example.app
  (:require [expo.root :as expo-root]
            [re-frame.core :as rf]
            ["react-native" :as rn]
            [reagent.core :as r]))
(defn root []
  (
    [:> rn/View {:style {:flex 1
                         :justify-content :center
                         :align-items :center
                         :background-color :white}}
     [:> rn/Text {:style {:font-weight   :bold
                           :font-size     25
                           :margin-bottom 20}} "My App Title"]
     [:> rn/Text {:style {:font-weight   :bold
                           :font-size     25
                           :margin-bottom 20}} "Learn more about this app by clicking the button below"]
     [button { :style {:background-color :blue}}
       "Learn More"]     
     ]))
(defn start
  {:dev/after-load true}
  []
  (expo-root/render-root (r/as-element [root])))
(defn init []
  (rf/dispatch-sync [:initialize-db])
  (start))
</pre>
<p>In the code above, we placed two pieces of text and a button that says “Learn More” inside a React Native <code>&lt;View></code> component. We styled all the components using the <code>style</code> property.</p>
<p>This will be the result:</p>
<p><img             class="aligncenter size-full wp-image-168282 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/img3-Custom-React-Native-ClojureScript-app-UI.png" alt="React Native Clojurescript App With Ui Customizations Showing White Background, Black Intro Text, And Blue Button To Learn More" width="345" height="730"    /><noscript><img               class="aligncenter size-full wp-image-168282" src="http://blog.logrocket.com/wp-content/uploads/2023/04/img3-Custom-React-Native-ClojureScript-app-UI.png" alt="React Native Clojurescript App With Ui Customizations Showing White Background, Black Intro Text, And Blue Button To Learn More" width="345" height="730"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this introductory article, we dove into the internal workings of React Native and explored ways in which ClojureScript can be integrated into React Native apps. Then we used the <code>rn-rf-shadow</code> template to bootstrap an app in a few minutes.</p>
<p>If you need more information, you can read our article on <a href="https://blog.logrocket.com/getting-started-clojurescript-javascript-developers/">Getting Started with ClojureScript as a JavaScript developer.</a></p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168278" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/getting-started-react-native-clojurescript/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/getting-started-react-native-clojurescript/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168278" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/getting-started-react-native-clojurescript/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168278" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/getting-started-react-native-clojurescript/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/kingsleyubah/">
Kingsley Ubah <span class="btn follow">Follow</span></a>
<span class="author-description d-block">21. Web Developer. Technical Writer. African in Tech.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react-native/">#react native</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/using-reactive-variables-apollo-client/" rel="prev">Using reactive variables with Apollo Client</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/agile-team-working-agreement-examples-template/" rel="next">What is a team working agreement? Examples and template</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/getting-started-react-native-clojurescript/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Getting started with Sendbird in React Native - LogRocket Blog</title>
			<link>https://blog.logrocket.com/getting-started-sendbird-react-native/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/getting-started-sendbird-react-native/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Getting started with Sendbird in React Native - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/getting-started-sendbird-react-native/">Getting started with Sendbird in React Native - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-167823 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react-native" id="post-167823">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rupeshchaudhari/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/Rupesh_Chaudhari.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/Rupesh_Chaudhari.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rupeshchaudhari/">
Rupesh Chaudhari <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Rupesh is a programming enthusiast who is currently working with React Native to build beautiful hybrid mobile apps. He likes to solve competitive programming puzzles and enjoys gaming in his free time.</span>
</div>
</div>
<h1 class="posttitle">Getting started with Sendbird in React Native</h1>
<p>
<span class="post-date"><time class="post-date">
April 21, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2444</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="486" src="https://blog.logrocket.com/wp-content/uploads/2023/04/react-native-sendbird.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Getting Started React Native Sendbird"                /> <article class="article-post">
<p>Sendbird is a popular messaging and chat API that enables real-time communication between users. In this article, we’ll learn how to integrate <a href="https://sendbird.com/">Sendbird</a> into a React Native application to create a more engaging user experience. We’ll incorporate a chat screen that lets users chat with tech support in real-time and share images, videos, and documents for reference. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#react-native-app-structure">React Native app structure</a></li>
<li><a href="#create-react-native-app">Create a React Native app</a></li>
<li><a href="#setting-up-sendbird-account-developer-plan">Setting up a Sendbird account with the developer plan</a></li>
<li><a href="#incorporating-sendbird-sdk-react-native-app">Incorporating Sendbird SDK in a React Native App</a></li>
<li><a href="#setting-up-navigation">Setting up Navigation</a></li>
<li><a href="#creating-inner-screens">Creating inner screens</a></li>
</ul>
<h2 id="react-native-app-structure">React Native app structure</h2>
<p>Our React Native app will consist of three screens. The <code>Home Screen</code> will have a single button reading <code>Contact Us</code>. Upon clicking that button, we’ll navigate users to the <code>Contact Us</code> screen, which will contain a list of developers with whom our app users can chat to receive technical help or feedback.</p>
<p>The <code>Contact Us</code> screen will display a user called <code>Technical Support</code>. When clicked, this will either begin or resume the user’s chat with your app’s tech support staff. Finally, on the <code>Chat Screen</code>, users can chat with your app’s support staff or app developers in real-time.</p>
<p>The final app UI will look like the images below:</p>
<p><img             class="aligncenter wp-image-167855 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/final-sendbird-react-native-chat-application.gif" alt="Final Sendbird React Native Chat Application" width="480" height="899"  /><noscript><img               class="aligncenter wp-image-167855 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/final-sendbird-react-native-chat-application.gif" alt="Final Sendbird React Native Chat Application" width="480" height="899"/></noscript></p>
<p><img             class="aligncenter wp-image-167857 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/sendbird-react-native-chat-ui-technical-support.gif" alt="Sendbird React Native Chat UI Technical Support" width="600" height="692"  /><noscript><img               class="aligncenter wp-image-167857 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/sendbird-react-native-chat-ui-technical-support.gif" alt="Sendbird React Native Chat UI Technical Support" width="600" height="692"/></noscript></p>
<p>You can find the complete source code in this <a href="https://github.com/hrupesh/RNChatApp-Sendbird">GitHub repository</a>.</p>
<h2 id="create-react-native-app">Create a React Native app</h2>
<p>We’ll start by <a href="https://blog.logrocket.com/complete-guide-react-native-web/">creating a new React Native app</a>. If you’re new to React Native, you can check out the <a href="https://reactnative.dev/docs/getting-started">documentation</a> to set up your development environment. To create a React Native project, execute the command below:</p>
<pre class="language-bash hljs">npx react-native init &lt;app_name_here>
</pre>
<p>The command above will create a new React Native project in your current working directory. Execute the two commands below to install CocoaPods for iOS and JavaScript dependencies:</p>
<pre class="language-bash hljs">yarn

OR

npm i



cd ios &amp;&amp; pod install &amp;&amp; cd ..
</pre>
<p>Now, we can run the app in the simulator:</p>
<pre class="language-bash hljs">yarn ios 
OR
npm run ios

yarn android
OR
npm run android
</pre>
<p>Replace the code in <code>App.js</code> with the following code:</p>
<pre class="language-javascript hljs">import React from 'react';
import {SafeAreaView, Text} from 'react-native';

const App = () => (
  &lt;SafeAreaView>
    &lt;Text>RN Chat App&lt;/Text>
  &lt;/SafeAreaView>
);

export default App;
</pre>
<p>Once the app runs on the iOS and Android simulators, you’ll see a UI similar to the following:</p>
<p><img             class="aligncenter wp-image-167861 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/new-react-native-app-run-ios-android-simulator.png" alt="New React Native App Run Ios Android Simulator" width="730" height="1583"    /><noscript><img               class="aligncenter wp-image-167861 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/new-react-native-app-run-ios-android-simulator.png" alt="New React Native App Run Ios Android Simulator" width="730" height="1583"  /></noscript></p>
<p>Now that our app is running, we can begin integrating Sendbird’s SDK. But, before we do so, we’ll complete a few additional steps.</p>
<h2 id="setting-up-sendbird-account-developer-plan">Setting up a Sendbird account with the developer plan</h2>
<p>Before we begin, you’ll need to sign up for a Sendbird account. Once you’ve created an account, you can access the <a href="https://dashboard.sendbird.com/">Sendbird dashboard</a>, where you can create and manage your chat applications.</p>
<p>Head over to the Sendbird dashboard, log in or register with your preferred account, and create a new application in your account. After creating a new application, you can access the <code>APPLICATION_ID</code>, which we’ll use to communicate with the Sendbird SDK.</p>
<p>To integrate chat into our app, we’ll use <a href="https://sendbird.com/docs/uikit">Sendbird UIKit</a>, which provides ready-to-use UI components for chat implementation. For additional info, you can also refer to the <a href="https://sendbird.com/docs/uikit/v3/react-native/introduction/send-first-message">documentation</a>.</p>
<p>To install the Sendbird SDK and the other helper libraries, execute the command below:</p>
<pre class="language-bash hljs">npm install @sendbird/uikit-react-native \
            @sendbird/chat \
            date-fns \
            react-native-safe-area-context \
            @react-native-community/netinfo \
            @react-native-async-storage/async-storage

OR

yarn add @sendbird/uikit-react-native \
            @sendbird/chat \
            date-fns \
            react-native-safe-area-context \
            @react-native-community/netinfo \
            @react-native-async-storage/async-storage
</pre>
<p>Once the dependencies above are installed, we’ll add a few more dependencies that Sendbird uses to access React Native’s features:</p>
<pre class="language-bash hljs">yarn add react-native-video \
         react-native-permissions \
         react-native-file-access \
         react-native-image-picker \
         react-native-document-picker \
         react-native-create-thumbnail \
         @react-native-clipboard/clipboard \
         @react-native-camera-roll/camera-roll \
         @react-native-firebase/app \
         @react-native-firebase/messaging \
         @bam.tech/react-native-image-resizer

cd ios &amp;&amp; pod install &amp;&amp; cd ..
</pre>
<p>There are a few additional steps that you need to follow to set up <code>react-native-permissions</code> and <code>@react-native-firebase/app</code>. Since this tutorial is focused on chat integration, I won’t get into detail on those. But, you can follow these simple steps from their documentation to set them up:</p>
<ul>
<li><a href="https://github.com/zoontek/react-native-permissions#setup"><code>react-native-permissions</code> setup</a></li>
<li><a href="https://rnfirebase.io/#installation"><code>react-native-firebase</code> setup</a></li>
</ul>
<h2 id="incorporating-sendbird-sdk-react-native-app">Incorporating Sendbird SDK in a React Native app</h2>
<p>Now, we’ll implement platform services interfaces, which Sendbird uses to communicate with React Native features.</p>
<p>Inside the root of your project, create a new folder named <code>services</code>. Inside of it, create an <code>index.tsx</code> file. Alternately, you can execute the command below:</p>
<pre class="language-typescript hljs">mkdir services &amp;&amp; cd services &amp;&amp; touch index.tsx
</pre>
<p><img             class="aligncenter wp-image-167863 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/incorporate-sendbird-react-native-new-folder-file.png" alt="Incorporate Sendbird React Native New Folder File" width="506" height="108"    /><noscript><img               class="aligncenter wp-image-167863 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/incorporate-sendbird-react-native-new-folder-file.png" alt="Incorporate Sendbird React Native New Folder File" width="506" height="108"  /></noscript></p>
<p>Add the following code inside of <code>index.tsx</code>:</p>
<pre class="language-typescript hljs">import {
  createNativeClipboardService,
  createNativeFileService,
  createNativeMediaService,
  createNativeNotificationService,
} from '@sendbird/uikit-react-native';
import * as ImageResizer from '@bam.tech/react-native-image-resizer';
import {CameraRoll} from '@react-native-camera-roll/camera-roll';
import Clipboard from '@react-native-clipboard/clipboard';
import RNFBMessaging from '@react-native-firebase/messaging';
import * as CreateThumbnail from 'react-native-create-thumbnail';
import * as DocumentPicker from 'react-native-document-picker';
import * as FileAccess from 'react-native-file-access';
import * as ImagePicker from 'react-native-image-picker';
import * as Permissions from 'react-native-permissions';
import Video from 'react-native-video';

export const ClipboardService = createNativeClipboardService(Clipboard);
export const NotificationService = createNativeNotificationService({
  messagingModule: RNFBMessaging,
  permissionModule: Permissions,
});
export const FileService = createNativeFileService({
  fsModule: FileAccess,
  permissionModule: Permissions,
  imagePickerModule: ImagePicker,
  mediaLibraryModule: CameraRoll,
  documentPickerModule: DocumentPicker,
});
export const MediaService = createNativeMediaService({
  VideoComponent: Video,
  thumbnailModule: CreateThumbnail,
  imageResizerModule: ImageResizer,
});
</pre>
<p>In the code above, we export different services that we initialize with their respective native modules. Next, add the following code in  <code>App.js</code>:</p>
<pre class="language-javascript hljs">import AsyncStorage from '@react-native-async-storage/async-storage';
import {SendbirdUIKitContainer} from '@sendbird/uikit-react-native';
import React from 'react';
import {Text} from 'react-native';
import {
  ClipboardService,
  FileService,
  MediaService,
  NotificationService,
} from './services';

const App = () => (
  &lt;SendbirdUIKitContainer
    appId={'ENTER_YOUR_APP_ID_HERE'}
    chatOptions={{localCacheStorage: AsyncStorage}}
    platformServices={{
      file: FileService,
      notification: NotificationService,
      clipboard: ClipboardService,
      media: MediaService,
    }}
    userProfile={{
      onCreateChannel: () => {},
    }}>
    &lt;Text>RN Chat App&lt;/Text>
  &lt;/SendbirdUIKitContainer>
);
export default App;
</pre>
<p>In the code above, we wrapped our app code inside of the <code>SendbirdUIKitContainer</code> component, which is a context provider container that passes data from the chat SDK down to its child components. To make the chat work, you’ll also notice a prop called <code>appId</code>; you’ll need to paste your <code>APPLICATION_ID</code> from Sendbird here.</p>
<p>With that, we’ve successfully integrated the Sendbird SDK into our app’s code, but we haven’t utilized it anywhere. To do so, we’ll need multiple screens in our app. For that, let’s add a navigation library to our project.</p>
<h2 id="setting-up-navigation">Setting up navigation</h2>
<p>You can add any navigation library of your choice, but for this tutorial, I’ll go with <a href="https://reactnavigation.org/">React Navigation</a>. Run the command below to install React Navigation in your project:</p>
<pre class="language-bash hljs">yarn add @react-navigation/native @react-navigation/native-stack react-native-screens react-native-safe-area-context

cd ios &amp;&amp; pod install &amp;&amp; cd ..
</pre>
<p>Now that our library is set up, let’s add screens and navigation to our empty app. Create a new folder named <code>src</code>. Here, we’ll add most of our application code. Create another folder called <code>navigation</code> and a file named <code>index.tsx</code>.</p>
<p>Add the code below to the <code>src/navigation/index.tsx</code> file:</p>
<pre class="language-typescript hljs">import {NavigationContainer} from '@react-navigation/native';
import {createNativeStackNavigator} from '@react-navigation/native-stack';
import {useSendbirdChat} from '@sendbird/uikit-react-native';
import React from 'react';
import {GroupChannelCreateScreen} from '../screens/GroupChannelCreateScreen';
import {GroupChannelScreen} from '../screens/GroupChannelScreen';
import {HomeScreen} from '../screens/HomeScreen';

const RootStack = createNativeStackNavigator();

export const Navigation = () => {
  const {currentUser} = useSendbirdChat();
  return (
    &lt;NavigationContainer>
      &lt;RootStack.Navigator screenOptions={{headerShown: false}}>
        {!currentUser ? (
          &lt;RootStack.Screen name={'Home'} component={HomeScreen} />
        ) : (
          &lt;>
            &lt;RootStack.Screen
              name={'GroupChannelCreate'}
              component={GroupChannelCreateScreen}
            />
            &lt;RootStack.Screen
              name={'GroupChannel'}
              component={GroupChannelScreen}
            />
          &lt;/>
        )}
      &lt;/RootStack.Navigator>
    &lt;/NavigationContainer>
  );
};
</pre>
<p>In the code above, we show the user the <code>HomeScreen</code> until they are no longer connected with the Sendbird servers. When they are connected, then we’ll have two screens, <code>GroupChannelCreateScreen</code> and <code>GroupChannelScreen</code>. We haven’t created these files yet. Before doing so, let’s implement navigation in our <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import AsyncStorage from '@react-native-async-storage/async-storage';
import {SendbirdUIKitContainer} from '@sendbird/uikit-react-native';
import React from 'react';
import {
  ClipboardService,
  FileService,
  MediaService,
  NotificationService,
} from './services';
import {Navigation} from './src/navigation';

const App = () => (
  &lt;SendbirdUIKitContainer
    appId={'APP_ID_HERE'}
    chatOptions={{localCacheStorage: AsyncStorage}}
    platformServices={{
      file: FileService,
      notification: NotificationService,
      clipboard: ClipboardService,
      media: MediaService,
    }}
    userProfile={{
      onCreateChannel: () => {},
    }}>
    {/* Add the below code */}
    &lt;Navigation />
  &lt;/SendbirdUIKitContainer>
);
export default App;
</pre>
<h2 id="creating-inner-screens">Creating inner screens</h2>
<p>Now, we’ll create the screens for navigating throughout our app. Create a new folder called <code>screens</code> inside of <code>src</code> and create a new file called <code>HomeScreen.tsx</code>. Before writing any code in <code>HomeScreen</code>, let’s add a helper library to generate unique IDs for users:</p>
<pre>yarn add react-native-uuid
</pre>
<p>Add the following code in <code>HomeScreen.tsx</code>:</p>
<pre class="language-javascript hljs">import AsyncStorage from '@react-native-async-storage/async-storage';
import {useConnection} from '@sendbird/uikit-react-native';
import React, {useEffect, useState} from 'react';
import {
  ActivityIndicator,
  Pressable,
  SafeAreaView,
  StyleSheet,
  Text,
} from 'react-native';
import uuid from 'react-native-uuid';

export const HomeScreen: React.FC = () => {
  const {connect} = useConnection();
  const [userId, setUserId] = useState&lt;string>('');
  const [isLoading, setIsLoading] = useState&lt;boolean>(false);

  const fetchUserID = async () => {
    const USER_ID = await AsyncStorage.getItem('USER_ID');
    if (!USER_ID) {
      const uniqueId = uuid.v4().toString();
      await AsyncStorage.setItem('USER_ID', uniqueId);
      setUserId(uniqueId);
    } else {
      setUserId(USER_ID);
    }
  };

  useEffect(() => {
    fetchUserID();
  }, []);

  const handlePress = () => {
    setIsLoading(true);
    connect(userId, {nickname: userId});
  };

  return (
    &lt;SafeAreaView style={styles.container}>
      &lt;Text style={styles.text}>
        {'Click Below to Chat with our customer support'}
      &lt;/Text>
      &lt;Pressable
        disabled={isLoading}
        style={styles.button}
        onPress={handlePress}>
        {isLoading ? (
          &lt;ActivityIndicator size={'small'} color={'#000'} />
        ) : (
          &lt;Text style={styles.buttonText}>{'CONTACT US'}&lt;/Text>
        )}
      &lt;/Pressable>
    &lt;/SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  text: {
    fontWeight: '600',
    fontSize: 18,
    letterSpacing: 0.4,
    lineHeight: 22,
    color: '#222',
    textAlign: 'center',
    paddingHorizontal: 18,
    paddingVertical: 50,
  },
  button: {
    backgroundColor: '#a7f',
    padding: 18,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#222',
    alignSelf: 'center',
    justifyContent: 'center',
    alignItems: 'center',
    width: 180,
  },
  buttonText: {
    fontWeight: 'bold',
    fontSize: 16,
    color: '#222',
    letterSpacing: 0.2,
  },
});
</pre>
<p>In the code above, we generate a unique ID for the user and store it in local storage. If they already have one, then we simply update our state <code>userId</code> variable. Then, by using the <code>connect</code> method from the <code>useConnection</code> Hook, provided by <code>@sendbird/uikit-react-native</code>, the <code>userId</code> connects the user to the Sendbird SDK.</p>
<p>When the user presses the <strong><code>CONTACT US</code></strong> button, we navigate them to <code>GroupChannelCreateScreen</code>, which we’ll create now. Inside the <code>screens</code> directory, create a new file called <code>GroupChannelCreateScreen</code> and add the following code:</p>
<pre class="language-javascript hljs">import {useNavigation} from '@react-navigation/native';
import {useConnection} from '@sendbird/uikit-react-native';
import React from 'react';
import createGroupChannelCreateFragment from
  '../helpers/createGroupChannelCreateFragment';

const GroupChannelCreateFragment = createGroupChannelCreateFragment();

export const GroupChannelCreateScreen = () => {
  const navigation = useNavigation&lt;any>();
  const {disconnect} = useConnection();
  const handleBackPress = () => {
    disconnect();
  };
  const navigateToGroupChannelScreen = async channel => {
    navigation.replace('GroupChannel', {channelUrl: channel.url});
  };
  return (
    &lt;GroupChannelCreateFragment
      onCreateChannel={navigateToGroupChannelScreen}
      onPressHeaderLeft={handleBackPress}
    />
  );
};
</pre>
<p>In the code above, we used <a href="https://sendbird.com/docs/uikit/v3/react-native/key-functions/creating-a-channel/create-a-group-channel"><code>GroupChannelCreateFragment</code></a>, a UI component that displays a list of users who can be added to the newly created channel, but we’ve customized it according to our requirements. You’ll also notice that we used <code>createGroupChannelCreateFragment</code>, but we haven’t created it yet. Let’s create it first, then we’ll see what it does.</p>
<p>In <code>src</code>, create a new folder called <code>helpers</code> and add a new file called <code>createGroupChannelCreateFragment</code>. Then, paste the following code inside:</p>
<pre class="language-javascript hljs">import React from 'react';
import {Image, Text, TouchableOpacity} from 'react-native';
import {useUserList} from '@sendbird/uikit-chat-hooks';
import {
  createUserListModule,
  GroupChannelCreateFragment,
  useLocalization,
  UserListModule,
  useSendbirdChat,
} from '@sendbird/uikit-react-native';
import {
  PASS,
  SendbirdGroupChannelCreateParams,
  useFreshCallback,
  UserStruct,
} from '@sendbird/uikit-utils';

const createGroupChannelCreateFragment = &lt;UserType extends UserStruct>(
  initModule?: Partial&lt;UserListModule&lt;UserType>>,
): GroupChannelCreateFragment&lt;UserType> => {
  const UserListModule = createUserListModule&lt;UserType>(initModule);
  const TECH_SUPPORT_USER_ID: string =
    'THIS_IS_DEVELOPER_OR_TECH_SUPPORT_USER_ID';
  const HEADER_TITLE = 'CONTACT US';
  return ({
    onPressHeaderLeft,
    onBeforeCreateChannel = PASS,
    onCreateChannel,
    sortComparator,
    queryCreator,
    channelType = 'GROUP',
    renderUser,
  }) => {
    const {sdk, currentUser} = useSendbirdChat();
    const {STRINGS} = useLocalization();
    const {users, refreshing, loading, error, refresh, next} = useUserList(
      sdk,
      {
        queryCreator,
        sortComparator,
      },
    );
    const handleCreateChannelPress = async () => {
      const params: SendbirdGroupChannelCreateParams = {
        invitedUserIds: [currentUser?.userId, TECH_SUPPORT_USER_ID],
        name: 'Technical Support',
        coverUrl: 'https://picsum.photos/600/1000',
        isDistinct: true,
        isDiscoverable: false,
        isPublic: false,
        operatorUserIds: [TECH_SUPPORT_USER_ID],
      };
      const processedParams = await onBeforeCreateChannel(params, users);
      const channel = await sdk.groupChannel.createChannel(processedParams);
      onCreateChannel(channel);
    };
    const _renderUser: NonNullable&lt;typeof renderUser> = useFreshCallback(
      (user, selectedUsers, setSelectedUsers) => {
        if (queryCreator &amp;&amp; !renderUser) {
          const hasRequiredKey =
            Object.hasOwn(user, 'profileUrl') &amp;&amp;
            Object.hasOwn(user, 'nickname');
          if (!hasRequiredKey)
            throw new Error(
              'You should provide "renderUser" when providing "queryCreator"',
            );
        }
        if (renderUser)
          return renderUser(user, selectedUsers, setSelectedUsers);
        const isMe = user.userId === currentUser?.userId;
        if (isMe) return null;
        const userIdx = selectedUsers.findIndex(u => u.userId === user.userId);
        const isSelected = userIdx > -1;
        const isTechSupportUser = user.userId === TECH_SUPPORT_USER_ID;
        if (!isTechSupportUser) return null;
        return (
          &lt;TouchableOpacity
            activeOpacity={0.7}
            onPress={handleCreateChannelPress}
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              padding: 18,
              backgroundColor: '#ddd8',
            }}>
            &lt;Image
              source={{uri: 'https://picsum.photos/100'}}
              resizeMode={'contain'}
              style={{height: 40, width: 40, borderRadius: 20, marginRight: 18}}
            />
            &lt;Text
              style={{
                fontWeight: '600',
                fontSize: 20,
                lineHeight: 24,
                letterSpacing: 1,
                color: '#222',
              }}>{`${user?.nickname ?? 'USER NAME'}`}&lt;/Text>
          &lt;/TouchableOpacity>
        );
      },
    );
    return (
      &lt;UserListModule.Provider
        headerRight={() => ''}
        headerTitle={HEADER_TITLE}>
        &lt;UserListModule.Header
          onPressHeaderLeft={onPressHeaderLeft}
          onPressHeaderRight={() => {}}
        />
        &lt;UserListModule.List
          onLoadNext={next}
          users={users}
          renderUser={_renderUser}
          onRefresh={refresh}
          refreshing={refreshing}
          ListEmptyComponent={&lt;UserListModule.StatusEmpty />}
        />
      &lt;/UserListModule.Provider>
    );
  };
};

export default createGroupChannelCreateFragment;
</pre>
<p>In the code above, we created a custom fragment for listing only one user from the Sendbird dashboard. When the user selects  the user from technical support, a channel is then created for the specified user in the code and the current user.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>You also need to create an <code>Operator</code> user from your Sendbird dashboard and replace the <code>userID</code> with <code>THIS_IS_DEVELOPER_OR_TECH_SUPPORT_USER_ID</code> in the code above:</p>
<p><img             class="aligncenter wp-image-167865 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/create-operator-user-sendbird-dashboard.png" alt="Create Operator User Sendbird Dashboard" width="730" height="472"    /><noscript><img               class="aligncenter wp-image-167865 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/create-operator-user-sendbird-dashboard.png" alt="Create Operator User Sendbird Dashboard" width="730" height="472"  /></noscript></p>
<p>Now, we have just one final screen remaining, <code>GroupChannelScreen</code>. Let’s create it; inside the <code>screens</code> folder, create a new file called <code>GroupChannelScreen.tsx</code> and add the following code inside:</p>
<pre class="language-typescript hljs">import {useRoute} from '@react-navigation/native';
import {useGroupChannel} from '@sendbird/uikit-chat-hooks';
import {
  createGroupChannelFragment,
  useConnection,
  useSendbirdChat,
} from '@sendbird/uikit-react-native';
import React from 'react';

const GroupChannelFragment = createGroupChannelFragment();

export const GroupChannelScreen = () => {
  const {params} = useRoute&lt;any>();
  const {disconnect} = useConnection();
  const {sdk} = useSendbirdChat();
  const {channel} = useGroupChannel(sdk, params.channelUrl);
  if (!channel) {
    return null;
  }
  const handleBackPress = async () => await disconnect();
  return (
    &lt;GroupChannelFragment
      channel={channel}
      onChannelDeleted={handleBackPress}
      onPressHeaderLeft={handleBackPress}
      onPressHeaderRight={() => {}}
    />
  );
};
</pre>
<p>In the code above, we used <code>createGroupChannelFragment</code> from <code>@sendbird/uikit-react-native</code>. This UI component handles the chat part:</p>
<p><img             class="aligncenter wp-image-167867 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/final-react-native-sendbird-application.gif" alt="Final React Native Sendbird Application" width="480" height="899"  /><noscript><img               class="aligncenter wp-image-167867 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/final-react-native-sendbird-application.gif" alt="Final React Native Sendbird Application" width="480" height="899"/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>Integrating Sendbird into your React Native app is a straightforward process that can greatly enhance your app’s user experience. By following the steps outlined in this article, you can add a feature to chat with technical support. You can also adapt this to add even more similar features, like user-to-user chats, and create a more engaging and interactive experience for your users.</p>
<p>I hope you enjoyed this article. Thanks for reading!</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-167823" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/getting-started-sendbird-react-native/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/getting-started-sendbird-react-native/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-167823" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/getting-started-sendbird-react-native/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-167823" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/getting-started-sendbird-react-native/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/Rupesh_Chaudhari.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/Rupesh_Chaudhari.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rupeshchaudhari/">
Rupesh Chaudhari <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Rupesh is a programming enthusiast who is currently working with React Native to build beautiful hybrid mobile apps. He likes to solve competitive programming puzzles and enjoys gaming in his free time.</span>
</div>
</div>
<div class="after-post-tags">
 <ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react-native/">#react native</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/change-control-process-steps-template/" rel="prev">What is a change control process? Steps and template</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/business-model-innovation-strategies-examples/" rel="next">Guide to business model innovation: Strategies and examples</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/getting-started-sendbird-react-native/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How Tabby compares with the VS Code terminal - LogRocket Blog</title>
			<link>https://blog.logrocket.com/compare-tabby-visual-studio-code/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/compare-tabby-visual-studio-code/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How Tabby compares with the VS Code terminal - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/compare-tabby-visual-studio-code/">How Tabby compares with the VS Code terminal - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166029 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized" id="post-166029">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/popoolatemitope/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/popoolatemitope/">
Popoola Temitope <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and technical writer. I love learning about new technology and am always ready to share ideas with others.</span>
</div>
</div>
<h1 class="posttitle">How Tabby compares with the VS Code terminal</h1>
<p>
<span class="post-date"><time class="post-date">
April 5, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">3 min read</span>
<span class="wordcount">1106</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="500" src="https://blog.logrocket.com/wp-content/uploads/2023/04/comparing-tabby-vs-code.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Comparing Tabby Vs Code"                /> <article class="article-post">
<p>Developers often use a terminal to perform tasks like installing external packages, debugging, and pushing code to production. How we interact with each terminal is vital to our workflow because of their different features and use cases.</p>
<p>Although <a href="https://tabby.sh/">Tabby</a> and <a href="https://code.visualstudio.com/">VS Code</a> are very different tools overall with different purposes, each offers a unique terminal experience. In this article, we’ll explore the Tabby and VS Code terminals, comparing their features and usability. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#what-is-tabby">What is Tabby?</a></li>
<li><a href="#what-is-vscode">What is VS Code?</a></li>
<li><a href="#comparing-tabby-vs-code">Comparing Tabby with the VS Code terminal</a>
<ul >
<li><a href="#customizable-terminal">Customizable terminal</a></li>
<li><a href="#ssh-client">SSH client</a></li>
<li><a href="#debugging">Debugging</a></li>
<li><a href="#popularity">Popularity</a></li>
<li><a href="#performance">Performance</a></li>
<li><a href="#serial-terminal">Serial Terminal</a></li>
</ul>
</li>
</ul>
<h2 id="what-is-tabby">What is Tabby?</h2>
<p>Tabby is a free and open source terminal emulator designed to improve users’ workflows. Tabby is a modern alternative to traditional command-line apps like PowerShell, iTerm, and macOS Terminal, providing users with an entirely customizable terminal.</p>
<p>Tabby’s user interface is sleek and straightforward, making it an accessible option for developers. It is actively maintained and has a large community of contributors working to improve and enhance its features.</p>
<p>If you’re new to the Tabby terminal emulator, you can <a href="https://github.com/Eugeny/tabby/releases/tag/v1.0.196">download and install it</a> from the official website to explore its features.</p>
<h2 id="what-is-vscode">What is VS Code?</h2>
<p>Visual Studio Code (VS Code) is a free, open source source code editor developed by Microsoft. It has a <a href="https://blog.logrocket.com/top-10-vs-code-extensions-2021/">built-in terminal feature</a> that allows developers to access and interact with the command-line interface directly from the code editor.</p>
<p>The VS Code terminal makes the developer workflow more efficient and productive, allowing us to run commands and scripts as well as navigate through directories without leaving the code editor.</p>
<h2 id="comparing-tabby-vs-code">Comparing Tabby with the VS Code terminal</h2>
<p>Let’s explore how the Tabby terminal emulator compares with the VS Code terminal.</p>
<h2 id="customizable-terminal">Customizable terminal</h2>
<p>Tabby is a highly customizable terminal that includes features like split panes, support for multiple tabs, and the ability to customize fonts and colors. It also supports customization with CSS and keyboard shortcuts using hotkeys.</p>
<p>We can customize Tabby using the Tabby custom CSS option. The following CSS code will add color animation to the Tabby interface and change the text’s font size and color:</p>
<pre class="language-css hljs">*{
 color: pink;
 font-size:17px;
 font-family:cursive;
 animation-name: example1;
 animation-duration: 10s;
 animation-iteration-count: 30;
 }
@keyframes example1 {
  50%  {background-color:black; color:white; }
  100%  {background-color:blue;color:pink;}
}
</pre>
<p>Below is the result of the Tabby customization using the custom CSS option:</p>
<p><img             class="aligncenter wp-image-166034 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1customize-tabby-css.gif" alt="Customize Tabby CSS" width="730" height="424"  /><noscript><img               class="aligncenter wp-image-166034 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1customize-tabby-css.gif" alt="Customize Tabby CSS" width="730" height="424"/></noscript></p>
<p>Using the <code>setting.json</code> and <code>Workbench</code> configuration settings, the VS Code terminal supports multiple terminal shells, font sizes, and color schemes for customization.</p>
<p>To customize the VS Code terminal, navigate to <strong><code>Code/File</code></strong> > <strong><code>Preferences</code></strong> > <strong><code>Settings</code></strong> and open <strong><code>Settings.json</code></strong>. In the <strong><code>Settings.json</code></strong> file, add the terminal customization settings to the <code>workbench.colorCustomizations</code> configuration, as shown below:</p>
<pre class="language-json hljs">  "workbench.colorCustomizations": {
    "terminal.background": "#1a2302",
    "terminal.foreground": "#A89984",
    "terminalCursor.background": "#A89984",
    "terminalCursor.foreground": "#9d080b",
    "terminal.ansiBlack": "#1D2021",
    "terminal.fontFamily:": "cursive",
    "terminal.ansiBlue": "#0D6678",
    "terminal.ansiBrightBlack": "#665C54",
    "terminal.ansiBrightBlue": "#0D6678",
    "terminal.ansiBrightCyan": "#8BA59B"
  }
</pre>
<p>The configuration above will change the terminal background color, text color, cursor color, and more. Below is the result of customizing VS Code using the VS Code <code>Settings.json</code> file and <code>workbench.colorCustomizations</code>:</p>
<p><img             class="aligncenter wp-image-166036 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/customize-vs-code-tabby.gif" alt="Customize VS Code Tabby" width="730" height="424"  /><noscript><img               class="aligncenter wp-image-166036 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/customize-vs-code-tabby.gif" alt="Customize VS Code Tabby" width="730" height="424"/></noscript></p>
<p>Tabby and VS Code both provide a customizable terminal experience, but as a standalone terminal, Tabby still has more customization options. VS Code’s terminal is an added feature that requires basic configuration of the <code>settings</code> file for  customization.</p>
<h3 id="ssh-client">SSH Client</h3>
<p>Tabby has built-in support for <a href="https://github.com/Eugeny/tabby#ssh-client">SSH</a> connections, allowing users to easily connect to a remote server by using a public key, password, or agent-forwarding authentication method.</p>
<p>To provide SSH functionality, VS Code uses extensions. One popular extension for this purpose is <a href="https://code.visualstudio.com/docs/remote/remote-overview">Remote Development</a>, which allows users to run commands on remote servers using SSH. This extension also supports authentication methods like a public key, password, and agent forwarding.</p>
<p>To easily reconnect to a server, Tabby offers a simple interface for saving SSH details, while VS Code uses the SSH config file to save connection settings.</p>
<h3 id="debugging">Debugging</h3>
<p>The Tabby terminal has built-in DevTools that allow developers to easily debug their application code. Tabby’s debugging features include source code inspection, performance analysis, memory analysis, and more.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>VS Code is a full-featured integrated development environment (IDE) with full built-in support for debugging. It includes a debugger that supports various programming languages and frameworks with features like breakpoints, watch expressions, and call stacks.</p>
<h3 id="popularity">Popularity</h3>
<p>According to the <a href="https://survey.stackoverflow.co/2022/#worked-with-vs-want-to-work-with-new-collab-tools-worked-want">2022 Stack Overflow Developer Survey</a>, VS Code is the most popular development environment for professional developers. Over 40 percent of respondents use it regularly, <a href="https://github.com/microsoft/vscode">with over 143,000 stars on GitHub</a> at the time of writing.</p>
<p>Tabby is a relatively new terminal emulator that is not as widely known or used as VS Code. <a href="https://github.com/Eugeny/tabby">It has over 43,000 stars on GitHub</a>, which shows that it is less popular than VS Code at the time of writing, but growing quickly.</p>
<h3 id="performance">Performance</h3>
<p>Designed to be lightweight and efficient, Tabby is focused on providing a fast and responsive terminal experience, minimizing the user interface to reduce overhead and improve speed.</p>
<p>VS Code is a feature-rich editor that sometimes feels slower or heavier than Tabby Terminal. Although VS Code has been optimized over the years to improve performance, it still requires more memory and processing power than the Tabby terminal. This can be especially noticeable when working with large projects or complex codebases.</p>
<h3 id="serial-terminal">Serial Terminal</h3>
<p>Tabby Terminal has a built-in <a href="https://github.com/Eugeny/tabby#serial-terminal">Serial Terminal</a> that allows developers to interact with connected serial devices directly from the terminal. The Serial Terminal provides users with features like sending and receiving data, scrolling through history, and setting baud rates. It also allows users to configure custom terminal settings for different devices.</p>
<p>VS Code doesn’t have a built-in Serial Terminal, however, it uses the <a href="https://marketplace.visualstudio.com/items?itemName=VisualMicro.ArduinoIDEforVisualStudio">Arduino</a> extension, which provides Serial Terminal support for developers working with Arduino boards. The extension allows users to connect to and interact with Arduino boards through the Serial Monitor.</p>
<p>Tabby Terminal and VS Code both provide Serial Terminal support to users. While the Tabby terminal offers built-in Serial Terminal support with more customization options, VS Code’s Serial Terminal support is provided through an extension designed for Arduino developers. The choice between the two may depend on individual needs and preferences like the type of serial devices used and the customization level required.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Tabby and VS Code are both great terminal options, but choosing the right one will depend on the needs of your unique project. Tabby is better for developers who want a modern and customizable terminal experience, while on the other hand, VS Code is a better choice for developers who need a code editor with integrated terminal functionality.</p>
<p>I hope you enjoyed this article, and be sure to leave a comment if you have any questions. Happy coding!</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166029" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/compare-tabby-visual-studio-code/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/compare-tabby-visual-studio-code/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166029" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/compare-tabby-visual-studio-code/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166029" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/compare-tabby-visual-studio-code/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/popoolatemitope/">
Popoola Temitope <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and technical writer. I love learning about new technology and am always ready to share ideas with others.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
</ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/guide-signal-handling-rust/" rel="prev">The guide to signal handling in Rust</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/build-react-native-app-solito/" rel="next">Build a React Native app with Solito</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/compare-tabby-visual-studio-code/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to add dynamic styling and class names in Vue.js - LogRocket Blog</title>
			<link>https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to add dynamic styling and class names in Vue.js - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/">How to add dynamic styling and class names in Vue.js - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-164823 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-vue" id="post-164823">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/nefejames/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nefejames/">
Nefe James <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nefe is a frontend developer who enjoys learning new things and sharing his knowledge with others.</span>
</div>
</div>
<h1 class="posttitle">How to add dynamic styling and class names in Vue.js</h1>
<p>
<span class="post-date"><time class="post-date">
March 30, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2017</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/How-to-add-dynamic-styling-class-names-Vue-.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="How to add dynamic styling and class names in Vue.js"                /> <article class="article-post">
<p>A core aspect of a great web experience is dynamic functionality. Dynamic functionality includes user actions that change websites and applications’ behavior, appearance, or content. Some examples include changing a button’s background color on hover, adding a border to an input field on focus, switching between light and dark mode, and changing the color of a nav link when active. These subtle micro-interactions significantly <a href="https://blog.logrocket.com/category/ux-design/">improve the UX</a> of the products we build. In this article, we will learn how to add dynamic styles and class names to elements in Vue.js. Let’s get started.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#getting-started-styling-vue-js-applications">Getting started with styling Vue.js applications</a>
<ul >
<li><a href="#applying-global-styles">Applying global styles</a></li>
<li><a href="#styling-inline-css">Styling with inline CSS</a></li>
<li><a href="#array-syntax-styling">Array syntax styling</a></li>
<li><a href="#object-syntax-styling">Object syntax styling</a></li>
</ul>
</li>
<li><a href="#importance-dynamic-styles">The importance of dynamic styles</a></li>
<li><a href="#applying-dynamic-classes-form">Applying dynamic classes to a form</a></li>
<li><a href="#employing-dynamic-styles-tabs">Employing dynamic styles to <code>tabs</code></a></li>
<li><a href="#dynamic-themes-vue-js-application">Adding dynamic themes to a Vue.js application</a></li>
<li><a href="#applying-dynamic-classes-button">Applying dynamic classes to a button</a></li>
</ul>
<h2 id="getting-started-styling-vue-js-applications">Getting started with styling Vue.js applications</h2>
<p>A basic knowledge of <a href="https://blog.logrocket.com/definitive-guide-vue-3-components/">Vue.js</a> and <a href="https://blog.logrocket.com/tag/css/">CSS</a> is required to follow along with this article. It’s important to note that this is not a beginner article on <a href="https://blog.logrocket.com/theming-vue-js-with-styled-components/">how to style Vue.js applications</a>. Instead, this article focuses on how to add dynamic styles to Vue applications. Now, when it comes to styling Vue.js components, different options exist; let’s explore them.</p>
<h3 id="applying-global-styles">Applying global styles</h3>
<p>This method is helpful in scenarios where we want to apply the same styles across all the components of our application. One example is when we want all <code>&lt;p></code> elements to have the same style. To achieve this, we can attach the styles to the <code>&lt;style></code> tag in the <code>root</code> component, the <code>App.vue</code> file. Alternatively, we can also achieve this by importing a global style sheet into the entry point for our application, the <code>main.js</code> file.</p>
<h3 id="styling-inline-css">Styling with inline CSS</h3>
<p>While using inline styles is generally frowned upon, it is also a styling method we can explore. It involves applying the styles we want directly to the <code>style</code> attribute of HTML elements.</p>
<h3 id="array-syntax-styling">Array syntax styling</h3>
<p>The array syntax involves defining distinct styles, like <code>border-style</code> and <code>text-style</code> objects. These objects are then passed into an array, which we dynamically bind to the target element via Vue’s <code>:style</code> binding. This is an excellent method to use in cases where we want to group styles into different categories.</p>
<h3 id="object-syntax-styling">Object syntax styling</h3>
<p>This method is similar to inline CSS styling. However, with this method, the styles are wrapped in an object. Also, instead of using the <a href="https://blog.logrocket.com/use-attribute-selectors-css/">HTML style attribute</a>, object syntax uses the <code>:style</code> binding. To learn more about the different ways to style Vue.js applications, check out our guide to <a href="https://blog.logrocket.com/styling-a-vue-js-application-using-css/">styling a Vue.js application using CSS</a>.</p>
<h2 id="importance-dynamic-styles">The importance of dynamic styles</h2>
<p><a href="https://blog.logrocket.com/make-form-elements-dynamic-vue-js/">Dynamic styling</a> involves creating styles that change based on user input and actions. Dynamic styles are important because they give users useful visual cues that help them understand how the state of their application has changed. A common example of dynamic styling is seen in <a href="https://blog.logrocket.com/ux-design/better-form-design-ux-tips-tools-tutorial/">form fields</a>. When a user clicks a form field, the border or outline of the file changes, making it easier for the user to detect which input is in focus. Another example is form submission errors. When a user submits a form with errors, the affected inputs usually have a red border applied to them, and the error message is also displayed in red.</p>
<p>This dynamic style makes it easier for the user to spot where the error is and make the necessary correction. It would be frustrating to use applications if their styles were not dynamic and if the styles did not change in response to users’ actions. Dynamic styles are important because they greatly improve the usability of applications.</p>
<h2 id="applying-dynamic-classes-form">Applying dynamic classes to a form</h2>
<p>The first demo will cover how to apply dynamic classes to form. When a user submits the form, an error message will appear. The message will have a red color applied to it, and the input field with the error will have a red border. The GIF below shows the dynamic styles we will create:</p>
<p><img             class="aligncenter size-full wp-image-164838 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/dynamic-classes-vue-js.gif" alt="Adding Dynamic Classes in Vue.js Apps" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-164838" src="https://blog.logrocket.com/wp-content/uploads/2023/03/dynamic-classes-vue-js.gif" alt="Adding Dynamic Classes in Vue.js Apps" width="730" height="411"/></noscript></p>
<p>Let’s start with creating the <a href="https://blog.logrocket.com/form-validation-in-vue-with-vuelidate/">validation logic</a> for the form:</p>
<pre class="language-javascript hljs">&lt;script type="text/javascript">
export default {
  data() {
    return {
      errors: {},
      username: null,
      subject: null,
    };
  },
  methods: {
    validateForm(e) {
      this.errors = {};

      //check if username is empty
      if (!this.username) {
        this.errors.username = "Username is required";
      }

      //check if subject is empty
      if (!this.subject) {
        this.errors.subject = "Subject is required";
      }

      e.preventDefault();
    },
  },
};
&lt;/script>
</pre>
<p>We begin setting up the validation logic by defining three states: <code>errors</code>, <code>username</code>, and <code>subject</code>. The <code>errors</code> is an object that will hold any input field errors while <code>username</code> and <code>subject</code> will hold the values of the inputs.</p>
<p>Next, we create a <code>validateForm</code> method, which checks the form for any errors when the user submits. The method checks if any of the fields are empty, and if they are, it populates the <code>errors</code> state with the appropriate error message. Now, let’s define the <a href="https://blog.logrocket.com/when-how-to-choose-html-form-validation/">HTML structure</a> for the form and pass in the logic we created:</p>
<pre class="language-html hljs">&lt;template>
  &lt;div class="container">
    &lt;form @submit="validateForm">
      &lt;div class="formRow">
        &lt;label>Username&lt;/label>
        &lt;input
          :class="errors.username &amp;&amp; 'input-error'"
          type="text"
          name="username"
          v-model="username"
        />
        &lt;span v-if="errors.username" :class="errors.username &amp;&amp; 'error'">{{
          errors.username
        }}&lt;/span>
      &lt;/div>
      &lt;div class="formRow">
        &lt;label >Subject&lt;/label>
        &lt;input
          :class="errors.subject &amp;&amp; 'input-error'"
          type="text"
          name="subject"
          v-model="subject"
        />
        &lt;span v-if="errors.subject" :class="errors.subject &amp;&amp; 'error'">{{
          errors.subject
        }}&lt;/span>
      &lt;/div>
      &lt;div class="formRow">
        &lt;button>Submit&lt;/button>
      &lt;/div>
    &lt;/form>
  &lt;/div>
&lt;/template>
</pre>
<p>Here, we pass <code>validateForm</code> to the form’s submit handler. There are two input fields, <code>username</code> and <code>subject</code>, and two dynamic styles. The first style is attached to the <code>input-error</code> class, giving the input fields a red border if they have errors. The second style is attached to the <code>error</code> class, giving the error message a red color.</p>
<p>When any fields have errors, we dynamically attach the <code>input-error</code> class to them. We also conditionally display the error message for the respective fields and dynamically apply the <code>error</code> class to the message. Here are the CSS classes we used to style the form dynamically:</p>
<pre class="language-css hljs">.input-error {
  border-color: #e63946;
}
.error {
  color: #e63946;
  font-size: 1rem;
  margin-top: 0.3rem;
}
</pre>
<h2 id="employing-dynamic-styles-tabs">Employing dynamic styles to <code>tabs</code></h2>
<p>The next demo is one where the styles of <code>tab</code> components will change when someone clicks any of the <strong><code>tabs</code></strong>. The GIF below shows the desired effect we want to create:</p>
<p><img             class="aligncenter size-full wp-image-164841 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/dynamic-style-tabs-vue-js.gif" alt="Employing Dynamic Style Tabs in Vue.js" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-164841" src="https://blog.logrocket.com/wp-content/uploads/2023/03/dynamic-style-tabs-vue-js.gif" alt="Employing Dynamic Style Tabs in Vue.js" width="730" height="411"/></noscript></p>
<p>Let’s see how to implement this in code:</p>
<pre class="language-javascript hljs">&lt;script>
export default {
  data() {
    return {
      isHomeActive: true,
      isContactUsActive: false,
      isAboutActive: false,
    };
  },
  methods: {
    selectTab(tab) {
      this.isHomeActive = false;
      this.isContactUsActive = false;
      this.isAboutActive = false;

      switch (tab) {
        case "Home":
          this.isHomeActive = true;
          break;
        case "Contact Us":
          this.isContactUsActive = true;
          break;
        case "About":
          this.isAboutActive = true;
          break;
        default:
          break;
      }
    },
  },
};
&lt;/script>

&lt;template>
  &lt;main>
    &lt;body id="app-body">
      &lt;section class="nav-bar">
        &lt;h1 class="title">Nav&lt;/h1>
        &lt;ul class="tabs-list">
          &lt;li
            @click="selectTab('Home')"
            :class="isHomeActive ? 'active tab-item' : 'tab-item'"
          >
            Home
          &lt;/li>
          &lt;li
            @click="selectTab('Contact Us')"
            :class="isContactUsActive ? 'active tab-item' : 'tab-item'"
          >
            Contact Us
          &lt;/li>
          &lt;li
            @click="selectTab('About')"
            :class="isAboutActive ? 'active tab-item' : 'tab-item'"
          >
            About
          &lt;/li>
        &lt;/ul>
      &lt;/section>
    &lt;/body>
  &lt;/main>
&lt;/template>
</pre>
<p>Let’s break down the code above. The <code>isHomeActive</code>, <code>isContactUsActive</code>, and <code>isAboutActive</code> variables will track which <code>tab</code> is active and which isn’t. The <code>selectTab(tab)</code> method is responsible for updating the state of the <strong><code>tabs</code></strong> when we click any of them. We passed the <code>selectTab</code> method to the <code>click</code> event of the different <code>tabs</code>.</p>
<p>Lastly, we dynamically style the <code>tabs</code> if any of them are active. When a <code>tab</code> is active, we apply the <code>active</code> class to it. Otherwise, we apply the <code>tab-item</code> class. Here’s the corresponding CSS for the styles:</p>
<pre class="language-css hljs">.active {
  font-weight: 600;
  background-color: rgb(1, 54, 89);
}

.tab-item {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 31%;
  color: white;
  background-color: rgb(11, 93, 148);
  border-radius: 6px;
}
</pre>
<h2 id="dynamic-themes-vue-js-application">Adding dynamic themes to a Vue.js application</h2>
<p>Adding dynamic themes to applications is a common trend in websites and web applications. Let’s see how to add <a href="https://blog.logrocket.com/react-light-dark-mode-css-theme-ui/">dark mode</a> in this demo. We’ll use the <code>useDark</code> and <code>useToggle</code> composition utilities from <a href="https://blog.logrocket.com/supercharge-vue-js-nuxt-js-apps-vueuse/">VueUse</a> to set it up:</p>
<p><img             class="aligncenter size-full wp-image-164843 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/toggle-themes-vue-js.gif" alt="Toggling Themes in Vue.js" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-164843" src="https://blog.logrocket.com/wp-content/uploads/2023/03/toggle-themes-vue-js.gif" alt="Toggling Themes in Vue.js" width="730" height="411"/></noscript></p>
<p>Let’s see how this works in code:</p>
<pre class="language-javascript hljs">&lt;script setup>
import { useDark, useToggle } from "@vueuse/core";
const isDark = useDark();
const toggleDark = useToggle(isDark);
&lt;/script>

&lt;template>
  &lt;div>
    &lt;p>Dark theme: {{ isDark }}&lt;/p>
    &lt;button @click="toggleDark()">Toggle Color Mode&lt;/button>
  &lt;/div>
&lt;/template>

&lt;style>
.dark {
  background: #16171d;
  color: #fff;
}
&lt;/style>
</pre>
<p>Here, we started by importing <a href="https://vueuse.org/core/usedark/"><code>useDark</code></a> and <code><a href="https://vueuse.org/shared/usetoggle/">useToggle</a></code> from <code>vueuse/core</code>. <code>useDark</code> is a reactive dark mode Hook that stores our chosen preference in local storage while <code>useToogle</code> is a Boolean switcher. We used <code>useDark</code> to create a dark mode state and <code>useToggle</code> to toggle the theme. After that, we passed the <code>toggleDark()</code> function to the button’s <code>click</code> event handler.</p>
<blockquote><p>Notice that we don’t explicitly apply the <code>dark</code> class to the component, yet it works. This is because <code>useDark</code> automatically applies it for us.</p></blockquote>
<h2 id="applying-dynamic-classes-button">Applying dynamic classes to a button</h2>
<p>For the last demo, we will create a button and update its styles based on the state of some checkboxes. The GIF below shows what we will build:</p>
<p><img             class="aligncenter size-full wp-image-164846 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/styles-vue-js.gif" alt="Examples of Styles Available for the Vue.js App" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-164846" src="https://blog.logrocket.com/wp-content/uploads/2023/03/styles-vue-js.gif" alt="Examples of Styles Available for the Vue.js App" width="730" height="411"/></noscript></p>
<p>Let’s set up the variables for the different styles:</p>
<pre class="language-javascript hljs">&lt;script>
export default {
  name: "App",
  data() {
    return {
      showBorder: false,
      boldFont: false,
      italicFont: false,
      bgColor: "",
    };
  },
};
&lt;/script>
</pre>
<p>Here, we set up some variable styles. The <code>showBorder</code> variable toggles the button’s border. The <code>boldFont</code> variable toggles the button’s boldness. The <code>italicFont</code> variable toggles the button’s font. Lastly, the <code>bgColor</code> variable changes the button’s background color. With the <code>style</code> variables ready, let’s work on the HTML structure and add the dynamic classes:</p>
<pre class="language-html hljs">&lt;template>
  &lt;div id="app">
    &lt;!-- border input -->
    &lt;div>
      &lt;input
        type="checkbox"
        id="showBorder"
        name="showBorder"
        v-model="showBorder"
      />
      &lt;label for="showBorder">Add border&lt;/label>&lt;br />
    &lt;/div>

    &lt;!-- bold input -->
    &lt;div>
      &lt;input type="checkbox" id="boldFont" name="boldFont" v-model="boldFont" />
      &lt;label for="boldFont">Make bold&lt;/label>&lt;br />
    &lt;/div>

    &lt;!-- italic input -->
    &lt;div>
      &lt;input
        type="checkbox"
        id="italicFont"
        name="italicFont"
        v-model="italicFont"
      />
      &lt;label for="italicFont">Italic font&lt;/label>&lt;br />
    &lt;/div>

    &lt;!-- background color input -->
    &lt;div>
      &lt;input type="text" v-model="bgColor" placeholder="change bg color" />
    &lt;/div>

    &lt;!-- button -->
    &lt;button
      :class="[
        'btn-bg',
        showBorder ? 'btn-border' : '',
        italicFont ? 'btn-italic' : '',
        boldFont ? 'btn-bold' : '',
      ]"
    >
      Change My Styles
    &lt;/button>
  &lt;/div>
&lt;/template>
</pre>
<p>Here, we used the style variables we created earlier to set up <code><a href="https://blog.logrocket.com/new-features-in-vue-3-and-how-to-use-them/">v-models</a></code> for the <code>input</code> fields. This means that the value of the variables will be updated based on the value of the <code>inputs</code>. Next, we conditionally applied the <code>btn-border</code>, <code>btn-italic</code>, and <code>btn-bold</code> classes to the <code>button</code> based on the value of their respective variables. Lastly, we applied the <code>btn-bg</code> class to the <code>button</code>. While its value is dynamic and will come from the <code>text input</code>‘s value, it is not a conditional class like the others.</p>
<p>Here’s the corresponding CSS for the styles:</p>
<pre class="language-css hljs">&lt;style>
.btn-border {
  border: 2px solid blue;
}
.btn-italic {
  font-style: italic;
}
.btn-bold {
  font-weight: bold;
}
.btn-bg {
  background-color: v-bind("bgColor");
}
&lt;/style>
</pre>
<h2>Conclusion</h2>
<p>In this article, we’ve explored how to dynamically style Vue.js applications to help us create unique user experiences. Editing the appearance and behavior of our applications goes a long way toward improving the usability of our applications.</p><div class="code-block code-block-20" >
<div class="blog-plug inline-plug vue-inline"><h2>Experience your Vue apps exactly how a user does</h2> Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, <a href="https://lp.logrocket.com/blg/vue-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. </p><p>The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.</p><p>Modernize how you debug your Vue apps - <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-8 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-8 .fadeOut {
    opacity:0 !important;
}

.code-block-8 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-164823" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-164823" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-164823" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nefejames/">
Nefe James <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nefe is a frontend developer who enjoys learning new things and sharing his knowledge with others.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/vue/">#vue</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/what-is-exploratory-testing/" rel="prev">What is exploratory testing? Benefits and how it works</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/product-manager-interview-how-to-prepare/" rel="next">How to prepare for a product manager interview</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/add-dynamic-styling-class-names-vue-js/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to build a TypeScript app with Vite - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-typescript-app-vite/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-typescript-app-vite/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to build a TypeScript app with Vite - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-typescript-app-vite/">How to build a TypeScript app with Vite - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166228 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-typescript" id="post-166228">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
 <div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/claraekekenta/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/clara-ekekenta.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/clara-ekekenta.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/claraekekenta/">
Clara Ekekenta <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software Engineer and perpetual learner with a passion for OS and expertise in Python, JavaScript, Go, Rust, and Web 3.0.</span>
</div>
</div>
<h1 class="posttitle">How to build a TypeScript app with Vite</h1>
<p>
<span class="post-date"><time class="post-date">
April 11, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1793</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/build-typescript-app-vite-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build TypeScript App Vite"                /> <article class="article-post">
<p>This article explores how to combine the power of TypeScript and the speed of Vite to build a modern, scalable, and efficient web application.</p>
<p><a href="https://www.typescriptlang.org/">TypeScript</a> is a statically-typed superset of JavaScript that provides optional type annotations, making it easier to write robust, scalable, and maintainable code. Meanwhile, <a href="https://vitejs.dev/">Vite</a> is a fast and lightweight build tool for modern web development, providing a quick development experience focused on speed and simplicity.</p>
<p>In this guide, we’ll walk through setting up a new project, adding TypeScript support, and utilizing Vite’s features to improve the development experience.</p>
<p>Whether you’re a seasoned web developer or just starting out, I think you’ll find this article valuable for learning how to build a TypeScript app with Vite. So, grab a cup of coffee, and let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#unique-features-vite">Unique features of Vite</a></li>
<li><a href="#why-combine-typescript-vite">Why combine TypeScript and Vite?</a></li>
<li><a href="#creating-vite-project">Creating a Vite project</a>
<ul >
<li><a href="#project-structure">Project structure</a></li>
</ul>
</li>
<li><a href="#running-the-application">Running the application</a></li>
<li><a href="#building-blog-application">Building a blog application</a>
<ul >
<li><a href="#creating-blog-data">Creating the blog data</a></li>
<li><a href="#creating-blog-component">Creating a blog component</a></li>
</ul>
</li>
<li><a href="#performance-comparison-cra-vite">Performance comparison: CRA vs. Vite</a></li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>For the hands-on demonstration portion of the article, ensure you have <a href="https://nodejs.org/en/">Node.js 18</a> or later installed.</p>
<h2 id="unique-features-vite">Unique features of Vite</h2>
<p>Vite offers many unique features that <a href="https://blog.logrocket.com/setting-up-dev-environment-react-vite-tailwind/#performance-advantages">set it apart from other build tools</a> and make it an excellent choice for web development. Let’s take a look at some of Vite’s special features:</p>
<ul>
<li><strong>Instant reloading</strong>: Vite offers instant reloading, meaning that changes made to the code are immediately reflected in the browser without needing a full page reload. This speeds up the development process and makes testing and debugging code easier</li>
<li><strong>Optimized build times</strong>: Vite is optimized for fast build times, focusing on minimal overhead. It uses in-memory caching and fast incremental builds to minimize the time required to compile and build the application. This results in shorter build times and a more efficient development experience</li>
<li><strong>Efficient code splitting</strong>: Vite uses efficient code splitting to ensure that the user only downloads the code required for the current page, resulting in faster load times and a better user experience. This is especially important for large and complex applications, where load times can become bottlenecks</li>
<li><strong>Fast and lightweight</strong>: Vite is designed to be fast and lightweight, making it an excellent choice for small and large applications alike. It requires minimal setup and configuration and is easy to use and understand, even for beginners</li>
<li><strong>Native ES module support</strong>: Vite supports the native ES module (ESM) format, the modern standard for JavaScript modules. This allows for faster and more efficient loading of modules and provides a cleaner and more maintainable codebase</li>
</ul>
<h2 id="why-combine-typescript-vite">Why combine TypeScript and Vite?</h2>
<p>TypeScript and Vite are two powerful tools that have gained widespread popularity in the web development community. While TypeScript provides type safety and a strong foundation for building scalable applications, Vite offers a fast and efficient development experience. So, why combine these two technologies? Let’s take a look.</p>
<h3 id="improved-type-safety">Improved type safety</h3>
<p>TypeScript provides optional type annotations that can catch type-related errors during development. This helps developers to write more robust and maintainable code and reduces the likelihood of bugs and unexpected behavior. With TypeScript and Vite, developers can ensure the code they write is high quality and free from type-related errors.</p>
<h3 id="faster-development-experience">Faster development experience</h3>
<p>Vite was designed with speed and simplicity in mind. It offers instant reloading and optimized build times, making developing web applications more accessible and efficient. By combining TypeScript with Vite, developers can take advantage of TypeScript’s robust type system and Vite’s fast development experience for a more enjoyable and efficient development process.</p>
<h3 id="scalable-maintainable-code">Scalable and maintainable code</h3>
<p>TypeScript is a statically-typed language that supports modern JavaScript features and is widely used in large-scale projects. By combining TypeScript with Vite, developers can write scalable and maintainable code that is easy to understand and modify over time.</p>
<h3 id="improved-performance">Improved performance</h3>
<p>Vite is optimized for fast build times and minimal overhead, making it an excellent choice for large and complex applications. This results in improved performance and shorter load times for the end user. By combining TypeScript and Vite, developers can build high-performance web applications that deliver a fast and smooth user experience.</p>
<h2 id="creating-vite-project">Creating a Vite project</h2>
<p>Now that we understand more about the powerful combination of TypeScript and Vite, let’s dive into the demo portion of this tutorial.</p>
<p>Let’s start by creating a Vite project by running the following command in the terminal:</p>
<pre class="language-bash hljs">npm create <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2e58475a4b6e424f5a4b5d5a">[email protected]</a>
</pre>
<p>This command will prompt you to choose a name for your project. Feel free to choose any name; then press <strong>Enter</strong> to continue. For this demonstration, we’ll use the project name “vite-ts-app”.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Next, you’ll be asked to select a framework for your Vite project. Vite provides a variety of frameworks that may be used for an application: React, Vue.js, Lit, Preact, Vanilla JavaScript, and Svelte. For this demo, we’ll select <strong>React</strong>.</p>
<p>Lastly, you’ll be prompted to choose a variant for your application. For this demo, we’re building a TypeScript app with Vite, so we’ll select <strong>TypeScript</strong>.</p>
<p>Here are our selections for the Vite project prompts:</p>
<p><img             class="aligncenter wp-image-166232 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/creating-vite-project-from-terminal.png" alt="Creating Vite Project From Terminal" width="720" height="189"    /><noscript><img               class="aligncenter wp-image-166232 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/creating-vite-project-from-terminal.png" alt="Creating Vite Project From Terminal" width="720" height="189"  /></noscript></p>
<h3 id="project-structure">Project structure</h3>
<p>After processing the project information we just submitted, Vite will generate the project’s folder structure:</p>
<p>📦vite-ts-app<br/>
┣ 📂public<br/>
┃ ┗ 📜vite.svg<br/>
┣ 📂src<br/>
┃ ┣ 📂assets<br/>
┃ ┃ ┗ 📜react.svg<br/>
┃ ┣ 📜App.css<br/>
┃ ┣ 📜App.tsx<br/>
┃ ┣ 📜index.css<br/>
┃ ┣ 📜main.tsx<br/>
┃ ┗ 📜vite-env.d.ts<br/>
┣ 📜.gitignore<br/>
┣ 📜index.html<br/>
┣ 📜package-lock.json<br/>
┣ 📜package.json<br/>
┣ 📜tsconfig.json<br/>
┣ 📜tsconfig.node.json<br/>
┗ 📜vite.config.ts</p>
<p>Here are the key files from the <code>vite-ts-app</code> project folder:</p>
<ul>
<li><code>index.html</code>: The main file, typically found in a public directory in a Vite project</li>
<li><code>main.tsx</code>: Where the code for producing the browser output is executed; this file is common for Vite projects</li>
<li><code>vite.config.json</code>: The configuration file for any Vite project</li>
</ul>
<h2 id="running-the-application">Running the application</h2>
<p>We’ve completed the prompts to create a Vite project. Now, let’s cd into the project folder and use the below commands to run the application:</p>
<pre class="language-bash hljs">cd vite-ts-app
npm install
npm run dev
</pre>
<p>To confirm that the application is running, check the terminal — you should see the following:</p>
<p><img             class="aligncenter wp-image-166234 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/vite-application-running-port-5174.png" alt="Vite Application Running Port 1574" width="720" height="110"    /><noscript><img               class="aligncenter wp-image-166234 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/vite-application-running-port-5174.png" alt="Vite Application Running Port 1574" width="720" height="110"  /></noscript></p>
<p>Press the <strong>o</strong> key to open the application in your web browser:</p>
<p><img             class="aligncenter wp-image-166236 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/vite-react-application-preview-web-browser.png" alt="Vite React Application Preview Web Browser" width="720" height="453"    /><noscript><img               class="aligncenter wp-image-166236 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/vite-react-application-preview-web-browser.png" alt="Vite React Application Preview Web Browser" width="720" height="453"  /></noscript></p>
<h2 id="building-blog-application">Building a blog application</h2>
<p>With the Vite app up and running in our web browser, let’s create a blog application using Vite and the React framework that renders some static blog data from a JSON file.</p>
<p>To get started, let’s update the code in the <code>App.tsx</code> file to add a navbar to the application’s UI:</p>
<pre class="language-typescript hljs">import './App.css'
function App() {

 return (
  &lt;div className="App">
   &lt;div className="navbar">
    &lt;ul>
     &lt;li>Home&lt;/li>
     &lt;li>Blog&lt;/li>
    &lt;/ul>
   &lt;/div>
  &lt;/div>
 )
}
export default App
</pre>
<p>Next, let’s update the <code>App.css</code> file to add some new styles to the application:</p>
<pre class="language-css hljs">* {
 padding: 0px;
 margin: 0px;
 box-sizing: border-box;
}
.navbar {
 background-color: rgb(50, 47, 47);
 color: white;
 padding: 10px;
}
.navbar ul {
 display: flex;
 width: 600px;
 margin: 0px auto;
 font-size: 14px;
 list-style: none;
}
.navbar ul li {
 margin: 10px;
}
</pre>
<p>The application’s resulting user interface will look like this:</p>
<p><img             class="aligncenter wp-image-166239 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/typescript-blogging-app-navbar-preview.png" alt="TypeScript Blogging App Navbar Preview" width="720" height="46"    /><noscript><img               class="aligncenter wp-image-166239 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/typescript-blogging-app-navbar-preview.png" alt="TypeScript Blogging App Navbar Preview" width="720" height="46"  /></noscript></p>
<h3 id="creating-blog-data">Creating the blog data</h3>
<p>Next, we’ll need to add data to our blog application. Let’s create a <code>blog.json</code> file in the project’s root directory and add the following data:</p>
<pre class="language-json hljs">[
 {
  "id": 1,
  "title": "Building a Todo App with Vue",
  "cover": "https://nextjs.org/static/images/learn/foundations/next-app.png",
  "author":"John Doe"
 },
 {
  "id": 2,
  "title": "Getting started with TypeScript",
  "cover": "https://nextjs.org/static/images/learn/foundations/components.png",
  "author":"Claman Joe"
 }
]
</pre>
<p>Here we defined some arrays of blog objects, which we’ll render in our Vite app’s UI.</p>
<h3 id="creating-blog-component">Creating a blog component</h3>
<p>Now, let’s create a <code>components</code> folder in the <code>src</code> directory. Then, we’ll create a <code>Blog.tsx</code> file and add the below snippet:</p>
<pre class="language-typescript hljs">import blogData from '../../blog.json'
type Blog = {
  id: number,
  title: string,
  cover: string,
  author: string
}
export function Blog() {
  return (
    &lt;div className="container">
      &lt;div className="blog">
        {blogData.map((blog: Blog) =>
          &lt;div className="card" key={blog.id}>
            &lt;img src={blog.cover} alt="" />
            &lt;div className="details">
              &lt;h2>{blog.title}&lt;/h2>
              &lt;h4>{blog.author}&lt;/h4>
            &lt;/div>
          &lt;/div>
        )}
      &lt;/div>
    &lt;/div>
  )
}
</pre>
<p>This code defines a function that returns a container for blog posts that includes a list of blog cards. Each card displays the title, cover image, and blog post’s author. The code uses a <code>map</code> function to loop through a <code>blogData</code> array and create a <code>card</code> for each item.</p>
<p>Next, let’s update the <code>App.css</code> file to style the <code>Blog</code> component:</p>
<pre class="language-css hljs">.App {
 background: rgb(44, 183, 134);
 height: 100vh;
}
.container {
 width: 600px;
 margin: 0px auto;
}
.container .blog {
 display: flex;
 padding: 10px;
}
.container .card {
 background-color: white;
 margin: 10px;
 padding: 10px;
 border-radius: 4px;
 width: 50%;
 font-size: 10px;
 color: rgb(50, 47, 47);
}
.container .card img {
 width: 100%;
}
</pre>
<p>Lastly, let’s update the <code>App.tsx</code> component to import and render the <code>Blog</code> component:</p>
<pre class="language-typescript hljs">import './App.css'
import { Blog} from './components/Blog'

function App() {

 return (
  &lt;div className="App">
   &lt;div className="navbar">
    &lt;ul>
     &lt;li>Home&lt;/li>
     &lt;li>Blog&lt;/li>
    &lt;/ul>
   &lt;/div>
    &lt;Blog />
  &lt;/div>
 )
}
export default App
</pre>
<p><img             class="aligncenter wp-image-166242 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/vite-react-full-blogging-application-preview.png" alt="Vite React Full Blogging Application Preview" width="720" height="320"    /><noscript><img               class="aligncenter wp-image-166242 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/vite-react-full-blogging-application-preview.png" alt="Vite React Full Blogging Application Preview" width="720" height="320"  /></noscript></p>
<p>We’ve successfully created a blog application using TypeScript and Vite!</p>
<h2 id="performance-comparison-cra-vite">Performance comparison: CRA vs. Vite</h2>
<p>To compare the startup time of a Vite app to an app built with an alternative, like Create React App (CRA), we’d need to build and test both apps under similar conditions. To demonstrate this, I built the same demo application that we just created in this tutorial, except I used CRA. Then, I used the performance inspection feature in Chrome DevTools to test the start time for each version of the app.</p>
<p>Here’s the performance result for the TypeScript app built with CRA; the startup time was 99ms:</p>
<p><img             class="aligncenter wp-image-166244 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/performance-typescript-app-built-cra-chrome-devtools.png" alt="Performance TypeScript App Built CRA Chrome DevTools" width="720" height="348"    /><noscript><img               class="aligncenter wp-image-166244 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/performance-typescript-app-built-cra-chrome-devtools.png" alt="Performance TypeScript App Built CRA Chrome DevTools" width="720" height="348"  /></noscript></p>
<p>And here’s the performance of the TypeScript app built with Vite; the startup time was 42ms:</p>
<p><img             class="aligncenter wp-image-166246 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/performance-typescript-app-built-vite-chrome-devtools.png" alt="Performance TypeScript App Built Vite Chrome DevTools" width="720" height="517"    /><noscript><img               class="aligncenter wp-image-166246 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/performance-typescript-app-built-vite-chrome-devtools.png" alt="Performance TypeScript App Built Vite Chrome DevTools" width="720" height="517"  /></noscript></p>
<p>In our test, the TypeScript application built with Vite started 58% faster than the TypeScript application built with CRA.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In this article, we discussed the many benefits of combining TypeScript and Vite, demonstrated how to build a simple TypeScript blog application with Vite, and then compared the performance of our app with that of a TypeScrtipt app built with CRA.</p>
<p>TypeScript and Vite offer several advantages for web development, including improved type safety, faster development experience, scalable and maintainable code, and improved performance. Vite’s focus on speed, efficiency, and simplicity helps deliver high-quality, performant web applications. The combination of TypeScript and Vite affords developers of all levels an excellent choice for building high-quality and performant web applications.</p>
<p>I hope you got value from this tutorial. Happy coding!</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166228" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-typescript-app-vite/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-typescript-app-vite/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166228" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-typescript-app-vite/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166228" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-typescript-app-vite/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/clara-ekekenta.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/clara-ekekenta.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/claraekekenta/">
Clara Ekekenta <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software Engineer and perpetual learner with a passion for OS and expertise in Python, JavaScript, Go, Rust, and Web 3.0.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/typescript/">#typescript</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/building-prototype-with-chunk/" rel="prev">Building a prototype with Chunk</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/glossary-key-concepts-mobile-product-managers/" rel="next">Glossary and key concepts for mobile product managers</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-typescript-app-vite/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to build a blockchain with Go - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-blockchain-with-go/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-blockchain-with-go/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to build a blockchain with Go - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-blockchain-with-go/">How to build a blockchain with Go - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-84441 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-blockchain tag-go" id="post-84441">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/solomonesenyi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/solomonesenyi/">
Solomon Esenyi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Python/Golang developer and Technical Writer with a passion for open-source, cryptography, and serverless technologies.</span>
</div>
</div>
<h1 class="posttitle">How to build a blockchain with Go</h1>
<p>
<span class="post-date"><time class="post-date">
March 30, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1804</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2021/12/build-blockchain-with-go.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="How to build a blockchain with Go"                /> <article class="article-post">
<p><strong><i>Editor’s note:</i> </strong><em>This guide on how to build a blockchain with Go was last updated on 30 March 2023 to reflect changes to Go and include more information about using blockchains with Go. To learn more about Go, check out our guide to <a href="https://blog.logrocket.com/getting-started-with-go-for-frontend-developers/">getting started with Go for frontend developers</a>.</em></p>
<p><a href="https://blog.logrocket.com/tag/blockchain/">Blockchains</a> are the underlying technology for many <a href="https://blog.logrocket.com/top-5-decentralized-app-development-frameworks/">decentralized applications</a> and <a href="https://blog.logrocket.com/build-cryptocurrency-node-js-blockchain/">cryptocurrencies</a>. They are also applicable in many industries and are creating new job roles and opportunities for developers, artists, gamers, content writers, and many more.</p>
<p>This tutorial aims to teach you how blockchains work by guiding you through building one from scratch with <a href="https://blog.logrocket.com/tag/go/">Go</a>. If you have heard of blockchains but are still confused about how they work, this article is for you. To follow and understand this tutorial, you will need working knowledge of Go, Go v1.x installed on your machine, and a Go development environment (e.g., text editor, IDE).</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-blockchain">What is a blockchain?</a>
<ul >
<li><a href="#what-block">What is a block?</a></li>
<li><a href="#when-should-you-use-blockchain">When should you use a blockchain?</a></li>
</ul>
</li>
<li><a href="#why-build-blockchain-with-go">Why build a blockchain with Go?</a></li>
<li><a href="#building-blockchain-with-go">Building a blockchain with Go</a>
<ul >
<li><a href="#calculating-hash-block">Calculating the hash of a block</a></li>
<li><a href="#mining-new-blocks">Mining new blocks</a></li>
<li><a href="#creating-genesis-block">Creating the <code>genesis block</code></a></li>
<li><a href="#adding-new-blocks-blockchain">Adding new blocks to the blockchain</a></li>
<li><a href="#checking-validity-blockchain">Checking the validity of the blockchain</a></li>
<li><a href="#using-blockchain-make-transactions">Using the blockchain to make transactions</a></li>
<li><a href="#adding-new-nodes-blockchain">Adding new nodes to the blockchain</a></li>
</ul>
</li>
</ul>
<h2 id="what-blockchain">What is a blockchain?</h2>
<p>A blockchain is a digital record of transactions distributed and shared among the nodes of a computer network. Each transaction in the blockchain is called a block and links to another with cryptography techniques.</p>
<p>You can also think of a blockchain as a special kind of distributed database. In this database, each record is unique and immutable, and every record (except the first) contains a reference to the record that came before it. Every record has a hash that identifies the record and ensures that any tampering done to it can be detected. Every device that’s a part of this network contains a copy of the database, and multiple devices have to agree that a record is valid using a consensus mechanism before it can be added to the database.</p>
<p>Here’s a visual example to illustrate the concept:</p>
<p><img             class="aligncenter size-full wp-image-167523 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/12/blockchain-go-visual.png" alt="Diagram of a Blockchain in Go" width="730" height="480"    /><noscript><img               class="aligncenter size-full wp-image-167523" src="https://blog.logrocket.com/wp-content/uploads/2021/12/blockchain-go-visual.png" alt="Diagram of a Blockchain in Go" width="730" height="480"  /></noscript></p>
<h3 id="what-block">What is a block?</h3>
<p>We mentioned blocks earlier, and you might be wondering what they are. Put simply, a block is a group of data, and multiple blocks come together to form a blockchain.<br/>
Every block in a blockchain possesses the following properties:</p>
<ul>
<li>Data to record on the blockchain, e.g., transaction data</li>
<li>A block hash, the ID of the block generated using cryptography techniques</li>
<li>The previous block’s hash is the cryptographic hash of the last block in the blockchain. It is recorded in every block to link it to the chain and improve its security</li>
<li>A timestamp of when the block was created and added to the blockchain</li>
<li>Proof of Work (PoW) is the amount of effort taken to derive the current block’s hash. We will explain this in depth later in the tutorial</li>
</ul>
<h3 id="when-should-you-use-blockchain">When should you use a blockchain?</h3>
<p>Because of their structure, blockchains are most useful when you are trying to build a system that requires decentralization on a large scale, requires data to be unchangeable once added to the system, or requires transparency and integrity of the system’s data. The most common applications of blockchain technology are in the fields of cryptocurrency and decentralized finance. Still, they can also be used in voting systems, supply chain management, and even healthcare.</p>
<h2 id="why-build-blockchain-with-go">Why build a blockchain with Go?</h2>
<p><a href="https://blog.logrocket.com/tag/go/">Go</a> provides many unique features and functionalities that make it a good fit for building a blockchain. For example, Go allows you to create <a href="https://blog.logrocket.com/benchmarking-golang-improve-function-performance/">highly efficient and performant applications</a> with little effort. Go is also excellent for building applications that require parallelism and <a href="https://blog.logrocket.com/concurrency-patterns-golang-waitgroups-goroutines/">concurrency</a> (like blockchains) with its ability to spawn and manage thousands of Goroutines.</p>
<p>Go implements automatic garbage collection and stack management with its runtime system. Finally, it compiles applications to machine code and single binaries, supporting multiple OSs and processor architectures, and deploys easily on server infrastructure.</p>
<h2 id="building-blockchain-with-go">Building a blockchain with Go</h2>
<p>Let’s start by creating a new Go project and importing all the necessary packages to build our blockchain. Create a file named <code>blockchain.go</code> and import all the dependencies you need by saving the following code in it:</p>
<pre class="language-go hljs">package main

import (
        "crypto/sha256"
        "encoding/json"
        "fmt"
        "strconv"
        "strings"
        "time"
)
</pre>
<p>Next, we will create a custom type to represent the blocks that will make up our blockchain. Add the following code to the <code>blockchain.go</code> file:</p>
<pre class="language-go hljs">type Block struct {
        data         map[string]interface{}
        hash         string
        previousHash string
        timestamp    time.Time
        pow          int
}
</pre>
<p>Then, we will create a custom <code>Blockchain</code> type that contains our blocks. Add the following code to the <code>blockchain.go</code> file:</p>
<pre class="language-go hljs">type Blockchain struct {
        genesisBlock Block
        chain        []Block
        difficulty   int
}
</pre>
<p>The <code>genesisBlock</code> property represents the first block added to the blockchain. In contrast, the <code>difficulty</code> property defines the minimum effort miners must undertake to mine and include a block in the blockchain.</p>
<h3 id="calculating-hash-block">Calculating the hash of a block</h3>
<p>As we discussed earlier, the hash of a block is its identifier generated using cryptography. We will derive the hash for each block in our blockchain by combining and then hashing the hash of the previous block, the data of the current block, the current block’s timestamp, and PoW using the <a href="https://en.wikipedia.org/wiki/SHA-2">SHA256</a> algorithm.</p>
<p>Let’s create a method on our <code>Block</code> type that generates a hash:</p>
<pre class="language-go hljs">func (b Block) calculateHash() string {
        data, _ := json.Marshal(b.data)
        blockData := b.previousHash + string(data) + b.timestamp.String() + strconv.Itoa(b.pow)
        blockHash := sha256.Sum256([]byte(blockData))
        return fmt.Sprintf("%x", blockHash)
}
</pre>
<p>In the code above, we did the following:</p>
<ul>
<li>Converted the block’s data to JSON</li>
<li>Concatenated the previous block’s <code>hash</code>, and the current block’s <code>data</code>, <code>timestamp</code>, and <code>PoW</code></li>
<li>Hashed the earlier concatenation with the <code>SHA256</code> algorithm</li>
<li>Returned the base 16 hash as a <code>string</code></li>
</ul>
<h3 id="mining-new-blocks">Mining new blocks</h3>
<p>Mining is the process of adding a new block to the blockchain. This involves generating a block hash that starts with a desired number of zeros (the number of zeros is called the mining difficulty). This means if the mining difficulty is three, you have to generate a block hash that starts with <code>"000"</code> like, <code>"0009a1bfb506…"</code>.</p>
<p>Because we are deriving a block’s hash from its data and PoW, we need to keep changing the PoW value of the current block until we get a hash that satisfies our mining condition (starting zeros > difficulty). To implement this, we will create a <code>mine()</code> method for our <code>Block</code> type that repeatedly increments the <code>PoW</code> value and calculates the block <code>hash</code> until we get a valid one.</p>
<p>Add the following code to the <code>blockchain.go</code> file:</p>
<pre class="language-go hljs">func (b *Block) mine(difficulty int) {
        for !strings.HasPrefix(b.hash, strings.Repeat("0", difficulty)) {
                b.pow++
                b.hash = b.calculateHash()
        }
}
</pre>
<h3 id="creating-genesis-block">Creating the <code>genesis block</code></h3>
<p>Next, we will write a function that creates a <code>genesis block</code> (the first block on the blockchain) for our blockchain and returns a new instance of the <code>Blockchain</code> type. Add the following code to the <code>blockchain.go</code> file:</p>
<pre class="language-go hljs">func CreateBlockchain(difficulty int) Blockchain {
        genesisBlock := Block{
                hash:      "0",
                timestamp: time.Now(),
        }
        return Blockchain{
                genesisBlock,
                []Block{genesisBlock},
                difficulty,
        }
}
</pre>
<p>Here, we set the hash of our <code>genesis block</code> to <code>"0"</code>. Because it is the first block in the blockchain, there is no value for the previous hash, and the data property is empty. Then, we created a new instance of the <code>Blockchain</code> type and stored the <code>genesis block</code> along with the blockchain’s <code>difficulty</code>.</p>
<h3 id="adding-new-blocks-blockchain">Adding new blocks to the blockchain</h3>
<p>Now that we have implemented functionalities for our blocks to calculate their hash and mine themselves, let’s create a function that will construct a new block from its arguments and then add the new block to the blockchain. Add the following code to the <code>blockchain.go</code> file:</p>
<pre class="language-go hljs">func (b *Blockchain) addBlock(from, to string, amount float64) {
        blockData := map[string]interface{}{
                "from":   from,
                "to":     to,
                "amount": amount,
        }
        lastBlock := b.chain[len(b.chain)-1]
        newBlock := Block{
                data:         blockData,
                previousHash: lastBlock.hash,
                timestamp:    time.Now(),
        }
        newBlock.mine(b.difficulty)
        b.chain = append(b.chain, newBlock)
}
</pre>
<p>Here, we created an <code>addBlock</code> method to the <code>Blockchain</code> type that does the following:</p>
<ul>
<li>Collects the details of a transaction (sender, receiver, and transfer amount)</li>
<li>Creates a new block with the transaction details</li>
<li>Mines the new block with the previous <code>block hash</code>, current <code>block data</code>, and generated <code>PoW</code></li>
<li>Adds the newly created block to the blockchain</li>
</ul>
<h3 id="checking-validity-blockchain">Checking the validity of the blockchain</h3>
<p>We have successfully created a blockchain that can record transactions. So, now we need functionality that checks if the blockchain is valid. A valid blockchain is one where no transactions have been tampered with. Add the following code to the <code>blockchain.go</code> file:</p>
<pre class="language-go hljs">func (b Blockchain) isValid() bool {
        for i := range b.chain[1:] {
                previousBlock := b.chain[i]
                currentBlock := b.chain[i+1]
                if currentBlock.hash != currentBlock.calculateHash() || currentBlock.previousHash != previousBlock.hash {
                        return false
                }
        }
        return true
}
</pre>
<p>Here, we recalculated the hash of every block, compared them with the stored hash values of the other blocks, and checked if the previous hash value of any other block is equal to the hash value of the block before it. If any of the checks fail, the blockchain has been tampered with.</p>
<h3 id="using-blockchain-make-transactions">Using the blockchain to make transactions</h3>
<p>We now have a fully functional blockchain! Let’s create a <code>main()</code> function to show its usage. Add the following code to the <code>blockchain.go</code> file:</p>
<pre class="language-go hljs">func main() {
        // create a new blockchain instance with a mining difficulty of 2
        blockchain := CreateBlockchain(2)

        // record transactions on the blockchain for Alice, Bob, and John
        blockchain.addBlock("Alice", "Bob", 5)
        blockchain.addBlock("John", "Bob", 2)

        // check if the blockchain is valid; expecting true
        fmt.Println(blockchain.isValid())
}
</pre>
<h3 id="adding-new-nodes-blockchain">Adding new nodes to the blockchain</h3>
<p>A blockchain isn’t useful to anyone if it’s confined to just one device. So, you might be wondering how to add new nodes to the blockchain prototype you just built. Pulling this off involves creating a <a href="https://blog.logrocket.com/p2p-protocol-acceptance-state-modern-browsers/">Peer-to-Peer</a> <a href="https://blog.logrocket.com/p2p-protocol-acceptance-state-modern-browsers/">(P2P)</a> network to connect the nodes, implementing a consensus algorithm, and taking security countermeasures. However, modifying the blockchain we built to include these features is out of the scope of this tutorial.</p>
<h2>Conclusion</h2>
<p>In this tutorial, you learned about blockchains and Go. More specifically, you learned how blockchains work under the hood — including what blocks are and what they contain — and how to calculate a block hash, implement a consensus algorithm for mining blocks, record transactions on the blockchain, and validate the authenticity of a blockchain.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>The source code of the Go blockchain is available as a <a href="https://gist.github.com/LordGhostX/bb92b907731ee8ebe465a28c5c431cb4">GitHub Gist</a>, and you can play with it in your browser on the <a href="https://play.golang.com/">Go Playground</a>. I can’t wait to see the amazing things you build with Go, as it is a good fit for applications where efficiency and performance are a top priority. Happy coding!</p><div class="code-block code-block-26" >
<div class="blog-plug inline-plug blockchain-plug"><h2>Join organizations like Bitso and Coinsquare who use <a href="https://lp.logrocket.com/blg/web3-signup">LogRocket</a> to proactively monitor their Web3 apps
</h2>Client-side issues that impact users’ ability to activate and transact in your apps can drastically affect your bottom line. If you’re interested in monitoring UX issues, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a target="_blank" href="https://lp.logrocket.com/blg/web3-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/web3-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/web3-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/web3-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app or site. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/web3-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-84441" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-blockchain-with-go/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-blockchain-with-go/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-84441" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-blockchain-with-go/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-84441" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-blockchain-with-go/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/1630331477631-cropped.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/solomonesenyi/">
Solomon Esenyi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Python/Golang developer and Technical Writer with a passion for open-source, cryptography, and serverless technologies.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/blockchain/">#blockchain</a></li> <li><a href="https://blog.logrocket.com/tag/go/">#go</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/" rel="prev">Next.js font optimization: Adding custom and Google fonts</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/" rel="next">Using task analysis to improve your UX design</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-blockchain-with-go/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to build a real-time Vue app with WebSockets - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-real-time-vue-app-websockets/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-real-time-vue-app-websockets/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to build a real-time Vue app with WebSockets - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-real-time-vue-app-websockets/">How to build a real-time Vue app with WebSockets - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-160719 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-vue" id="post-160719">
<div class="mainheading">
 
<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/abiolafarounbi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/abiola-farounbi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/abiola-farounbi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/abiolafarounbi/">
Abiola Farounbi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and technical writer with a passion for open source, accessibility, and web technologies.</span>
</div>
</div>
<h1 class="posttitle">How to build a real-time Vue app with WebSockets</h1>
<p>
<span class="post-date"><time class="post-date">
March 30, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2030</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/02/vue-websockets-real-time-app.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Vue Websockets Real Time App"                /> <article class="article-post">
 <p>As web development evolves, interactive, real-time experiences are becoming a more important feature in modern web applications.</p>
<p>With WebSockets, developers have a powerful tool for building fast, efficient, and dynamic real-time applications. This innovative technology <a href="https://blog.logrocket.com/server-sent-events-vs-websockets/">enables bi-directional communication between the client and server</a>, breaking away from HTTP’s traditional request-response model.</p>
<p>In this article, we’ll delve into the intricacies of WebSockets, exploring its potential by building a real-time chat app with Vue. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-websockets">What are WebSockets?</a></li>
<li><a href="#how-websockets-work">How do WebSockets work?</a></li>
<li><a href="#benefits-using-websockets">Benefits of using WebSockets</a></li>
<li><a href="#building-real-time-chat-app">Building a real-time chat app with WebSockets</a></li>
<li><a href="#creating-websocket-server">Creating the WebSocket server</a></li>
<li><a href="#building-frontend">Building the frontend</a></li>
</ul>
<h2 id="what-websockets">What are WebSockets?</h2>
<p><a href="https://blog.logrocket.com/websocket-tutorial-real-time-node-react/#websocket">WebSocket is a protocol for bi-directional, real-time communication</a> between the client and the server. Introduced as part of the HTML5 specification, WebSocket has become one of the most popular methods for building real-time web applications.</p>
<p>Unlike traditional HTTP communication, which operates on a request-response model, <a href="https://blog.logrocket.com/websockets-two-way-communication-react-app/">WebSockets allow for continuous, two-way communication</a> between the client and server, meaning the client can send a request to the server, and the server can send a request to the client too.</p>
<p>The constant flow of data between the client and the server ensures that the user experience is seamless, with updates appearing in real time instead of after refreshing the page. HTTP is also limited for loading static pages and  insufficient for time-sensitive communication.</p>
<h2 id="how-websockets-work">How do WebSockets work?</h2>
<p>The WebSockets protocol operates over Transmission Control Protocol (TCP), a low-level communications protocol that provides a reliable, stream-oriented connection between two computers. Before building a WebSocket connection, you’ll have to follow several steps.</p>
<p>During the initial request, the client sends an HTTP request to the server with a specific header reading <code>Upgrade: WebSocket</code>, indicating that it wants to upgrade the connection to a WebSockets connection.</p>
<p>Next, during the handshake process, the server receives the initial request and checks to see if it supports WebSockets. If it does, the server sends a response with the same <code>Upgrade: websocket</code> header and a <code>101 Switching Protocols</code> HTTP status code, indicating that the connection is being upgraded. The client and the server then exchange WebSockets handshake keys to ensure that the connection is secure.</p>
<p>Once the handshake process is complete and the keys match, the WebSockets connection is established, and the client and server can exchange data in both directions without needing a request-response cycle. The data is sent as packets over the underlying TCP connection. This full-duplex communication enables real-time updates and notifications.</p>
<p>Either the client or the server can close the WebSockets connection at any time. The WebSockets protocol provides a mechanism for gracefully closing the connection, allowing any remaining data to be sent before the connection is closed.</p>
<p>The WebSockets protocol is designed to work over the same ports as HTTP and HTTPS, making it easy to integrate into existing web infrastructure.</p>
<h2 id="benefits-using-websockets">Benefits of using WebSockets</h2>
<p>In comparison to other traditional HTTP-based communication methods, WebSockets has several benefits, offering a fast and low-latency communication method.</p>
<p>WebSockets eliminates the overhead associated with traditional HTTP request-response cycles, allowing for continuous, bi-directional communication over a single connection. This reduces the amount of data transmitted and the number of round trips required, improving the performance of real-time applications.</p>
<p>WebSockets is a standardized protocol that is supported by many modern browsers, enabling cross-browser compatibility:</p>
<p><img             class="aligncenter wp-image-161913 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/websocket-api-browser-compatibility.png" alt="Websocket API Browser Compatibility" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-161913 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/websocket-api-browser-compatibility.png" alt="Websocket API Browser Compatibility" width="730" height="341"  /></noscript></p>
<p>WebSockets also has an advantage over polling, in which the client continues to request new data from the server even if no new data is available. WebSockets allows for more efficient and responsive communication between the client and server, making it an ideal solution for real-time applications.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h2 id="websocketsevents">WebSockets events</h2>
<p>To open the WebSocket connection, call the WebSocket object, as shown below:</p>
<pre class="language-javascript hljs">const socket = new WebSocket(url);
</pre>
<p>Once the WebSockets connection has been created, you can trigger events in both the client and the server. We use callback functions and event listeners to listen to these events. The four main events are <code>open</code>, <code>message</code>, <code>error</code>, and <code>close</code>.</p>
<p>The <code>open</code> event is triggered when a connection is successfully established. The callback function for this event is called <code>onopen</code>:</p>
<pre class="language-javascript hljs">socket.onopen => (){
  console.log("WebSocket connection opened:", event);
};
</pre>
<p><code>message</code> is triggered when a message is received from the server. The message data can be accessed through the <code>event.value</code> property:</p>
<pre class="language-javascript hljs">socket.onmessage => (event) {
  console.log("WebSocket message received:", event.value);
};
</pre>
<p><code>error</code> is triggered when an error occurs while trying to establish or maintain a connection. The callback to the error event is <code>onerror</code>:</p>
<pre class="language-javascript hljs">socket.onerror => (error) {
  console.log("WebSocket error:", error);
};
</pre>
<p><code>close</code> is triggered when the connection is closed:</p>
<pre class="language-javascript hljs">socket.onclose => (event)  {
  console.log("WebSocket connection closed:", event.code);
};
</pre>
<p>The WebSocket protocol provides several methods that you can use to perform actions on a WebSocket connection, including <code>send()</code> and <code>close()</code>.</p>
<p>We use the <code>send()</code> method to send data to the server over a WebSocket connection. The data can be a string, a binary array, or a blob:</p>
<pre class="language-javascript hljs">socket.send("Hello, server!");
</pre>
<p>We use the <code>close()</code> method to close the WebSocket connection. It takes two optional parameters, <code>code</code>, the status code, and <code>reason</code>, a text string that specifies the reason for closing the connection:</p>
<pre>socket.close(1000, "Goodbye");
</pre>
<h2 id="building-real-time-chat-app">Building a real-time chat app</h2>
<p>Now that we’re familiar with the basics of WebSockets, let’s run through a practical example with Vue. Before we get started, be sure you have the following:</p>
<ul>
<li>Basic knowledge of <a href="https://blog.logrocket.com/use-vue-js-general-purpose-javascript-library/">Vue and JavaScript</a></li>
<li>Node.js and npm installed on your machine</li>
<li>Any IDE of your choice</li>
</ul>
<p>To begin setting up our development environment, we’ll need to create two separate projects, one for the client and one for the server. This separation will allow for easier management of dependencies and enable us to work on each project independently. You can access the full code on GitHub for the <a href="https://github.com/Abiola-Farounbi/SocketChat">client</a> as well as the <a href="https://github.com/Abiola-Farounbi/SocketChat-Server">server</a>.</p>
<h2 id="creating-websocket-server">Creating the WebSocket server</h2>
<p><a href="https://github.com/websockets/ws">ws</a> is a popular Node.js WebSocket library that is simple to use and thoroughly tested for WebSocket client and server implementation.</p>
<p><a href="https://blog.logrocket.com/top-websocket-libraries-nodejs-2022/#ws">ws provides simple and direct methods for creating WebSocket servers</a>, handling incoming connections, and sending messages between the client and the server. It is compatible with a wide range of browsers and platforms, and it provides customization and extension options.</p>
<p>To set up the server-side project, first initialize a new Node.js project by running <code>npm init</code> and following the prompts to create a <code>package.json</code> file. Next, create a new file called <code>server.js</code> in the root of the server project directory.</p>
<p>You’ll need to install the ws library and Express to create the WebSocket and start the server, respectively:</p>
<pre class="language-bash hljs">npm install ws, express
</pre>
<p>We’ll use Express to create a web server instance that will handle HTTP requests and responses. This server is then passed to the <code>WebSocket</code> constructor to create a WebSocket server:</p>
<pre class="language-javascript hljs">// Import required modules
const express = require("express");
const http = require("http");
const WebSocket = require("ws");
// Create an Express app instance
const app = express();
// Create an HTTP server using the Express app instance
const server = http.createServer(app);
// Create a WebSocket server instance and attach it to the HTTP server
const websocketServer = new WebSocket.Server({ server });
// Start the server listening on port 3000
server.listen(3000, () => {
  console.log("Websocket server started on port 3000");
});
</pre>
<p>Once we’ve set up the base of the server, we can create the WebSocket events to handle the chat application:</p>
<pre class="language-javascript hljs">//Listen for WebSocket connections
websocketServer.on('connection', (socket) => {
  // Log a message when a new client connects
  console.log('client connected.');
  // Listen for incoming WebSocket messages
  socket.on('message', (data) => {

   // Broadcast the message to all connected clients
    websocketServer.clients.forEach(function each(client) {
      if (client !== socket &amp;&amp; client.readyState === WebSocket.OPEN) {
        client.send(data.toString());
        // console.log("message",data.toString())
      }
    });
  });
  // Listen for WebSocket connection close events
  socket.on('close', () => {
    // Log a message when a client disconnects
    console.log('Client disconnected');
  });
});
</pre>
<p>The code above sets up a simple WebSocket server that can handle incoming connections, messages, and disconnections. When a client sends a message, the server broadcasts the message to all the connected clients except the sender.</p>
<h2 id="building-frontend">Building the frontend</h2>
<p>To set up the client side of the application, we’ll use Vue to develop the user interface and then connect to the WebSocket server using the native <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket">WebSocket</a> object.</p>
<p>The WebSocket API provides a set of methods and events that allow us to work with WebSockets on the client. These include the <code>WebSocket()</code> constructor, which creates a new WebSocket object and establishes a connection to the specified URL, the <code>send()</code> method, which sends data to the server, and the <code>onopen</code>, <code>onmessage</code>, <code>onerror</code>, and <code>onclose</code> events, which handle connection status and incoming data:</p>
<pre class="language-javascript hljs">const socket = new WebSocket('ws://localhost:3000')
</pre>
<p>The code above initializes the object of the WebSocket, and then passes the URL to where your server is hosted.</p>
<p>For the chat application, we’ll create a simple UI that starts off with a modal to save the user’s name, then displays a page with an input box for the messages that would be sent between the client and the server.</p>
<p>First, create a new project using the Vue CLI by running the following command:</p>
<pre class="language-javascript hljs">vue create socket-chat
</pre>
<p>To organize the project, we’ll create a separate <code>chat</code> component, then paste the code below to define the template structure of the page:</p>
<pre class="language-javascript hljs">&lt;template>
  &lt;div class="chat-container">
    &lt;!-- Name Input window -->
    &lt;div v-if="!connect">
        &lt;div class="modal-background">
          &lt;div class="modal-content">
            &lt;form @submit.prevent="handleSubmit">
              &lt;h3> Enter your name to start chatting &lt;/h3>
              &lt;input type="text" v-model="username" placeholder="Enter your name" />
              &lt;br>
              &lt;button type="submit"> Connect &lt;/button>
            &lt;/form>
          &lt;/div>
        &lt;/div>
      &lt;/div>
    &lt;div v-if="connect" class="chat-window">
      &lt;div class="messages-container">
        &lt;!-- &lt;ul> -->
          &lt;!-- Use a v-for directive to iterate over the messages array and display each message -->
          &lt;div v-for="(val, index) in messages" :key="index" :class="[val.username === username ? 'left-bubble' : 'right-bubble']">
              &lt;!-- Use mustache syntax to interpolate the username and message properties of each message object -->
              &lt;b>{{ val.username }}&lt;/b>: &lt;em>{{ val.message }}&lt;/em>
          &lt;/div>
        &lt;!-- &lt;/ul> -->
      &lt;/div>
      &lt;div class="chat-input">
          &lt;form @submit.prevent="handleMessageSubmit(username,text)">
          &lt;!-- Use v-model directive to bind the text input to the 'text' variable -->
          &lt;input type="text" v-model="text" placeholder="Write message..." />
          &lt;button type="submit">&lt;i class="bi bi-send ">&lt;/i> &lt;/button>
          &lt;/form>
      &lt;/div>
    &lt;/div>
  &lt;/div>
&lt;/template>
</pre>
<p>To add functionality to the app, we’ll use three main functions. For one, the <code>handleConnect</code> function checks if the user has entered a name, then assigns <code>connect</code> to <code>true</code>:</p>
<pre class="language-javascript hljs">const handleConnect = () => {
  if(username.value.length > 0) {
    connect.value = true
  }
}
</pre>
<p><code>SendMessage</code> stores the <code>username</code> and <code>text</code> in an object, then sends the object to the server using the <code>send</code> method. It also converts the object to a string using the <code>JSON.stringify()</code> method:</p>
<pre class="language-javascript hljs"> const sendMessage = (username,text) => {
        const messageData = { username: username, message: text};
        // Send the message data to the server using WebSockets
        socket.send(JSON.stringify(messageData))
        // Add the message data to the messages array
        messages.value.push(messageData)
      }
</pre>
<p>To get messages from the server, we‘ll use the <code>onmessage</code> event, then convert the string data back to the JavaScript object using the <code>JSON.parse()</code> method:</p>
<pre class="language-javascript hljs">      socket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        messages.value.push(message);
      }
</pre>
<p>And with that, we’ve successfully built a real-time chat application that can send messages between multiple clients:</p>
<p><img             class="aligncenter wp-image-161915 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/real-time-chat-application-demo-example.gif" alt="Real Time Chat Application Demo Example" width="600" height="355"  /><noscript><img               class="aligncenter wp-image-161915 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/real-time-chat-application-demo-example.gif" alt="Real Time Chat Application Demo Example" width="600" height="355"/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we explored WebSockets by building a Vue chat application that provides a seamless and fast user experience, allowing users to communicate with each other in real time. You can also build on this example to add any modifications or new features. If you have any questions, feel free to reach out to me on <a href="https://twitter.com/abiolaesther_">Twitter</a> or leave a comment below. Happy coding!</p><div class="code-block code-block-20" >
<div class="blog-plug inline-plug vue-inline"><h2>Experience your Vue apps exactly how a user does</h2> Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, <a href="https://lp.logrocket.com/blg/vue-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. </p><p>The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.</p><p>Modernize how you debug your Vue apps - <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-8 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-8 .fadeOut {
    opacity:0 !important;
}

.code-block-8 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-160719" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-real-time-vue-app-websockets/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-real-time-vue-app-websockets/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-160719" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-real-time-vue-app-websockets/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-160719" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-real-time-vue-app-websockets/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/abiola-farounbi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/abiola-farounbi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/abiolafarounbi/">
Abiola Farounbi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and technical writer with a passion for open source, accessibility, and web technologies.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/vue/">#vue</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/product-manager-interview-how-to-prepare/" rel="prev">How to prepare for a product manager interview</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/" rel="next">Next.js font optimization: Adding custom and Google fonts</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-real-time-vue-app-websockets/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to build keepAwake into your React Native app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-keepawake-react-native-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-keepawake-react-native-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to build keepAwake into your React Native app - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-keepawake-react-native-app/">How to build keepAwake into your React Native app - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166906 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react-native" id="post-166906">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/emmanueljohn/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emmanueljohn/">
Emmanuel John <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a full-stack software developer, mentor, and writer. I am an open source enthusiast. In my spare time, I enjoy watching sci-fi movies and cheering for Arsenal FC.</span>
</div>
</div>
<h1 class="posttitle">How to build <code>keepAwake</code> into your React Native app</h1>
<p>
<span class="post-date"><time class="post-date">
April 13, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1465</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/build-keepawake-react-native-app.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Build keepAwake into your React Native app without draining power"                /> <article class="article-post">
<p>Mobile devices will often go to sleep or lock the screen after a brief period of user inactivity. While this is a helpful power-saving feature, this can create a frustrating user experience in situations where the screen needs to stay on without regular input from the user, such as when playing videos, reading ebooks, or navigating with GPS.</p>
<p>Fortunately, we can request a wake lock in our application to address this problem. When a wake lock request is granted, the operating system allows the screen to remain on until it is released.</p>
<p>By the end of the article, you’ll understand how to efficiently use keep awake to prevent interruption while your application is in use.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#wake-lock">What is a wake lock?</a></li>
<li><a href="#project-setup">Project setup</a>
<ul >
<li><a href="#prerequisites">Prerequisites</a></li>
</ul>
</li>
<li><a href="#creating-video-player">Creating the video player</a></li>
<li><a href="#caching-video">Caching the video</a></li>
<li><a href="#keeping-screen-awake">Keeping the screen awake</a>
<ul >
<li><a href="#usekeepawake-hook">The <code>useKeepAwake</code> Hook</a></li>
<li><a href="#activatekeepawake-hook">The <code>activateKeepAwake</code> Hook</a></li>
</ul>
</li>
</ul>
<h2 id="wake-lock">What is a wake lock?</h2>
<p>A wake lock, or keep awake function, is a feature in operating systems that prevents the device from going to sleep when an application needs access to the system’s resources to perform a continuous task. It ensures that the device remains active, even if the user is not actively using it. It is worth noting that <code>keepAwake</code> can result in increased battery usage. You should exercise discretion when using this feature.</p>
<p>In React Native applications, we can implement keep awake using either the <a href="https://github.com/joshgachnang/react-native-wake-lock"><code>react-native-wake-lock</code></a> or <a href="https://www.npmjs.com/package/expo-keep-awake"><code>expo-keep-awake</code></a> packages. Both packages offer a similar API, but the former is no longer maintained. We’ll use the more active package, <code>expo-keep-awake</code>, in this article.</p>
<p>We’ll also use “wake lock” and “keep awake” interchangeably in this article.</p>
<h2 id="project-setup">Project setup</h2>
<p>To demonstrate how to use keep awake, we’ll develop a basic video player application. I have prepared a starter project with navigation and styling setup so we won’t need to create a new project from scratch.</p>
<h3 id="prerequisites">Prerequisites</h3>
<p>This article assumes you’re familiar with <a href="https://blog.logrocket.com/building-cross-platform-apps-expo-instead-of-react-native/">React Native and the Expo framework</a>. You should also have a mobile device or emulator where you can test the application.</p>
<p>Run the following command in your terminal to clone the <a href="https://github.com/emmanuelhashy/react-native-keep-awake">starter project from GitHub</a>:</p>
<pre class="language-bash hljs">git clone -b starter https://github.com/emmanuelhashy/react-native-keep-awake --single-branch
</pre>
<p>Next, run the command below to install the dependencies:</p>
<pre class="language-bash hljs">npx expo install
</pre>
<p>Run the command below to launch the starter project on your device:</p>
<pre class="language-bash hljs">npx expo run:android
</pre>
<p>If you prefer <a href="https://docs.expo.dev/workflow/expo-go/#how-it-works">using Expo Go</a>, you can run the following command instead:</p>
<pre class="language-bash hljs">npx expo start 
</pre>
<p>The application has two screens:</p>
<ol>
<li>Home: This shows a button that leads to the video screen</li>
<li>Video: This screen will show a video player. This is where we’ll be making changes</li>
</ol>
<p>This is what the application currently looks like:</p>
<figure id="attachment_166909"   class="wp-caption aligncenter"><img             class="size-full wp-image-166909 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/home-screen.jpeg" alt="Our home screen" width="730" height="1583"    /><noscript><img               class="size-full wp-image-166909" src="https://blog.logrocket.com/wp-content/uploads/2023/04/home-screen.jpeg" alt="Our home screen" width="730" height="1583"  /></noscript><figcaption id="caption-attachment-166909" class="wp-caption-text">Our home screen</figcaption></figure>
<figure id="attachment_166911"   class="wp-caption aligncenter"><img             class="size-full wp-image-166911 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-screen.jpeg" alt="Our video player screen" width="730" height="1583"    /><noscript><img               class="size-full wp-image-166911" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-screen.jpeg" alt="Our video player screen" width="730" height="1583"  /></noscript><figcaption id="caption-attachment-166911" class="wp-caption-text">Our video player screen</figcaption></figure>
<h2 id="creating-video-player">Creating the video player</h2>
<p>Let’s begin by adding a component for video playback to the Video screen. We can use the <a href="https://docs.expo.dev/versions/latest/sdk/av/"><code>expo-av</code> package</a> to achieve this.</p>
<p>Run the following command to install <code>expo-av</code>:</p>
<pre class="language-bash hljs">npx expo install expo-av
</pre>
<p>Next, let’s include the required imports at the top of <code>screens/video_screen.js</code>:</p>
<pre class="language-javascript hljs">import React, { useState} from "react";
import ProgressIndicator from "../components/progress_indicator"
import { Video } from "expo-av";
</pre>
<p>Then, let’s add the code below to the <code>VideoScreen</code> component:</p>
<pre class="language-javascript hljs">const [isBuffering, setBuffering] = useState(true);
    return &lt;View style={styles.container}>
        {
            isBuffering &amp;&amp; &lt;ProgressIndicator />
        }
        &lt;Video style={styles.video}
            source={{ uri: videoSource }}
            isLooping
            shouldPlay
            resizeMode="cover"
            useNativeControls
            onLoadStart={() => setBuffering(true)}
            onReadyForDisplay={() => setBuffering(false)} 
            />
    &lt;/View>
</pre>
<p>Here, we create a state to keep track of the buffering status of the video using the <code>useState</code> Hook. The state is updated when the <code>onLoadStart</code> and <code>onReadyDisplay</code> event handlers are called. In addition, the <code>ProgressIndicator</code> component is shown when the video is buffering.</p>
<p>The <code>isLooping</code> prop is enabled to ensure playback is repeated. Also, <code>shouldPlay</code> allows playback to begin immediately after the video is loaded.</p>
<p>This is what our app looks like now:</p>
<figure id="attachment_166915"   class="wp-caption aligncenter"><img             class="size-full wp-image-166915 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-buffering-screen.jpeg" alt="Our video buffering screen" width="730" height="1583"    /><noscript><img               class="size-full wp-image-166915" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-buffering-screen.jpeg" alt="Our video buffering screen" width="730" height="1583"  /></noscript><figcaption id="caption-attachment-166915" class="wp-caption-text">Our video buffering screen</figcaption></figure>
<figure id="attachment_166917"   class="wp-caption aligncenter"><img             class="size-full wp-image-166917 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-player-screen.jpeg" alt="Our video player screen" width="730" height="1583"    /><noscript><img               class="size-full wp-image-166917" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-player-screen.jpeg" alt="Our video player screen" width="730" height="1583"  /></noscript><figcaption id="caption-attachment-166917" class="wp-caption-text">Our video player screen</figcaption></figure>
<h2 id="caching-video">Caching the video</h2>
<p>Currently, the video is repeatedly downloaded from the server on each playback cycle, which is inefficient. We’ll address this problem by caching the video; the <code>expo-file-system</code> module provides APIs that can be used to implement caching.</p>
<p>Let’s add and update the imports in <code>screens</code>/<code>video_screen.js</code> to the following:</p>
<pre class="language-javascript hljs">import { downloadAsync, cacheDirectory, getInfoAsync } from "expo-file-system";
import React, { useState, useEffect} from "react";
</pre>
<p>Next, let’s add the code below to the <code>VideoScreen</code> component:</p>
<pre class="language-javascript hljs">const [videoUri, setVideoUri] = useState(null);
useEffect(() => {
        const cacheVideo = async () => {
            const cachedVideoUri = `${cacheDirectory}/demo-video.mp4}`;
            const fileInfo = await getInfoAsync(cachedVideoUri);
            if (fileInfo.exists) {
                setVideoUri(cachedVideoUri);
            } else {
                const { uri } = await downloadAsync(videoSource, cachedVideoUri);
                setVideoUri(uri)
            }
        };
        cacheVideo();
    }, []);
</pre>
<p>As you can see, we have changed the video’s URI to a state using the <code>useState</code> Hook. We have also defined a <code>useEffect</code> Hook where we are performing the caching.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>Finally, let’s update the source prop of the <code>Video</code> component to use the new state:</p>
<pre class="language-javascript hljs">&lt;Video style={styles.video}
    source={{ uri: videoUri }}
    isLooping
    shouldPlay
    resizeMode="cover"
    useNativeControls
    onLoadStart={() => setBuffering(true)}
    onReadyForDisplay={() => setBuffering(false)}
/>
</pre>
<h2 id="keeping-screen-awake">Keeping the screen awake</h2>
<p>As previously mentioned, the operating system will turn off the screen after some time by default, even if our application is still running. This behavior can be disappointing, but luckily we can fix it.</p>
<p>It is important to note that if you are running dev mode in <a href="https://docs.expo.dev/workflow/expo-go#how-it-works">Expo Go</a>. Keep awake is <a href="https://github.com/expo/expo/issues/20328#issuecomment-1337055798">enabled by default</a> to prevent the screen from going off while testing your application. However, you can run your application in production mode to see the actual app behavior.</p>
<p>To do this, use the command below:</p>
<pre class="language-bash hljs">npx expo run start --no-dev
</pre>
<p>We can use the <code>expo-keep-awake</code> package to enable <code>keep``-a``wake</code> in our React Native application. This package provides two streamlined options for activating <code>keep``-``awake</code>:</p>
<ul>
<li><code>useKeepAwake</code>: This Hook enables wake lock when the component where it’s used is mounted. However, the wake lock is released when the component is unmounted</li>
<li><code>activateKeepAwake</code>: When this function is called, it requests a wake lock. Its inverse function is <code>deactivateKeepAwake</code>, which releases the wake lock</li>
</ul>
<p>Let’s add the <code>expo-keep-awake</code> package by running the following command:</p>
<pre class="language-bash hljs">npx expo install expo-keep-awake
</pre>
<h3 id="usekeepawake-hook">The <code>useKeepAwake</code> Hook</h3>
<p>As noted previously, this Hook ensures that the screen stays on as long as the component is mounted. Using this Hook in a component that exists for the entire lifetime of the application could result in a situation where the screen continuously remains on, including when this behavior isn’t intended, which could also lead to an inverse, but equally poor user experience.</p>
<p>It is advisable to only use this Hook at the actual component where it is needed, which in our example is the <code>VideoScreen</code>.</p>
<p>Let’s add the import below to <code>screens/video_screen.js</code>:</p>
<pre class="language-javascript hljs">import { useKeepAwake } from "expo-keep-awake";
</pre>
<p>Next, let’s use the Hook by adding it to the <code>VideoScreen</code> component:</p>
<pre class="language-javascript hljs">useKeepAwake();
</pre>
<h3 id="activatekeepawake-hook">The <code>activateKeepAwake</code> Hook</h3>
<p>An alternative way of activating keep awake is using the <code>activateKeepAwake</code> function. Unlike the <code>useKeepAwak``e</code> Hook, this gives us greater control over when to activate and deactivate keep awake.</p>
<p>Let’s update the <code>expo-keep-awake</code> import to the following:</p>
<pre class="language-javascript hljs">import { activateKeepAwakeAsync, deactivateKeepAwake } from "expo-keep-awake";
</pre>
<p>Next, let’s remove the <code>useKeepAwake</code> Hook from the <code>VideoScreen</code> component and also add the following code:</p>
<pre class="language-javascript hljs">const [playbackStatus, setPlaybackStatus] = useState(false)
const handlePlaybackStatus = (newPlaybackStatus) => {
    setPlaybackStatus(newPlaybackStatus.isPlaying)
}
</pre>
<p>Here, we have created a <code>playbackStatus</code> state using the <code>useState</code> Hook and also defined a handler for updating the <code>playbackStatus</code>.</p>
<p>Now, let’s add the code below to the <code>VideoScreen</code> component:</p>
<pre class="language-javascript hljs">useEffect(() => {
    const enableKeepAwake = async () => {
        await activateKeepAwakeAsync();
    }
    if (playbackStatus) {
        enableKeepAwake();
    } else {
        deactivateKeepAwake();
    }
}, [playbackStatus]);
</pre>
<p>As you can see, we have defined a <code>useEffect</code> Hook that activates and deactivates keep awake depending on the status of the <code>playbackStatus</code> state.</p>
<p>Finally, let’s add the <code>onPlaybackStatusUpdate</code> event handler prop to the <code>Video</code> component, as shown below:</p>
<pre class="language-javascript hljs">&lt;Video style={styles.video}
            source={{ uri: videoUri }}
            isLooping
            shouldPlay
            resizeMode="cover"
            useNativeControls
            onLoadStart={() => setBuffering(true)}
            onReadyForDisplay={() => setBuffering(false)}
            onPlaybackStatusUpdate={handlePlaybackStatus}
        />
</pre>
<p>This prop triggers the <code>handlePlaybackStatus</code> function when the playback status changes. When running the final version of this project, the screen will remain turned on while our video player application is running.</p>
<p><img             class="aligncenter size-full wp-image-166923 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-playing-keepawake-screen.gif" alt="Our video playing on our keepAwake screen" width="730" height="1578"  /><noscript><img               class="aligncenter size-full wp-image-166923" src="https://blog.logrocket.com/wp-content/uploads/2023/04/video-playing-keepawake-screen.gif" alt="Our video playing on our keepAwake screen" width="730" height="1578"/></noscript></p>
<h2>Conclusion</h2>
<p><code>keepAwake</code> is a useful feature in mobile applications that require prolonged use, particularly video players, gaming apps, and ereader apps. However, it can potentially lead to a poor user experience if implemented incorrectly.</p>
<p>Having covered the different ways in which keep awake can be used in React Native applications, I hope you fully understand how to implement it in your applications moving forward. You can find the <a href="https://github.com/emmanuelhashy/react-native-keep-awake">complete source code on GitHub</a>.</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166906" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-keepawake-react-native-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-keepawake-react-native-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166906" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-keepawake-react-native-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166906" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-keepawake-react-native-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emmanueljohn/">
Emmanuel John <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a full-stack software developer, mentor, and writer. I am an open source enthusiast. In my spare time, I enjoy watching sci-fi movies and cheering for Arsenal FC.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react-native/">#react native</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/using-react-native-reanimated-seamless-ui-transitions/" rel="prev">Using React Native Reanimated for seamless UI transitions</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/building-typescript-cli-node-js-commander/" rel="next">Building a TypeScript CLI with Node.js and Commander</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-keepawake-react-native-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to convert Figma components to Next.js with Tailwind CSS - LogRocket Blog</title>
			<link>https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to convert Figma components to Next.js with Tailwind CSS - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/">How to convert Figma components to Next.js with Tailwind CSS - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-167358 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-nextjs" id="post-167358">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/muratyuksel/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/10/murat-yuksel.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/10/murat-yuksel.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/muratyuksel/">
Murat Yüksel <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Full stack web developer specializing in MERN stack and blockchain development with Solidity and experienced in technical writing. Visit my site at muratcanyuksel.tech.</span>
</div>
</div>
<h1 class="posttitle">How to convert Figma components to Next.js with Tailwind CSS</h1>
<p>
<span class="post-date"><time class="post-date">
April 25, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">11 min read</span>
<span class="wordcount">3286</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/convert-next-js-component-figma.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Convert Nextjs Component Figma"                /> <article class="article-post">
<p>In this era of rapid development, design standards can pose a serious issue for developers. In this article, we’ll explore whether there is an easy, automatic way to convert <a href="https://www.figma.com">Figma</a> designs into Next.js code. Then, we’ll cover a fast method to convert Figma to Next.js using Tailwind CSS. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#figma">What is Figma?</a></li>
<li><a href="#next-js">What is Next.js?</a></li>
<li><a href="#easy-way-convert-figma-next-js">Is there an easy way to convert from Figma to Next.js?</a></li>
<li><a href="#convert-figma-next-js-code-tailwind-css">How to convert Figma to Next.js code using Tailwind CSS</a></li>
</ul>
<h2 id="figma">What is Figma?</h2>
<p>Figma is a <a href="https://blog.logrocket.com/ux-design/making-website-mockup-figma/">cloud-based design and prototyping tool</a> that allows you to create designs for websites and mobile apps. Figma is a collaborative tool that allows you to work with your team in real time, offering features like vector editing, real-time design collaboration, sharing, prototyping, plugins, and more.</p>
<p>Nowadays, remote work is a serious thing. Let’s say you’re on a virtual call with your team members, including the project manager, the designer, and you, the developer. With Figma, you can all look at and make changes to the Figma file in real time, thereby simplifying the process.</p>
<h2 id="next-js">What is Next.js?</h2>
<p>Next.js is a React framework that allows you to build server-side rendered and static web applications. When I was just dealing with frontend development and had no knowledge of backend development, I didn’t quite understand the hype for Next.js. After all, most of the terminology used in Next.js is on a more holistic level.</p>
<p>The real difference between Next.js and React is that to build a full-stack application, you don’t need to wrap up a server using any other server-side language, like Ruby, Python, or Node.js.</p>
<p><a href="https://blog.logrocket.com/build-api-serverless-functions-next-js/">Next.js supports a technology called serverless functions</a>, which basically allow you to write a whole application without leaving your main folder. In this article, we won’t cover <a href="https://blog.logrocket.com/implementing-ssr-next-js-dynamic-routing-prefetching/">server-side rendering and all the other cool features that Next.js offers</a>, but I felt the need to mention it so we understand the basics of Next.js.</p>
<p>Next.js also supports different types of hooks, like <code>getStaticProps</code> and <code>getServerSideProps</code>, which allow you to fetch data on the server side to help with SEO. Apart from that, Next.js comes with built-in routing, automatic code splitting, and many other features that make it a great tool for building web applications.</p>
<h2 id="easy-way-convert-figma-next-js">Is there an easy way to convert from Figma to Next.js?</h2>
<p>There are some tools that can automatically turn your designs into code, like <a href="https://www.locofy.ai/convert/figma-to-react">L<span class="thread-822623124136494571434465 attrcomment attrcommentfirst thread-822623124136494571434465-first author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz80zt2kscebz76z1jz76zz86zz88z9z78z9z79zfz70z28hscz69zlz83zz82zz68zz71z" role="mark" aria-details="comment-thread-822623124136494571434465"><span class="comment-extra-inner-span">ocofy.ai</span></span></a>, <a href="https://www.animaapp.com/">anima</a>, and <a href="https://www.figma.com/community/plugin/949398715671878472/Figma-to-React-%7C-CopyCat">CopyCat</a>. But, they do have a price. I found one free option, a <a href="https://www.figma.com/blog/introducing-figma-to-react/">Figma plugin called Figma to Reactjs</a>, however, it’s not very effective in my opinion. And, as you can probably guess from the name, it doesn’t support Next.js.</p>
<p>I’ll demonstrate the main problem I’ve found with it by using a concrete example. If you take a very basic input field with some simple styling and convert it using the plugin mentioned above, you’ll get a result very similar to the following:</p>
<pre class="language-javascript hljs">const  Group1000001930: React.VFC = () => {
return (
   &lt;div className="group-1-0-0-0-0-0-1-9-3-0">
     &lt;div className="rectangle-4-4-3-2" />
    &lt;p className="text-1">Your Name&lt;/p>
    &lt;/div>
  )
}
.group-1-0-0-0-0-0-1-9-3-0 {
  height: 50px;
 width: 370px;
}
.rectangle-4-4-3-2 {
  border-radius: 5px;
  height: 50px;
  width: 370px;
background-color: #ffffff;
  border: 1px solid #f0f0f0;
}
.text-1 {
  text-align: left;
  vertical-align: top;
  font-size: 15px;
  font-family: Inter;
line-height: 20%;
  color: #637381;
}
</pre>
<p>Let’s overlook the fact that this code is very optimized for TypeScript. The code looks nice, and it gives the correct color, height, and width. It might work if we took small components and wrapped them by hand, but since we’re talking about Next.js, we have a serious problem with class names.</p>
<p>In Next.js, CSS files work a bit differently than React. Instead of having separate CSS files as usual, Next.js uses a modular approach. Therefore, you’d use files with names like <code>Home.module.css</code>. Whenever you want to use the styling in those files, you have to import and use them in the following manner:</p>
<pre class="language-javascript hljs">import styles from "../styles/Home.module.css";
&amp;lt;div className={styles.groupOne}>
  &lt;div className={styles.divOne} />
  &lt;p className={styles.paraOne}>Your Name&lt;/p>
&lt;/div>;
</pre>
<p>In the code above, we assume that the <code>groupOne</code>, <code>divOne</code>, and <code>paraOne</code> classes are the classes defined in the <code>Home.module.css</code> file. I’m not even talking about the imported names, like <code>.group-1-0-0-0-0-0-1-9-3-0</code>. To use them as imported from the plugin, we’d need to change each one of them by hand. Honestly, I don’t see much of a point in working like this.</p>
<p>Let’s consider another option. In a more traditional sense, I’m a developer, I develop stuff, and I know how to read a design and convert it to code. If I want to do I good job and satisfy my clients, I don’t need a tool to do that for me. But, trying to style everything using only CSS would take a lot of time. Therefore, I’ll use another type of tool, the Tailwind CSS framework.</p>
<h2 id="convert-figma-next-js-code-tailwind-css">How to convert Figma to Next.js code using Tailwind CSS</h2>
<p>Let’s consider the following scenario. I have a client who presents me with a Figma file and wants a pixel-perfect version of it in Next.js. The deadline is quite soon, so I’ll have to work quickly. For a variety of reasons, I can’t use any paid tools, so I’ll be have to code it myself.</p>
<p>In this scenario, the first thing I’ll do is decide what stack to use. As you probably know, sometimes, clients have a specific stack in mind. They might want you to convert the Figma file into Next.js code using a particular UI framework, like Bootstrap, styled-components, MUI, or Tailwind CSS.</p>
<p>If they don’t have a requirement for the UI framework, then I’d review the project thoroughly and decide which framework would be the best in this case. If the design is repetitive and startup-style, I’d choose Bootstrap. If the project is an enterprise level application with a lot of functionality, like modals, popovers, etc. I choose MUI. If there are many repetitive components in the design, I go with styled-components. And, finally, if there are many unique pieces in the design, I choose Tailwind CSS.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>But, this is just my two cents. Everyone has their own stack and preferences. For the sake of this tutorial, I’ll go with Tailwind CSS because it is easy to write and understand and quick to code.</p>
<p>I have the following Figma design:</p>
<p><img             class="aligncenter wp-image-167382 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/figma-tailwind-css-application-homepage.png" alt="Figma Tailwind CSS Application Homepage" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167382 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/figma-tailwind-css-application-homepage.png" alt="Figma Tailwind CSS Application Homepage" width="730" height="341"  /></noscript></p>
<p>I’ve already decided on my tech stack, so it’s time to actually code it. Before you begin tinkering with Figma’s features, you should have a mental model of how to turn this design into code.</p>
<p>I’m a big fan of Flexbox. When I look at this image, I see two components that are positioned via the <code>flex-direction</code> row. I’ll name the left one <code>Contact.js</code> and the right one <code>Form.js</code>. Then, I’ll open my Next.js application, and in my <code>src</code> folder, I’ll create a <code>components</code> folder and add the aforementioned files into it.</p>
<p>To start with, I’ll import them into my <code>index.js</code> file as follows:</p>
<pre class="language-javascript hljs">import React from "react";
import Contact from "@/components/Contact";
import Form from "@/components/Form";
const index = () => {
  return (
    &lt;div className="flex  flex-col md:flex-row bg-[#FFFFFF]">
      &lt;div className="w-full ">
        &lt;Contact />
      &lt;/div>
      &lt;div className="w-full ">
        &lt;Form />
      &lt;/div>
    &lt;/div>
  );
};
export default index;
</pre>
<p>Then, I’ll go to <code>Contact.js</code> and start tinkering with it. On this page, up to elements with icons, we have elements positioned as <code>column</code>, which is the default behavior.</p>
<p>When we come to the elements with icons, like <code>Our Location</code>, <code>Phone Number</code>, and <code>Email Address</code>, I see another Flexbox command. Each of these elements can be divided into two components, with their parents given a <code>flex-direction</code> row. The left element is the icon, and the right element is a collection of texts that are positioned with the <code>flex-direction</code> column. Or, you can leave them as is because the default behavior is to position the elements as columns.</p>
<p>So far, I don’t even need to use Figma’s features. I have my layout in my mind, which means that when I start to code, I’ll code faster and with more confidence. But, now, I need some extra knowledge to achieve pixel-perfect, or near pixel-perfect code. I say near, because as a developer, we might have to go above and beyond what the designer has given in the design file.</p>
<p>Due to Figma’s restrictions, I’ll only be able to see the dimensions as concretely as possible, while in the real world, I’d deal with extra-small and extra-large screen sizes. Therefore, I must think in terms of relativity and responsiveness, which isn’t provided in this design.</p>
<p>I’ll have to consider that this page cannot be shown as is on a mobile device. Remember, our initial idea was that the whole page would consist of two components that are positioned with a <code>flex-direction</code> row, but, in the case of a mobile device, they’ll be positioned as a <code>flex-direction</code> column. Anyway, back to Figma.</p>
<p>I want to start with the first text I see on the page, <code>Contact Us</code>. To code it as perfectly as possible, I need to know the exact HEX code of the color, its size, font weight, and line height, if possible. I double click on that element, and as soon as I do that, Figma shows me the element’s properties on the right side of the screen:</p>
<p><img             class="aligncenter wp-image-167384 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-figma-show-element-properties.png" alt="Figma Show Element Properties" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167384 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-figma-show-element-properties.png" alt="Figma Show Element Properties" width="730" height="341"  /></noscript></p>
<p>Around the bottom, under the <code>Fill</code> section, I see that the color is <code>#3056D3</code>. On top of the <code>Fill</code> section is the <code>Text</code> section. When I look there, I see that the font name is <code>Inter</code>. Under it, it says the font weight is <code>Semi Bold</code>. Right next to it, I see the number <code>16</code>, which means that the font size is <code>16px</code>. Under <code>Semi Bold</code>, I see the number <code>20</code>, meaning that the line height is <code>20px</code>.</p>
<p>I could click on any of these sections, change them as I wish, and the new style would be shown on the Figma file. To see things in a more code-friendly way, I can also click on the <strong>Inspect</strong> section at the very top of the right section. Check out the image below:</p>
<p><img             class="aligncenter wp-image-167386 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-figma-inspect-code.png" alt="Figma Inspect Code" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167386 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-figma-inspect-code.png" alt="Figma Inspect Code" width="730" height="341"  /></noscript></p>
<p>Now, I’ll extrapolate these into my code. Then, I go to my <code>Contact.js</code> file and add it as follows:</p>
<pre class="language-javascript hljs">import React from "react";
const Contact = () => {
  return (
    &lt;div&amp;gt;
      &lt;h5 className="text-[#3056D3] font-semibold text-[16px] leading-5">
        Contact Us
      &lt;/h5>
    &lt;/div>
  );
};
export default Contact;
</pre>
<p>The code above is the domain of Tailwind CSS. It’s not very practical to try to memorize all of these commands, so I keep the <a href="https://tailwindcss.com/docs/installation">Tailwind CSS docs</a> open when I develop. To search for a specific command, I only need to press <code>CTRL + K</code>, and I’ll see suggestions on what I’m looking for in the documentation.</p>
<p>I created an <code>h5</code> element that takes Tailwind CSS classes. I add the color I’ve taken from Figma as text <code>[#3056D3]</code>, specify that its font is semi-bold, the text itself is <code>16px</code>, and the line height is <code>20px</code> by writing <code>leading-5</code>. I see all of these commands in the documentation as follows:</p>
<p><img             class="aligncenter wp-image-167377 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/4-specify-tailwind-css-line-height-class.png" alt="Specify Tailwind CSS Line Height Class" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167377 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/4-specify-tailwind-css-line-height-class.png" alt="Specify Tailwind CSS Line Height Class" width="730" height="341"  /></noscript></p>
<p>Now, I go back to the design and see that I need some margins. In Figma, there’s a way to see the distance between elements in <code>px</code>. To do so, you need to double click one of the elements and hover the cursor on another, which will show the distance between the two elements in pixels:</p>
<p><img             class="aligncenter wp-image-167375 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/5-figma-distance-between-elements-px.png" alt="Figma Distance Between Elements PX" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167375 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/5-figma-distance-between-elements-px.png" alt="Figma Distance Between Elements PX" width="730" height="341"  /></noscript></p>
<p>But, there’s a problem here. I can’t rely on pixels alone because I have to take into account that there will be different screen sizes. In this case, I try to understand the relation between elements, and again, I create a mental model of it and add the styles myself.</p>
<p>I see that padding for the left and right is a bit smaller than the padding for the top and bottom. I use this model to write my code. I also follow the same process for the next elements, which I’ve done for <code>Contact Us</code>. I check their colors, sizes, line heights, etc., trying my best to make it pixel-perfect:</p>
<pre class="language-javascript hljs">import React from "react";
const Contact = () => {
  return (
    &lt;div className="h-full p-10 lg:px-28 lg:py-32 ">
    &lt;h5 className="text-[#3056D3] font-semibold text-[16px] leading-5 mb-2">
        Contact Us
      &lt;/h5>
      &lt;h1 className="text-[#212B36] font-bold text-[40px] leading-10 mb-7">
        Get In Touch With Us
      &lt;/h1>
      &lt;p className="text-[#637381] text-[16px] leading-7">
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sequi numquam
        sapiente quod culpa qui minus itaque nesciunt cupiditate saepe
        praesentium? Exercitationem natus optio debitis quos recusandae
        assumenda? Aperiam, accusantium id.
      &lt;/p>
    &lt;/div>
  );
};
export default Contact;
</pre>
<p>Below is the result so far:</p>
<p><img             class="aligncenter wp-image-167373 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/6-inspect-figma-elements-comtact-page.png" alt="Inspect Figma Elements Contact Page" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167373 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/6-inspect-figma-elements-comtact-page.png" alt="Inspect Figma Elements Contact Page" width="730" height="341"  /></noscript></p>
<p>I added an additional border to have a better picture of the development process. Once I’m finished, I’ll delete that border.</p>
<p>Now, I need to add the parts with icons. As I mentioned before, I’ve modeled them as Flexboxes. But, before styling them, I need the icons. To get them, I double click on the icon I wish to download, and then I choose the <strong>export</strong> section at the very bottom of the right side. I can export the icon in whatever form I want, like <code>.png</code>, <code>.svg</code>, etc. I’ll choose <code>.png</code>:</p>
<p><img             class="aligncenter wp-image-167371 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/7-figma-add-flexbox-icons-contact-page.png" alt="Figma Add Flexbox Icons Contact Page" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167371 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/7-figma-add-flexbox-icons-contact-page.png" alt="Figma Add Flexbox Icons Contact Page" width="730" height="341"  /></noscript></p>
<p>Now that I’ve downloaded the icon, I can code the element. But, since there are three elements that are pretty much the same as each other, it might be better if I created a separate component and used props to write them. Therefore, I won’t repeat myself, per the <a href="https://blog.logrocket.com/typescript-mapped-types/">DRY principles</a>.</p>
<h2 id="collectioncomponent">Collection component</h2>
<p>Create a new file, call it <code>Collection.js</code>, and populate it with the following code:</p>
<pre class="language-javascript hljs">import Image from "next/image";
import React from "react";
const Collection = ({ icon, title, para }) => {
  return (
    &lt;div className="flex flex-row my-12">
      &lt;div className="bg-[#3056d30d] w-20 h-20  mr-7 flex justify-center items-center">
        &lt;Image width="24" height="24" src={icon} alt="" />
      &lt;/div>
    &lt;div className="w-full">
       &lt;h2 className="font-semibold text-[20px] leading-5 mb-2">{title}&lt;/h2>
        &lt;p className="text-[#637381] text-[16px] leading-7 w-56">{para}&lt;/p>
      &lt;/div>
    &lt;/div>
  );
};
export default Collection;
</pre>
<p>My idea is to map this component in my <code>Contact.js</code> file. Therefore, I’ve de-structured <code>props</code> at the top in <code>({ icon, title, para })</code>. I de-structure the props coming from the parent <code>Contact.js</code> file so that I don’t have to use the <code>props</code> keyword each time I use them.</p>
<p>So far so good, but how did I write the styles, and how did I get them from the Figma file? As usual, I clicked the elements, looked for their values, and thought about how it would fit into the page. Nothing new here. But, as I was doing that, I encountered a problem.</p>
<p>You see, the icons are positioned onto a different background than the general background of the app. I want to select it, but when I look for it, I see something that might not be as easy to implement in Tailwind CSS. Check out the image below:</p>
<p><img             class="aligncenter wp-image-167369 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/8-figma-tailwind-css-background-color-issue.png" alt="Figma Tailwind CSS Background Color Issue" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167369 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/8-figma-tailwind-css-background-color-issue.png" alt="Figma Tailwind CSS Background Color Issue" width="730" height="341"  /></noscript></p>
<p>Do you see the problem? The background is given as a <code>rgba</code> color <code>background: rgba(48, 86, 211, 0.05);</code>.</p>
<p>So, I need to deal with opacity. But, when I want to do it with Tailwind CSS, I encounter a few problems. Remember, we’re using Tailwind CSS to be as fast as possible. If I give the opacity as suggested, the child element of the background element, which is the <code>icon</code> element, will be affected by it too. I definitely don’t want that.</p>
<p>I’ll either have to change my Flexbox approach and do away with the z-index, or I’ll have to think of something else. I choose the latter option and decide to convert the RGBA color to a HEX color. You can find some <a href="https://rgbacolorpicker.com/rgba-to-hex">tools on Google</a> for this purpose. The HEX color that is the equal of this specific RGBA color is <code>#3056d30d</code>. When I use it, everything works as expected.</p>
<p>There’s one more thing to mention here, the <code>Image</code> tag. As you can see, it’s imported from <code>"next/image"</code>. In Next.js, instead of using the classical HTML <code>&lt;img></code> tag, we use Next.js’s own <code>Image</code> tag. We need to give it a height and width.</p>
<p>In my <code>Contact.js</code> file, I import the icons that I’ve saved in the <code>assets</code> folder, which I’ve also created. Create an array of objects called <code>data</code> and map the <code>Collection</code> component while passing the relevant props:</p>
<pre class="language-javascript hljs">import React from "react";
import Collection from "./Collection";
import house from "@/assets/house.png";
import email from "@/assets/email.png";
import phone from "@/assets/phone.png";
const Contact = () => {
  const data = [
    {
      title: "Our Location",
      para: "99 S.t Jomblo Park Pekanbaru 28292. Indonesia",
      icon: house,
    },
    { title: "Phone Number", para: "(+62)81 414 257 9980", icon: phone },
    { title: "Email Address", para: "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f39a9d959cb38a9c8681979c9e929a9ddd909c9e">[email protected]</a>", icon: email },
  ];
  return (
    &lt;div className=" h-full   p-10 lg:px-28 lg:py-32    ">
      &lt;h5 className="text-[#3056D3] font-semibold text-[16px] leading-5 mb-2">
        Contact Us
      &lt;/h5>
    &lt;h1 className="text-[#212B36] font-bold text-[40px] lg:text-[35px] leading-10 mb-7">
       Get In Touch With Us
      &lt;/h1>
      &lt;p className="text-[#637381] text-[16px] leading-7">
        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sequi numquam
        sapiente quod culpa qui minus itaque nesciunt cupiditate saepe
        praesentium? Exercitationem natus optio debitis quos recusandae
        assumenda? Aperiam, accusantium id.
      &lt;/p>
      {data.map((item, index) => (
        &lt;Collection
          key={index}
          title={item.title}
          para={item.para}
          icon={item.icon}
        />
      ))}
    &lt;/div>
  );
};
export default Contact;
</pre>
<h2 id="formcomponent">Form component</h2>
<p>Now, I’ll need to populate the <code>Form.js</code> file. I’ll use the methods I’ve demonstrated so far to see what I need, for example, what color, how should I deal with the dimensions, etc:</p>
<pre class="language-javascript hljs">import React from "react";
const Form = () => {
  return (
    &lt;div className="  h-full   p-10 lg:px-28 lg:py-32 ">
      &amp;lt;div className="bg-[#FFFFFF] drop-shadow-lg  h-full w-full p-10">
      &lt;input
          type="text"
          placeholder="Your Name "
          className=" border border-[#F0F0F0] w-full h-[50px] rounded-lg p-5 mb-5"
      />{" "}
        &lt;input
          type="text"
          placeholder="Your Email "
          className=" border border-[#F0F0F0] w-full h-[50px] rounded-lg p-5 mb-5"
        />{" "}
        &lt;input
          type="text"
          placeholder="Your Phone "
         className=" border border-[#F0F0F0] w-full h-[50px] rounded-lg p-5 mb-5"
        />
        &lt;textarea
          name=""
          id=""
          cols="30"
         rows="10"
         placeholder="Your Message"
          className=" border border-[#F0F0F0] w-full  rounded-lg p-5 mb-5"
        >&lt;/textarea>
        &lt;button className="bg-[#3056D3] w-full h-[50px]  rounded-lg p-5 mb-5 flex justify-center items-center">
          &lt;p className="text-white leading-5">Send Message&lt;/p>
        &lt;/button>
      &lt;/div>
    &lt;/div>
  );
};
export default Form;
</pre>
<p>Now, my application should look like the following image:</p>
<p><img             class="aligncenter wp-image-167367 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/9-final-figma-tailwind-css-next-application.png" alt="Final Figma Tailwind CSS Next Application" width="730" height="341"    /><noscript><img               class="aligncenter wp-image-167367 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/9-final-figma-tailwind-css-next-application.png" alt="Final Figma Tailwind CSS Next Application" width="730" height="341"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we learned how to convert Figma designs into Next.js code by using Tailwind CSS. I demonstrated how you can use a mental model to create a sleek design without needing a paid tool. I also talked about the Figma to Reactjs plugin, but I decided to write my own code at the end for a better result.</p>
<p>I hope you enjoyed reading this article and learned something from it. Keep calm and keep coding!</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-167358" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-167358" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-167358" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/10/murat-yuksel.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/10/murat-yuksel.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/muratyuksel/">
Murat Yüksel <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Full stack web developer specializing in MERN stack and blockchain development with Solidity and experienced in technical writing. Visit my site at muratcanyuksel.tech.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/nextjs/">#nextjs</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/agile-team-working-agreement-examples-template/" rel="prev">What is a team working agreement? Examples and template</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-managemennt/what-is-incremental-innovation/" rel="next">What is incremental innovation and how does it work?</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/convert-figma-components-next-js-tailwind-css/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to fix a NullPointerException in Android - LogRocket Blog</title>
			<link>https://blog.logrocket.com/fix-nullpointerexception-android/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/fix-nullpointerexception-android/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to fix a NullPointerException in Android - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/fix-nullpointerexception-android/">How to fix a NullPointerException in Android - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-167762 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-kotlin" id="post-167762">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/mamtadalal/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/mamta-dalal.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/mamta-dalal.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/mamtadalal/">
Mamta Dalal <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Mamta Dalal is a technology enthusiast and freelance writer. She has worked with several different technologies and is always eager to learn newer ones.</span>
</div>
</div>
<h1 class="posttitle">How to fix a <code>NullPointerException</code> in Android</h1>
<p>
<span class="post-date"><time class="post-date">
April 20, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1816</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<img width="730" height="475" src="https://blog.logrocket.com/wp-content/uploads/2023/04/fix-null-pointer-exceptions-android.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="How to fix NullPointerExceptions in Android"                /> <article class="article-post">
<p>You have just finished creating an Android-based application and attempt to execute it. As far as you know, the application is fine, there are no syntax errors and the code should just work fine. But when you run it now, your application quits saying an uncaught <code>RuntimeException</code> was thrown. Attempting to dig up the cause, you find something that gives you a clue: a <code>NullPointerException</code> has occurred.</p>
<p>With this, you begin your journey into the world of exception handling with Android, in particular, handling <code>NullPointerException</code>. In this post, we’ll discuss how to fix <code>NullPointerException</code>s in Android apps.</p>
<p><em>Jump ahead</em>:</p>
<ul>
<li><a href="#what-is-null-pointer-exception">What is a <code>NullPointerException</code>?</a>
<ul >
<li><a href="#why-do-null-pointer-exceptions-occur">Why do <code>NullPointerException</code>s occur?</a></li>
</ul>
</li>
<li><a href="#avoiding-null-pointer-exceptions-java">Avoiding <code>NullPointerException</code>s in Java</a>
<ul >
<li><a href="#using-smartcast">Using SmartCast</a></li>
<li><a href="#using-elvis-operator">Using the Elvis operator</a></li>
</ul>
</li>
<li><a href="#avoiding-null-pointer-exceptions-kotlin">Avoiding <code>NullPointerException</code>s in Kotlin</a></li>
<li><a href="#using-logcat-detect-fix-null-pointer-exception-android-studio">Using <code>logcat</code> to detect and fix a <code>NullPointerException</code> in Android Studio</a></li>
<li><a href="#setting-breakpoints-debug-null-pointer-exceptions">Setting breakpoints to debug <code>NullPointerException</code>s</a></li>
</ul>
<h2 id="what-is-null-pointer-exception">What is a <code>NullPointerException</code>?</h2>
<p>First, let’s quickly refresh ourselves on exceptions. They are events or abnormal conditions in a program that occur during execution and disrupt the normal flow of the program.</p>
<p>An exception can occur for different reasons, such as:</p>
<ul>
<li>A user enters invalid data to a field</li>
<li>A file that must be opened cannot be found</li>
<li>A network connection is lost in the middle of communication</li>
<li>The JVM has run out of memory</li>
</ul>
<p>When an error occurs inside a method, it throws an exception. A <code><a href="https://developer.android.com/reference/java/lang/NullPointerException">NullPointerException</a></code> is one of the most common runtime exceptions.</p>
<p>In Java, <code>null</code> is a special value that represents the absence of a value. When you try to use a <code>null</code> value, you get a <code>NullPointerException</code> because the operation you are trying to perform cannot be completed on a <code>null</code> value.</p>
<p>In Kotlin, <code>null</code> is not a value, but a <a href="https://blog.logrocket.com/complete-guide-null-safety-kotlin/">type of its own called nullable</a>. By default, every object in Kotlin is non-null, which means it cannot have a null value.</p>
<h3 id="why-do-null-pointer-exceptions-occur">Why do <code>NullPointerException</code>s occur?</h3>
<p>You might encounter a <code>NullPointerException</code> when trying to access a view, resource, or data that hasn’t been properly initialized or loaded yet. Some of the situations in which a <code>NullPointerException</code> can occur in Java, according to the <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html">Java Language Specification</a>, include:</p>
<ul>
<li>Attempting to access elements of a <code>null</code> array</li>
<li>Using <code>switch</code> with a null expression</li>
<li>Accessing instance fields of <code>null</code> references</li>
<li>Invoking instance methods of a <code>null</code> reference</li>
<li>Using an integer or floating point operator that has one of its operands as a boxed <code>null</code> reference</li>
<li>Attempting an unboxing conversion with the boxed value as <code>null</code></li>
<li>Calling <code>super</code> on a <code>null</code> reference</li>
</ul>
<h2 id="avoiding-null-pointer-exception-java">Avoiding <code>NullPointerException</code>s in Java</h2>
<p>Below are some best practices to avoid <code>NullPointerException</code>s in Java:</p>
<ul>
<li>String comparison with literals</li>
<li>Avoid returning null from your methods</li>
<li>Keep checking arguments of methods</li>
<li>Use <code>String.valueOf()</code> rather than <code>toString()</code></li>
<li>Using primitives data types as much as possible</li>
<li>Avoid chained method calls</li>
<li>Use ternary operator</li>
</ul>
<p>By contrast, Kotlin is a smarter, more modern language that has been designed to avoid <code>NullPointerException</code>s through several mechanisms, such as:</p>
<ul>
<li>Using nullable and non-nullable types</li>
<li>Using the SmartCast feature</li>
<li>Safe calls</li>
<li>The Elvis operator</li>
</ul>
<p>In Kotlin, all regular types are non-nullable unless you explicitly mark them as nullable with a question mark <code>?</code>, e.g., <code>String?</code>.</p>
<p>Consider the below Kotlin code:</p>
<pre class="language-kotlin hljs">fun getlen(name: String) = name.length
</pre>
<p>The parameter <code>name</code> has a type of <code>String</code>, which means it must always contain a <code>String</code> instance and cannot contain <code>null</code>. This code ensures that a <code>NullPointerException</code> at runtime is unlikely to occur.</p>
<p>Instead, any attempt to pass a <code>null</code> value to the <code>getlen(name: String)</code> function will cause a compile-time error: <code>Null cannot be a value of a non-null type String</code>. This is because the compiler has enforced the rule that arguments of <code>getlen()</code> cannot be null.</p>
<p>Consider the below snippet, in which the code is obvious to us but may not be immediately obvious to the compiler:</p>
<pre class="language-kotlin hljs">class TestNPE {
    companion object {
        @JvmStatic
        fun main(args: Array&lt;String>) {
        var m : String? // here, m is declared as nullable
println("m is : $m")
var x: Int
x = 150
if (x == 150)
    println("Value of m is : $m")
        }
    }
}
</pre>
<p>The compiler raises a compiler error because <code>m</code> is not initialized:</p>
<p><img             class="aligncenter size-full wp-image-167767 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/compiler-error-m-not-initialized.png" alt="A compiler error is raised because m is not initialized" width="730" height="30"    /><noscript><img               class="aligncenter size-full wp-image-167767" src="https://blog.logrocket.com/wp-content/uploads/2023/04/compiler-error-m-not-initialized.png" alt="A compiler error is raised because m is not initialized" width="730" height="30"  /></noscript></p>
<p>Thus, instead of proceeding to runtime and then raising an exception, it stops at the compilation stage with a compiler error.</p>
<h3 id="using-smartcast">Using SmartCast</h3>
<p>In order to use nullable types, Kotlin has an option called <a href="https://blog.logrocket.com/type-casting-kotlin-unsafe-vs-safe/">safe cast, or smart cast</a>. Through this feature, the Kotlin compiler will trace situations inside <code>if</code> and other conditional expressions. So, if the compiler finds a variable belonging to a non-null type, it will allow you to access this variable safely.</p>
<p>In certain cases, it is not possible for the compiler to cast types, in which case it will throw an exception; this is called unsafe casting. Consider a nullable string (<code>String?</code>) which cannot be cast to a non-nullable string (<code>String</code>). It will throw an exception.</p>
<p>Kotlin addresses this by providing a safe cast operator <code>as?</code> to cast safely to another type. If casting is not possible, it returns a <code>null</code> rather than throwing a <code>ClassCastException</code>.</p>
<p>Example:</p>
<pre class="language-kotlin hljs">val aInt: Int? = a as? Int
</pre>
<h3 id="using-elvis-operator">Using the Elvis operator <code>?:</code></h3>
<p>Kotlin also has an advanced operator called the Elvis operator (<code>?:</code>) that returns either a non-null value or the default value, even if the conditional expression is null. It also checks the null safety of values.</p>
<p>Consider an example:</p>
<pre class="language-kotlin hljs">val count = attendance?.length ?: -1
</pre>
<p>This means:</p>
<pre class="language-kotlin hljs">val count: Int = if (attendance != null) attendance.length else -1
</pre>
<p>Despite this, an <code>NullPointerException</code> could still occur in Kotlin-based Android applications.</p>
<p>Consider the earlier example of class <code>TestNPE</code>. Now, the code is modified such that <code>m</code> is initialized but is used with a non-null assertion operator (<code>!!</code>), which converts a given value to a non-null type and throws an exception if the value is <code>null</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<pre class="language-kotlin hljs">class TestNPE {
    companion object {
        @JvmStatic
        fun main(args: Array&lt;String>) {
            var m: String?=null // here, m is declared
//as nullable
            var x: Int
            x = 150
            if (x == 150)
            println("m is : $m")
            var mlen = m!!.length
            println("length of m is : $mlen")
        }
    }
}
</pre>
<p>In this case, a <code>NullPointerException</code> will be thrown, as shown here:</p>
<p><img             class="aligncenter size-full wp-image-167769 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nullpointerexception-thrown.png" alt="A NullPointerException is thrown" width="730" height="168"    /><noscript><img               class="aligncenter size-full wp-image-167769" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nullpointerexception-thrown.png" alt="A NullPointerException is thrown" width="730" height="168"  /></noscript></p>
<h2 id="avoiding-null-pointer-exceptions-kotlin">Avoiding <code>NullPointerExceptions</code> in Kotlin</h2>
<p>A few causes of a <code>NullPointerException</code> in Kotlin are:</p>
<ul>
<li>Explicitly calling <code>throw NullPointerException()</code></li>
<li>Using the <code>!!</code> operator</li>
<li>Data inconsistency with regard to initialization</li>
<li>Java interoperation</li>
</ul>
<p>To prevent <code>NullPointerException</code>s, you should always ensure that your variables and objects are properly initialized before you use them. You can also use null checks or <code>try … catch</code> blocks to handle possible null values and prevent your app from crashing.</p>
<p>An extremely simplified example of using <code>try … catch</code> is given below:</p>
<pre class="language-kotlin hljs">class TestNPE {
    companion object {
        @JvmStatic
        fun main(args: Array&lt;String>) {
            var m: String?=null // here, m is declared 
//as nullable
           try {
               var x: Int
               x = 150
               if (x == 150)
                   println("m is : $m")
               var mlen = m!!.length
               println("length of m is : $mlen")
           }catch( ne: NullPointerException)
           {
               println("Null Pointer Exception has 
occurred. ")
           }
        }
    }
}
</pre>
<p>The code that is likely to cause a NullPointerException is enclosed in a <code>try … catch</code> block.</p>
<p>The advantage here is that the developer has control over what must be done when the exception is thrown. Here, a simple message is displayed. In practical scenarios, one can close any currently open resources, such as files, before terminating the program.</p>
<h2 id="using-logcat-detect-fix-null-pointer-exception-android-studio">Using <code>logcat</code> to detect and fix a <code>NullPointerException</code> in Android Studio</h2>
<p>Whenever an Android application crashes, a stack trace is written to the console that contains vital information that can help identify and solve the issue. There are two ways to get to this stack trace:</p>
<ol>
<li >
<ol>
<li>Using Google’s <code>adb</code> shell utility to obtain a <code>logcat</code> file, which can help explain why the application crashed:
<pre class="language-kotlin hljs">adb logcat > logcat.txt
</pre>
<p>Open <code>logcat.txt</code> and search for the application name. It will have information on why the application failed along with other details such as line number, class name, and so on
<li>In Android Studio, either press <code>Alt + 6</code>, or click the <strong>Logcat</strong> button in the status bar. Make sure your emulator or device is selected in the <strong>Devices</strong> panel, then locate the stack trace.<img             class="aligncenter size-full wp-image-167772 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/locate-stack-trace-android-studio.jpg" alt="Locate the stack trace in Android Studio" width="730" height="385"    /><noscript><img               class="aligncenter size-full wp-image-167772" src="https://blog.logrocket.com/wp-content/uploads/2023/04/locate-stack-trace-android-studio.jpg" alt="Locate the stack trace in Android Studio" width="730" height="385"  /></noscript></li>



<p>There may be a lot of stuff logged into <code>logcat</code>, so you may need to scroll a bit, or you can clear the <code>logcat</code> through the Recycle Bin option and let the app crash again to bring the most recent stack trace in the log to the top.</p>
<p>An important point of note is that if your app is already live, then you cannot use <code>logcat</code>.</p>
<p><a href="https://developer.android.com/studio/releases#logcat">Android Studio Electric Eel’s latest version</a> has an updated <code>logcat</code>, which facilitates easier parsing, querying, and tracking of logs. The new <code>logcat</code> also:</p>
<ul>
<li>Formats logs for easy scanning for tags, messages, and other useful information</li>
<li>Identifies various types of logs, such as warnings and errors.</li>
<li>Makes it easier to track logs from your app across app crashes and restarts</li>
</ul>
<p>When <code>logcat</code> notices that your app process has stopped and restarted. you’ll see a message in the output similar to below:</p>
<pre class="language-plaintext hljs">PROCESS ENDED</pre>
<p>Or:</p>
<pre class="language-plaintext hljs">PROCESS STARTED</pre>
<p>Developers can fine tune the command to give the message timestamp, for example:</p>
<pre class="language-kotlin hljs">adb logcat -v time
</pre>
<p>Using <code>logcat</code>, you can determine whether a widget or component is declared but not defined yet, or a variable is <code>null</code> and being used. Sometimes, it could happen that a context is <code>null</code> during navigation between screens, and you are attempting to use that context without realizing it’s <code>null</code>.</p>
<h2 id="setting-breakpoints-debug-null-pointer-exceptions">Setting breakpoints to debug <code>NullPointerException</code></h2>
<p>If you have a large application, it can be quite cumbersome to debug it. You can set breakpoints in your code that let you debug your code block by block.</p>
<p>A breakpoint serves as a stop sign for the marked piece of code. When a breakpoint is encountered during application debugging, it will pause execution, thus enabling allowing developers to examine in detail what’s happening and use other debugging tools as required.</p>
<p>To use breakpoints, add a breakpoint by clicking the gutter in the code editor next to the line number where you want execution to pause. A dot will appear next to the line number, and the line will be highlighted. See below; two breakpoints are added:</p>
<p><img             class="aligncenter size-full wp-image-167774 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/two-breakpoints-debugging.png" alt="Two breakpoints were added for debugging" width="730" height="89"    /><noscript><img               class="aligncenter size-full wp-image-167774" src="https://blog.logrocket.com/wp-content/uploads/2023/04/two-breakpoints-debugging.png" alt="Two breakpoints were added for debugging" width="730" height="89"  /></noscript></p>
<p>Click <strong>Run > Debug ‘app’</strong>. The program halts at the first breakpoint and you can examine the values in the Debug window at the bottom of Android Studio:</p>
<p><img             class="aligncenter size-full wp-image-167776 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/debug-window-android-studio.png" alt="The Debug window in Android Studio" width="730" height="165"    /><noscript><img               class="aligncenter size-full wp-image-167776" src="https://blog.logrocket.com/wp-content/uploads/2023/04/debug-window-android-studio.png" alt="The Debug window in Android Studio" width="730" height="165"  /></noscript></p>
<p>There are various buttons such as <strong>Step Over</strong> and <strong>Step Into</strong> that can help you navigate further:</p>
<p><img             class="aligncenter size-full wp-image-167779 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/step-over-step-into-buttons.png" alt="The Step Over and Step Into buttons" width="730" height="166"    /><noscript><img               class="aligncenter size-full wp-image-167779" src="https://blog.logrocket.com/wp-content/uploads/2023/04/step-over-step-into-buttons.png" alt="The Step Over and Step Into buttons" width="730" height="166"  /></noscript></p>
<p>Besides examining the current values of certain operands and expressions, you can also evaluate expressions using the <strong>Evaluate</strong> option.</p>
<p>In the below example, I wanted to know what the value of <code>x</code> added to 100 would be. The window shows me the result based on the current value of <code>x</code>:</p>
<p><img             class="aligncenter size-full wp-image-167782 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/result-current-value-x.png" alt="Getting the result of the current value of X" width="730" height="551"    /><noscript><img               class="aligncenter size-full wp-image-167782" src="https://blog.logrocket.com/wp-content/uploads/2023/04/result-current-value-x.png" alt="Getting the result of the current value of X" width="730" height="551"  /></noscript></p>
<p>Here is a detailed explanation of various <a href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-3-testing,-debugging,-and-using-support-libraries/3-1-c-the-android-studio-debugger/3-1-c-the-android-studio-debugger.html">terms related to debugging in Android Studio</a>.</p>
<h2>Conclusion</h2>
<p>To conclude, in Android development, there are various mechanisms available with Java and Kotlin that are designed to aid developers in avoiding <code>NullPointerException</code>s. In the cases these exceptions still occur, you should now have a variety of tools that help identify the cause and debug code.</p><div class="code-block code-block-32" >
<div class="blog-plug inline-plug kotlin-plug"><h2><a href="https://lp.logrocket.com/blg/kotlin-signup">LogRocket</a>: Instantly recreate issues in your Android apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is an Android monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your Android apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your Android apps — <a class="signup" href="hhttps://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-167762" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-167762" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-167762" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>

<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/mamta-dalal.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/mamta-dalal.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/mamtadalal/">
Mamta Dalal <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Mamta Dalal is a technology enthusiast and freelance writer. She has worked with several different technologies and is always eager to learn newer ones.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/kotlin/">#kotlin</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/" rel="prev">Identifying and addressing Kotlin code smells</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/business-transformation-strategy-process-examples/" rel="next">Business transformation guide: Strategy, process, and examples</a> &amp;raquo;</div></div>
</div>



<div class="hideshare"/>
<div class="graybg">
<div class="container">
<div class="row justify-content-center listrecent listrelated">
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/">Hybrid rendering in Astro: A step-by-step guide</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">Emanuel Suriano</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/using-modern-decorators-typescript/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/using-modern-decorators-typescript/">Using modern decorators in TypeScript</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/alecbrunelle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/alecbrunelle/">Alec Brunelle</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/using-modern-decorators-typescript/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/">Using Camome to design highly customizable UIs</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/judemiracle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/judemiracle/">Jude Miracle</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">11 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
</div>
<div class="clearfix"/>
<div class="row justify-content-center">
<div class="col-md-8">
<div id="comments" class="comments-area">
<div id="respond" class="comment-respond">
<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/fix-nullpointerexception-android/#respond" >Cancel reply</a></small>
</h3>
<form id="commentform" class="comment-form">
<iframe title="Comment Form" src="https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=167762&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=65852d7ab1&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=678d3e7da4efdd07df2959b11da2665b9f8b6d0d#parent=https%3A%2F%2Fblog.logrocket.com%2Ffix-nullpointerexception-android%2F" name="jetpack_remote_comment"  class="jetpack_remote_comment" id="jetpack_remote_comment" sandbox="allow-same-origin allow-top-navigation allow-scripts allow-forms allow-popups">
									</iframe>
<!--[if !IE]><!-->
<meta>
						document.addEventListener('DOMContentLoaded', function () {
							var commentForms = document.getElementsByClassName('jetpack_remote_comment');
							for (var i = 0; i &lt; commentForms.length; i++) {
								commentForms[i].allowTransparency = false;
								commentForms[i].scrolling = 'no';
							}
						});
					</meta>
<!--<![endif]-->
</form>
</div>
<input type="hidden" name="comment_parent" id="comment_parent" value=""/>
</div>
</div>
</div> </div>
</div>
<div class="alertbar">
<div class="container text-center">
</div>
</div>

<div class="container">
<footer class="footer">
<p class="pull-left"> Does something seem off? Email <a><span class="__cf_email__" data-cfemail="d1a2a4a1a1bea3a591bdbeb6a3beb2bab4a5ffb2bebc">[email protected]</span></a> </p>
<p class="pull-right"> </p>
<div class="clearfix"/>
<form role="search" method="get" class="search-form" action="https://blog.logrocket.com/">
<input type="hidden" name="post_type" value="post"/>
<input type="search" class="search-field" placeholder="Search..." value="" name="s" title="Search for:"/>
<button type="submit" class="search-submit">
<i class="fa fa-search"/>
</button>
</form> <a href="" class="back-to-top hidden-md-down">
<i class="fa fa-angle-up"/>
</a>
</footer>
</div>
<meta data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"/><meta>window.onload = function() {
  if (typeof hljs !== 'undefined')
  {
  document.querySelectorAll('pre').forEach((block) => {
    hljs.highlightBlock(block);
  });
  }
if (jQuery(".type-post").length) {
  var localDate = new Date(document.getElementsByTagName('time')[0].innerText);
  var pubDate = new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate()));
  analytics.track('post-info', {
    url: window.location.href.split('?')[0],
    wordCount: jQuery('.wordcount').text(),
    publishDate: pubDate,
    blogtag: jQuery('.aretags li a').text(),
	postAuthor: jQuery("meta[name='twitter:data1']").attr("content"),
	id: jQuery(".mainheading").closest(".col-md-8").attr("id").replace('post-',''),
	lr_editor: jQuery(".logrocket_editor").text()
  });
}
jQuery(".aretags li a:contains('archive')").parent('li').hide();
jQuery(".aretags li a:contains('86919')").parent('li').hide();
jQuery(".aretags li a:contains('72293')").parent('li').hide();
jQuery(".aretags li a:contains('custom-plug')").parent('li').hide();
};</meta> <div >
<div class="grofile-hash-map-5d7903c4a4c3446b1f2c9ded08ae0353">
</div>
<div class="grofile-hash-map-de8225213d7b8bc59895625735574f7d">
</div>
<div class="grofile-hash-map-1d70ad5cb2a361e3fdf176f64c042921">
</div>
<div class="grofile-hash-map-73b9bd9514e5a89b137a35b20f810cfa">
</div>
</div>
<div id="jp-carousel-loading-overlay">
<div id="jp-carousel-loading-wrapper">
<span id="jp-carousel-library-loading">&amp;nbsp;</span>
</div>
</div>
<div class="jp-carousel-overlay" >
<div class="jp-carousel-container">

<div class="jp-carousel-wrap swiper-container jp-carousel-swiper-container jp-carousel-transitions" itemscope="itemscope" itemtype="https://schema.org/ImageGallery">
<div class="jp-carousel swiper-wrapper"/>
<div class="jp-swiper-button-prev swiper-button-prev">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskPrev" mask-type="alpha" maskUnits="userSpaceOnUse" x="8" y="6" width="9" height="12">
<path d="M16.2072 16.59L11.6496 12L16.2072 7.41L14.8041 6L8.8335 12L14.8041 18L16.2072 16.59Z" fill="white"/>
</mask>
<g mask="url(#maskPrev)">
<rect x="0.579102" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>
<div class="jp-swiper-button-next swiper-button-next">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskNext" mask-type="alpha" maskUnits="userSpaceOnUse" x="8" y="6" width="8" height="12">
<path d="M8.59814 16.59L13.1557 12L8.59814 7.41L10.0012 6L15.9718 12L10.0012 18L8.59814 16.59Z" fill="white"/>
</mask>
<g mask="url(#maskNext)">
<rect x="0.34375" width="23.8822" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>
</div>

<div class="jp-carousel-close-hint">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskClose" mask-type="alpha" maskUnits="userSpaceOnUse" x="5" y="5" width="15" height="14">
<path d="M19.3166 6.41L17.9135 5L12.3509 10.59L6.78834 5L5.38525 6.41L10.9478 12L5.38525 17.59L6.78834 19L12.3509 13.41L17.9135 19L19.3166 17.59L13.754 12L19.3166 6.41Z" fill="white"/>
</mask>
<g mask="url(#maskClose)">
<rect x="0.409668" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>

<div class="jp-carousel-info">
<div class="jp-carousel-info-footer">
<div class="jp-carousel-pagination-container">
<div class="jp-swiper-pagination swiper-pagination"/>
<div class="jp-carousel-pagination"/>
</div>
<div class="jp-carousel-photo-title-container">
<h2 class="jp-carousel-photo-caption"/>
</div>
<div class="jp-carousel-photo-icons-container">
<a href="#" class="jp-carousel-icon-btn jp-carousel-icon-info" aria-label="Toggle photo metadata visibility">
<span class="jp-carousel-icon">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskInfo" mask-type="alpha" maskUnits="userSpaceOnUse" x="2" y="2" width="21" height="20">
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.7537 2C7.26076 2 2.80273 6.48 2.80273 12C2.80273 17.52 7.26076 22 12.7537 22C18.2466 22 22.7046 17.52 22.7046 12C22.7046 6.48 18.2466 2 12.7537 2ZM11.7586 7V9H13.7488V7H11.7586ZM11.7586 11V17H13.7488V11H11.7586ZM4.79292 12C4.79292 16.41 8.36531 20 12.7537 20C17.142 20 20.7144 16.41 20.7144 12C20.7144 7.59 17.142 4 12.7537 4C8.36531 4 4.79292 7.59 4.79292 12Z" fill="white"/>
</mask>
<g mask="url(#maskInfo)">
<rect x="0.8125" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</span>
</a>
<a href="#" class="jp-carousel-icon-btn jp-carousel-icon-comments" aria-label="Toggle photo comments visibility">
<span class="jp-carousel-icon">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskComments" mask-type="alpha" maskUnits="userSpaceOnUse" x="2" y="2" width="21" height="20">
<path fill-rule="evenodd" clip-rule="evenodd" d="M4.3271 2H20.2486C21.3432 2 22.2388 2.9 22.2388 4V16C22.2388 17.1 21.3432 18 20.2486 18H6.31729L2.33691 22V4C2.33691 2.9 3.2325 2 4.3271 2ZM6.31729 16H20.2486V4H4.3271V18L6.31729 16Z" fill="white"/>
</mask>
<g mask="url(#maskComments)">
<rect x="0.34668" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
<span class="jp-carousel-has-comments-indicator" aria-label="This image has comments."/>
</span>
</a>
</div>
</div>
<div class="jp-carousel-info-extra">
<div class="jp-carousel-info-content-wrapper">
<div class="jp-carousel-photo-title-container">
<h2 class="jp-carousel-photo-title"/>
</div>
<div class="jp-carousel-comments-wrapper">
<div id="jp-carousel-comments-loading">
<span>Loading Comments...</span>
</div>
<div class="jp-carousel-comments"/>
<div id="jp-carousel-comment-form-container">
<span id="jp-carousel-comment-form-spinner">&amp;nbsp;</span>
<div id="jp-carousel-comment-post-results"/>
<form id="jp-carousel-comment-form">
<label for="jp-carousel-comment-form-comment-field" class="screen-reader-text">Write a Comment...</label>
<textarea name="comment" class="jp-carousel-comment-form-field jp-carousel-comment-form-textarea" id="jp-carousel-comment-form-comment-field" placeholder="Write a Comment..."/>
<div id="jp-carousel-comment-form-submit-and-info-wrapper">
<div id="jp-carousel-comment-form-commenting-as">
<fieldset>
<label for="jp-carousel-comment-form-email-field">Email (Required)</label>
<input type="text" name="email" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-email-field"/>
</fieldset>
<fieldset>
<label for="jp-carousel-comment-form-author-field">Name (Required)</label>
<input type="text" name="author" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-author-field"/>
</fieldset>
<fieldset>
<label for="jp-carousel-comment-form-url-field">Website</label>
<input type="text" name="url" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-url-field"/>
</fieldset>
</div>
<input type="submit" name="submit" class="jp-carousel-comment-form-button" id="jp-carousel-comment-form-button-submit" value="Post Comment"/>
</div>
</form>
</div>
</div>
<div class="jp-carousel-image-meta">
<div class="jp-carousel-title-and-caption">
<div class="jp-carousel-photo-info">
<h3 class="jp-carousel-caption" itemprop="caption description"/>
</div>
<div class="jp-carousel-photo-description"/>
</div>
<ul class="jp-carousel-image-exif" />
<a class="jp-carousel-image-download" target="_blank" >
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0" mask-type="alpha" maskUnits="userSpaceOnUse" x="3" y="3" width="19" height="18">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.84615 5V19H19.7775V12H21.7677V19C21.7677 20.1 20.8721 21 19.7775 21H5.84615C4.74159 21 3.85596 20.1 3.85596 19V5C3.85596 3.9 4.74159 3 5.84615 3H12.8118V5H5.84615ZM14.802 5V3H21.7677V10H19.7775V6.41L9.99569 16.24L8.59261 14.83L18.3744 5H14.802Z" fill="white"/>
</mask>
<g mask="url(#mask0)">
<rect x="0.870605" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
<span class="jp-carousel-download-text"/>
</a>
<div class="jp-carousel-image-map" />
</div>
</div>
</div>
</div>
</div>
</div>
<meta type="text/javascript">
		window.WPCOM_sharing_counts = {"http:\/\/blog.logrocket.com\/fix-nullpointerexception-android\/":167762};
	</meta>
<link rel="stylesheet" id="all-css-0" href="https://blog.logrocket.com/_static/??-eJytkcFOw0AMRH8IxyQIlAviW5aN27p4vau1rah/T0CECxxaxNWeeTOWcW2QqzqpYwloEkdWwzN5S/kNxmm4x1KXEDLMqdcwErSVG3V4DV2Ehmx2h3/B7Nt98E1izRLLh9QMl2Qn3tg2FNYfYXuSsp4THGovhsmM/MvM1iRdoDZW3hggfDz5rZTDJoO0ktVC17aAEuIMLXX/n0JgfhHCzVzDfz3SvEf26J8veSnP49M8PU4P4zy/A8Motq0=" type="text/css" media="all"/>
<meta id="code-prettify-js-before">
var codePrettifyLoaderBaseUrl = "https:\/\/blog.logrocket.com\/wp-content\/plugins\/code-prettify\/prettify";
</meta>
<meta src="https://blog.logrocket.com/wp-content/plugins/code-prettify/prettify/run_prettify.js?ver=1.4.0" id="code-prettify-js"/>
<meta src="https://secure.gravatar.com/js/gprofiles.js?ver=202317" id="grofiles-cards-js"/>
<meta id="wpgroho-js-extra">
var WPGroHo = {"my_hash":""};
</meta>
<meta id="jetpack-lazy-images-js-extra">
var jetpackLazyImagesL10n = {"loading_warning":"Images are still loading. Please cancel your print and try again."};
</meta>
<meta id="jetpack-carousel-js-extra">
var jetpackSwiperLibraryPath = {"url":"https:\/\/blog.logrocket.com\/wp-content\/mu-plugins\/jetpack-12.0\/_inc\/build\/carousel\/swiper-bundle.min.js"};
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","nonce":"84e2b202f1","display_exif":"1","display_comments":"1","single_image_gallery":"1","single_image_gallery_media_file":"","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size &lt;span class=\"photo-size\">{0}&lt;span class=\"photo-size-times\">\u00d7&lt;\/span>{1}&lt;\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","copyright":"Copyright","comment_registration":"0","require_name_email":"1","login_url":"https:\/\/blog.logrocket.com\/wp-login.php?redirect_to=http%3A%2F%2Fblog.logrocket.com%2Ffix-nullpointerexception-android%2F","blog_id":"1","meta_data":["camera","aperture","shutter_speed","focal_length","copyright"]};
</meta>
<meta id="nf-front-end-js-extra">
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
</meta>
<meta id="nf-mp-front-end-js-extra">
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
</meta>
<meta type="text/javascript" src="https://blog.logrocket.com/_static/??-eJy1UdFuwjAM/KGloaBNvEz7FJQmprgkceQ4VN3XL0wDVRpMVGiPtu/O9p0ek7IUBaLoUFTypceY9QCSjD2qdt2sdCBXPGQ9pp7pQM2QX/SMJgcIdRrAYQmYD9rkDFI1shaoQ24CxgWkjkiysEkLeQjtSp0QxkQsqiu9GomPhqlEt0AmmEyRpyYde7fwgmvvwsFofXHwPbQUQuUrhuSnW8L37P8pdieIjlibIhSMCNorzJvPSWEwfd3kMIvGqsgZrCBFRV0GPtUY/m/frPHoll31RncFvdP2nFEGfwVcGnOX5lbWQOt7lhjuIboq01GEWz5fzokYB6P2xCHPM8So91yhqr6vHKRfHy3gP0A9zxyegzL+KZ1QvKBKhuUZlSyTh5rnREX+OucjvLdv2/XretNut8MXlIuaKg=="/><meta id="sharing-js-js-extra">
var sharing_js_options = {"lang":"en","counts":"1","is_stats_active":"1"};
</meta>
<meta src="https://blog.logrocket.com/wp-content/mu-plugins/jetpack-12.0/_inc/build/sharedaddy/sharing.min.js?ver=12.0" id="sharing-js-js"/>
<meta id="sharing-js-js-after">
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-twitter' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-twitter' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-linkedin' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-linkedin' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-facebook' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-facebook' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
						return false;
					}
				} );
			} )();
</meta>
<!--[if IE]>
		<meta type="text/javascript">
			if ( 0 === window.location.hash.indexOf( '#comment-' ) ) {
				// window.location.reload() doesn't respect the Hash in IE
				window.location.hash = window.location.hash;
			}
		</meta>
		<![endif]-->
<meta type="text/javascript">
			(function () {
				var comm_par_el = document.getElementById( 'comment_parent' ),
					comm_par = ( comm_par_el &amp;&amp; comm_par_el.value ) ? comm_par_el.value : '',
					frame = document.getElementById( 'jetpack_remote_comment' ),
					tellFrameNewParent;

				tellFrameNewParent = function () {
					if ( comm_par ) {
						frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=167762&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=65852d7ab1&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=678d3e7da4efdd07df2959b11da2665b9f8b6d0d#parent=https%3A%2F%2Fblog.logrocket.com%2Ffix-nullpointerexception-android%2F" + '&amp;replytocom=' + parseInt( comm_par, 10 ).toString();
					} else {
						frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=167762&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=65852d7ab1&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=678d3e7da4efdd07df2959b11da2665b9f8b6d0d#parent=https%3A%2F%2Fblog.logrocket.com%2Ffix-nullpointerexception-android%2F";
					}
				};

				
				if ( 'undefined' !== typeof addComment ) {
					addComment._Jetpack_moveForm = addComment.moveForm;

					addComment.moveForm = function ( commId, parentId, respondId, postId ) {
						var returnValue = addComment._Jetpack_moveForm( commId, parentId, respondId, postId ),
							cancelClick, cancel;

						if ( false === returnValue ) {
							cancel = document.getElementById( 'cancel-comment-reply-link' );
							cancelClick = cancel.onclick;
							cancel.onclick = function () {
								var cancelReturn = cancelClick.call( this );
								if ( false !== cancelReturn ) {
									return cancelReturn;
								}

								if ( ! comm_par ) {
									return cancelReturn;
								}

								comm_par = 0;

								tellFrameNewParent();

								return cancelReturn;
							};
						}

						if ( comm_par == parentId ) {
							return returnValue;
						}

						comm_par = parentId;

						tellFrameNewParent();

						return returnValue;
					};
				}

				
				// Do the post message bit after the dom has loaded.
				document.addEventListener( 'DOMContentLoaded', function () {
					var iframe_url = "https:\/\/jetpack.wordpress.com";
					if ( window.postMessage ) {
						if ( document.addEventListener ) {
							window.addEventListener( 'message', function ( event ) {
								var origin = event.origin.replace( /^http:\/\//i, 'https://' );
								if ( iframe_url.replace( /^http:\/\//i, 'https://' ) !== origin ) {
									return;
								}
								frame.style.height = event.data + 'px';
							});
						} else if ( document.attachEvent ) {
							window.attachEvent( 'message', function ( event ) {
								var origin = event.origin.replace( /^http:\/\//i, 'https://' );
								if ( iframe_url.replace( /^http:\/\//i, 'https://' ) !== origin ) {
									return;
								}
								frame.style.height = event.data + 'px';
							});
						}
					}
				})

			})();
		</meta>
<meta src="https://stats.wp.com/e-202317.js" defer="defer"/>
<meta>
		_stq = window._stq || [];
		_stq.push([ 'view', {v:'ext',blog:'217016018',post:'167762',tz:'-4',srv:'blog.logrocket.com',hp:'vip',j:'1:12.0'} ]);
		_stq.push([ 'clickTrackerInit', '217016018', '167762' ]);
	</meta><meta id="tmpl-nf-layout" type="text/template">
	<span id="nf-form-title-{{{ data.id }}}" class="nf-form-title">
		{{{ ( 1 == data.settings.show_title ) ? '&lt;h' + data.settings.form_title_heading_level + '>' + data.settings.title + '' : '' }}}
	</span>
	<div class="nf-form-wrap ninja-forms-form-wrap">
		<div class="nf-response-msg"/>
		<div class="nf-debug-msg"/>
		<div class="nf-before-form"/>
		<div class="nf-form-layout"/>
		<div class="nf-after-form"/>
	</div>
</meta>
<meta id="tmpl-nf-empty" type="text/template">

</meta>
<meta id="tmpl-nf-before-form" type="text/template">
	{{{ data.beforeForm }}}
</meta><meta id="tmpl-nf-after-form" type="text/template">
	{{{ data.afterForm }}}
</meta><meta id="tmpl-nf-before-fields" type="text/template">
    <div class="nf-form-fields-required">{{{ data.renderFieldsMarkedRequired() }}}</div>
    {{{ data.beforeFields }}}
</meta><meta id="tmpl-nf-after-fields" type="text/template">
    {{{ data.afterFields }}}
    <div id="nf-form-errors-{{{ data.id }}}" class="nf-form-errors" role="alert"/>
    <div class="nf-form-hp"/>
</meta>
<meta id="tmpl-nf-before-field" type="text/template">
    {{{ data.beforeField }}}
</meta><meta id="tmpl-nf-after-field" type="text/template">
    {{{ data.afterField }}}
</meta><meta id="tmpl-nf-form-layout" type="text/template">
	<form>
		<div>
			<div class="nf-before-form-content"/>
			<div class="nf-form-content {{{ data.element_class }}}"/>
			<div class="nf-after-form-content"/>
		</div>
	</form>
</meta><meta id="tmpl-nf-form-hp" type="text/template">
	<label id="nf-label-field-hp-{{{ data.id }}}" for="nf-field-hp-{{{ data.id }}}" >
		{{{ nfi18n.formHoneypot }}}
		<input id="nf-field-hp-{{{ data.id }}}" name="nf-field-hp" class="nf-element nf-field-hp" type="text" value="" aria-labelledby="nf-label-field-hp-{{{ data.id }}}"/>
	</label>
</meta>
<meta id="tmpl-nf-field-layout" type="text/template">
    <div id="nf-field-{{{ data.id }}}-container" class="nf-field-container {{{ data.type }}}-container {{{ data.renderContainerClass() }}}">
        <div class="nf-before-field"/>
        <div class="nf-field"/>
        <div class="nf-after-field"/>
    </div>
</meta>
<meta id="tmpl-nf-field-before" type="text/template">
    {{{ data.beforeField }}}
</meta><meta id="tmpl-nf-field-after" type="text/template">
    &lt;#
    /*
     * Render our input limit section if that setting exists.
     */
    #>
    <div class="nf-input-limit"/>
    &lt;#
    /*
     * Render our error section if we have an error.
     */
    #>
    <div id="nf-error-{{{ data.id }}}" class="nf-error-wrap nf-error" role="alert"/>
    &lt;#
    /*
     * Render any custom HTML after our field.
     */
    #>
    {{{ data.afterField }}}
</meta>
<meta id="tmpl-nf-field-wrap" type="text/template">
	<div id="nf-field-{{{ data.id }}}-wrap" class="{{{ data.renderWrapClass() }}}" data-field-id="{{{ data.id }}}">
		&lt;#
		/*
		 * This is our main field template. It's called for every field type.
		 * Note that must have ONE top-level, wrapping element. i.e. a div/span/etc that wraps all of the template.
		 */
        #>
		&lt;#
		/*
		 * Render our label.
		 */
        #>
		{{{ data.renderLabel() }}}
		&lt;#
		/*
		 * Render our field element. Uses the template for the field being rendered.
		 */
        #>
		<div class="nf-field-element">{{{ data.renderElement() }}}</div>
		&lt;#
		/*
		 * Render our Description Text.
		 */
        #>
		{{{ data.renderDescText() }}}
	</div>
</meta>
<meta id="tmpl-nf-field-wrap-no-label" type="text/template">
    <div id="nf-field-{{{ data.id }}}-wrap" class="{{{ data.renderWrapClass() }}}" data-field-id="{{{ data.id }}}">
        <div class="nf-field-label"/>
        <div class="nf-field-element">{{{ data.renderElement() }}}</div>
        <div class="nf-error-wrap"/>
    </div>
</meta>
<meta id="tmpl-nf-field-wrap-no-container" type="text/template">

        {{{ data.renderElement() }}}

        <div class="nf-error-wrap"/>
</meta>
<meta id="tmpl-nf-field-label" type="text/template">
	<div class="nf-field-label">
		&lt;# if ( data.type === "listcheckbox" || data.type === "listradio" ) { #>
			<span id="nf-label-field-{{{ data.id }}}" class="nf-label-span {{{ data.renderLabelClasses() }}}">
					{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}} {{{ ( 'undefined' != typeof data.required &amp;&amp; 1 == data.required ) ? '<span class="ninja-forms-req-symbol">*</span>' : '' }}} 
					{{{ data.maybeRenderHelp() }}}
			</span>
		&lt;# } else { #>
			<label for="nf-field-{{{ data.id }}}" id="nf-label-field-{{{ data.id }}}" class="{{{ data.renderLabelClasses() }}}">
						{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}} {{{ ( 'undefined' != typeof data.required &amp;&amp; 1 == data.required ) ? '<span class="ninja-forms-req-symbol">*</span>' : '' }}} 
						{{{ data.maybeRenderHelp() }}}
			</label>
		&lt;# } #>
	</div>
</meta>
<meta id="tmpl-nf-field-error" type="text/template">
	<div class="nf-error-msg nf-error-{{{ data.id }}}">{{{ data.msg }}}</div>
</meta><meta id="tmpl-nf-form-error" type="text/template">
	<div class="nf-error-msg nf-error-{{{ data.id }}}">{{{ data.msg }}}</div>
</meta><meta id="tmpl-nf-field-input-limit" type="text/template">
    {{{ data.currentCount() }}} {{{ nfi18n.of }}} {{{ data.input_limit }}} {{{ data.input_limit_msg }}}
</meta><meta id="tmpl-nf-field-null" type="text/template">
</meta><meta id="tmpl-nf-field-listcheckbox" type="text/template">
    <ul >
        {{{ data.renderOptions() }}}
    </ul>
</meta>
<meta id="tmpl-nf-field-listcheckbox-option" type="text/template">
    &lt;# if ( ! data.visible ) { return '' } #>
    <li>
        &lt;input type="checkbox" id="nf-field-{{{ data.fieldID }}}-{{{ data.index }}}" name="nf-field-{{{ data.fieldID }}}" class="{{{ data.classes }}} nf-element {{{ ( data.isSelected ) ? ' nf-checked' : '' }}}" value="{{{ data.value }}}" {{{ ( data.isSelected ) ? 'checked="checked"' : '' }}}
            aria-labelledby="nf-label-field-{{{ data.fieldID }}}-{{{ data.index }}}"
            &lt;# if( data.required ) { #>
			required aria-required="true"
			&lt;# } #>
        >
        <label for="nf-field-{{{ data.fieldID }}}-{{{ data.index }}}" id="nf-label-field-{{{ data.fieldID }}}-{{{ data.index }}}" class="{{{ ( data.isSelected ) ? 'nf-checked-label' : '' }}}">{{{ data.label }}}</label>
    </li>
</meta>
<meta id="tmpl-nf-field-listcheckbox-other" type="text/template">
    &lt;li {{{ ( ! data.visible ) ? '' : '' }}}>
        &lt;input type="checkbox"
               id="nf-field-{{{ data.fieldID }}}-other"
               name="nf-field-{{{ data.fieldID }}}" class="{{{ data.classes }}} nf-element" value="nf-other" {{{ ( ! data.valueFound ) ? 'checked="checked"' : '' }}}
            aria-labelledby="nf-label-field-{{{ data.fieldID }}}-other"
            &lt;# if( data.required ) { #>
			required aria-required="true"
			&lt;# } #>
        >
         <label id="nf-label-field-{{{ data.fieldID }}}-other">Other
            {{{ data.renderOtherText() }}}
        </label>
    
</meta>
<meta id="tmpl-nf-field-listcheckbox-other-text" type="text/template">
    <input type="text" name="nf-field-{{{ data.fieldID }}}" class="nf-element" value="{{{ data.currentValue }}}"/>
</meta>
<meta id="tmpl-nf-field-input" type="text/template">
    &lt;input id="nf-field-{{{ data.id }}}" name="nf-field-{{{ data.id }}}" aria-invalid="false"  class="{{{ data.renderClasses() }}} nf-element" type="text" value="{{{ _.escape( data.value ) }}}" {{{ data.renderPlaceholder() }}} {{{ data.maybeDisabled() }}}
           aria-labelledby="nf-label-field-{{{ data.id }}}"

            {{{ data.maybeRequired() }}}
    >
</meta>
<meta id="tmpl-nf-field-submit" type="text/template">
	&lt;input id="nf-field-{{{ data.id }}}" class="{{{ data.renderClasses() }}} nf-element " type="{{{data.type}}}" value="{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}}" {{{ ( data.disabled ) ? 'aria-disabled="true"' : '' }}}>
</meta><meta id="tmpl-nf-field-button" type="text/template">
    <button id="nf-field-{{{ data.id }}}" name="nf-field-{{{ data.id }}}" class="{{{ data.classes }}} nf-element">
        {{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}}
    </button>
</meta><meta>
function b2a(a){var b,c=0,l=0,f="",g=[];if(!a)return a;do{var e=a.charCodeAt(c++);var h=a.charCodeAt(c++);var k=a.charCodeAt(c++);var d=e&lt;&lt;16|h&lt;&lt;8|k;e=63&amp;d>>18;h=63&amp;d>>12;k=63&amp;d>>6;d&amp;=63;g[l++]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(h)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(k)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(d)}while(c&lt;
a.length);return f=g.join(""),b=a.length%3,(b?f.slice(0,b-3):f)+"===".slice(b||3)}function a2b(a){var b,c,l,f={},g=0,e=0,h="",k=String.fromCharCode,d=a.length;for(b=0;64>b;b++)f["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(b)]=b;for(c=0;d>c;c++)for(b=f[a.charAt(c)],g=(g&lt;&lt;6)+b,e+=6;8&lt;=e;)((l=255&amp;g>>>(e-=8))||d-2>c)&amp;&amp;(h+=k(l));return h}b64e=function(a){return btoa(encodeURIComponent(a).replace(/%([0-9A-F]{2})/g,function(b,a){return String.fromCharCode("0x"+a)}))};
b64d=function(a){return decodeURIComponent(atob(a).split("").map(function(a){return"%"+("00"+a.charCodeAt(0).toString(16)).slice(-2)}).join(""))};
/* <![CDATA[ */
ai_front = {"insertion_before":"BEFORE","insertion_after":"AFTER","insertion_prepend":"PREPEND CONTENT","insertion_append":"APPEND CONTENT","insertion_replace_content":"REPLACE CONTENT","insertion_replace_element":"REPLACE ELEMENT","visible":"VISIBLE","hidden":"HIDDEN","fallback":"FALLBACK","automatically_placed":"Automatically placed by AdSense Auto ads code","cancel":"Cancel","use":"Use","add":"Add","parent":"Parent","cancel_element_selection":"Cancel element selection","select_parent_element":"Select parent element","css_selector":"CSS selector","use_current_selector":"Use current selector","element":"ELEMENT","path":"PATH","selector":"SELECTOR"};
/* ]]> */
var ai_cookie_js=!0,ai_block_class_def="code-block";
/*
 JavaScript Cookie v2.2.0
 https://github.com/js-cookie/js-cookie

 Copyright 2006, 2015 Klaus Hartl &amp; Fagner Brack
 Released under the MIT license
*/
"undefined"!==typeof ai_cookie_js&amp;&amp;(function(a){if("function"===typeof define&amp;&amp;define.amd){define(a);var c=!0}"object"===typeof exports&amp;&amp;(module.exports=a(),c=!0);if(!c){var d=window.Cookies,b=window.Cookies=a();b.noConflict=function(){window.Cookies=d;return b}}}(function(){function a(){for(var d=0,b={};d&lt;arguments.length;d++){var f=arguments[d],e;for(e in f)b[e]=f[e]}return b}function c(d){function b(){}function f(h,k,g){if("undefined"!==typeof document){g=a({path:"/",sameSite:"Lax"},b.defaults,
g);"number"===typeof g.expires&amp;&amp;(g.expires=new Date(1*new Date+864E5*g.expires));g.expires=g.expires?g.expires.toUTCString():"";try{var l=JSON.stringify(k);/^[\{\[]/.test(l)&amp;&amp;(k=l)}catch(p){}k=d.write?d.write(k,h):encodeURIComponent(String(k)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent);h=encodeURIComponent(String(h)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);l="";for(var n in g)g[n]&amp;&amp;(l+="; "+n,!0!==g[n]&amp;&amp;(l+="="+
g[n].split(";")[0]));return document.cookie=h+"="+k+l}}function e(h,k){if("undefined"!==typeof document){for(var g={},l=document.cookie?document.cookie.split("; "):[],n=0;n&lt;l.length;n++){var p=l[n].split("="),m=p.slice(1).join("=");k||'"'!==m.charAt(0)||(m=m.slice(1,-1));try{var q=p[0].replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent);m=(d.read||d)(m,q)||m.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent);if(k)try{m=JSON.parse(m)}catch(r){}g[q]=m;if(h===q)break}catch(r){}}return h?g[h]:g}}b.set=f;b.get=
function(h){return e(h,!1)};b.getJSON=function(h){return e(h,!0)};b.remove=function(h,k){f(h,"",a(k,{expires:-1}))};b.defaults={};b.withConverter=c;return b}return c(function(){})}),AiCookies=Cookies.noConflict(),ai_check_block=function(a){if(null==a)return!0;var c=AiCookies.getJSON("aiBLOCKS");ai_debug_cookie_status="";null==c&amp;&amp;(c={});"undefined"!==typeof ai_delay_showing_pageviews&amp;&amp;(c.hasOwnProperty(a)||(c[a]={}),c[a].hasOwnProperty("d")||(c[a].d=ai_delay_showing_pageviews));if(c.hasOwnProperty(a)){for(var d in c[a]){if("x"==
d){var b="",f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);var e=new Date;e=c[a][d]-Math.round(e.getTime()/1E3);if(0&lt;e&amp;&amp;f==b)return ai_debug_cookie_status=a="closed for "+e+" s = "+Math.round(1E4*e/3600/24)/1E4+" days",!1;ai_set_cookie(a,"x","");c[a].hasOwnProperty("i")||c[a].hasOwnProperty("c")||ai_set_cookie(a,"h","")}else if("d"==d){if(0!=c[a][d])return ai_debug_cookie_status=a="delayed for "+c[a][d]+
" pageviews",!1}else if("i"==d){b="";f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);if(0==c[a][d]&amp;&amp;f==b)return ai_debug_cookie_status=a="max impressions reached",!1;if(0>c[a][d]&amp;&amp;f==b){e=new Date;e=-c[a][d]-Math.round(e.getTime()/1E3);if(0&lt;e)return ai_debug_cookie_status=a="max imp. reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;ai_set_cookie(a,"i","");c[a].hasOwnProperty("c")||c[a].hasOwnProperty("x")||
ai_set_cookie(a,"h","")}}if("ipt"==d&amp;&amp;0==c[a][d]&amp;&amp;(e=new Date,b=Math.round(e.getTime()/1E3),e=c[a].it-b,0&lt;e))return ai_debug_cookie_status=a="max imp. per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;if("c"==d){b="";f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);if(0==c[a][d]&amp;&amp;f==b)return ai_debug_cookie_status=a="max clicks reached",!1;if(0>c[a][d]&amp;&amp;f==b){e=new Date;e=-c[a][d]-
Math.round(e.getTime()/1E3);if(0&lt;e)return ai_debug_cookie_status=a="max clicks reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;ai_set_cookie(a,"c","");c[a].hasOwnProperty("i")||c[a].hasOwnProperty("x")||ai_set_cookie(a,"h","")}}if("cpt"==d&amp;&amp;0==c[a][d]&amp;&amp;(e=new Date,b=Math.round(e.getTime()/1E3),e=c[a].ct-b,0&lt;e))return ai_debug_cookie_status=a="max clicks per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1}if(c.hasOwnProperty("G")&amp;&amp;c.G.hasOwnProperty("cpt")&amp;&amp;0==c.G.cpt&amp;&amp;
(e=new Date,b=Math.round(e.getTime()/1E3),e=c.G.ct-b,0&lt;e))return ai_debug_cookie_status=a="max global clicks per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1}ai_debug_cookie_status="OK";return!0},ai_check_and_insert_block=function(a,c){if(null==a)return!0;var d=document.getElementsByClassName(c);if(d.length){d=d[0];var b=d.closest("."+ai_block_class_def),f=ai_check_block(a);!f&amp;&amp;0!=parseInt(d.getAttribute("limits-fallback"))&amp;&amp;d.hasAttribute("data-fallback-code")&amp;&amp;(d.setAttribute("data-code",
d.getAttribute("data-fallback-code")),null!=b&amp;&amp;b.hasAttribute("data-ai")&amp;&amp;d.hasAttribute("fallback-tracking")&amp;&amp;d.hasAttribute("fallback_level")&amp;&amp;b.setAttribute("data-ai-"+d.getAttribute("fallback_level"),d.getAttribute("fallback-tracking")),f=!0);d.removeAttribute("data-selector");if(f)ai_insert_code(d),b&amp;&amp;(f=b.querySelectorAll(".ai-debug-block"),f.length&amp;&amp;(b.classList.remove("ai-list-block"),b.classList.remove("ai-list-block-ip"),b.classList.remove("ai-list-block-filter"),b.style.visibility="",b.classList.contains("ai-remove-position")&amp;&amp;
(b.style.position="")));else{f=d.closest("div[data-ai]");if(null!=f&amp;&amp;"undefined"!=typeof f.getAttribute("data-ai")){var e=JSON.parse(b64d(f.getAttribute("data-ai")));"undefined"!==typeof e&amp;&amp;e.constructor===Array&amp;&amp;(e[1]="",f.setAttribute("data-ai",b64e(JSON.stringify(e))))}b&amp;&amp;(f=b.querySelectorAll(".ai-debug-block"),f.length&amp;&amp;(b.classList.remove("ai-list-block"),b.classList.remove("ai-list-block-ip"),b.classList.remove("ai-list-block-filter"),b.style.visibility="",b.classList.contains("ai-remove-position")&amp;&amp;
(b.style.position="")))}d.classList.remove(c)}d=document.querySelectorAll("."+c+"-dbg");b=0;for(f=d.length;b&lt;f;b++)e=d[b],e.querySelector(".ai-status").textContent=ai_debug_cookie_status,e.querySelector(".ai-cookie-data").textContent=ai_get_cookie_text(a),e.classList.remove(c+"-dbg")},ai_load_cookie=function(){var a=AiCookies.getJSON("aiBLOCKS");null==a&amp;&amp;(a={});return a},ai_set_cookie=function(a,c,d){var b=ai_load_cookie();if(""===d){if(b.hasOwnProperty(a)){delete b[a][c];a:{c=b[a];for(f in c)if(c.hasOwnProperty(f)){var f=
!1;break a}f=!0}f&amp;&amp;delete b[a]}}else b.hasOwnProperty(a)||(b[a]={}),b[a][c]=d;0===Object.keys(b).length&amp;&amp;b.constructor===Object?AiCookies.remove("aiBLOCKS"):AiCookies.set("aiBLOCKS",b,{expires:365,path:"/"});return b},ai_get_cookie_text=function(a){var c=AiCookies.getJSON("aiBLOCKS");null==c&amp;&amp;(c={});var d="";c.hasOwnProperty("G")&amp;&amp;(d="G["+JSON.stringify(c.G).replace(/"/g,"").replace("{","").replace("}","")+"] ");var b="";c.hasOwnProperty(a)&amp;&amp;(b=JSON.stringify(c[a]).replace(/"/g,"").replace("{","").replace("}",
""));return d+b});
var ai_insertion_js=!0,ai_block_class_def="code-block";
if("undefined"!=typeof ai_insertion_js){ai_insert=function(a,h,l){if(-1!=h.indexOf(":eq("))if(window.jQuery&amp;&amp;window.jQuery.fn)var n=jQuery(h);else{console.error("AI INSERT USING jQuery QUERIES:",h,"- jQuery not found");return}else n=document.querySelectorAll(h);for(var u=0,y=n.length;u&lt;y;u++){var d=n[u];selector_string=d.hasAttribute("id")?"#"+d.getAttribute("id"):d.hasAttribute("class")?"."+d.getAttribute("class").replace(RegExp(" ","g"),"."):"";var w=document.createElement("div");w.innerHTML=l;
var m=w.getElementsByClassName("ai-selector-counter")[0];null!=m&amp;&amp;(m.innerText=u+1);m=w.getElementsByClassName("ai-debug-name ai-main")[0];if(null!=m){var r=a.toUpperCase();"undefined"!=typeof ai_front&amp;&amp;("before"==a?r=ai_front.insertion_before:"after"==a?r=ai_front.insertion_after:"prepend"==a?r=ai_front.insertion_prepend:"append"==a?r=ai_front.insertion_append:"replace-content"==a?r=ai_front.insertion_replace_content:"replace-element"==a&amp;&amp;(r=ai_front.insertion_replace_element));-1==selector_string.indexOf(".ai-viewports")&amp;&amp;
(m.innerText=r+" "+h+" ("+d.tagName.toLowerCase()+selector_string+")")}m=document.createRange();try{var v=m.createContextualFragment(w.innerHTML)}catch(t){}"before"==a?d.parentNode.insertBefore(v,d):"after"==a?d.parentNode.insertBefore(v,d.nextSibling):"prepend"==a?d.insertBefore(v,d.firstChild):"append"==a?d.insertBefore(v,null):"replace-content"==a?(d.innerHTML="",d.insertBefore(v,null)):"replace-element"==a&amp;&amp;(d.parentNode.insertBefore(v,d),d.parentNode.removeChild(d))}};ai_insert_code=function(a){function h(m,
r){return null==m?!1:m.classList?m.classList.contains(r):-1&lt;(" "+m.className+" ").indexOf(" "+r+" ")}function l(m,r){null!=m&amp;&amp;(m.classList?m.classList.add(r):m.className+=" "+r)}function n(m,r){null!=m&amp;&amp;(m.classList?m.classList.remove(r):m.className=m.className.replace(new RegExp("(^|\\b)"+r.split(" ").join("|")+"(\\b|$)","gi")," "))}if("undefined"!=typeof a){var u=!1;if(h(a,"no-visibility-check")||a.offsetWidth||a.offsetHeight||a.getClientRects().length){u=a.getAttribute("data-code");var y=a.getAttribute("data-insertion-position"),
d=a.getAttribute("data-selector");if(null!=u)if(null!=y&amp;&amp;null!=d){if(-1!=d.indexOf(":eq(")?window.jQuery&amp;&amp;window.jQuery.fn&amp;&amp;jQuery(d).length:document.querySelectorAll(d).length)ai_insert(y,d,b64d(u)),n(a,"ai-viewports")}else{y=document.createRange();try{var w=y.createContextualFragment(b64d(u))}catch(m){}a.parentNode.insertBefore(w,a.nextSibling);n(a,"ai-viewports")}u=!0}else w=a.previousElementSibling,h(w,"ai-debug-bar")&amp;&amp;h(w,"ai-debug-script")&amp;&amp;(n(w,"ai-debug-script"),l(w,"ai-debug-viewport-invisible")),
n(a,"ai-viewports");return u}};ai_insert_list_code=function(a){var h=document.getElementsByClassName(a)[0];if("undefined"!=typeof h){var l=ai_insert_code(h),n=h.closest("div."+ai_block_class_def);if(n){l||n.removeAttribute("data-ai");var u=n.querySelectorAll(".ai-debug-block");n&amp;&amp;u.length&amp;&amp;(n.classList.remove("ai-list-block"),n.classList.remove("ai-list-block-ip"),n.classList.remove("ai-list-block-filter"),n.style.visibility="",n.classList.contains("ai-remove-position")&amp;&amp;(n.style.position=""))}h.classList.remove(a);
l&amp;&amp;z()}};ai_insert_viewport_code=function(a){var h=document.getElementsByClassName(a)[0];if("undefined"!=typeof h){var l=ai_insert_code(h);h.classList.remove(a);l&amp;&amp;(a=h.closest("div."+ai_block_class_def),null!=a&amp;&amp;(l=h.getAttribute("style"),null!=l&amp;&amp;a.setAttribute("style",a.getAttribute("style")+" "+l)));setTimeout(function(){h.removeAttribute("style")},2);z()}};ai_insert_adsense_fallback_codes=function(a){a.style.display="none";var h=a.closest(".ai-fallback-adsense"),l=h.nextElementSibling;l.getAttribute("data-code")?
ai_insert_code(l)&amp;&amp;z():l.style.display="block";h.classList.contains("ai-empty-code")&amp;&amp;null!=a.closest("."+ai_block_class_def)&amp;&amp;(a=a.closest("."+ai_block_class_def).getElementsByClassName("code-block-label"),0!=a.length&amp;&amp;(a[0].style.display="none"))};ai_insert_code_by_class=function(a){var h=document.getElementsByClassName(a)[0];"undefined"!=typeof h&amp;&amp;(ai_insert_code(h),h.classList.remove(a))};ai_insert_client_code=function(a,h){var l=document.getElementsByClassName(a)[0];if("undefined"!=typeof l){var n=
l.getAttribute("data-code");null!=n&amp;&amp;ai_check_block()&amp;&amp;(l.setAttribute("data-code",n.substring(Math.floor(h/19))),ai_insert_code_by_class(a),l.remove())}};ai_process_elements_active=!1;function z(){ai_process_elements_active||setTimeout(function(){ai_process_elements_active=!1;"function"==typeof ai_process_rotations&amp;&amp;ai_process_rotations();"function"==typeof ai_process_lists&amp;&amp;ai_process_lists();"function"==typeof ai_process_ip_addresses&amp;&amp;ai_process_ip_addresses();"function"==typeof ai_process_filter_hooks&amp;&amp;
ai_process_filter_hooks();"function"==typeof ai_adb_process_blocks&amp;&amp;ai_adb_process_blocks();"function"==typeof ai_process_impressions&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_process_impressions();"function"==typeof ai_install_click_trackers&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_install_click_trackers();"function"==typeof ai_install_close_buttons&amp;&amp;ai_install_close_buttons(document);"function"==typeof ai_process_wait_for_interaction&amp;&amp;ai_process_wait_for_interaction();"function"==typeof ai_process_delayed_blocks&amp;&amp;ai_process_delayed_blocks()},
5);ai_process_elements_active=!0}const B=document.querySelector("body");(new MutationObserver(function(a,h){for(const l of a)"attributes"===l.type&amp;&amp;"data-ad-status"==l.attributeName&amp;&amp;"unfilled"==l.target.dataset.adStatus&amp;&amp;l.target.closest(".ai-fallback-adsense")&amp;&amp;ai_insert_adsense_fallback_codes(l.target)})).observe(B,{attributes:!0,childList:!1,subtree:!0});var Arrive=function(a,h,l){function n(t,c,e){d.addMethod(c,e,t.unbindEvent);d.addMethod(c,e,t.unbindEventWithSelectorOrCallback);d.addMethod(c,
e,t.unbindEventWithSelectorAndCallback)}function u(t){t.arrive=r.bindEvent;n(r,t,"unbindArrive");t.leave=v.bindEvent;n(v,t,"unbindLeave")}if(a.MutationObserver&amp;&amp;"undefined"!==typeof HTMLElement){var y=0,d=function(){var t=HTMLElement.prototype.matches||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector;return{matchesSelector:function(c,e){return c instanceof HTMLElement&amp;&amp;t.call(c,e)},addMethod:function(c,e,f){var b=c[e];c[e]=
function(){if(f.length==arguments.length)return f.apply(this,arguments);if("function"==typeof b)return b.apply(this,arguments)}},callCallbacks:function(c,e){e&amp;&amp;e.options.onceOnly&amp;&amp;1==e.firedElems.length&amp;&amp;(c=[c[0]]);for(var f=0,b;b=c[f];f++)b&amp;&amp;b.callback&amp;&amp;b.callback.call(b.elem,b.elem);e&amp;&amp;e.options.onceOnly&amp;&amp;1==e.firedElems.length&amp;&amp;e.me.unbindEventWithSelectorAndCallback.call(e.target,e.selector,e.callback)},checkChildNodesRecursively:function(c,e,f,b){for(var g=0,k;k=c[g];g++)f(k,e,b)&amp;&amp;b.push({callback:e.callback,
elem:k}),0&lt;k.childNodes.length&amp;&amp;d.checkChildNodesRecursively(k.childNodes,e,f,b)},mergeArrays:function(c,e){var f={},b;for(b in c)c.hasOwnProperty(b)&amp;&amp;(f[b]=c[b]);for(b in e)e.hasOwnProperty(b)&amp;&amp;(f[b]=e[b]);return f},toElementsArray:function(c){"undefined"===typeof c||"number"===typeof c.length&amp;&amp;c!==a||(c=[c]);return c}}}(),w=function(){var t=function(){this._eventsBucket=[];this._beforeRemoving=this._beforeAdding=null};t.prototype.addEvent=function(c,e,f,b){c={target:c,selector:e,options:f,callback:b,
firedElems:[]};this._beforeAdding&amp;&amp;this._beforeAdding(c);this._eventsBucket.push(c);return c};t.prototype.removeEvent=function(c){for(var e=this._eventsBucket.length-1,f;f=this._eventsBucket[e];e--)c(f)&amp;&amp;(this._beforeRemoving&amp;&amp;this._beforeRemoving(f),(f=this._eventsBucket.splice(e,1))&amp;&amp;f.length&amp;&amp;(f[0].callback=null))};t.prototype.beforeAdding=function(c){this._beforeAdding=c};t.prototype.beforeRemoving=function(c){this._beforeRemoving=c};return t}(),m=function(t,c){var e=new w,f=this,b={fireOnAttributesModification:!1};
e.beforeAdding(function(g){var k=g.target;if(k===a.document||k===a)k=document.getElementsByTagName("html")[0];var p=new MutationObserver(function(x){c.call(this,x,g)});var q=t(g.options);p.observe(k,q);g.observer=p;g.me=f});e.beforeRemoving(function(g){g.observer.disconnect()});this.bindEvent=function(g,k,p){k=d.mergeArrays(b,k);for(var q=d.toElementsArray(this),x=0;x&lt;q.length;x++)e.addEvent(q[x],g,k,p)};this.unbindEvent=function(){var g=d.toElementsArray(this);e.removeEvent(function(k){for(var p=
0;p&lt;g.length;p++)if(this===l||k.target===g[p])return!0;return!1})};this.unbindEventWithSelectorOrCallback=function(g){var k=d.toElementsArray(this);e.removeEvent("function"===typeof g?function(p){for(var q=0;q&lt;k.length;q++)if((this===l||p.target===k[q])&amp;&amp;p.callback===g)return!0;return!1}:function(p){for(var q=0;q&lt;k.length;q++)if((this===l||p.target===k[q])&amp;&amp;p.selector===g)return!0;return!1})};this.unbindEventWithSelectorAndCallback=function(g,k){var p=d.toElementsArray(this);e.removeEvent(function(q){for(var x=
0;x&lt;p.length;x++)if((this===l||q.target===p[x])&amp;&amp;q.selector===g&amp;&amp;q.callback===k)return!0;return!1})};return this},r=new function(){function t(f,b,g){return d.matchesSelector(f,b.selector)&amp;&amp;(f._id===l&amp;&amp;(f._id=y++),-1==b.firedElems.indexOf(f._id))?(b.firedElems.push(f._id),!0):!1}var c={fireOnAttributesModification:!1,onceOnly:!1,existing:!1};r=new m(function(f){var b={attributes:!1,childList:!0,subtree:!0};f.fireOnAttributesModification&amp;&amp;(b.attributes=!0);return b},function(f,b){f.forEach(function(g){var k=
g.addedNodes,p=g.target,q=[];null!==k&amp;&amp;0&lt;k.length?d.checkChildNodesRecursively(k,b,t,q):"attributes"===g.type&amp;&amp;t(p,b,q)&amp;&amp;q.push({callback:b.callback,elem:p});d.callCallbacks(q,b)})});var e=r.bindEvent;r.bindEvent=function(f,b,g){"undefined"===typeof g?(g=b,b=c):b=d.mergeArrays(c,b);var k=d.toElementsArray(this);if(b.existing){for(var p=[],q=0;q&lt;k.length;q++)for(var x=k[q].querySelectorAll(f),A=0;A&lt;x.length;A++)p.push({callback:g,elem:x[A]});if(b.onceOnly&amp;&amp;p.length)return g.call(p[0].elem,p[0].elem);
setTimeout(d.callCallbacks,1,p)}e.call(this,f,b,g)};return r},v=new function(){function t(f,b){return d.matchesSelector(f,b.selector)}var c={};v=new m(function(){return{childList:!0,subtree:!0}},function(f,b){f.forEach(function(g){g=g.removedNodes;var k=[];null!==g&amp;&amp;0&lt;g.length&amp;&amp;d.checkChildNodesRecursively(g,b,t,k);d.callCallbacks(k,b)})});var e=v.bindEvent;v.bindEvent=function(f,b,g){"undefined"===typeof g?(g=b,b=c):b=d.mergeArrays(c,b);e.call(this,f,b,g)};return v};h&amp;&amp;u(h.fn);u(HTMLElement.prototype);
u(NodeList.prototype);u(HTMLCollection.prototype);u(HTMLDocument.prototype);u(Window.prototype);h={};n(r,h,"unbindAllArrive");n(v,h,"unbindAllLeave");return h}}(window,"undefined"===typeof jQuery?null:jQuery,void 0)};
;!function(a,b){a(function(){"use strict";function a(a,b){return null!=a&amp;&amp;null!=b&amp;&amp;a.toLowerCase()===b.toLowerCase()}function c(a,b){var c,d,e=a.length;if(!e||!b)return!1;for(c=b.toLowerCase(),d=0;d&lt;e;++d)if(c===a[d].toLowerCase())return!0;return!1}function d(a){for(var b in a)i.call(a,b)&amp;&amp;(a[b]=new RegExp(a[b],"i"))}function e(a){return(a||"").substr(0,500)}function f(a,b){this.ua=e(a),this._cache={},this.maxPhoneWidth=b||600}var g={};g.mobileDetectRules={phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",Pixel:"; \\bPixel\\b",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 5X|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F|SM-G610F|SM-G981B|SM-G892A|SM-A530F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533|SOV34|601SO|F8332",Asus:"Asus.*Galaxy|PadFone.*Mobile",Xiaomi:"^(?!.*\\bx11\\b).*xiaomi.*$|POCOPHONE F1|MI 8|Redmi Note 9S|Redmi Note 5A Prime|N2G47H|M2001J2G|M2001J2I|M1805E10A|M2004J11G|M1902F1G|M2002J9G|M2004J19G|M2003J6A1G",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V|SM-P610|SM-T290|SM-T515|SM-T590|SM-T595|SM-T725|SM-T817P|SM-P585N0|SM-T395|SM-T295|SM-T865|SM-P610N|SM-P615|SM-T970|SM-T380|SM-T5950|SM-T905|SM-T231|SM-T500|SM-T860",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30|A3-A40",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X|TB-X704F|TB-X104F|TB3-X70F|TB-X705F|TB-8504F|TB3-X70L|TB3-710F|TB-X704L",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android [0-9.]+; [a-z-]+; \\bG1\\b",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",SailfishOS:"Sailfish",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"\\bEdgiOS\\b|Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version((?!\\bEdgiOS\\b).)*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",SailfishBrowser:"SailfishBrowser/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",Sailfish:"Sailfish [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp|AspiegelBot",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},g.detectMobileBrowsers={fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,
shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i};var h,i=Object.prototype.hasOwnProperty;return g.FALLBACK_PHONE="UnknownPhone",g.FALLBACK_TABLET="UnknownTablet",g.FALLBACK_MOBILE="UnknownMobile",h="isArray"in Array?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},function(){var a,b,c,e,f,j,k=g.mobileDetectRules;for(a in k.props)if(i.call(k.props,a)){for(b=k.props[a],h(b)||(b=[b]),f=b.length,e=0;e&lt;f;++e)c=b[e],j=c.indexOf("[VER]"),j>=0&amp;&amp;(c=c.substring(0,j)+"([\\w._\\+]+)"+c.substring(j+5)),b[e]=new RegExp(c,"i");k.props[a]=b}d(k.oss),d(k.phones),d(k.tablets),d(k.uas),d(k.utils),k.oss0={WindowsPhoneOS:k.oss.WindowsPhoneOS,WindowsMobileOS:k.oss.WindowsMobileOS}}(),g.findMatch=function(a,b){for(var c in a)if(i.call(a,c)&amp;&amp;a[c].test(b))return c;return null},g.findMatches=function(a,b){var c=[];for(var d in a)i.call(a,d)&amp;&amp;a[d].test(b)&amp;&amp;c.push(d);return c},g.getVersionStr=function(a,b){var c,d,e,f,h=g.mobileDetectRules.props;if(i.call(h,a))for(c=h[a],e=c.length,d=0;d&lt;e;++d)if(f=c[d].exec(b),null!==f)return f[1];return null},g.getVersion=function(a,b){var c=g.getVersionStr(a,b);return c?g.prepareVersionNo(c):NaN},g.prepareVersionNo=function(a){var b;return b=a.split(/[a-z._ \/\-]/i),1===b.length&amp;&amp;(a=b[0]),b.length>1&amp;&amp;(a=b[0]+".",b.shift(),a+=b.join("")),Number(a)},g.isMobileFallback=function(a){return g.detectMobileBrowsers.fullPattern.test(a)||g.detectMobileBrowsers.shortPattern.test(a.substr(0,4))},g.isTabletFallback=function(a){return g.detectMobileBrowsers.tabletPattern.test(a)},g.prepareDetectionCache=function(a,c,d){if(a.mobile===b){var e,h,i;return(h=g.findMatch(g.mobileDetectRules.tablets,c))?(a.mobile=a.tablet=h,void(a.phone=null)):(e=g.findMatch(g.mobileDetectRules.phones,c))?(a.mobile=a.phone=e,void(a.tablet=null)):void(g.isMobileFallback(c)?(i=f.isPhoneSized(d),i===b?(a.mobile=g.FALLBACK_MOBILE,a.tablet=a.phone=null):i?(a.mobile=a.phone=g.FALLBACK_PHONE,a.tablet=null):(a.mobile=a.tablet=g.FALLBACK_TABLET,a.phone=null)):g.isTabletFallback(c)?(a.mobile=a.tablet=g.FALLBACK_TABLET,a.phone=null):a.mobile=a.tablet=a.phone=null)}},g.mobileGrade=function(a){var b=null!==a.mobile();return a.os("iOS")&amp;&amp;a.version("iPad")>=4.3||a.os("iOS")&amp;&amp;a.version("iPhone")>=3.1||a.os("iOS")&amp;&amp;a.version("iPod")>=3.1||a.version("Android")>2.1&amp;&amp;a.is("Webkit")||a.version("Windows Phone OS")>=7||a.is("BlackBerry")&amp;&amp;a.version("BlackBerry")>=6||a.match("Playbook.*Tablet")||a.version("webOS")>=1.4&amp;&amp;a.match("Palm|Pre|Pixi")||a.match("hp.*TouchPad")||a.is("Firefox")&amp;&amp;a.version("Firefox")>=12||a.is("Chrome")&amp;&amp;a.is("AndroidOS")&amp;&amp;a.version("Android")>=4||a.is("Skyfire")&amp;&amp;a.version("Skyfire")>=4.1&amp;&amp;a.is("AndroidOS")&amp;&amp;a.version("Android")>=2.3||a.is("Opera")&amp;&amp;a.version("Opera Mobi")>11&amp;&amp;a.is("AndroidOS")||a.is("MeeGoOS")||a.is("Tizen")||a.is("Dolfin")&amp;&amp;a.version("Bada")>=2||(a.is("UC Browser")||a.is("Dolfin"))&amp;&amp;a.version("Android")>=2.3||a.match("Kindle Fire")||a.is("Kindle")&amp;&amp;a.version("Kindle")>=3||a.is("AndroidOS")&amp;&amp;a.is("NookTablet")||a.version("Chrome")>=11&amp;&amp;!b||a.version("Safari")>=5&amp;&amp;!b||a.version("Firefox")>=4&amp;&amp;!b||a.version("MSIE")>=7&amp;&amp;!b||a.version("Opera")>=10&amp;&amp;!b?"A":a.os("iOS")&amp;&amp;a.version("iPad")&lt;4.3||a.os("iOS")&amp;&amp;a.version("iPhone")&lt;3.1||a.os("iOS")&amp;&amp;a.version("iPod")&lt;3.1||a.is("Blackberry")&amp;&amp;a.version("BlackBerry")>=5&amp;&amp;a.version("BlackBerry")&lt;6||a.version("Opera Mini")>=5&amp;&amp;a.version("Opera Mini")&lt;=6.5&amp;&amp;(a.version("Android")>=2.3||a.is("iOS"))||a.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||a.version("Opera Mobi")>=11&amp;&amp;a.is("SymbianOS")?"B":(a.version("BlackBerry")&lt;5||a.match("MSIEMobile|Windows CE.*Mobile")||a.version("Windows Mobile")&lt;=5.2,"C")},g.detectOS=function(a){return g.findMatch(g.mobileDetectRules.oss0,a)||g.findMatch(g.mobileDetectRules.oss,a)},g.getDeviceSmallerSide=function(){return window.screen.width&lt;window.screen.height?window.screen.width:window.screen.height},f.prototype={constructor:f,mobile:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===b&amp;&amp;(this._cache.userAgent=g.findMatch(g.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===b&amp;&amp;(this._cache.userAgents=g.findMatches(g.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===b&amp;&amp;(this._cache.os=g.detectOS(this.ua)),this._cache.os},version:function(a){return g.getVersion(a,this.ua)},versionStr:function(a){return g.getVersionStr(a,this.ua)},is:function(b){return c(this.userAgents(),b)||a(b,this.os())||a(b,this.phone())||a(b,this.tablet())||c(g.findMatches(g.mobileDetectRules.utils,this.ua),b)},match:function(a){return a instanceof RegExp||(a=new RegExp(a,"i")),a.test(this.ua)},isPhoneSized:function(a){return f.isPhoneSized(a||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===b&amp;&amp;(this._cache.grade=g.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&amp;&amp;window.screen?f.isPhoneSized=function(a){return a&lt;0?b:g.getDeviceSmallerSide()&lt;=a}:f.isPhoneSized=function(){},f._impl=g,f.version="1.4.5 2021-03-13",f})}(function(a){if("undefined"!=typeof module&amp;&amp;module.exports)return function(a){module.exports=a()};if("function"==typeof define&amp;&amp;define.amd)return define;if("undefined"!=typeof window)return function(a){window.MobileDetect=a()};throw new Error("unknown environment")}());var ai_lists=!0,ai_block_class_def="code-block";
if("undefined"!=typeof ai_lists){function V(a,e){for(var p=[];a=a.previousElementSibling;)("undefined"==typeof e||a.matches(e))&amp;&amp;p.push(a);return p}function ea(a,e){for(var p=[];a=a.nextElementSibling;)("undefined"==typeof e||a.matches(e))&amp;&amp;p.push(a);return p}var host_regexp=RegExp(":\\/\\/(.[^/:]+)","i");function fa(a){a=a.match(host_regexp);return null!=a&amp;&amp;1&lt;a.length&amp;&amp;"string"===typeof a[1]&amp;&amp;0&lt;a[1].length?a[1].toLowerCase():null}function P(a){return a.includes(":")?(a=a.split(":"),1E3*(3600*parseInt(a[0])+
60*parseInt(a[1])+parseInt(a[2]))):null}function W(a){try{var e=Date.parse(a);isNaN(e)&amp;&amp;(e=null)}catch(p){e=null}if(null==e&amp;&amp;a.includes(" ")){a=a.split(" ");try{e=Date.parse(a[0]),e+=P(a[1]),isNaN(e)&amp;&amp;(e=null)}catch(p){e=null}}return e}function X(){null==document.querySelector("#ai-iab-tcf-bar")&amp;&amp;null==document.querySelector(".ai-list-manual")||"function"!=typeof __tcfapi||"function"!=typeof ai_load_blocks||"undefined"!=typeof ai_iab_tcf_callback_installed||(__tcfapi("addEventListener",2,function(a,
e){e&amp;&amp;"useractioncomplete"===a.eventStatus&amp;&amp;(ai_tcData=a,ai_load_blocks(),a=document.querySelector("#ai-iab-tcf-status"),null!=a&amp;&amp;(a.textContent="IAB TCF 2.0 DATA LOADED"),a=document.querySelector("#ai-iab-tcf-bar"),null!=a&amp;&amp;(a.classList.remove("status-error"),a.classList.add("status-ok")))}),ai_iab_tcf_callback_installed=!0)}ai_process_lists=function(a){function e(b,d,k){if(0==b.length){if("!@!"==k)return!0;d!=k&amp;&amp;("true"==k.toLowerCase()?k=!0:"false"==k.toLowerCase()&amp;&amp;(k=!1));return d==k}if("object"!=
typeof d&amp;&amp;"array"!=typeof d)return!1;var l=b[0];b=b.slice(1);if("*"==l)for(let [,n]of Object.entries(d)){if(e(b,n,k))return!0}else if(l in d)return e(b,d[l],k);return!1}function p(b,d,k){if("object"!=typeof b||-1==d.indexOf("["))return!1;d=d.replace(/]| /gi,"").split("[");return e(d,b,k)}function z(){if("function"==typeof __tcfapi){var b=document.querySelector("#ai-iab-tcf-status"),d=document.querySelector("#ai-iab-tcf-bar");null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 DETECTED");__tcfapi("getTCData",2,function(k,
l){l?(null!=d&amp;&amp;d.classList.add("status-ok"),"tcloaded"==k.eventStatus||"useractioncomplete"==k.eventStatus)?(ai_tcData=k,k.gdprApplies?null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 DATA LOADED"):null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 GDPR DOES NOT APPLY"),null!=d&amp;&amp;(d.classList.remove("status-error"),d.classList.add("status-ok")),setTimeout(function(){ai_process_lists()},10)):"cmpuishown"==k.eventStatus&amp;&amp;(ai_cmpuishown=!0,null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 CMP UI SHOWN"),null!=d&amp;&amp;(d.classList.remove("status-error"),
d.classList.add("status-ok"))):(null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 __tcfapi getTCData failed"),null!=d&amp;&amp;(d.classList.remove("status-ok"),d.classList.add("status-error")))})}}function C(b){"function"==typeof __tcfapi?("undefined"==typeof ai_iab_tcf_callback_installed&amp;&amp;X(),"undefined"==typeof ai_tcData_requested&amp;&amp;(ai_tcData_requested=!0,z(),cookies_need_tcData=!0)):b&amp;&amp;(null!=iab_tcf_status&amp;&amp;(iab_tcf_status.textContent="IAB TCF 2.0 MISSING: __tcfapi function not found"),null!=iab_tcf_bar&amp;&amp;(iab_tcf_bar.classList.remove("status-ok"),
iab_tcf_bar.classList.add("status-error")))}if(null==a)a=document.querySelectorAll("div.ai-list-data, meta.ai-list-data");else{window.jQuery&amp;&amp;window.jQuery.fn&amp;&amp;a instanceof jQuery&amp;&amp;(a=Array.prototype.slice.call(a));var x=[];a.forEach((b,d)=>{b.matches(".ai-list-data")?x.push(b):(b=b.querySelectorAll(".ai-list-data"),b.length&amp;&amp;b.forEach((k,l)=>{x.push(k)}))});a=x}if(a.length){a.forEach((b,d)=>{b.classList.remove("ai-list-data")});var I=ha(window.location.search);if(null!=I.referrer)var A=I.referrer;
else A=document.referrer,""!=A&amp;&amp;(A=fa(A));var Q=window.navigator.userAgent,R=Q.toLowerCase(),Y=navigator.language,J=Y.toLowerCase();if("undefined"!==typeof MobileDetect)var Z=new MobileDetect(Q);a.forEach((b,d)=>{var k=document.cookie.split(";");k.forEach(function(f,h){k[h]=f.trim()});d=b.closest("div."+ai_block_class_def);var l=!0;if(b.hasAttribute("referer-list")){var n=b.getAttribute("referer-list");n=b64d(n).split(",");var t=b.getAttribute("referer-list-type"),E=!1;n.every((f,h)=>{f=f.trim();
if(""==f)return!0;if("*"==f.charAt(0))if("*"==f.charAt(f.length-1)){if(f=f.substr(1,f.length-2),-1!=A.indexOf(f))return E=!0,!1}else{if(f=f.substr(1),A.substr(-f.length)==f)return E=!0,!1}else if("*"==f.charAt(f.length-1)){if(f=f.substr(0,f.length-1),0==A.indexOf(f))return E=!0,!1}else if("#"==f){if(""==A)return E=!0,!1}else if(f==A)return E=!0,!1;return!0});var u=E;switch(t){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}}if(l&amp;&amp;b.hasAttribute("client-list")&amp;&amp;"undefined"!==typeof Z)switch(n=b.getAttribute("client-list"),
n=b64d(n).split(","),t=b.getAttribute("client-list-type"),u=!1,n.every((f,h)=>{if(""==f.trim())return!0;f.split("&amp;&amp;").every((c,v)=>{v=!0;var w=!1;for(c=c.trim();"!!"==c.substring(0,2);)v=!v,c=c.substring(2);"language:"==c.substring(0,9)&amp;&amp;(w=!0,c=c.substring(9).toLowerCase());var q=!1;w?"*"==c.charAt(0)?"*"==c.charAt(c.length-1)?(c=c.substr(1,c.length-2).toLowerCase(),-1!=J.indexOf(c)&amp;&amp;(q=!0)):(c=c.substr(1).toLowerCase(),J.substr(-c.length)==c&amp;&amp;(q=!0)):"*"==c.charAt(c.length-1)?(c=c.substr(0,c.length-
1).toLowerCase(),0==J.indexOf(c)&amp;&amp;(q=!0)):c==J&amp;&amp;(q=!0):"*"==c.charAt(0)?"*"==c.charAt(c.length-1)?(c=c.substr(1,c.length-2).toLowerCase(),-1!=R.indexOf(c)&amp;&amp;(q=!0)):(c=c.substr(1).toLowerCase(),R.substr(-c.length)==c&amp;&amp;(q=!0)):"*"==c.charAt(c.length-1)?(c=c.substr(0,c.length-1).toLowerCase(),0==R.indexOf(c)&amp;&amp;(q=!0)):Z.is(c)&amp;&amp;(q=!0);return(u=q?v:!v)?!0:!1});return u?!1:!0}),t){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}var K=n=!1;for(t=1;2>=t;t++)if(l){switch(t){case 1:var g=b.getAttribute("cookie-list");
break;case 2:g=b.getAttribute("parameter-list")}if(null!=g){g=b64d(g);switch(t){case 1:var y=b.getAttribute("cookie-list-type");break;case 2:y=b.getAttribute("parameter-list-type")}g=g.replace("tcf-gdpr","tcf-v2[gdprApplies]=true");g=g.replace("tcf-no-gdpr","tcf-v2[gdprApplies]=false");g=g.replace("tcf-google","tcf-v2[vendor][consents][755]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-google","!!tcf-v2[vendor][consents][755]");g=g.replace("tcf-media.net","tcf-v2[vendor][consents][142]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");
g=g.replace("tcf-no-media.net","!!tcf-v2[vendor][consents][142]");g=g.replace("tcf-amazon","tcf-v2[vendor][consents][793]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-amazon","!!tcf-v2[vendor][consents][793]");g=g.replace("tcf-ezoic","tcf-v2[vendor][consents][347]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-ezoic","!!tcf-v2[vendor][consents][347]");var F=g.split(","),aa=[];k.forEach(function(f){f=f.split("=");try{var h=JSON.parse(decodeURIComponent(f[1]))}catch(c){h=
decodeURIComponent(f[1])}aa[f[0]]=h});u=!1;var L=b;F.every((f,h)=>{f.split("&amp;&amp;").every((c,v)=>{v=!0;for(c=c.trim();"!!"==c.substring(0,2);)v=!v,c=c.substring(2);var w=c,q="!@!",D=-1!=c.indexOf("["),ba=(0==c.indexOf("tcf-v2")||0==c.indexOf("euconsent-v2"))&amp;&amp;-1!=c.indexOf("[");-1!=c.indexOf("=")&amp;&amp;(q=c.split("="),w=q[0],q=q[1],D=-1!=w.indexOf("["),ba=(0==w.indexOf("tcf-v2")||0==w.indexOf("euconsent-v2"))&amp;&amp;-1!=w.indexOf("["));if(ba)document.querySelector("#ai-iab-tcf-status"),D=document.querySelector("#ai-iab-tcf-bar"),
null!=D&amp;&amp;(D.style.display="block"),"object"==typeof ai_tcData?(null!=D&amp;&amp;D.classList.add("status-ok"),w=w.replace(/]| /gi,"").split("["),w.shift(),u=(w=e(w,ai_tcData,q))?v:!v):(L.classList.add("ai-list-data"),K=!0,"function"==typeof __tcfapi?C(!1):"undefined"==typeof ai_tcData_retrying&amp;&amp;(ai_tcData_retrying=!0,setTimeout(function(){"function"==typeof __tcfapi?C(!1):setTimeout(function(){"function"==typeof __tcfapi?C(!1):setTimeout(function(){C(!0)},3E3)},1E3)},600)));else if(D)u=(w=p(aa,w,q))?v:!v;
else{var S=!1;"!@!"==q?k.every(function(ia){return ia.split("=")[0]==c?(S=!0,!1):!0}):S=-1!=k.indexOf(c);u=S?v:!v}return u?!0:!1});return u?!1:!0});u&amp;&amp;(K=!1);switch(y){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}}}b.classList.contains("ai-list-manual")&amp;&amp;(l?(L.classList.remove("ai-list-data"),L.classList.remove("ai-list-manual")):(n=!0,L.classList.add("ai-list-data")));(l||!n&amp;&amp;!K)&amp;&amp;b.hasAttribute("data-debug-info")&amp;&amp;(g=document.querySelector("."+b.dataset.debugInfo),null!=g&amp;&amp;(g=g.parentElement,null!=
g&amp;&amp;g.classList.contains("ai-debug-info")&amp;&amp;g.remove()));y=V(b,".ai-debug-bar.ai-debug-lists");var ja=""==A?"#":A;0!=y.length&amp;&amp;y.forEach((f,h)=>{h=f.querySelector(".ai-debug-name.ai-list-info");null!=h&amp;&amp;(h.textContent=ja,h.title=Q+"\n"+Y);h=f.querySelector(".ai-debug-name.ai-list-status");null!=h&amp;&amp;(h.textContent=l?ai_front.visible:ai_front.hidden)});g=!1;if(l&amp;&amp;b.hasAttribute("scheduling-start")&amp;&amp;b.hasAttribute("scheduling-end")&amp;&amp;b.hasAttribute("scheduling-days")){var r=b.getAttribute("scheduling-start");
t=b.getAttribute("scheduling-end");y=b.getAttribute("scheduling-days");g=!0;r=b64d(r);F=b64d(t);var T=parseInt(b.getAttribute("scheduling-fallback")),M=parseInt(b.getAttribute("gmt"));if(r.includes("-")||F.includes("-"))N=W(r)+M,O=W(F)+M;else var N=P(r),O=P(F);var U=b64d(y).split(",");y=b.getAttribute("scheduling-type");var B=(new Date).getTime()+M;t=new Date(B);var G=t.getDay();r.includes("-")||F.includes("-")||(r=(new Date(t.getFullYear(),t.getMonth(),t.getDate())).getTime()+M,B-=r,0>B&amp;&amp;(B+=864E5));
0==G?G=6:G--;r=B>=N&amp;&amp;B&lt;O&amp;&amp;U.includes(G.toString());switch(y){case "B":r=!r}r||(l=!1);var ka=t.toISOString().split(".")[0].replace("T"," ");y=V(b,".ai-debug-bar.ai-debug-scheduling");0!=y.length&amp;&amp;y.forEach((f,h)=>{h=f.querySelector(".ai-debug-name.ai-scheduling-info");null!=h&amp;&amp;(h.textContent=ka+" "+G+" current_time:"+Math.floor(B.toString()/1E3)+"  start_date:"+Math.floor(N/1E3).toString()+" ="+(B>=N).toString()+" end_date:"+Math.floor(O/1E3).toString()+" =:"+(B&lt;O).toString()+" days:"+U.toString()+
" =:"+U.includes(G.toString()).toString());h=f.querySelector(".ai-debug-name.ai-scheduling-status");null!=h&amp;&amp;(h.textContent=l?ai_front.visible:ai_front.hidden);l||0==T||(f.classList.remove("ai-debug-scheduling"),f.classList.add("ai-debug-fallback"),h=f.querySelector(".ai-debug-name.ai-scheduling-status"),null!=h&amp;&amp;(h.textContent=ai_front.fallback+" = "+T))})}if(n||!l&amp;&amp;K)return!0;b.style.visibility="";b.style.position="";b.style.width="";b.style.height="";b.style.zIndex="";if(l){if(null!=d&amp;&amp;(d.style.visibility=
"",d.classList.contains("ai-remove-position")&amp;&amp;(d.style.position="")),b.hasAttribute("data-code")){n=b64d(b.dataset.code);r=document.createRange();g=!0;try{H=r.createContextualFragment(n)}catch(f){g=!1}g&amp;&amp;(null!=b.closest("head")?(b.parentNode.insertBefore(H,b.nextSibling),b.remove()):b.append(H));ca(b)}}else if(g&amp;&amp;!r&amp;&amp;0!=T){null!=d&amp;&amp;(d.style.visibility="",d.classList.contains("ai-remove-position")&amp;&amp;d.css({position:""}));n=ea(b,".ai-fallback");0!=n.length&amp;&amp;n.forEach((f,h)=>{f.classList.remove("ai-fallback")});
if(b.hasAttribute("data-fallback-code")){n=b64d(b.dataset.fallbackCode);r=document.createRange();g=!0;try{var H=r.createContextualFragment(n)}catch(f){g=!1}g&amp;&amp;b.append(H);ca(b)}else b.style.display="none",null!=d&amp;&amp;null==d.querySelector(".ai-debug-block")&amp;&amp;d.hasAttribute("style")&amp;&amp;-1==d.getAttribute("style").indexOf("height:")&amp;&amp;(d.style.display="none");null!=d&amp;&amp;d.hasAttribute("data-ai")&amp;&amp;(d.getAttribute("data-ai"),b.hasAttribute("fallback-tracking")&amp;&amp;(H=b.getAttribute("fallback-tracking"),d.setAttribute("data-ai-"+
b.getAttribute("fallback_level"),H)))}else b.style.display="none",null!=d&amp;&amp;(d.removeAttribute("data-ai"),d.classList.remove("ai-track"),null!=d.querySelector(".ai-debug-block")?(d.style.visibility="",d.classList.remove("ai-close"),d.classList.contains("ai-remove-position")&amp;&amp;(d.style.position="")):d.hasAttribute("style")&amp;&amp;-1==d.getAttribute("style").indexOf("height:")&amp;&amp;(d.style.display="none"));b.setAttribute("data-code","");b.setAttribute("data-fallback-code","");null!=d&amp;&amp;d.classList.remove("ai-list-block")})}};
function da(a){a=`; ${document.cookie}`.split(`; ${a}=`);if(2===a.length)return a.pop().split(";").shift()}function la(a,e,p){da(a)&amp;&amp;(document.cookie=a+"="+(e?";path="+e:"")+(p?";domain="+p:"")+";expires=Thu, 01 Jan 1970 00:00:01 GMT")}function m(a){da(a)&amp;&amp;(la(a,"/",window.location.hostname),document.cookie=a+"=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;")}(function(a){"complete"===document.readyState||"loading"!==document.readyState&amp;&amp;!document.documentElement.doScroll?a():document.addEventListener("DOMContentLoaded",
a)})(function(){setTimeout(function(){ai_process_lists();setTimeout(function(){X();if("function"==typeof ai_load_blocks){document.addEventListener("cmplzEnableScripts",e);document.addEventListener("cmplz_event_marketing",e);function e(p){"cmplzEnableScripts"!=p.type&amp;&amp;"all"!==p.consentLevel||ai_load_blocks()}}},50);var a=document.querySelector(".ai-debug-page-type");null!=a&amp;&amp;a.addEventListener("dblclick",e=>{e=document.querySelector("#ai-iab-tcf-status");null!=e&amp;&amp;(e.textContent="CONSENT COOKIES");
e=document.querySelector("#ai-iab-tcf-bar");null!=e&amp;&amp;(e.style.display="block")});a=document.querySelector("#ai-iab-tcf-bar");null!=a&amp;&amp;a.addEventListener("click",e=>{m("euconsent-v2");m("__lxG__consent__v2");m("__lxG__consent__v2_daisybit");m("__lxG__consent__v2_gdaisybit");m("CookieLawInfoConsent");m("cookielawinfo-checkbox-advertisement");m("cookielawinfo-checkbox-analytics");m("cookielawinfo-checkbox-necessary");m("complianz_policy_id");m("complianz_consent_status");m("cmplz_marketing");m("cmplz_consent_status");
m("cmplz_preferences");m("cmplz_statistics-anonymous");m("cmplz_choice");m("cmplz_banner-status");m("cmplz_functional");m("cmplz_policy_id");m("cmplz_statistics");m("moove_gdpr_popup");m("real_cookie_banner-blog:1-tcf");m("real_cookie_banner-blog:1");e=document.querySelector("#ai-iab-tcf-status");null!=e&amp;&amp;(e.textContent="CONSENT COOKIES DELETED")})},5)});function ca(a){setTimeout(function(){"function"==typeof ai_process_rotations_in_element&amp;&amp;ai_process_rotations_in_element(a);"function"==typeof ai_process_lists&amp;&amp;
ai_process_lists();"function"==typeof ai_process_ip_addresses&amp;&amp;ai_process_ip_addresses();"function"==typeof ai_process_filter_hooks&amp;&amp;ai_process_filter_hooks();"function"==typeof ai_adb_process_blocks&amp;&amp;ai_adb_process_blocks(a);"function"==typeof ai_process_impressions&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_process_impressions();"function"==typeof ai_install_click_trackers&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_install_click_trackers();"function"==typeof ai_install_close_buttons&amp;&amp;ai_install_close_buttons(document)},5)}
function ha(a){var e=a?a.split("?")[1]:window.location.search.slice(1);a={};if(e){e=e.split("#")[0];e=e.split("&amp;");for(var p=0;p&lt;e.length;p++){var z=e[p].split("="),C=void 0,x=z[0].replace(/\[\d*\]/,function(I){C=I.slice(1,-1);return""});z="undefined"===typeof z[1]?"":z[1];x=x.toLowerCase();z=z.toLowerCase();a[x]?("string"===typeof a[x]&amp;&amp;(a[x]=[a[x]]),"undefined"===typeof C?a[x].push(z):a[x][C]=z):a[x]=z}}return a}};
ai_run_657649508056 = function(){
ai_document_write=document.write;document.write=function(a){"interactive"==document.readyState?(console.error("document.write called after page load: ",a),"undefined"!=typeof ai_js_errors&amp;&amp;ai_js_errors.push(["document.write called after page load",a,0])):ai_document_write.call(document,a)};
ai_insert ('prepend', '.type-post', b64d ('PGRpdiBjbGFzcz0nY29kZS1ibG9jayBjb2RlLWJsb2NrLTY0JyBzdHlsZT0nbWFyZ2luOiA4cHggMDsgY2xlYXI6IGJvdGg7Jz4KPGEgaHJlZj0iaHR0cHM6Ly9scC5sb2dyb2NrZXQuY29tL2JsZy9sZWFybi1tb3JlIiBjbGFzcz0iZ3V0dGVyLWxpbmsiPjxkaXYgY2xhc3M9Imd1dHRlci1jb250YWluZXIiPgogIDxpbWcgY2xhc3M9Imd1dHRlci10b3AtcmlnaHQiIHNyYz0iaHR0cHM6Ly9ibG9nLmxvZ3JvY2tldC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjIvMTIvZ3V0dGVyLWltYWdlLnBuZyI+CiAgPHAgY2xhc3M9Imd1dHRlci10b3AiPjxiPkxvZ1JvY2tldDo8L2I+IDxicj4gCiAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXNpemU6MTRweDsiPlNlc3Npb24gUmVwbGF5LCBQcm9kdWN0IEFuYWx5dGljcywgJmFtcDsgRXJyb3IgVHJhY2tpbmc8L3NwYW4+PC9wPgogIDxwIGNsYXNzPSJndXR0ZXItYm90dG9tIj5HRVQgU1RBUlRFRCBGUkVFIOKGkjwvcD4KICA8aW1nIGNsYXNzPSJndXR0ZXItYm90dG9tLXJpZ2h0IiBzcmM9Imh0dHBzOi8vYmxvZy5sb2dyb2NrZXQuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzEyL0dyb3VwLTk0MjgucG5nIj4KPC9kaXY+CjwvYT4KCjxzY3JpcHQ+Cgp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIChldmVudCkgPT4gewpjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJ0aWNsZS1wb3N0Jyk7Cgpjb25zdCBvYnNlcnZlcjIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaGFuZGxlSW50ZXJzZWN0aW9uKTsKb2JzZXJ2ZXIyLm9ic2VydmUodGFyZ2V0KTsKCmZ1bmN0aW9uIGhhbmRsZUludGVyc2VjdGlvbihlbnRyaWVzKSB7CiAgZW50cmllcy5tYXAoKGVudHJ5KSA9PiB7CiAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHsKICAgICAgd2luZG93LmpRdWVyeSgnLmNvZGUtYmxvY2stNjQnKS5mYWRlSW4oMTUwMCk7CiAgICB9IGVsc2UgewogICAgICB3aW5kb3cualF1ZXJ5KCcuY29kZS1ibG9jay02NCcpLmZhZGVPdXQoMTUwMCk7CiAgICB9CiAgfSk7Cn0KCn0pOwo8L3NjcmlwdD4KCgo8c3R5bGU+CkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDEwNjVweCkgewouY29kZS1ibG9jay02NCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7IHZpc2liaWxpdHk6aGlkZGVuOyBoZWlnaHQ6IDFweDsgd2lkdGg6IDFweDt9Cn0KLmNvZGUtYmxvY2stNjQgLmhpZGRlbiB7ZGlzcGxheTpub25lO30KLmd1dHRlci1saW5rIHt0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO30KLmd1dHRlci1saW5rOmhvdmVyIHt0ZXh0LWRlY29yYXRpb246bm9uZTt9Ci5ndXR0ZXItbGluazpob3ZlciAuZ3V0dGVyLWJvdHRvbSB7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTt9Ci5ndXR0ZXItbGluazpob3ZlciAuZ3V0dGVyLXRvcC1yaWdodCB7dHJhbnNmb3JtOiB0cmFuc2xhdGVZKDdweCk7fQoKLmNvZGUtYmxvY2stNjQgeyBwb3NpdGlvbjogZml4ZWQ7IG1hcmdpbi1sZWZ0OiAtMjIwcHggIWltcG9ydGFudDsgdG9wOiAxMjVweDsgZGlzcGxheTpub25lO30KLmd1dHRlci1jb250YWluZXIgeyAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTsKYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KDEyOC40MiUgNDguMzYlIGF0IDcyLjg5JSAyNS44JSwgcmdiYSg4OSwgOTQsIDk0LCAwLjA5KSAwJSwgcmdiYSg4OSwgOTQsIDk0LCAwKSAxMDAlKSAvKiB3YXJuaW5nOiBncmFkaWVudCB1c2VzIGEgcm90YXRpb24gdGhhdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IENTUyBhbmQgbWF5IG5vdCBiZWhhdmUgYXMgZXhwZWN0ZWQgKi8sCmxpbmVhci1ncmFkaWVudCgwZGVnLCByZ2JhKDExOCwgNzQsIDE4OCwgMC4wOSksIHJnYmEoMTE4LCA3NCwgMTg4LCAwLjA5KSksCnJhZGlhbC1ncmFkaWVudCgxMTkuOTklIDM1LjA1JSBhdCA1Ni41OCUgMTAwJSwgcmdiYSgxMTgsIDc0LCAxODgsIDAuMDQpIDAlLCByZ2JhKDExOCwgNzQsIDE4OCwgMCkgMTAwJSkgLyogd2FybmluZzogZ3JhZGllbnQgdXNlcyBhIHJvdGF0aW9uIHRoYXQgaXMgbm90IHN1cHBvcnRlZCBieSBDU1MgYW5kIG1heSBub3QgYmVoYXZlIGFzIGV4cGVjdGVkICovLAogIGxpbmVhci1ncmFkaWVudCgwZGVnLCAjRkZGRkZGLCAjRkZGRkZGKTtib3JkZXI6IDAuNXB4IHNvbGlkIHJnYmEoMTE4LCA3NCwgMTg4LCAwLjA5KTsKYm9yZGVyLXJhZGl1czogMTZweDsKd2lkdGg6IDIwMHB4OwpoZWlnaHQ6IDM2NXB4OwpvdmVyZmxvdzpoaWRkZW47fQoKLmd1dHRlci1jb250YWluZXIgLmd1dHRlci10b3AtcmlnaHQgewp0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlOwogIHJpZ2h0OjBweDsKICB3aWR0aDoyMDBweDsKICBtYXJnaW4tbGVmdDozcHg7CiAgbWFyZ2luLXRvcDozcHg7Cn0KCi5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItYm90dG9tLXJpZ2h0IHtwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMHB4OyByaWdodDogMHB4O30KCi5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItdG9wIHsKZm9udC1zaXplOiAxOHB4OwpsaW5lLWhlaWdodDogMjJweDsKbGV0dGVyLXNwYWNpbmc6IDBlbTsKdGV4dC1hbGlnbjogbGVmdDsKcGFkZGluZzogMHB4IDE2cHg7Cm1hcmdpbi10b3A6IDE2cHg7CmNvbG9yOiAjNzY0QUJDOwp9Ci5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItYm90dG9tIHsKY29sb3I6ICM3NjRBQkMgIWltcG9ydGFudDsKZm9udC1zaXplOiAxNnB4Owpmb250LXdlaWdodDogOTAwOwpsaW5lLWhlaWdodDogMjFweDsKbGV0dGVyLXNwYWNpbmc6IDBlbTsKdGV4dC1hbGlnbjogbGVmdDsKcGFkZGluZzogMHB4IDE2cHg7Cm1hcmdpbi10b3A6IDE0cHg7Cn08L3N0eWxlPgo8L2Rpdj4K'));
ai_insert ('prepend', '.graybg', b64d ('PGRpdiBjbGFzcz0nY29kZS1ibG9jayBjb2RlLWJsb2NrLTUyJyBzdHlsZT0nbWFyZ2luOiA4cHggMDsgY2xlYXI6IGJvdGg7Jz4KPGRpdiBjbGFzcz0iZm9vdGVyLWN0YS1jb250YWluZXIiPgogIDxpbWcgc3JjPSJodHRwczovL2Jsb2cubG9ncm9ja2V0LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wNi9mb290ZXItY3RhLWRvdHMtbGVmdC5wbmciIGNsYXNzPSJmb290ZXItY3RhLWJsIj4KICAgIDxpbWcgc3JjPSJodHRwczovL2Jsb2cubG9ncm9ja2V0LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wNi9mb290ZXItY3RhLWRvdHMtcmlnaHQucG5nIiBjbGFzcz0iZm9vdGVyLWN0YS10ciI+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWN0YS1sb2dvLWNvbnRhaW5lciI+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ibG9nLmxvZ3JvY2tldC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjIvMDkvbG9ncm9ja2V0LWxvZ28tZnJvbnRlbmQtYW5hbHl0aWNzLnBuZyI+CiAgPC9kaXY+CiAgCiAgPGgyPlN0b3AgZ3Vlc3NpbmcgYWJvdXQgeW91ciBkaWdpdGFsIGV4cGVyaWVuY2Ugd2l0aCBMb2dSb2NrZXQ8L2gyPgogIDxhIGhyZWY9Imh0dHBzOi8vbG9ncm9ja2V0LmNvbS9zaWdudXAiPjxkaXYgY2xhc3M9ImZvb3Rlci1jdGEtYnV0dG9uIj5HZXQgc3RhcnRlZCBmb3IgZnJlZTwvZGl2PjwvYT4KICA8L2Rpdj4KCjxzdHlsZT4KQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNzUwcHgpIHsKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXIgIHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9Ci5mb290ZXItY3RhLWNvbnRhaW5lciBoMiB7d2lkdGg6IDkwJSAhaW1wb3J0YW50OyBwYWRkaW5nLXRvcDogNTBweCAhaW1wb3J0YW50O30KLmZvb3Rlci1jdGEtYnV0dG9uIHt3aWR0aDogNDAlICFpbXBvcnRhbnQ7fQp9Ci5mb290ZXItY3RhLWNvbnRhaW5lciB7Ym9yZGVyLXJhZGl1czogMjBweDtiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTAuMzJkZWcsICM4RjAwRkYgMC4yOCUsIHJnYmEoMTQzLCAwLCAyNTUsIDApIDk5LjcyJSksICM3NjRBQkM7CiAgYm94LXNoYWRvdzogMHB4IDY0cHggNzRweCAwcHggIzc2NEFCQzQwOwogIHBhZGRpbmctYm90dG9tOiAzMHB4OwogIHdpZHRoOiA5NSU7IG1hcmdpbjogMCBhdXRvIDYwcHggYXV0bzsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5mb290ZXItY3RhLXRyIHtwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMzBweDsgcmlnaHQ6IDMwcHg7IH0KCi5mb290ZXItY3RhLWJsIHtwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMzBweDsgbGVmdDogMzBweDsgfQoKLmZvb3Rlci1jdGEtYmwge30KCi5mb290ZXItY3RhLWxvZ28tY29udGFpbmVyIHsKCXdpZHRoOiAyMCU7CglwYWRkaW5nOiAxMHB4IDE1cHg7CiAgZGlzcGxheTpibG9jazsKICAgIG1hcmdpbjogMCBhdXRvOwoJcG9zaXRpb246IHJlbGF0aXZlOwoJYmFja2dyb3VuZDogI2ZhZmFmYTsKYm9yZGVyLXJhZGl1czogMCAwIDIwcHggMjBweDsKfQoKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXI6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMHB4OwogIGhlaWdodDogNTBweDsKICBsZWZ0OiAtMjVweDsKICB3aWR0aDogMjVweDsKICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMjVweDsKICBib3gtc2hhZG93OiAwIC0yNXB4IDAgMCAjZmFmYWZhOyAKfQoKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXI6OmFmdGVyIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwcHg7CiAgaGVpZ2h0OiA1MHB4OwogIHJpZ2h0OiAtMjVweDsKICB3aWR0aDogMjVweDsKICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAyNXB4OwogIGJveC1zaGFkb3c6IDAgLTI1cHggMCAwICNmYWZhZmE7IAp9CgouZm9vdGVyLWN0YS1jb250YWluZXIgaDIge2NvbG9yOiAjZmZmZmZmOyB0ZXh0LWFsaWduOiBjZW50ZXI7IHdpZHRoOiA3MCU7IHBvc2l0aW9uOiByZWxhdGl2ZTsgbWFyZ2luOiA0MHB4IGF1dG87fQouZm9vdGVyLWN0YS1jb250YWluZXIgYSB7dGV4dC1kZWNvcmF0aW9uOiBub25lO30KCi5mb290ZXItY3RhLWxvZ28tY29udGFpbmVyIGltZyB7ZGlzcGxheTogYmxvY2s7IG1hcmdpbjogMCBhdXRvOyBwYWRkaW5nOiAxMHB4OyBtYXgtd2lkdGg6IDE1MHB4O30KCi5mb290ZXItY3RhLWJyIHtwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IDVweDsgYm90dG9tOiA1cHg7fQoKLmZvb3Rlci1jdGEtYnV0dG9uIHtwYWRkaW5nOiAxMHB4IDIwcHg7IGJvcmRlcjogMXB4IHNvbGlkICNmZmZmZmY7IHdpZHRoOiAyMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IGNvbG9yOiAjZmZmZmZmOyBwb3NpdGlvbjogcmVsYXRpdmU7IGRpc3BsYXk6YmxvY2s7IG1hcmdpbjogMCBhdXRvIDIwcHggYXV0bzsgdGV4dC1hbGlnbjogY2VudGVyOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7fQo8L3N0eWxlPjwvZGl2Pgo='));
ai_insert ('after', '.site-content', b64d (''));
};
if (document.readyState === 'complete' || (document.readyState !== 'loading' &amp;&amp; !document.documentElement.doScroll)) ai_run_657649508056 (); else document.addEventListener ('DOMContentLoaded', ai_run_657649508056);
ai_js_code = true;
</meta>

</p></li></ol></li></ol></article></div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/fix-nullpointerexception-android/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to implement in-memory caching in Go - LogRocket Blog</title>
			<link>https://blog.logrocket.com/how-to-implement-memory-caching-go/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/how-to-implement-memory-caching-go/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to implement in-memory caching in Go - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/how-to-implement-memory-caching-go/">How to implement in-memory caching in Go - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-165384 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-go" id="post-165384">
<div class="mainheading">

 <div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/alexandergodwin/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/10/IMG_20220809_120947-e1666638768500.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/10/IMG_20220809_120947-e1666638768500.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/alexandergodwin/">
Alexander Godwin <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and writer that likes to write code and build things. Currently I'm fascinated by distributed systems and cloud computing.</span>
</div>
</div>
<h1 class="posttitle">How to implement in-memory caching in Go</h1>
<p>
<span class="post-date"><time class="post-date">
April 10, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1364</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/how-to-implement-memory-caching-go.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="How To Implement In-Memory Caching In Go"                /> <article class="article-post">
<p>A cache is a hardware or software component that saves data so that subsequent requests for that data can be processed more quickly. Caching, at its most basic, refers to storing and retrieving data from a cache. It is an important concept that enables us to significantly increase the performance of an application.</p>
<p>Sometimes, an application may start to slow down due to the number of users, requests, or services. Caching offers a solution that might come in handy. There are several ways to implement in-memory caching in Go. This article will discuss how to implement in-memory caching using the <a href="https://github.com/patrickmn/go-cache">go-cache package</a>.</p>
<p>To understand in-memory caching using go-cache, we will build a simple web server using the <a href="https://pkg.go.dev/github.com/julienschmidt/httprouter">HttpRouter package</a>. This web server will demonstrate how and when to use the caching mechanism to increase the performance of our application.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#go-cache">go-cache</a></li>
<li><a href="#creating-simple-web-server-go">Creating a simple web server in Go</a></li>
<li><a href="#adding-routes-server">Adding routes to our server</a></li>
<li><a href="#using-go-cache-caching">Using go-cache for caching</a></li>
<li><a href="#benchmark-testing">Benchmark testing</a></li>
</ul>
<h2 id="go-cache">go-cache</h2>
<p>go-cache is an in-memory key:value store/cache that is similar to memcached and works well with applications that run on a single machine.</p>
<p>To install the go-cache and HttpRouter packages, run the following commands in your terminal:</p>
<pre class="language-go hljs">go get github.com/patrickmn/go-cache
go get github.com/julienschmidt/httprouter
</pre>
<h2 id="creating-simple-web-server-go">Creating a simple web server in Go</h2>
<p>Run the following commands to create a directory called <code>caching</code>:</p>
<pre class="language-go hljs">mkdir caching
cd caching
</pre>
<p>Next, we’ll enable dependency tracking with this command:</p>
<pre class="language-go hljs">go mod init example/go_cache
</pre>
<p>Then, we’ll create a <code>main.go</code> file:</p>
<pre class="language-go hljs">touch main.go
</pre>
<p>In <code>main.go</code>, the code will look like this:</p>
<pre class="language-go hljs">package main
import (
    "fmt"
    "log"
    "net/http"

    "github.com/julienschmidt/httprouter"
)

func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
    fmt.Fprint(w, "Welcome!\n")
}

func main() {
    router := httprouter.New()
    router.GET("/", Index)

    err := http.ListenAndServe(":8080", router)
    if err != nil {
        log.Fatal(err)
    }
    fmt.Println("Server running on :8080")
}
</pre>
<p>Finally, to start the server, run:</p>
<pre class="language-go hljs">go run .
</pre>
<p>The server is running in Port 8080.</p>
<h2 id="adding-routes-server">Adding routes to our server</h2>
<p>We have built a simple web server in Go, but it does nothing. Let’s make our server connect to an external API to query some data. This demonstrates how a web application often works. More often than not, a web app performs some network operations, highly computational tasks, and database queries.</p>
<p><code>https://fakestoreapi.com/</code> API provides us with a mock API. We’ll have to update the content of <code>main.go</code> to contain the following lines of code:</p>
<pre class="language-go hljs">import (
  ...
  "encoding/json"
  "io"
)

type Product struct {
    Price       float64 `json:"price"`
    ID          int     `json:"id"`
    Title       string  `json:"title"`
    Category    string  `json:"category"`
    Description string  `json:"description`
    Image       string  `json:"image"`
}

func getProduct(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
    id := p.ByName("id")
    resp, err := http.Get("https://fakestoreapi.com/products/" + id)
    if err != nil {
        log.Fatal(err)
        return
    }
    defer resp.Body.Close()
    body, err := io.ReadAll(resp.Body)
    if err != nil {
        log.Fatal(err)
        return
    }
    product := Product{}
    parseErr := json.Unmarshal(body, &amp;product)
    if parseErr != nil {
        log.Fatal(parseErr)
        return
    }
    response, ok := json.Marshal(product)
    if ok != nil {
        log.Fatal("somethng went wrong")
    }

    w.Header().Set("Content-Type", "application/json")
    w.Write(response)
}

func main() {
    ... 
    router.GET("/product/:id", getProduct)
    ...
}
</pre>
<p>Using the HttpRouter package, we create a <code>product/:id</code> endpoint that accepts a GET request. The router uses the <code>getProduct</code> function to handle the incoming requests to the endpoint.</p>
<h2 id="using-go-cache-caching">Using go-cache for caching</h2>
<p>Each network request will take a couple of milliseconds depending on how fast the user’s network connection is. Some requests might require high CPU usage. It is better to store the result of such requests in memory for quick retrieval, barring any updates to the underlying data, which might cause changes to the returned data.</p>
<p>The following code goes in the <code>main.go</code> file. We start by importing the go-cache package alongside the time package:</p>
<pre class="language-go hljs">import (
    ...
    "time"
    "github.com/patrickmn/go-cache"
)
</pre>
<p>The code below helps to initialize the cache along with read and update methods that allow us to retrieve and input data to and from the cache:</p>
<pre class="language-go hljs">type allCache struct {
    products *cache.Cache
}

const (
    defaultExpiration = 5 * time.Minute
    purgeTime         = 10 * time.Minute
)

func newCache() *allCache {
    Cache := cache.New(defaultExpiration, purgeTime)
    return &amp;allCache{
        products: Cache,
    }
}

func (c *allCache) read(id string) (item []byte, ok bool) {
    product, ok := c.products.Get(id)
    if ok {
        log.Println("from cache")
        res, err := json.Marshal(product.(Product))
        if err != nil {
            log.Fatal("Error")
        }
        return res, true
    }
    return nil, false
}

func (c *allCache) update(id string, product Product) {
    c.products.Set(id, product, cache.DefaultExpiration)
}

var c = newCache()
</pre>
<ol>
<li><code>newCache</code> invokes the <code>cache.New()</code> function, which creates a cache with a default expiration time of five minutes and purges expired items every 10 minutes</li>
<li><code>read</code> invokes the <code>cache.Get(key)</code> function, which retrieves an item with the given key. Type assertion is carried out on the retrieved item, so it can be passed to functions that don’t accept arbitrary types. The result is parsed to <code>JSON</code> format using the <code>JSON.Marshal()</code> function</li>
<li><code>update</code> sets the value of the key <code>id</code> to <code>product</code>, with the default expiration time</li>
</ol>
<p>After we’re done with the initialization of our cache, we have to think about how we want to implement the cache.</p>
<p>Usually, the approach is to check the cache for the requested resource. If it’s found in the cache, it’s returned to the client. However, if it’s not found, we proceed as usual to perform whatever action is needed to get the desired resource. Then the result is stored in the cache.</p>
<p>A programming concept that can help us perform the described action is <code>middleware</code>. A basic middleware in Go usually has this form:</p>
<pre class="language-go hljs">func something(f http.HandlerFunc) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        log.Println("Request recieved")
        f(w, r)
    }
}
</pre>
<p>Following that pattern, we can create a <code>checkCache</code> middleware with HttpRouter:</p>
<pre class="language-go hljs">func checkCache(f httprouter.Handle) httprouter.Handle {
    return func(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
        id := p.ByName("id")
        res, ok := c.read(id)
        if ok {
            w.Header().Set("Content-Type", "application/json")
            w.Write(res)
            return
        }
        log.Println("From Controller")
        f(w, r, p)
    }
}
</pre>
<p>The middleware here takes a <code>httprouter.Handle</code> as one of its parameters, wraps it, and returns a new <code>httprouter.Handle</code> for the server to call.</p>
<p>We call the <code>c.read</code> method with the <code>id</code> as its argument. If a product is found, we return that without proceeding any further.</p>
<p>We call the <code>c.update</code> method to save the retrieved product to the cache:</p>
<pre class="language-go hljs">func getProduct(w http.ResponseWriter, r *http.Request, p httprouter.Params) {
    ...
    c.update(id, product)
    w.Header().Set("Content-Type", "application/json")
    w.Write(response)
}
</pre>
<p>Finally, we pass the <code>getProduct</code> function as an argument to the <code>checkCache</code>, therefore enabling the middleware on the endpoint. Requests to this endpoint will now make use of our cache:</p>
<pre class="language-go hljs">func main() {
    ...
    router.GET("/product/:id", checkCache(getProduct))
    ...
}
</pre>
<h2 id="benchmark-testing">Benchmark testing</h2>
<p>We’ve said that caching significantly improves the performance of our application. To support that claim, let’s perform some benchmarks.</p>
<p>The benchmarking tool of choice here is <a href="https://github.com/tsliwowicz/go-wrk">go-wrk</a>, which you can install with this command:</p>
<pre class="language-go hljs">go install github.com/tsliwowicz/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1770783a60657c577b7663726463">[email protected]</a>
</pre>
<p>Next, we need to test our application with and without the caching middleware:</p>
<pre class="language-go hljs">func main() {
    ...
    router.GET("/product/:id", checkCache(getProduct))
    ...
}
</pre>
<p>With the caching middleware active, run:</p>
<pre class="language-go hljs"> go-wrk -c 80 -d 5  http://127.0.0.1:8080/product/1
</pre>
<p><img             class="aligncenter size-full wp-image-165431 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/benchmark-caching.png" alt="Benchmark With Caching" width="511" height="227"    /><noscript><img               class="aligncenter size-full wp-image-165431" src="https://blog.logrocket.com/wp-content/uploads/2023/03/benchmark-caching.png" alt="Benchmark With Caching" width="511" height="227"  /></noscript></p>
<p>Update the route to disable caching as follows:</p>
<pre class="language-go hljs">func main() {
    ...
    router.GET("/product/:id", getProduct)
    ...
}
</pre>
<p>Restart the server, then run the command below:</p>
<pre class="language-go hljs"> go-wrk -c 80 -d 5  http://127.0.0.1:8080/product/1
</pre>
<p><img             class="aligncenter size-full wp-image-165433 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/benchmark-without-caching.png" alt="Benchmark Without Caching" width="608" height="220"    /><noscript><img               class="aligncenter size-full wp-image-165433" src="https://blog.logrocket.com/wp-content/uploads/2023/03/benchmark-without-caching.png" alt="Benchmark Without Caching" width="608" height="220"  /></noscript></p>
<p>With 80 connections running for five seconds, we get the above results. The cached route could handle significantly more requests than the route that was not cached.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we discussed how to implement in-memory caching using the go-cache package. go-cache is just one of many packages available to handle in-memory caching in Go. Keep in mind that no matter the tool you choose to use, the underlying principle remains the same, and the benefits of caching are undoubtedly clear throughout the software development industry. It would be in your best interest to adopt the practice of caching in your next app or existing codebase.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165384" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/how-to-implement-memory-caching-go/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/how-to-implement-memory-caching-go/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165384" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/how-to-implement-memory-caching-go/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165384" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/how-to-implement-memory-caching-go/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
 <div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/10/IMG_20220809_120947-e1666638768500.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/10/IMG_20220809_120947-e1666638768500.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/alexandergodwin/">
Alexander Godwin <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and writer that likes to write code and build things. Currently I'm fascinated by distributed systems and cloud computing.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/go/">#go</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/product-development-strategy-definition-examples/" rel="prev">Product development strategy: Definition, examples, and guide</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/churn-rate-formula-definition-how-to-reduce/" rel="next">What is churn rate? Formula, definition, and how to reduce churn</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/how-to-implement-memory-caching-go/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to represent large numbers in your Node.js app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to represent large numbers in your Node.js app - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/">How to represent large numbers in your Node.js app - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166089 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-node" id="post-166089">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/josephmawa/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/08/1610367557179.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/08/1610367557179.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/josephmawa/">
Joseph Mawa <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A very passionate open source contributor and technical writer</span>
</div>
</div>
<h1 class="posttitle">How to represent large numbers in your Node.js app</h1>
<p>
<span class="post-date"><time class="post-date">
April 14, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2483</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/how-to-represent-large-numbers-node-js-app.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="How To Represent Large Numbers In Your Node.js App"                /> <article class="article-post">
<p>It is difficult for computers to represent numbers with several significant digits accurately without loss of precision. Integers that exceed the maximum safe integer limit in JavaScript lose precision when you store them as ordinary integers.</p>
<p>In the JavaScript ecosystem, you can use BigInt to work with large integers. However, you can also use third-party packages with features similar to BigInt.</p>
<p>This article will be a complete guide to managing large numbers using BigInt and popular packages that offer similar features. We will also compare the third-party packages’ use cases, strengths, and weaknesses.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#how-does-javascript-encode-numbers">How does JavaScript encode numbers?</a>
<ul >
<li><a href="#double-precision-binary-floating-point-format">The double-precision binary floating-point format</a></li>
<li><a href="#minimum-maximum-safe-integers-javascript">The minimum and maximum safe integers in JavaScript</a></li>
<li><a href="#positive-negative-infinity-javascript">Positive and negative infinity in JavaScript</a></li>
</ul>
</li>
<li><a href="#how-to-manage-large-integers-javascript-using-bigint">How to manage large integers in JavaScript using BigInt</a></li>
<li><a href="#packages-managing-large-numbers-javascript">Packages for managing large numbers in JavaScript</a>
<ul >
<li><a href="#managing-large-numbers-using-math-js">Math.js</a></li>
<li><a href="#managing-large-numbers-using-bignumber-js">bignumber.js</a></li>
<li><a href="#managing-large-numbers-using-js-big-decimal">JS Big Decimal</a></li>
</ul>
</li>
<li><a href="#comparing-packages-managing-large-numbers-javascript">Comparing packages for managing large numbers in JavaScript</a></li>
</ul>
<h2 id="how-does-javascript-encode-numbers">How does JavaScript encode numbers?</h2>
<p>The challenge of precision loss when representing large numbers is not unique to JavaScript. Internally, JavaScript uses the double-precision binary floating-point format to represent numbers.</p>
<h3 id="double-precision-binary-floating-point-format">The double-precision binary floating-point format</h3>
<p>The double-precision binary floating-point format is defined by IEEE standard 754. It uses 64 bits to represent a signed floating point number. A number expressed in double-precision binary floating-point notation is comprised of three parts: the sign, mantissa, and exponent, as illustrated below:</p>
<p><img             class="aligncenter size-full wp-image-166134 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/double-precision-binary-floating-point-notation.png" alt="Double-Prevision Binary Floating-Point Notation" width="659" height="75"    /><noscript><img               class="aligncenter size-full wp-image-166134" src="https://blog.logrocket.com/wp-content/uploads/2023/04/double-precision-binary-floating-point-notation.png" alt="Double-Prevision Binary Floating-Point Notation" width="659" height="75"  /></noscript></p>
<p>The double-precision binary floating-point format distributes the 64 bits among these three parts. It uses one bit to encode the sign, 11 bits for encoding the biased exponent, and 52 bits for the mantissa or significand.</p>
<p>The example below shows the internal double-precision binary floating-point number representation of the decimal number <code>-1.7976931348623157e+308</code>. I have used the <code>•</code> character to separate the encoding for the three parts.</p>
<p>The first bit encodes the sign. Because we are encoding a negative number, its value is one. If we were encoding a positive number, its value would be zero. The subsequent 11 bits encode the biased exponent, and the last 52 encode the mantissa:</p>
<pre class="language-txt hljs">1•11111111110•1111111111111111111111111111111111111111111111111111
</pre>
<p>Computers only understand binary. Therefore, JavaScript internally converts each number to a double-precision binary floating-point format, like in the exampleabove, before storing or performing mathematical operations.</p>
<p>Unfortunately, you cannot accurately and precisely represent some numbers in binary. Therefore, some numbers will lose precision when you convert them from decimal to binary and back to decimal.</p>
<p>Similarly, JavaScript uses a fixed number of bits for encoding the different parts of a double-precision binary floating-point number. Therefore, you’d use a third-party package or the built-in <code>bigint</code> type when dealing with large integers.</p>
<h3 id="minimum-maximum-safe-integers-javascript">The minimum and maximum safe integers in JavaScript</h3>
<p>Because the double-precision format limits the number of bits representing the mantissa to 53, there are limitations to the precision and accuracy of JavaScript integers with which you can work.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>The maximum safe integer you can work with without losing precision is <code>2 ** 53 - 1</code>. It is also a static data property of the <code>Number</code> constructor accessible using <code>Number.MAX_SAFE_INTEGER</code>:</p>
<pre class="language-javascript hljs">console.log(2 ** 53 - 1 === Number.MAX_SAFE_INTEGER) // true
</pre>
<p>There is also a corresponding minimum safe integer whose value is <code>-(2 ** 53 - 1)</code>. You can access its value using the <code>Number.MIN_SAFE_INTEGER</code> static property:</p>
<pre class="language-javascript hljs">console.log(-(2 ** 53 - 1) === Number.MIN_SAFE_INTEGER) // true
</pre>
<p>Any mathematical operation you perform involving integers greater than the maximum safe integer or integers less than the minimum safe integer will lead to unexpected approximate results:</p>
<pre class="language-javascript hljs">const maxSafeInteger = Number.MAX_SAFE_INTEGER;
const minSafeInteger = Number.MIN_SAFE_INTEGER;

console.log(maxSafeInteger + 1); // 9007199254740992
console.log(maxSafeInteger + 2); // 9007199254740992
console.log(maxSafeInteger + 1 === maxSafeInteger + 2); // true

console.log(minSafeInteger - 1); // -9007199254740992
console.log(minSafeInteger - 2); // -9007199254740992
console.log(minSafeInteger - 1 === minSafeInteger - 2); // true
</pre>
<h3 id="positive-negative-infinity-javascript">Positive and negative infinity in JavaScript</h3>
<p>Like the minimum and maximum safe integers above, JavaScript has a maximum numeric value it can represent internally. This value is <code>2 ** 2014 - 1</code>. You can access it using the <code>Number.MAX_VALUE</code> data property.</p>
<p>JavaScript represents any numeric value exceeding <code>Number.MAX_VALUE</code> using <code>Infinity</code> and the corresponding negative equivalent using <code>-Infinity</code>, like in the examples below:</p>
<pre class="language-javascript hljs">console.log(Number.MAX_VALUE * 2); // Infinity
console.log(Number.MAX_VALUE * 3); // Infinity
console.log(-Number.MAX_VALUE * 3); // -Infinity
</pre>
<p>Though <code>Infinity</code> is global in Node, you can access it using the <code>Number.POSITIVE_INFINITY</code> data property and <code>-Infinity</code> using the <code>Number.NEGATIVE_INFINITY</code> data property.</p>
<h2 id="how-to-manage-large-integers-javascript-using-bigint">How to manage large integers in JavaScript using BigInt</h2>
<p>As hinted in the introduction section, JavaScript uses the double-precision format to represent numbers internally. Because it uses 53 bits to encode the mantissa, the maximum safe integer you can work with in JavaScript is <code>2**53 - 1</code>.</p>
<p>To safely work with integers greater than the maximum safe integer, you need the <code>bigint</code> primitive. It is the built-in functionality for manipulating large integers without losing precision.</p>
<p>You can create a <code>bigint</code> type by appending <code>n</code> to an integer or using the <code>BigInt</code> function. Because <code>BigInt</code> is not a constructor, invoke it without the <code>new</code> keyword, like in the examples below:</p>
<pre class="language-javascript hljs">const number = 1n;
console.log(1n + 2n); // 3n

const maxSafeInt = BigInt(Number.MAX_SAFE_INTEGER);
console.log(maxSafeInt + 1n); // 9007199254740992n
console.log(maxSafeInt + 2n); // 9007199254740993n
console.log(maxSafeInt * maxSafeInt); // 81129638414606663681390495662081n
</pre>
<p>Unlike the usual <code>number</code> type, you can’t use the built-in <code>Math</code> methods with <code>BigInt</code> values. However, you can perform basic math operations such as addition, subtraction, and exponentiation with <code>bigint</code> types:</p>
<pre class="language-javascript hljs">console.log(2n + 3n) // 5n
console.log(2n - 3n)  // -1n
console.log(2n ** 3n) // 8n
console.log(4n % 3n)  // 1n
console.log(BigInt(3) - 4n) // -1n
</pre>
<p>As you can only perform basic math operations with <code>bigint</code> types, you may need to use a third-party package for some use cases when dealing with large numbers in JavaScript.</p>
<h2 id="packages-managing-large-numbers-javascript">Packages for managing large numbers in JavaScript</h2>
<p>In addition to the built-in <code>bigint</code> type, there are several third-party packages to work with large numbers in JavaScript. Some of these packages come with solutions that <code>BigInt</code> may not offer.</p>
<p>However, like any third-party package, there are downsides to using them. They come with extra bundle size, maintenance, security, and licensing issues.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h3 id="managing-large-numbers-using-math-js">Managing large numbers using Math.js</h3>
<p>Math.js is a free, open source, and feature-packed math library. It is also isomorphic. Therefore, you can use it both in the browser and the Node runtime environment.</p>
<p>Though it is a feature-packed library, in this article, we will use Math.js for managing large numbers in the Node runtime environment. Depending on your package manager, install it from the npm package registry like this:</p>
<pre class="language-bash hljs"># npm 
npm i mathjs

# yarn
yarn add mathjs

#pnpm
pnpm add mathjs
</pre>
<p>After installing Math.js, you can load and use it with the default configuration, like in the example below:</p>
<pre class="language-javascript hljs">const { add, subtract, evaluate }= require('mathjs');

const sum = add(2, 3);
const difference = subtract(2, 3);
const anotherSum = evaluate('2 + 3');

console.log(sum); // 5
console.log(difference}); // -1
console.log(anotherSum}); // 5
</pre>
<p>Instead of using the Math.js built-in functions with the default configuration, you can instead create an instance of Math.js with a custom configuration:</p>
<pre class="language-javascript hljs">const { create, all } = require("mathjs");

const config = {};
const math = create(all, config);

console.log(math.add(2, 3)); // 5
console.log(math.pow(2, 3)); // 8
console.log(math.divide(4, 2)); // 2
console.log(math.multiply(2, 3)); // 6
</pre>
<p>Math.js has the <code>BigNumber</code> datatype specifically for working with large numbers.</p>
<p>In one of the sections above, we highlighted that when working with the built-in <code>number</code> type, JavaScript represents numbers exceeding the maximum representable numeric value using <code>Infinity</code>.</p>
<p>With Math.js, you can represent numbers exceeding the maximum representable number and perform mathematical operations on them. However, be aware that performing mathematical operations on <code>BigNumber</code> types is slower than on ordinary <code>number</code> types:</p>
<pre class="language-javascript hljs">const { create, all } = require("mathjs");

const config = {};
const math = create(all, config);

const maxValue = math.bignumber(Number.MAX_VALUE);
console.log(math.add(maxValue, maxValue)); // 3.5953862697246314e+308

const maxSafeInt = math.bignumber(Number.MAX_SAFE_INTEGER);

console.log(math.square(maxSafeInt)); // 8.1129638414606663681390495662081e+31
console.log(math.add(maxSafeInt, maxSafeInt)); // 18014398509481982
console.log(math.subtract(maxSafeInt, maxSafeInt)); // 0
console.log(math.multiply(maxSafeInt, math.bignumber(2))); // 18014398509481982
console.log(math.divide(maxSafeInt, math.bignumber(2))); // 4503599627370495.5

console.log(math.log10(maxSafeInt)); // 15.95458977019100329811178809273377220616031325194798178472905735
console.log(math.pow(maxSafeInt, math.bignumber(2))); // 8.1129638414606663681390495662081e+31
</pre>
<p>The default precision for the <code>BigNumber</code> type is 64 digits. However, you can use the <code>config</code> object to configure Math.js to use a different precision level.</p>
<h3 id="managing-large-numbers-using-bignumber-js">Managing large numbers using bignumber.js</h3>
<p>bignumber.js is another JavaScript library for managing arbitrary-precision decimal and non-decimal arithmetic. It is a free, open source, MIT-licensed library for working with large numbers.</p>
<p>It runs in the browser, Node, and Deno. To start using bignumber.js, install it from the npm package registry:</p>
<pre class="language-bash hljs"># npm 
npm i bignumber.js

# yarn
yarn add bignumber.js

#pnpm
pnpm add bignumber.js
</pre>
<p>After installation, import and create an instance of the <code>BigNumber</code> constructor, which takes a number, string, or <code>BigNumber</code> type as an argument and returns an object.</p>
<p>In the example below, I use the <code>commonjs</code> syntax to import bignumber.js. It also supports ES syntax. If you intend to use bignumber.js in the browser environment without a JavaScript bundler, you can also access it via a CDN:</p>
<pre class="language-javascript hljs">const BigNumber = require("bignumber.js");

const distanceOfTheSun = new BigNumber('1.49597870700e11'); // in metres
console.log(distanceOfTheSun) // BigNumber { s: 1, e: 11, c: [ 149597870700 ] }
console.log(distanceOfTheSun.valueOf()) // 149597870700
</pre>
<p>When using the built-in <code>number</code> type, JavaScript will represent any numeric value greater than <code>Number.MAX_VALUE</code> as <code>Infinity</code>. However, with bignumber.js, you can work with any value greater than the <code>Number.MAX_VALUE</code>.</p>
<p>In the example below, I am creating an instance of <code>BigNumber</code> by passing <code>Number.MAX_VALUE</code> as a string and computing its square. If you were to do the same using the built-in JavaScript <code>number</code> primitive, you would get <code>Infinity</code>:</p>
<pre class="language-javascript hljs">const BigNumber = require("bignumber.js");

console.log(Number.MAX_VALUE); // 1.7976931348623157e+308
console.log(Number.MAX_VALUE ** 2) // Infinity

const maxValue = new BigNumber(Number.MAX_VALUE.toString());
const square = maxValue.exponentiatedBy("2");

console.log(square.valueOf()); // 3.23170060713109998320439596646649e+616

const squareRoot = square.squareRoot();
console.log(squareRoot.valueOf()); // 1.7976931348623157e+308
console.log(squareRoot.isEqualTo(maxValue)); // true
</pre>
<p>However, when working with such large numbers that are not representable in JavaScript, use either the <code>toString</code> or <code>valueOf</code> method to access the result of your computation as a string.</p>
<p>The <code>toNumber</code> method will coerce the result of your computation to a JavaScript <code>number</code> primitive. You will still encounter the same JavaScript big number problem highlighted above. Your answer will lose precision, or JavaScript will represent it as <code>Infinity</code>.</p>
<p>Though our goal in this article is to use the bignumber.js package to work with large numbers, <code>bignumber.js</code> also works with corresponding small numbers. It has several built-in methods that I haven’t highlighted here. Check out the documentation to learn the other built-in functions.</p>
<h3 id="managing-large-numbers-using-js-big-decimal">Managing large numbers using JS Big Decimal</h3>
<p>JS Big Decimal is another JavaScript library you can use to work with large numbers. Unlike its counterparts above, JS Big Decimal has a small bundle size and comes with a limited set of features. You can use it to manage both large and small decimal numbers.</p>
<p>Depending on your package manager, use one of the commands below to install JS Big Decimal from the npm package registry:</p>
<pre class="language-bash hljs"># npm 
npm i js-big-decimal

# yarn
yarn add js-big-decimal

#pnpm
pnpm add js-big-decimal
</pre>
<p>Like the other two packages, import the <code>BigDecimal</code> constructor and create an instance like the example below. The <code>BigDecimal</code> constructor takes a number or a string as an argument and returns a <code>BigDecimal</code> object.</p>
<p>You can then use the <code>getValue</code> method to access the value of the number as a string. Alternatively, use <code>getPrettyValue</code> if you want to format the output:</p>
<pre class="language-javascript hljs">const BigDecimal = require("js-big-decimal");

const value = new BigDecimal('23');
console.log(value.add(new BigDecimal(2)).getValue())
</pre>
<p>JS Big Decimal has functions for performing basic mathematical operations such as addition, subtraction, multiplication, and division. The code below illustrates how to use them to work with large numbers:</p>
<pre class="language-javascript hljs">const BigDecimal = require("js-big-decimal");

const maxSafeInt = new BigDecimal(Number.MAX_SAFE_INTEGER.toString());
const divisor = new BigDecimal("2");

console.log(maxSafeInt.getPrettyValue()); // 9,007,199,254,740,991

const sum = maxSafeInt.add(maxSafeInt);
const quotient = maxSafeInt.divide(divisor);
const diff = maxSafeInt.subtract(quotient);
const product = quotient.multiply(divisor);

console.log(sum.getValue()); // 18014398509481982
console.log(quotient.getPrettyValue()); // 4,503,599,627,370,495.50000000
console.log(diff.getPrettyValue()); // 4,503,599,627,370,495.50000000
console.log(product.getPrettyValue()); // 9,007,199,254,740,991
</pre>
<h2 id="comparing-packages-managing-large-numbers-javascript">Comparing packages for managing large numbers in JavaScript</h2>
<p>Not all packages are created equal. Each third-party package has use cases, strengths, and weaknesses. Let’s compare the third-party packages above by highlighting their strengths and weaknesses and exploring metrics such as GitHub stars and issues, bundle size, and npm downloads.</p>
<p>It is worth noting that metrics such as GitHub stars are similar to social media likes. You may use it as a proxy indicator for the popularity of a package. However, it doesn’t tell you much about the quality.</p>
<p>Similarly, the npm download statistics are far from precise. According to npm, the download count is the number of served HTTP 200 responses that were tarball files. Therefore, the download count includes automated downloads by build servers, mirrors, and bots. Though the npm download count isn’t an accurate measure of the active users of a package, you can use it to make comparisons across packages.</p>
<table>
<thead>
<tr>
<th/>
<th><strong>Math.js</strong></th>
<th><strong>b</strong><strong>ignumber.js</strong></th>
<th><strong>JS Big Decimal</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Gzipped bundle size</td>
<td>187.93KB</td>
<td>8.09KB</td>
<td>3.88KB</td>
</tr>
<tr>
<td>Dependencies</td>
<td>9</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>GitHub stars</td>
<td>13.1k</td>
<td>6k</td>
<td>96</td>
</tr>
<tr>
<td>Active maintenance</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Documentation</td>
<td>Good</td>
<td>Good</td>
<td>Good</td>
</tr>
<tr>
<td>License</td>
<td>Apache-2.0</td>
<td>MIT</td>
<td>MIT</td>
</tr>
<tr>
<td>npm weekly downloads</td>
<td>502,656</td>
<td>7,114,325</td>
<td>25,204</td>
</tr>
<tr>
<td>Pricing</td>
<td>Free</td>
<td>Free</td>
<td>Free</td>
</tr>
<tr>
<td>Open GitHub issues</td>
<td>157</td>
<td>14</td>
<td>6</td>
</tr>
<tr>
<td>Closed GitHub issues</td>
<td>1397</td>
<td>240</td>
<td>27</td>
</tr>
</tbody>
</table>
<p>All the above third-party packages are free, open source libraries with permissive licenses. Among the three, Math.js is a feature-packed general math library, while the other two were created for managing large numbers.</p>
<p>Therefore, Math.js has the largest Gzipped bundle size. However, it is tree-shakable if you are using a bundler like webpack. Both Math.js and bignumber.js come with several features for managing large numbers and performing mathematical operations on them.</p>
<p>On the other hand, JS Big Decimal has the smallest bundle size. However, it also has the least number of features. It is only capable of performing basic mathematical operations.</p>
<h2 id="conclusion">Conclusion</h2>
<p>JavaScript internally uses the 64 bit double-precision binary floating-point format to represent numbers. It allocates one bit to represent the sign, 11 bits for the exponent, and 53 bits to represent the mantissa.</p>
<p>JavaScript allocates fixed bits for representing the different parts of a double-precision floating point number. Therefore, it approximates integers outside the safe integer range. Similarly, it represents numeric values greater than <code>Number.MAX_VALUE</code> using <code>Infinity</code> and their corresponding negative values using <code>-Infinity</code>.</p>
<p>Though the built-in <code>BigInt</code> is useful for working with integers greater than the maximum safe integer or less than the minimum safe integer, it is lacking because you can only perform basic mathematical operations such as addition, subtraction, multiplication, and exponentiation. You can’t use it with methods of the built-in <code>Math</code> object; doing so will throw an error.</p>
<p>To work with large numbers in JavaScript without encountering the above limitations, you need third-party packages such as Math.js, bignumber.js, and JS Big Decimal. Though most third-party packages have limitations, as highlighted above, they have features that make working with large numbers a breeze.</p><div class="code-block code-block-23" >
<div class="blog-plug inline-plug node-plug"><h2>200’s only <img  src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"/></noscript> Monitor failed and slow network requests in production</h2> Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/node-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer"><img src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"/></noscript></a><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens while a user interacts with your app. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.</p> LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>. </div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166089" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166089" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166089" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/08/1610367557179.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/08/1610367557179.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/josephmawa/">
Joseph Mawa <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A very passionate open source contributor and technical writer</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/node/">#node</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/what-is-project-governance-effectively-oversee-projects/" rel="prev">What is project governance? How to effectively oversee projects</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/understanding-opengl-basics-rust/" rel="next">Understanding OpenGL basics in Rust</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/how-to-represent-large-numbers-node-js-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>How to use forwardRef in React - LogRocket Blog</title>
			<link>https://blog.logrocket.com/use-forwardref-react/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/use-forwardref-react/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to use forwardRef in React - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/use-forwardref-react/">How to use forwardRef in React - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-9521 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-react" id="post-9521">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/peterekeneeze/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/peterekeneeze.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/peterekeneeze.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/peterekeneeze/">
Peter Ekene Eze <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Learn, Apply, Share</span>
</div>
</div>
<h1 class="posttitle">How to use <code>forwardRef</code> in React</h1>
<p>
<span class="post-date"><time class="post-date">
March 31, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2889</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2021/03/use-forwardref-react.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="How to Use ForwardRef in React"                /> <article class="article-post">
<p><strong><em>Editor’s Note:</em></strong> <em>This post was last updated on 31 March 2023 to</em> <a href="https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/"><em>reflect updates to React</em></a><em>. This update also includes new sections on why</em> <code><a href="https://blog.logrocket.com/complete-guide-react-refs/">forwardRef</a></code> <em>is important, how to use</em> <code>forwardRef</code> <em>with TypeScript, and when to use</em> <code>forwardRef</code> <em>in React.</em></p>
<p>In this tutorial, we will go over the concept of forwarding <a href="https://blog.logrocket.com/complete-guide-react-refs/">refs in React</a> and understand how it helps us manage interactions with the <a href="https://blog.logrocket.com/managing-dom-components-reactdom/">DOM</a>. For a more engaging experience, we’ll cover how to create refs, attach created refs to DOM elements and classes, use the <code>forwardRef</code> method, etc.</p>
<p>It is also worth noting that we will often reference the <a href="https://react.dev/">docs page</a> to build on the existing information and prove our concepts with relatable real life examples and snippets to be hosted on CodeSandbox.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-forwardref-react">What is <code>forwardRef</code> in React?</a>
<ul >
<li><a href="#why-forwardref-important">Why is <code>forwardRef</code> important?</a></li>
</ul>
</li>
<li><a href="#how-refs-work-react">How do refs work in React?</a></li>
<li><a href="#when-use-refs-react">When to use refs in React</a></li>
<li><a href="#working-with-refs-class-components">Working with refs in class components</a>
<ul >
<li><a href="#creating-refs-react">Creating refs in React</a></li>
<li><a href="#attaching-refs">Attaching refs</a></li>
<li><a href="#using-refs-with-function-components">Using refs with function components</a></li>
<li><a href="#conditional-refs">Conditional refs</a></li>
</ul>
</li>
<li><a href="#forwarding-refs-react-using-forwardref">Forwarding refs in React using <code>forwardRef</code></a></li>
<li><a href="#use-forwardref-with-typescript">How to use <code>forwardRef</code> with TypeScript</a></li>
<li><a href="#when-not-use-refs-react">When not to use refs in React</a></li>
</ul>
<h2 id="what-forwardref-react">What is <code>forwardRef</code> in React?</h2>
<p>In React, <code><a href="https://react.dev/reference/react/forwardRef">forwardRef</a></code> is a utility function that passes down a <code>ref</code> through a component to one of its children. This is particularly useful when you need to access a DOM element or component instance directly in a parent component, but the desired child element is wrapped by a higher-order component or a component that doesn’t expose the <code>ref</code> by default.</p>
<p><code>forwardRef</code> takes a <a href="https://blog.logrocket.com/testing-state-changes-in-react-functional-components/">functional component</a> as its argument and returns a new component with a forwarded <code>ref</code> attribute. This allows you to directly access the underlying child DOM node or instance from a parent component using the <code>ref</code>.</p>
<h3 id="why-forwardref-important">Why is <code>forwardRef</code> important?</h3>
<p><code>forwardRef</code> is important in React because it allows for more flexible and efficient component composition. When working with complex applications, there are cases where you need direct access to a child component’s DOM element or instance from a parent component. However, React’s default behavior doesn’t always allow this, especially when dealing with <a href="https://blog.logrocket.com/understanding-react-higher-order-components/">higher-order components</a> (HOCs) or wrapper components.</p>
<p>By using <code>forwardRef</code>, you can pass a reference from a parent component to a child component, even if that child component is wrapped inside another component. This enables the parent component to interact with the child’s DOM element or instance directly.</p>
<h2 id="how-refs-work-react">How do refs work in React?</h2>
<p>To understand ref forwarding, we must first understand what refs are. Refs are a way to access and interact with a DOM element directly. Refs allow you to bypass the typical React data flow and perform actions not achievable with <a href="https://blog.logrocket.com/the-modern-guide-to-react-prop-types/">props</a> and <a href="https://blog.logrocket.com/guide-understanding-react-state-patterns/">state</a> alone.</p>
<p>They are often used for tasks like setting focus on an input field, measuring the dimensions of an element, or triggering animations. For instance, you can use refs to give focus on an input field when a <strong><code>button</code></strong> is clicked:</p>
<pre class="language-javascript hljs">import * as React from "react";
import ReactDOM from "react-dom";

export default function App() {
 const ref = React.useRef();

 function focus() {
   ref.current.focus();
 }

 return (
   &lt;div className="App">
     &lt;input ref={ref} placeholder="my input" />
     &lt;button onClick={focus}>Focus&lt;/button>
   &lt;/div>
 );
}

const rootElement = document.getElementById("root");
ReactDOM.render(&lt;App />, rootElement);
</pre>
<p><iframe  title="agitated-sea-ff5pd1" src="https://codesandbox.io/embed/agitated-sea-ff5pd1?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<p>Similarly, we could use JavaScript to achieve a similar effect. However, it is not recommended to do this, and it is even marked as a bad practice to access DOM directly when using React. The vanilla JavaScript equivalent to focusing an element could be:</p>
<pre class="language-javascript hljs">document.getElementById('myInput).focus()
</pre>
<h2 id="when-use-refs-react">When to use refs in React</h2>
<p>There are <a href="https://blog.logrocket.com/a-guide-to-react-refs/">many refs in React</a> that can be pointed to using <code>forwardRef</code>. In React, it’s generally recommended to use props and state to manage your component data flow. However, there are some situations where using refs can be helpful or even necessary. Here are some common use cases for refs in React:</p>
<ul>
<li>Managing focus, text selection, or media playback: Refs can be used to manage focus on form elements, select text in an input or text area, or control media playback for audio or video elements</li>
<li>Triggering animations: If you need to trigger animations using external libraries like <a href="https://blog.logrocket.com/using-gsap-3-for-web-animation/">GSAP</a> or <a href="https://blog.logrocket.com/exploring-anime-js-example-site-animation-project/">Anime.js</a>, you might need a direct reference to a DOM element, which can be achieved using refs</li>
<li>Integrating with third-party DOM libraries: When using third-party libraries that require direct access to DOM elements, refs can be useful for providing the necessary access</li>
<li>Measuring the dimensions or position of elements: Refs can help you measure the size, position, or scroll position of an element. This can be useful for tasks like implementing a custom scrollbar, <a href="https://blog.logrocket.com/controlling-tooltips-pop-up-menus-using-compound-components-in-react-ccedc15c7526/">creating tooltips</a>, or building responsive components</li>
</ul>
<p>While refs are a powerful tool, they should be used sparingly and only when necessary. Excessive use of refs can lead to code that is harder to understand and maintain. Always opt to use props and state for data flow in React components when possible.</p>
<h2 id="working-with-refs-class-components">Working with refs in class components</h2>
<p>In this section, we will focus specifically on working with refs in class components. Although React has moved towards functional components with <a href="https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/">React H</a><a href="https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/">ooks,</a> it is still important to understand how to manage refs in class components, as they remain prevalent in many existing projects. We will cover the process of creating, attaching, and using refs in class components, along with examples that illustrate common use cases. This knowledge will enable you to use refs effectively in class components and facilitate a smoother transition to functional components and Hooks when needed.</p>
<h3 id="creating-refs-react">Creating refs in React</h3>
<p>To create a ref, React provides a function called <a href="https://blog.logrocket.com/react-createref-guide/"><code>React.createRef</code></a>. Once created, they can be attached to React elements via the <code>ref</code> attribute. When a component is constructed, refs get assigned to instance properties of that component, ensuring that they can be referenced anywhere in the component. Here’s what that looks like:</p>
<pre class="language-javascript hljs">class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.newRef = React.createRef(); //newRef is now available for use throughout our component
  }
 ...
}
</pre>
<p>At this point, we have created a <code>Ref</code> called <code>newRef</code>. To use this <code>Ref</code> in our component, we simply pass it as a value to the <code>ref</code> attribute like this:</p>
<pre class="language-javascript hljs">class MyComponent extends React.Component {
 ...
  render() {
    return &lt;div ref={this.myRef} />;
  }
}
</pre>
<p>Here, we’ve attached the <code>Ref</code> and passed in the <code>newRef</code> as its value. As a result, we now have the ability to update this without changing the component’s state.</p>
<h3 id="attaching-refs">Attaching refs</h3>
<p>In this section, we will discuss the process of attaching refs in React. Attaching refs in React is the process of relating a ref with a DOM element for direct DOM manipulation. This step is crucial in order to effectively work with refs and employ their potential in various use cases, such as managing focus, measuring element dimensions, or triggering animations.</p>
<p>We already covered how to create refs with <code>createRef</code>, so now we will relate it to a DOM element by using the <code>ref</code> prop:</p>
<pre class="language-javascript hljs">&lt;div ref={this.myRef} />
</pre>
<p>And, finally, when we are ready to access the DOM element later on the component lifecycle, we can do something like this:</p>
<pre class="language-javascript hljs">const divWidth = this.myRef.current.offsetWidth;
</pre>
<p>Let’s see this behavior with a complete example where we are going to attach a reference to an HTML <code>video</code> element and use React buttons to play and pause the video using the native HTML5 APIs of the <code>video</code> element:</p>
<pre class="language-javascript hljs">import ReactDOM from "react-dom";
import React, { Component } from "react";

export default class App extends Component {
  constructor(props) {
    super(props);
    this.myVideo = React.createRef();
  }
  render() {
    return (
      &lt;div>
        &lt;video ref={this.myVideo} width="320" height="176" controls>
          &lt;source
            src="https://res.cloudinary.com/daintu6ky/video/upload/v1573070866/Screen_Recording_2019-11-06_at_4.14.52_PM.mp4"
            type="video/mp4"
          />
        &lt;/video>
        &lt;div>
          &lt;button
            onClick={() => {
              this.myVideo.current.play();
            }}
          >
            Play
          &lt;/button>
          &lt;button
            onClick={() => {
              this.myVideo.current.pause();
            }}
          >
            Pause
          &lt;/button>
        &lt;/div>
      &lt;/div>
    );
  }
}
const rootElement = document.getElementById("root");
ReactDOM.render(&lt;App />, rootElement);
</pre>
<p><iframe  title="amazing-vaughan-hl7hmx" src="https://codesandbox.io/embed/amazing-vaughan-hl7hmx?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<p>Here, we used <code>ref</code> to pause and play our video player by calling the <code>pause</code> and <code>play</code> methods on the video. When the <strong><code>pause</code></strong> or <strong><code>play</code></strong> button is clicked, the function will be called on the video player without a re-render.</p>
<h3 id="using-refs-with-function-components">Using refs with function components</h3>
<p>Refs cannot be attached to function components. Although, we can define refs and attach them to either DOM elements or class components. The bottom line is that function components do not have instances, so you can’t reference them.</p>
<p>However, if you must attach a ref to a function component, the official React team recommends converting the component to a class, just like you would do when you need <a href="https://blog.logrocket.com/react-lifecycle-methods-tutorial-examples/">lifecycle methods</a> or state.</p>
<h3 id="conditional-refs">Conditional refs</h3>
<p>Aside from passing the default <code>ref</code> attribute, we can also pass functions to set refs. The major advantage of this approach is that you have more control over when refs are set and unset. That is possible because it allows us to determine the state of the ref before certain actions are fired. Consider this snippet from the <a href="https://reactjs.org/docs/refs-and-the-dom.html">documentation page</a> below:</p>
<pre class="language-javascript hljs">class CustomTextInput extends React.Component {
  constructor(props) {
    super(props);
    this.textInput = null;
    this.setTextInputRef = element => {
      this.textInput = element;
    };
    this.focusTextInput = () => {
      // Focus the text input using the raw DOM API
      if (this.textInput) this.textInput.focus();
    };
  }
  componentDidMount() {
    this.focusTextInput();
  }
  render() {
    return (
      &lt;div>
        &lt;input
          type="text"
          ref={this.setTextInputRef}
        />
        &lt;input
          type="button"
          value="Focus the text input"
          onClick={this.focusTextInput}
        />
      &lt;/div>
    );
  }
}
</pre>
<p>Instead of defining the <code>refs</code> in the <code>constructor</code>, we set the initial value to <code>null</code>. The benefit of this approach is that <code>textInput</code> will not reference a node until the component is loaded (when the element is created).</p>
<h2 id="forwarding-refs-react-using-forwardref">Forwarding refs in React using <code>forwardRef</code></h2>
<p>When a child component needs to reference its parent component’s current node, the parent component needs a way to send down its ref to the child. The technique is called ref forwarding.<br/>
<a href="https://reactjs.org/docs/forwarding-refs.html">Ref forwarding</a> is a technique for automatically passing a ref through a component to one of its children. It’s very useful when building <a href="https://blog.logrocket.com/build-react-reusable-components-faster-aspect/">reusable component libraries</a>. <code>forwardRef</code> is a function used to pass the ref to a child component.</p>
<p>Let’s take an example of a new library with an <code>InputText</code> component that will provide a lot of functionality, though, for now, we’ll keep it simple:</p>
<pre class="language-javascript hljs">const InputText = (props) => (
&lt;input {...props} />
));
</pre>
<p>The <code>InputText()</code> component will tend to be used throughout the application in a similar manner as a regular DOM input, therefore accessing its DOM node may be unavoidable for managing focus, selection, or animations related to it.</p>
<p>In the example below, other components in the application have no access to the DOM input element generated by the <code>InputText()</code> component and are, thus, restricting some of the operations we have already foreseen we would need to meet our application requirements, such as controlling the focus of the input programmatically.</p>
<p>Here is when <code>React.forwardRef</code> enters to obtain a <code>ref</code> passed as <code>props</code>, and then forwards it to the DOM <code>input</code> that it renders, as shown below:</p>
<pre class="language-javascript hljs">const InputText = React.forwardRef((props, ref) => (
 &lt;input ref={ref} {...props} />
));
</pre>
<p>Now that our component supports <code>forwardRef</code>, let’s use it in the context of our application to build a button that will automatically focus the <strong><code>input</code></strong> when it’s clicked. The code looks as follows:</p>
<pre class="language-javascript hljs">import * as React from "react";
import ReactDOM from "react-dom";

const InputText = React.forwardRef((props, ref) => (
 &lt;input ref={ref} {...props} />
));

export default function App() {
 const ref = React.useRef();

 function focus() {
   ref.current.focus();
 }

 return (
   &lt;div className="App">
     &lt;InputText ref={ref} placeholder="my input" />
     &lt;button onClick={focus}>Focus&lt;/button>
   &lt;/div>
 );
}

const rootElement = document.getElementById("root");
ReactDOM.render(&lt;App />, rootElement);
</pre>
<p><iframe  title="naughty-galois-hr88g4" src="https://codesandbox.io/embed/naughty-galois-hr88g4?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<p>In the code above, we defined a <code>ref</code> in the component that needs the <code>ref</code> and passed it to the <code>button</code> component. React passed the <code>ref</code> through and forwarded it down to <code>&lt;input ref={ref}></code> by specifying it as a JSX attribute. When the <code>ref</code> was attached, <code>ref.current</code> pointed to the <code>&lt;input></code> DOM node.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>The second <code>ref</code> argument in the <code>InputRef</code> component only existed when you defined a component with <code>React.forwardRef</code> call. Regular function or class components didn’t receive the <code>ref</code> argument, and <code>ref</code> was not available in <code>props</code>. Ref forwarding is not limited to DOM components; you can forward refs to class component instances.</p>
<h2 id="use-forwardref-with-typescript">How to use <code>forwardRef</code> with TypeScript</h2>
<p><a href="https://blog.logrocket.com/understanding-typescripts-benefits-pitfalls/">TypeScript</a> is a JavaScript subset that offers the benefits of <a href="https://blog.logrocket.com/definitive-guide-typing-functions-typescript/">static typing</a>, enhanced tooling, and improved maintainability, leading to <a href="https://blog.logrocket.com/understanding-typescripts-benefits-pitfalls/">more robust and reliable code</a> in your JavaScript applications. <code>forwardRef</code>, as part of the React library, provides full support for TypeScript, though to maximize its benefits, the code we write should also be <a href="https://blog.logrocket.com/build-strongly-typed-polymorphic-components-react-typescript/">strongly typed</a>.</p>
<p>Say, for example, that you have a function component that uses <code>forwardRef</code> to expose the DOM reference to an HTML input element. This functional component also has its own props declared with their types. When using <code>forwardRef</code> in such an example, we’ll have to take care of strongly typing the component to avoid errors and improve code readability. One way to do this is by using generic types in <code>forwardRef</code>; here’s an example:</p>
<pre class="language-javascript hljs">type IInputProps = {
  label: string;
};

const InputText = React.forwardRef&lt;HTMLInputElement, IInputProps>((props, ref) => (
    &lt;div>
      &lt;span>{props.label}&lt;/span>
      &lt;input ref={ref} placeholder="your input goes here..." />
    &lt;/div>
  )
);
</pre>
<p>As we can see in the code, it is important to specify the type of the <code>Ref</code> element and the <code>props</code>. Another common way to declare the same component is to assign the type directly in the parameters of the callback function, as follows:</p>
<pre class="language-javascript hljs">type IInputProps = {
  label: string;
};

const InputText = React.forwardRef((props: IInputProps, ref: React.Ref&lt;HTMLInputElement>) => (
    &lt;div>
      &lt;span>{props.label}&lt;/span>
      &lt;input ref={ref} placeholder="your input goes here..." />
    &lt;/div>
  )
);
</pre>
<p>In this case, when passing the type for the <code>ref</code> param, we need to make sure we are wrapping the <code>element</code> type with <code>React.Ref</code>. Both ways to declare the component are valid, and there is no argument for one over the other. It’s up to the developer’s style, and in my case, I prefer the first way because I believe it looks cleaner.</p>
<p>Similarly, when working on the <code>parent</code> component, we need to specify the <code>reference</code> type, and it needs to match the one used in <code>forwardRef</code>. To do that, you can use generic types when using <code>useRef</code> as follows:</p>
<pre class="language-javascript hljs">const ref = React.useRef&lt;HTMLInputElement>(null);
</pre>
<p>Failing to do so may trigger errors when trying to use methods and properties from the element, as we can see in the image below:</p>
<p><img             class="aligncenter size-full wp-image-167723 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/03/forwardref-errors-react.png" alt="Forwardref Error Example in React" width="730" height="174"    /><noscript><img               class="aligncenter size-full wp-image-167723" src="https://blog.logrocket.com/wp-content/uploads/2021/03/forwardref-errors-react.png" alt="Forwardref Error Example in React" width="730" height="174"  /></noscript></p>
<h2 id="when-not-use-refs-react">When not to use refs in React</h2>
<p>In React, <code>refs</code> are a powerful feature that allows developers to interact with DOM elements and components directly. However, there are certain situations where using <code>refs</code> may not be the best approach. Here are a few:</p>
<h3>Unnecessary DOM manipulation</h3>
<p>React encourages a declarative approach to <a href="https://blog.logrocket.com/building-adaptive-accessible-ui-library-react-aria/">building UIs</a>, so you should avoid using refs for direct DOM manipulation unless absolutely necessary. Use component state and props to handle most UI updates</p>
<h3>Overusing refs in stateless components</h3>
<p>Functional components are often meant to be simple and stateless. If you find yourself using multiple refs in a functional component, consider if it could be split into smaller components or if state management should be lifted to a higher-level component</p>
<h3>Using refs for data flow</h3>
<p>Refs should not be used as a replacement for state management or prop passing. Data should primarily flow through component props, and when necessary, state management libraries like <a href="https://blog.logrocket.com/understanding-redux-tutorial-examples/">Redux</a> or <a href="https://blog.logrocket.com/react-context-api-deep-dive-examples/">React’s Context API</a> can be used</p>
<h3>Using refs in place of controlled components</h3>
<p>In form elements, use controlled components (by setting the value and handling input changes through state and event handlers) whenever possible. Refs should only be used for uncontrolled components when there is a specific need for direct access to the DOM element</p>
<h3>Accessing child components’ internal state</h3>
<p>Refs should not be used to reach into a child component’s internal state or methods. Instead, use callback functions or other state management patterns to communicate between parent and child components</p>
<p>Remember, refs should generally be used sparingly and only when necessary. In many cases, React’s inbuilt mechanisms for <a href="https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/">state and prop management</a> are more appropriate for handling component interaction and updates.</p>
<h2>Conclusion</h2>
<p>Refs in React are a powerful tool that enables direct access to DOM nodes and thus open a whole new spectrum of methods and options to build more performant, feature-rich and clean components. However, accessing DOM directly is often seen as a bad practice in React, and for a reason, when used improperly, it can turn all its benefits into real problems.</p>
<p>As a general rule, it should be avoided and used only under very specific circumstances and with a thorough examination. In this tutorial, we introduced the topic of refs and ref forwarding, we looked at a few use cases and we built the code using function and class components. To read more about refs check out the docs <a href="https://reactjs.org/docs/refs-and-the-dom.html">here</a>. Thanks for reading!</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-9521" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/use-forwardref-react/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/use-forwardref-react/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-9521" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/use-forwardref-react/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-9521" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/use-forwardref-react/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/peterekeneeze.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/peterekeneeze.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/peterekeneeze/">
Peter Ekene Eze <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Learn, Apply, Share</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/react/">#react</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/styling-webpages-with-sakura-css/" rel="prev">Styling webpages with Sakura CSS</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/ux-design/design-feature-comparison-tables/" rel="next">How to design feature comparison tables that simplify decision-making</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/use-forwardref-react/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Hybrid rendering in Astro: A step-by-step guide - LogRocket Blog</title>
			<link>https://blog.logrocket.com/hybrid-rendering-astro-guide/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/hybrid-rendering-astro-guide/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Hybrid rendering in Astro: A step-by-step guide - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/">Hybrid rendering in Astro: A step-by-step guide - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-168326 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-js-libraries" id="post-168326">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emanuelsuriano/">
Emanuel Suriano <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Hi 👋 I build stuff with JavaScript 💻 Once a month I write an article ✍️ and sometimes I give talks 💬</span>
</div>
</div>
<h1 class="posttitle">Hybrid rendering in Astro: A step-by-step guide</h1>
<p>
<span class="post-date"><time class="post-date">
April 28, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
<span class="wordcount">4372</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro-guide.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Hybrid rendering in Astro: A step-by-step guide"                /> <article class="article-post">
<p>Astro 2.0 has brought a game-changing feature to the world of web development: hybrid rendering. With hybrid rendering, developers can prerender certain pages while retaining their deployed server, giving them the best of both worlds. By building pages ahead of time, prerendering enables these pages to load instantly, improving the user experience and overall performance of your web application.</p>
<p>In this article, we’ll take a hands-on approach and explore how to implement hybrid rendering in Astro by building a demo project. We’ll cover the tips, tricks, and best practices for mastering this powerful feature, as well as delve into the benefits of prerendering pages for improved scalability and SEO optimization. So, if you’re ready to level up your web development skills with Astro’s hybrid rendering, let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#why-need-hybrid-rendering">Why do we need hybrid rendering?</a></li>
<li><a href="#build-process-astro">What does the build process look like in Astro?</a>
<ul >
<li><a href="#branch-option-1-static-output">Branch option 1: Static output</a></li>
<li><a href="#branch-option-2-server-output">Branch option 2: Server output</a></li>
<li><a href="#branch-option-3-server-output-hybrid-rendering">Branch option 3: Server output (hybrid rendering)</a></li>
</ul>
</li>
<li><a href="#benefits-hybrid-rendering">Benefits of hybrid rendering</a>
<ul >
<li><a href="#improved-render-performance-popular-pages">Improved render performance of popular pages</a></li>
<li><a href="#adding-api-existing-static-sites">Adding an API to existing static sites</a></li>
<li><a href="#improved-build-performance-large-sites">Improved build performance of large sites</a></li>
</ul>
</li>
<li><a href="#implement-hybrid-rendering-astro">How to implement hybrid rendering in Astro</a>
<ul >
<li><a href="#why-ecommerce-website-example">Why we chose an ecommerce website example</a></li>
<li><a href="#project-description">Project description</a></li>
<li><a href="#rendering-landing-page">Rendering the Landing page</a></li>
<li><a href="#rendering-about-page">Rendering the About page</a></li>
<li><a href="#rendering-shop-page">Rendering the Shop page</a></li>
<li><a href="#rendering-product-page">Rendering the Product page</a></li>
</ul>
</li>
<li><a href="#deploying-astro-site">Deploying our Astro site</a></li>
</ul>
<h2 id="why-need-hybrid-rendering">Why do we need hybrid rendering?</h2>
<p>In the year since its 1.0 release, Astro has become a popular choice among web developers looking for a fast, simple, and flexible way to build websites. With its ability to generate static pages using static site generation (SSG) and server-side rendering (SSR), Astro has quickly become a go-to tool for developers who want the best of both worlds.</p>
<p>Static websites offer incredible performance, thanks to pre-generated HTML and assets that are served to users directly from a CDN. This makes them fast, scalable, and easy to deploy.</p>
<p>However, they lack the ability to generate HTML on-demand for each request. This means that they can’t handle dynamic content such as user authentication, shopping carts, and real-time updates without relying on client-side JavaScript.</p>
<p>On the other hand, server-side rendering (SSR) enables web applications to generate HTML on-demand for each request, making it possible to serve dynamic content and handle complex user interactions. However, SSR can be slow and resource-intensive, especially for high-traffic applications.</p>
<p>To address this challenge, <a href="https://astro.build/blog/astro-2/">Astro introduced hybrid rendering</a> in version 2.0, enabling developers to choose between SSG and SSR build output depending on the needs of their web application. This provides flexibility to generate pre-rendered HTML for static pages while still allowing for dynamic content using client-side JavaScript.</p>
<h2 id="build-process-astro">What does the build process look like in Astro?</h2>
<p>Astro’s build process happens in multiple stages, beginning with a server-side JavaScript bundle generated by Vite. The output of this bundle includes:</p>
<ul>
<li>Server-side JavaScript used to render HTML</li>
<li>A client manifest that uses static analysis to collect the components needed for client-side interactivity</li>
<li>CSS and other assets for the client</li>
</ul>
<p>From here, there are three possible branches, depending on the output configuration set in the Astro config file.</p>
<h3 id="branch-option-1-static-output">Branch option 1: Static output</h3>
<p>If the output is configured to be <code>static</code>, Astro will execute the server-side JavaScript and write the output to <code>.html</code> files. The server-side JavaScript is then discarded.</p>
<p>This creates a set of pre-rendered HTML files that can be served directly to the user from a CDN or web server. This approach offers incredible performance, but lacks the ability to generate HTML on-demand for each request.</p>
<figure id="attachment_168328"   class="wp-caption aligncenter"><img             class="size-full wp-image-168328 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/static-output-hybrid-rendering-astro.png" alt="Static output in Astro" width="730" height="381"    /><noscript><img               class="size-full wp-image-168328" src="http://blog.logrocket.com/wp-content/uploads/2023/04/static-output-hybrid-rendering-astro.png" alt="Static output in Astro" width="730" height="381"  /></noscript><figcaption id="caption-attachment-168328" class="wp-caption-text">Static output in Astro. Source: <a href="https://astro.build/blog/hybrid-rendering/">Astro</a></figcaption></figure>
<h3 id="branch-option-2-server-output">Branch option 2: Server output</h3>
<p>If the output is configured to be <code>server</code>, Astro passes the server-side JavaScript to an adapter for further processing. Adapters ensure that your server-side JavaScript is compatible with a particular hosting provider’s JavaScript runtime.</p>
<p>The final output in this case is not a set of <code>.html</code> files, but the JavaScript code necessary to render HTML on the server-side.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<figure id="attachment_168327"   class="wp-caption aligncenter"><img             class="size-full wp-image-168327 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Server hybrid rendering in Astro" width="730" height="443"    /><noscript><img               class="size-full wp-image-168327" src="http://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Server hybrid rendering in Astro" width="730" height="443"  /></noscript><figcaption id="caption-attachment-168327" class="wp-caption-text">Server output in Astro. Source: <a href="https://astro.build/blog/hybrid-rendering/">Astro</a></figcaption></figure>
<h3 id="branch-option-3-server-output">Branch option 3: Server output (hybrid rendering)</h3>
<p>The build process for hybrid rendering is a combination of the <code>static</code> and <code>server</code> output. During the initial bundling process, a new static analysis step determines which pages should be prerendered, which allows routes to be split into separate chunks based on when they should be rendered.</p>
<p>Much like the original static process, the prerendered chunk is executed and the output is written to <code>.html</code> files, which are then served statically. Meanwhile, the server chunk is passed to an adapter for further processing and is ultimately deployed as a Serverless or <a href="https://blog.logrocket.com/demystifying-edge-functions/">Edge Function</a>, depending on your adapter.</p>
<figure id="attachment_168327"   class="wp-caption aligncenter"><img             class="size-full wp-image-168327 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Hybrid rendering in Astro" width="730" height="443"    /><noscript><img               class="size-full wp-image-168327" src="http://blog.logrocket.com/wp-content/uploads/2023/04/hybrid-rendering-astro.png" alt="Hybrid rendering in Astro" width="730" height="443"  /></noscript><figcaption id="caption-attachment-168327" class="wp-caption-text">Static output in Astro. Source: <a href="https://astro.build/blog/hybrid-rendering/">Astro</a></figcaption></figure>
<h2 id="benefits-hybrid-rendering">Benefits of hybrid rendering</h2>
<p>Hybrid rendering is a game-changer for web developers, as it unlocks a host of new possibilities for building fast, scalable, and dynamic web applications. By mixing static and dynamic content together, developers can take advantage of the best of both worlds, improving the render and build performance of their web applications, and adding new functionality such as APIs to existing static sites.</p>
<p>Here are some of the benefits of using hybrid rendering in Astro:</p>
<h3 id="improved-render-performance-popular-pages">Improved render performance of popular pages</h3>
<p>With hybrid rendering, developers can choose to prerender the most popular pages of their website, ensuring that they load instantly for users. This is especially important for websites with high traffic or large numbers of visitors. By prerendering these pages ahead of time, developers can reduce server load and improve the user experience for their visitors.</p>
<p>The most used approach is to prerender landing pages, which usually receive most of the visits. This will give the fastest experience to any visitor “landing” on your website for the first time.</p>
<h3 id="adding-api-existing-static-sites">Adding an API to existing static sites</h3>
<p>One of the biggest limitations of static websites is the lack of server-side processing, which can make it challenging to add dynamic functionality such as APIs. However, with hybrid rendering in Astro, developers can add an API to their existing static sites, enabling them to add complex functionality such as user authentication, shopping carts, and real-time updates.</p>
<h3 id="improved-build-performance-large-sites">Improved build performance of large sites</h3>
<p>For large websites with many pages, building and deploying can become a time-consuming and resource-intensive task. With hybrid rendering, developers can choose to prerender only the pages that need it and leave the rest as static pages. This can significantly reduce build times and make it easier to manage and deploy large websites.</p>
<p>Following the example from above, sometimes we don’t want (or need) to prerender all our routes because this process is very time consuming, and therefore not so scalable in big projects. With hybrid rendering, we can still prerender only the pages that we want while the rest and any new pages would render as server routes, keeping the build time short while maintaining a great user experience.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>In summary, hybrid rendering is a powerful feature that offers a range of benefits for web developers. By mixing static and dynamic content together, developers can build fast, scalable, and dynamic web applications that are optimized for both SEO and user experience.</p>
<h2 id="implement-hybrid-rendering-astro">How to implement hybrid rendering in Astro</h2>
<p>To get started with hybrid rendering in Astro, we must first enable SSR (server-side rendering) features in development mode by setting the <code>output</code> configuration option to <code>'server'</code> in the <code>astro.config.mjs</code> file:</p>
<pre class="language-bash hljs">import { defineConfig } from 'astro/config';

export default defineConfig({
  output: 'server'
});
</pre>
<p>Once SSR is enabled, any page or server endpoint that supports exporting variables can opt in to prerendering. These files will be statically rendered at build time, similar to the default static output mode.</p>
<p>To opt in to prerendering for a specific file, add the following line of code to the top of the file:</p>
<pre class="language-javascript hljs">export const prerender = true;
</pre>
<p>Repeat this process for any additional pages or server endpoints that you want to enable for prerendering.</p>
<p>Finally, build your Astro project as you normally would:</p>
<pre class="language-bash hljs">> astro build
</pre>
<p>This will generate a mix of static and dynamic content in your project output, which can be served by your server. By taking advantage of hybrid rendering, you can improve the render and build performance of your web applications, and add new functionality such as APIs to your existing static sites.</p>
<h3 id="why-ecommerce-website-example">Why we chose an ecommerce website example</h3>
<p>Building an ecommerce website serves as a great example to test the feature of hybrid rendering. Let me explain why:</p>
<ul>
<li>The product, category, and search results pages usually require server-side rendering (SSR) because they need dynamic content from the server, such as product details, prices, and availability</li>
<li>Pages such as the home, about, and contact pages can be pre-rendered using static site generation (SSG) because they typically contain static content that doesn’t frequently change</li>
</ul>
<p>To speed things along, we are going to use the free, open source <a href="https://astro.build/themes/details/astro-ecommerce/">Astro Ecommerce</a> demo site made by <a href="https://www.creative-tim.com/">Creative Tim</a>.</p>
<figure id="attachment_168333"   class="wp-caption aligncenter"><img             class="size-full wp-image-168333 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/astro-ecommerce-demo-site.png" alt="Our ecommerce site example, from &lt;a href=&quot;https://www.creative-tim.com/&quot;>Creative Tim&lt;/a>" width="730" height="383"    /><noscript><img               class="size-full wp-image-168333" src="http://blog.logrocket.com/wp-content/uploads/2023/04/astro-ecommerce-demo-site.png" alt="Our ecommerce site example, from &lt;a href=&quot;https://www.creative-tim.com/&quot;>Creative Tim&lt;/a>" width="730" height="383"  /></noscript><figcaption id="caption-attachment-168333" class="wp-caption-text">Our ecommerce site example, from <a href="https://www.creative-tim.com/">Creative Tim</a></figcaption></figure>
<p>Inside the repository <a href="https://github.com/creativetimofficial/astro-ecommerce">astro-ecommerce</a>, we can find the following description for the project:</p>
<blockquote><p>Introducing Astro Ecommerce, the ultimate starter template for your e-commerce web project. Built on Astro’s next-gen island architecture, Astro Ecommerce offers a sleek and modern design with a wide range of components and features to help you create a stunning online store.</p></blockquote>
<p>To keep this demo short, I intentionally decided to leave the components of the starter as they are so that we can focus more on the process of hybrid rendering.</p>
<h3 id="project-description">Project description</h3>
<p>The project is going to consist of four pages:</p>
<ol>
<li>Landing page (hybrid): The first page visitors see, which captures attention and encourages exploration</li>
<li>About Page (SSG): Provides information about your company, mission, and values. Builds trust with your audience</li>
<li>Shop Page (SSR): Where visitors browse products and make purchases. Makes the shopping experience seamless and enjoyable</li>
<li>Product Page (SSR): Provides detailed information about a specific product and persuades the visitor to make a purchase</li>
</ol>
<p>To simulate a “real” ecommerce site, I used <a href="https://dummyjson.com/">DummyJSON</a> to get a list of products and categories. To get the list of products, we can directly call <code>https://dummyjson.com/products</code> API.</p>
<p>The output looks like this:</p>
<pre class="language-json hljs">{
  "products": [
    {
      "id": 1,
      "title": "iPhone 9",
      "description": "An apple mobile which is nothing like apple",
      "price": 549,
      "discountPercentage": 12.96,
      "rating": 4.69,
      "stock": 94,
      "brand": "Apple",
      "category": "smartphones",
      "thumbnail": "...",
      "images": ["...", "...", "..."]
    },
    {...},
    {...},
    {...}
    // 30 items
  ],
  "total": 100,
  "skip": 0,
  "limit": 30
}
</pre>
<p>Here is the list of all the APIs that we’ll use in the project:</p>
<pre class="language-typescript hljs">export interface ProductList {
  products: Product[];
  total: number;
  skip: number;
  limit: number;
}

export interface Product {
  id: number;
  title: string;
  description: string;
  price: number;
  discountPercentage: number;
  rating: number;
  stock: number;
  brand: string;
  category: string;
  thumbnail: string;
  images: string[];
}

const toJson = (res: Response) => {
  if (res.status === 404) {
    return undefined;
  }

  return res.json();
};

export const fetchProducts = (category?: string): Promise&lt;ProductList> => {
  const categoryPath = category ? `/category/${category}` : '';
  return fetch(`https://dummyjson.com/products${categoryPath}`).then(toJson);
};

export const fetchSalesProducts = async (): Promise&lt;Product[]> => {
  const allProducts = await fetchProducts();
  return allProducts.products.filter(
    ({ discountPercentage }) => discountPercentage > 10,
  );
};

export const fetchCategories = (): Promise&lt;string[]> =>
  fetch('https://dummyjson.com/products/categories').then(toJson);

export const fetchProduct = (id: string): Promise&lt;Product> =>
  fetch(`https://dummyjson.com/products/${id}`).then(toJson);

export const fetchCategoryImage = async (category: string) => {
  const { products } = await fetchProducts(category);
  return products[0].thumbnail;
};

// DummyJSON doesn't provide any testimonials or reviews API, this one is going to be locally mocked.
export const fetchTestimonials = () =>
  Promise.resolve([
    {
      text: "I recently purchased a dress from this online store and was blown away by the quality and fit. It was even better than I expected and I received so many compliments when I wore it. I'll definitely be back for more!",
      source: 'Sarah D.',
    },
    {
      text: 'I was hesitant to order a piece of furniture online, but the team at this online store made the process so easy and hassle-free. The item arrived on time and in perfect condition, and it looks amazing in my home. I highly recommend this store for their excellent customer service and high-quality products.',
      source: 'John P.',
    },

    {
      text: "I'm always on the lookout for the latest tech gadgets, and this online store has an amazing selection. I ordered a new smartwatch and it arrived quickly and was exactly what I was looking for. The prices are also very competitive, so I know I'm getting a great deal. I'm already browsing their site for my next purchase!",
      source: 'Emily R.',
    },
  ]);
</pre>
<h3 id="rendering-landing-page">Rendering the Landing page</h3>
<p>Let’s go page by page, starting with the Landing page, which we defined at <code>/pages/index.astro</code>. It displays general information about the store, the main shopping categories, and a list of customer reviews.</p>
<p>All of the page information comes from the API module defined above. This page uses hybrid rendering because the content won’t change frequently.</p>
<figure id="attachment_168331"   class="wp-caption aligncenter"><img             class="size-full wp-image-168331 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/ecommerce-site-creative-tim.png" alt="The Landing page" width="730" height="1117"    /><noscript><img               class="size-full wp-image-168331" src="http://blog.logrocket.com/wp-content/uploads/2023/04/ecommerce-site-creative-tim.png" alt="The Landing page" width="730" height="1117"  /></noscript><figcaption id="caption-attachment-168331" class="wp-caption-text">The Landing page</figcaption></figure>
<pre class="language-javascript hljs">---
import humanize from 'humanize-string';

import Layout from '../layouts/Layout.astro';

// Components from the starter
import Testimonials from '../components/Testimonials.astro';
import CardCategory from '../components/products/cardCategory';
import PromoSectionLarge from '../components/promo/promoSectionLarge';

// Data coming from DummyJSON
import {
  fetchCategories,
  fetchCategoryImage,
  fetchTestimonials,
} from '../api/products';

// Setting SSG for this page!
export const prerender = true;

const categories = (await fetchCategories()).slice(0, 4);
const images = await Promise.all(categories.map(fetchCategoryImage));
const testimonials = await fetchTestimonials();
---

&lt;Layout title="Landing Page">
  &lt;main>
    &lt;PromoSectionLarge
      title="Welcome to our online store!"
      full_description="Satisfy all your shopping needs with our extensive range of high-quality products, carefully curated to offer the latest trends and timeless classics. Whether you're looking for stylish clothing, must-have accessories, beautiful home decor, or the latest tech gadgets, we have everything you need to elevate your lifestyle and express your unique style."
      pageHeaderBgImg="https://images.unsplash.com/photo-1441123285228-1448e608f3d5?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2670&amp;q=80"
      pageHeaderMinVh="90vh"
    />

    &lt;div class="container my-5">
      &lt;div class="d-flex justify-content-between align-items-center mb-4">
        &lt;h4>Shop by category&lt;/h4>
        &lt;a class="text-primary text-sm font-weight-bold" href="/shop"
          >Browse all categories {'>'}&lt;/a
        >
      &lt;/div>
      &lt;div class="row mb-5">
        {
          categories.map((category, i) => (
            &lt;div class="col-md-6 col-lg-3">
              &lt;a href={`/shop?category=${category}`}>
                &lt;CardCategory
                  thumb_src={images[i]}
                  title={humanize(category)}
                />
              &lt;/a>
            &lt;/div>
          ))
        }
      &lt;/div>

      &lt;PromoSectionLarge
        title="Featured products"
        full_description="Take a look at our featured products to see what's new and popular right now."
        pageHeaderBgImg="https://images.unsplash.com/photo-1558769132-cb1aea458c5e?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2274&amp;q=80"
        pageHeaderMinVh="50vh"
        pageHeaderRadius="1rem"
      />

      &lt;div class="mt-5 mb-10">
        &lt;Testimonials testimonials={testimonials} />
      &lt;/div>
    &lt;/div>
  &lt;/main>
&lt;/Layout>
</pre>
<h3 id="rendering-about-page">Rendering the About page</h3>
<p>Let’s move on to the About page, defined at <code>/pages/about.astro</code>. It’s quite similar to the Landing page but even simpler, given that no information is required from external services. All of this page’s content is provided within the same page (and this can be improved by adding a CMS layer to the project).</p>
<p>Without hybrid rendering, the server must compute this page on every visit, when that is clearly not needed. By setting hybrid rendering for this page, we can process it at build time and serve the static site to our users, improving the speed drastically.</p>
<figure id="attachment_168334"   class="wp-caption aligncenter"><img             class="size-full wp-image-168334 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/about-us-ecommerce-site.png" alt="The About page" width="730" height="795"    /><noscript><img               class="size-full wp-image-168334" src="http://blog.logrocket.com/wp-content/uploads/2023/04/about-us-ecommerce-site.png" alt="The About page" width="730" height="795"  /></noscript><figcaption id="caption-attachment-168334" class="wp-caption-text">The About page</figcaption></figure>
<pre class="language-javascript hljs">---
import Layout from '../layouts/Layout.astro';

// Components from the starter
import IncentiveLarge from '../components/incentives/IncentiveLarge.astro';
import ProductFeature from '../components/products/productFeature';

export const prerender = true;

const features = {
  Quality: `We carefully select and curate our products to ensure that they meet the
    highest standards of quality and craftsmanship. We believe that our customers
    deserve the best, and we are committed to delivering it.`,
  Sustainability: `We believe in doing our part to protect the planet, which is why
    we work with suppliers who prioritize eco-friendly and sustainable production methods.
    We believe that we can make a positive impact on the world by making conscious choices
    about the products we offer and the way we do business.`,
  ['Customer Service']: `We are passionate about providing exceptional customer service and support.
    Our team is always here to help with any questions or concerns you may have, and we are committed
    to making sure that you have a positive experience every time you shop with us.`,
  Innovation: `We are always exploring new ways to improve and enhance our online store. We believe
    that innovation is key to staying ahead of the curve and providing our customers with the best
    possible shopping experience.`,
};
---

&lt;Layout title="Landing Page">
  &lt;main>
    &lt;div class="container my-5">
      &lt;ProductFeature
        title="About us"
        full_description={`
          At Astro E-commerce, we are dedicated to providing our customers with the best possible
          shopping experience. We believe that shopping should be easy, convenient, and enjoyable,
          and we strive to make that a reality for everyone who visits our site.
        `}
        images={[
          {
            src: 'https://images.unsplash.com/photo-1511556820780-d912e42b4980?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1287&amp;q=80',
            alt: 'photo of bag, sneakers, and sunglasses on beige surface',
          },
          {
            src: 'https://images.unsplash.com/photo-1627384113743-6bd5a479fffd?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80',
            alt: 'black and gold calvin klein perfume bottle',
          },
          {
            src: 'https://images.unsplash.com/photo-1522682078546-47888fe04e81?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80',
            alt: 'red and yellow Biscuits neon light signage hanged on gray brick wall',
          },
          {
            src: 'https://images.unsplash.com/photo-1524678606370-a47ad25cb82a?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1000&amp;q=80',
            alt: 'white corded headphones',
          },
        ]}
        featuresDetails={features}
      />

      &lt;div class="my-10">
        &lt;IncentiveLarge
          title="We build our business on customer service"
          description={`
            Our company provides exceptional customer service with a dedicated team ready to assist
            you with any questions or concerns. We offer prompt and courteous support for placing
            an order, tracking a shipment, or resolving any product issues. Contact us by phone,
            email, or live chat during regular business hours. Thank you for choosing us, and we
            look forward to providing you with a great customer experience.
          `}
          items={[
            {
              icon: 'fa-sync-alt',
              title: 'Exchange',
              description: `Try something new without worry with our exchange policy. If you're not satisfied with your
                purchase, you can exchange it within a specified timeframe. `,
            },
            {
              icon: 'fa-shipping-fast',
              title: 'Free Shipping',
              description:
                'Enjoy free shipping on all orders and save money while making shopping more convenient.',
            },
            {
              icon: 'fa-user',
              title: '10 Years Warranty',
              description: `Rest easy with the knowledge that your purchase comes with a 10-year warranty.
                This gives you peace of mind and reassurance that your investment is wise.`,
            },
          ]}
        />
      &lt;/div>
    &lt;/div>
  &lt;/main>
&lt;/Layout>
</pre>
<h3 id="rendering-shop-page">Rendering the Shop page</h3>
<p>It can’t be an ecommerce without a Shop page, which we defined at <code>/pages/shop.astro</code>. Here, the user can query all the products available and filter by category.</p>
<p>This page can’t be treated as a static page, otherwise we’ll be forced to generate every possible result of a search with every combination of our different filters in advance. That’s a lot of unnecessary work! Plus, it doesn’t account for the chance that any time a product changes any attribute (price, quantity, category, etc.) we’d have to regenerate the results again.</p>
<figure id="attachment_168335"   class="wp-caption aligncenter"><img             class="size-full wp-image-168335 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/shop-page-ecommerce-site.png" alt="The Shop page" width="730" height="676"    /><noscript><img               class="size-full wp-image-168335" src="http://blog.logrocket.com/wp-content/uploads/2023/04/shop-page-ecommerce-site.png" alt="The Shop page" width="730" height="676"  /></noscript><figcaption id="caption-attachment-168335" class="wp-caption-text">The Shop page</figcaption></figure>
<pre class="language-javascript hljs">---
import humanize from 'humanize-string';
import Layout from '../layouts/Layout.astro';

// Components from the starter
import CardProduct from '../components/products/cardProduct';

import { fetchProducts, fetchCategories } from '../api/products';

// Get selected category from query params
const currentCategory = Astro.url.searchParams.get('category') || '';

const categories = await fetchCategories();
const { products } = await fetchProducts(currentCategory);
---

&lt;Layout title="Shop">
  &lt;div class="container mt-5">
    &lt;div class="row">
      &lt;div class="mt-4 d-flex justify-content-between align-items-center">
        &lt;h6 class="mb-0">Select a category:&lt;/h6>
      &lt;/div>
      &lt;div class="d-flex flex-wrap text-center my-4">
        {
          categories.map((category, i) => {
            const checked = currentCategory === category;
            const route = checked ? '' : `category=${category}`;
            return (
              &lt;div class="mb-3 me-3">
                &lt;div class="form-check">
                  &lt;input
                    class="form-check-input rounded-2"
                    type="radio"
                    name="flexRadioDefault"
                    checked={checked}
                    id={`check-` + category}
                    onclick={`window.location.assign('?${route}')`}
                  />
                  &lt;label class="cursor-pointer" for={`check-` + category}>
                    {humanize(category)}
                  &lt;/label>
                &lt;/div>
              &lt;/div>
            );
          })
        }
      &lt;/div>
    &lt;/div>
    &lt;div class="row">
      {
        products.map((product) => (
          &lt;div class="col-md-6 col-lg-3">
            &lt;CardProduct
              thumb_src={product.thumbnail}
              thumb_alt={product.title}
              title={product.title}
              description={product.description}
              price={product.price}
              position="center"
              href={`/product/${product.id}`}
            />
          &lt;/div>
        ))
      }
    &lt;/div>
  &lt;/div>
&lt;/Layout>
</pre>
<h3 id="rendering-product-page">Rendering the Product page</h3>
<p>Lastly, we have the Product page, located at <code>/pages/product/[id].astro</code>. This page is defined as a <a href="https://docs.astro.build/en/core-concepts/routing/#dynamic-routes">Dynamic route</a>, where we can read the value for <code>id</code> defined in the URL. Once we obtain the <code>id</code>, we can fetch product details and other products that belong to the same category, to be displayed in a <strong>Related products</strong> section.</p>
<p>If we want to generate this page statically, we have to generate one page for each product in our ecommerce site, increasing the build time in a linear progression against the amount of available products — again, a lot of unnecessary work.</p>
<p>Therefore, because we want to build a project that scales over time, we should render this website on every request of the user with SSR.</p>
<figure id="attachment_168336"   class="wp-caption aligncenter"><img             class="size-full wp-image-168336 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/product-page-ecommerce-site.png" alt="The Product page" width="730" height="671"    /><noscript><img               class="size-full wp-image-168336" src="http://blog.logrocket.com/wp-content/uploads/2023/04/product-page-ecommerce-site.png" alt="The Product page" width="730" height="671"  /></noscript><figcaption id="caption-attachment-168336" class="wp-caption-text">The Product page</figcaption></figure>
<pre class="language-javascript hljs">---
import humanize from 'humanize-string';
import Layout from '../../layouts/Layout.astro';

// Componens from the starter
import ProductOverviewGallery from '../../components/products/productOverviewGallery';
import CardProduct from '../../components/products/cardProduct';

import { fetchProduct, fetchProducts } from '../../api/products';

// reading id from the url
const { id } = Astro.params;

if (!id) {
  return Astro.redirect('/404');
}

const product = await fetchProduct(id);
if (!product) {
  return Astro.redirect('/404');
}

const { products: categoryProducts } = await fetchProducts(product.category);
const relatedProducts = categoryProducts.filter(
  (related) => related.id !== product.id,
);

const data = {
  Brand: product.brand,
  'Original price': `Discount applied: ${product.discountPercentage}%.
  The original price was: $
  ${Math.floor(product.price / (1 - product.discountPercentage / 100))}`,
  Category: humanize(product.category),
  Stock: `${product.stock} available`,
};
---

&lt;Layout title="Shop">
  &lt;div class="container mt-5">
    &lt;div class="my-5">
      &lt;ProductOverviewGallery
        colors={[]}
        images={product.images.map((src) => ({ src, alt: product.title }))}
        title={product.title}
        full_description={product.description}
        price={product.price}
        rating={product.rating}
        reviews={Math.floor(product.discountPercentage)}
        data={data}
      />
    &lt;/div>

    &lt;div class="row">
      &lt;h5 class="mb-4">Customers also purchased&lt;/h5>
      {
        relatedProducts.map((related) => (
          &lt;div class="col-md-6 col-lg-3">
            &lt;CardProduct
              thumb_src={related.thumbnail}
              thumb_alt={related.title}
              color={related.brand}
              title={related.title}
              price={related.price}
              position="left"
              href={`/product/${related.id}`}
            />
          &lt;/div>
        ))
      }
    &lt;/div>
  &lt;/div>
&lt;/Layout>
</pre>
<h2 id="deploying-astro-site">Deploying our Astro site</h2>
<p>In order to deploy an SSR website in Astro, we need to install a plugin for the deployment service that we want to use. For this case, I opted for <a href="https://vercel.com/">Vercel</a>, and we need to install the integration of <code>@astrojs/vercel</code>.</p>
<p>When building the website, we can see how Astro shows a special step when prerendering the Landing and About pages:</p>
<pre class="language-bash hljs">➜  astro-ecommerce-hybrid-rendering git:(main) ✗ yarn build
yarn run v1.22.19
$ astro check &amp;&amp; tsc --noEmit &amp;&amp; astro build
astro check
07:30:02 PM [content] No content directory found. Skipping type generation.
✔  Getting diagnostics for Astro files in /Users/emanuel.suriano/Git/astro-ecommerce-hybrid-rendering/…
Result (10 files): 
- 0 errors
- 0 warnings
- 0 hints

07:30:09 PM [content] No content directory found. Skipping type generation.
07:30:09 PM [build] output target: server
07:30:09 PM [build] deploy adapter: @astrojs/vercel/serverless
07:30:09 PM [build] Collecting build info...
07:30:09 PM [build] Completed in 194ms.
07:30:09 PM [build] Building server entrypoints...
07:30:17 PM [build] Completed in 7.82s.

 building client 
Completed in 0.93s.

 prerendering static routes 
▶ src/pages/index.astro
  └─ /index.html (+2.02s)
▶ src/pages/about.astro
  └─ /about/index.html (+0.89s)
Completed in 2.96s.

 finalizing server assets 

07:30:21 PM [build] Rearranging server assets...
07:30:22 PM [build] Server built in 12.91s
07:30:22 PM [build] Complete!
✨  Done in 21.87s.
</pre>
<p>Something interesting to take a look at is how the <code>output</code> folder looks after the build finishes. Vercel requires a structure where all the static content is included inside a folder called <code>static</code>, while the server routes are defined inside the <code>functions</code> folder. For the case of our demo application, the file structure looks this:</p>
<pre class="language-bash">➜  output git:(main) ✗ tree -l 10 --ignore 'node_modules'

▁ /astro-ecommerce-hybrid-rendering/.vercel/output
├── config.json
├── functions
|  └── render.func
|     ├── dist
|     ├── package.json
|     └── src
|        └── pages
|           ├── product
|           |  └── [id].astro
|           └── shop.astro
└── static
   ├── _astro
   ├── about
   |  └── index.html
   ├── data.json
   ├── favicon.svg
   ├── header-blue-purple.jpg
   └── index.html

directory: 53 file: 144

ignored: directory (1)
</pre>
<p>Feel free to <a href="https://astro-ecommerce-hydrid-rendering.vercel.app/">check out the application running in Vercel</a>. You can <a href="https://github.com/EmaSuriano/astro-ecommerce-hydrid-rendering/tree/main">find all the source code in GitHub</a>, under the repository <code>astro-ecommerce-hybrid-rendering</code>.</p>
<h2>Last words</h2>
<p>Hybrid rendering in Astro offers developers the best of both worlds when it comes to building fast, scalable, and dynamic web applications. By combining the benefits of static site generation (SSG) and server-side rendering (SSR), developers can improve performance, reduce server load, and provide a better user experience.</p>
<p>With the ability to prerender popular pages, improve build performance, and add APIs to existing static sites, hybrid rendering is one of the best features in the latest Astro release.</p>
<p>I hope this article has been helped you gain a better understanding of Astro 2.0 and its hybrid rendering capabilities. Whether you’re a seasoned web developer or just starting out, Astro 2.0 is something to keep in mind. Its intuitive syntax, fast rendering speeds, and versatile toolset make it a valuable asset for any web project.</p><div class="code-block code-block-28" >
<div class="blog-plug inline-plug js-libraries-plug"><h2>Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?</h2><p>There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.</p>
<p><a href="https://lp.logrocket.com/blg/javascript-signup">LogRocket</a> is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively. </p><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.
</p><p>Build confidently — <a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<style>
.plug-poll {margin-bottom: 2rem;}
.code-block-30 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-30 .fadeOut {
    opacity:0 !important;
}

.code-block-30 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

</meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-168326" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-168326" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-168326" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emanuelsuriano/">
Emanuel Suriano <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Hi 👋 I build stuff with JavaScript 💻 Once a month I write an article ✍️ and sometimes I give talks 💬</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/js-libraries/">#js libraries</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/implementing-first-principles-thinking-into-your-team/" rel="prev">Implementing first principles thinking into your team</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/best-product-management-certification-programs/" rel="next">Top 15 product management certification programs</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/hybrid-rendering-astro-guide/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Identifying and addressing Kotlin code smells - LogRocket Blog</title>
			<link>https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Identifying and addressing Kotlin code smells - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/">Identifying and addressing Kotlin code smells - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-165693 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-kotlin" id="post-165693">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/victorbrandalise/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/12/victor-brandalise.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/12/victor-brandalise.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/victorbrandalise/">
Victor Brandalise <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Victor is very curious and likes understanding how and why things work; this is what drives him to learn new things. Most of his time is spent learning Android and Kotlin, but he also leaves some time for other subjects.</span>
</div>
</div>

<h1 class="posttitle">Identifying and addressing Kotlin code smells</h1>
<p>
<span class="post-date"><time class="post-date">
April 20, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2275</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/03/identifying-addressing-kotlin-code-smells-nocdn.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Identifying Addressing Kotlin Code Smells"                /> <article class="article-post">
<p>Code smells, bad code patterns, and poorly thought-out code all refer to the same thing — a piece of code that works now but may generate problems for you in the future. These future issues can arise because the code is difficult to understand, modify, or test.</p>
<p>As a Kotlin developer, it’s important to identify and address these issues to ensure your code is maintainable. In this article, we’ll dive into the five most common code smells in Kotlin and provide practical solutions for fixing them.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-are-code-smells">What are code smells?</a></li>
<li><a href="#identifying-code-smells">Identifying code smells</a></li>
<li><a href="#addressing-code-smells">Addressing code smells </a>
<ul >
<li><a href="#dont-add-functionality-refactor-same-time">Don’t add functionally and refactor at the same time</a></li>
<li><a href="#dont-forget-test-code">Don’t forget to test your code</a></li>
<li><a href="#dont-obsess">Don’t obsess</a></li>
</ul>
</li>
<li><a href="#common-code-smells">Common code smells</a>
<ul >
<li><a href="#duplicate-code">Duplicate code</a></li>
<li><a href="#long-method-class">Long method/class</a></li>
<li><a href="#tight-coupling">Tight coupling</a></li>
<li><a href="#primitive-obsession">Primitive obsession</a></li>
<li><a href="#magic-numbers">Magic numbers</a></li>
</ul>
</li>
<li><a href="#further-reading">Further reading</a></li>
</ul>
<h2 id="what-are-code-smells">What are code smells?</h2>
<p>Code smells exist in all programming languages, and while there’s no definitive definition, code smells do share some general characteristics:</p>
<ul>
<li>They’re subjective; what’s considered a code smell in one language might not be in another</li>
<li>They reduce the quality of code</li>
<li>They’re not bugs in the sense that users may notice them, but they can slow down or otherwise impede a developer’s efforts to add new features or modify a program</li>
</ul>
<p>Code smells are not good for code bases and should be avoided whenever possible. I know this sounds obvious – like, who would intentionally write code that’s difficult to maintain?</p>
<p>Dealing with code smells is something even the most experienced developers do — the difference is that they’re good at identifying these code smells and fixing them!</p>
<h2 id="identifying-code-smells">Identifying code smells</h2>
<p>The first step to identifying code smells is to understand them. For example, it’s very difficult to remove a “primitive obsession” code smell if you don’t know anything about that.</p>
<p>Be sure to identify all code smells, even if you don’t have time to fix them immediately. All projects have code smells, but most developers are unaware of many of them. Identifying a code smell as soon as you spot it, either by leaving a to-do comment or by adding it to a list, is a great start for fixing it later.</p>
<p>To save precious development time, there are several automated tools that are handy for identifying code smells. For example, <a href="https://detekt.dev/">Detekt</a> is a popular, open source and highly customizable library that identifies Kotlin code smells.</p>
<p><em><strong>N.B.,</strong> it’s important to remember that automated tools can’t always understand context, so in the end it’s up to you to decide if something really is a code smell or if it can be ignored</em></p>
<h2 id="addressing-code-smells">Addressing code smells</h2>
<p>The best way to address or eliminate a code smell varies according to the type of code smell you’ve uncovered. However, there are a few things you should not do — regardless of the type of code smell you’re dealing with. Let’s take a look.</p>
<h3 id="dont-add-functionality-refactor-same-time">Don’t add functionally and refactor at the same time</h3>
<p>A common mistake people make is trying to add functionality and refactor at the same time, or trying to refactor and change something else simultaneously.</p>
<p>If you’re implementing a new feature and see the possibility of refactoring a piece of code, finish implementing the functionality first and then refactor. This ensures that you’re focused on just one task at a time and reduces complexity. If you’re working on a complex problem and try to refactor some code at the same time, that’s only going to make things harder.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h3 id="dont-forget-test-code">Don’t forget to test your code</h3>
<p>We refactor code to make it easier to read, maintain, and so on. However, that’s not very useful if every time we refactor some piece of code, something breaks. That’s why it’s highly recommended that you first make sure there are tests covering the piece of code you wish to change.</p>
<p>If there are no tests covering something you want to refactor, first write tests for that piece of code, and then refactor. Not only have you improved the code by refactoring it, but you also added some tests; that’s very useful.</p>
<h3 id="dont-obsess">Don’t obsess</h3>
<p>And finally, all projects have code smells. Prioritize the code smells that are most important, and deal with those.</p>
<h2 id="common-code-smells">Common code smells</h2>
<p>Now, let’s take a look at five common code smells (duplicate code, long method/class, tight coupling, primitive obsession, and magic numbers) and review solutions to address them.</p>
<h3 id="duplicate-code">Duplicate code</h3>
<p>I’d like to start by stating that not all code duplication is a code smell. You don’t need to go around refactoring your application every time you copy an existing code block.</p>
<p>The main problem with duplicate code is that it increases maintenance costs. If you need to change some piece of code that has a bug and it is duplicated all over the project then that’s going to be more difficult.</p>
<p>Fortunately, automated tools like Detekt are very good at spotting duplicate code, so most of the time you won’t need to handle this manually.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>The way to fix this code smell is by refactoring the common code into a single function or module that can be reused in multiple places.</p>
<p>Let’s imagine you need to calculate the sale price for some items and by default you have a 10% margin:</p>
<pre class="language-kotlin hljs">val bookSalePrice = book.price * (1 + 0.1)
val penSalePrice = pen.price * (1 + 0.1)
</pre>
<p>The problem with the code above is that you need to repeat <code>(1 + 0.1)</code> multiple times — that’s code duplication. To solve that, extract the common piece of code into a new function:</p>
<pre class="language-kotlin hljs">fun calculateSalePrice(itemPrice: Double, margin: Double): Double {
    return itemPrice * (1 + margin)
}
</pre>
<p>Now, call your new function instead:</p>
<pre class="language-kotlin hljs">val margin = 0.1 // 10% margin
calculateSalePrice(book.price, margin)
calculateSalePrice(pen.price, margin)
</pre>
<p>As a rule of thumb, one duplication is okay, two is suspicious, and three means there’s a common abstraction that you need to extract.</p>
<h3 id="long-method-class">Long method/class</h3>
<p>Unlike duplicate code, which is sometimes valid, a long method or class is always a code smell.</p>
<p>Long methods and classes do too much, thereby increasing the complexity of a project and reducing its code quality. They either indicate that your code is poorly organized or that it has too many responsibilities.</p>
<p>If you’re using automated tools, you can usually define a max line count for functions and classes. That way, you’ll get an alert if your functions or classes get too long. If that’s the case, you can fix it by extracting the existing code into smaller functions or by creating smaller classes that have fewer responsibilities.</p>
<p>Using the same example as above, imagine the margin changes based on how many items you have in inventory:</p>
<pre class="language-kotlin hljs">fun calculateSalePrice(itemPrice: Double, quantityInStock: Int, margin: Double): Double {
   return if (quantityInStock &lt; 10) {
       if (itemPrice &lt;= 10.0) {
           val newMargin = margin * 2 // 2x the margin for cheap items
           calculateSalePrice(itemPrice, newMargin)
       } else if (itemPrice > 500.0) {
           val newMargin = margin * 1.5 // 1.5x the margin for expensive
           calculateSalePrice(itemPrice, newMargin)
       } else {
           val newMargin = margin * 1.7 // 1.7x the margin in between items
           calculateSalePrice(itemPrice, newMargin)
       }
   } else if (quantityInStock &lt; 500) {
       val newMargin = margin * 1.3 // 1.3x the margin
       calculateSalePrice(itemPrice, newMargin)
   } else {
       calculateSalePrice(itemPrice, margin)
   }
}
</pre>
<p>This function has 18 lines; we can make it easier to read by breaking it down into smaller functions, like so:</p>
<pre class="language-kotlin hljs">fun calculateSalePrice(itemPrice: Double, quantityInStock: Int, margin: Double): Double {
   return if (quantityInStock &lt; 10) {
       calculateSalePriceForLowStockItems(itemPrice, margin)
   } else if (quantityInStock &lt; 500) {
       calculateSalePriceForMediumStockItems(margin, itemPrice)
   } else {
       calculateSalePriceForHighStockItems(itemPrice, margin)
   }
}
</pre>
<p>By refactoring the code into smaller functions we were able to reduce the code from 18 lines to just eight.</p>
<h3 id="tight-coupling">Tight coupling</h3>
<p>There’s no way to write software without coupling — that would be like writing code that doesn’t depend on other things! Some level of coupling is needed, but if we have too much it becomes “tight coupling” and consequently a code smell.</p>
<p>Tight coupling is when two or more classes have a direct, hard-coded dependency on one another. This can make it difficult to change or modify one class without affecting the other(s).</p>
<p>Automated tools are unlikely to help with this code smell, because as I mentioned earlier, code always has some coupling. And, unfortunately, it’s not always easy to define how much coupling is “too much”.</p>
<p>If you’re hard coding your classes, one simple thing you can do to reduce tight coupling is to <a href="https://blog.logrocket.com/kotlin-dependency-injection-koin-vs-hilt/">use dependency injection</a>. Instead of initiating another class manually, get it injected through the constructor.</p>
<p>Let’s look at an example of tight coupling.</p>
<p>Imagine you have a <code>Car</code> class that has an <code>Engine</code>. You’re manually instantiating the <code>Engine</code> class:</p>
<pre class="language-kotlin hljs">class Engine {
   ...
}

class Car {
   private val engine = Engine()
}
</pre>
<p>Now, suppose your <code>Engine</code> class requires a new parameter in the constructor:</p>
<pre class="language-kotlin hljs">class Engine constructor(private val coolingSystem: CoolingSystem) {
   ...
}

class Car {
   private val engine = Engine(CoolingSystem.AIR)
}
</pre>
<p>You changed the <code>Engine</code> class, but because the <code>Car</code> class is tightly coupled to it, you have to change that as well. One way to fix that is by using dependency injection:</p>
<pre class="language-kotlin hljs">class Car constructor(private val engine: Engine) {
   ...
}
</pre>
<p>Now if you change the <code>Engine</code> constructor, you don’t need to change your <code>Car</code> class because they’re not tightly coupled anymore.</p>
<h3 id="primitive-obsession">Primitive obsession</h3>
<p>Primitive obsession is the excessive use of primitive data types, such as integers, strings, or Booleans, to represent domain-specific concepts.</p>
<p>It’s important to point out that this code smell is not called “using primitives”, instead it’s called “primitive obsession.” Most of the time, using primitives is fine; this becomes a code smell when everything in your code is primitive.</p>
<p>Primitive obsession results in decreased code readability. When primitives are used to represent domain-specific concepts, it can be difficult to understand the intent of the code.</p>
<p>Automated tools are not likely to be of much use in identifying this code smell. There’s simply no way to define rules for identifying this code smell because it varies from project to project.</p>
<p>To resolve primitive obsession, it is best to create custom data types, also known as value objects, that represent domain-specific concepts. These value objects can have specific behavior and validation rules, making it easier to understand and manipulate the data.</p>
<p>Imagine there’s an app that alerts the user every day at a specific time. The code might look like this:</p>
<pre class="language-kotlin hljs">val hourMinute = "11:30" // This would probably come from user input

val hour = hourMinute.split(":")[0].toInt()
val minute = hourMinute.split(":")[1].toInt()

val nextAlertTime = Date().time + (hour * 1000 * 60 * 60) + (minute * 1000 * 60)
</pre>
<p>This code works, but the following might be a better way to do this:</p>
<pre class="language-kotlin hljs">data class HourMinute(val hours: Int, val minutes: Int) {
   init {
       require(hours >= 0) { "hour can't be negative" }
       require(minutes >= 0) { "minute can't be negative" }
   }

   val millis = (hours * 60 * 60 * 1000) + (minutes * 60 * 1000)
}

fun Date.plus(hourMinute: HourMinute) = time + hourMinute.millis

val hourMinute = HourMinute(hours = 11, minutes = 30)
val nextAlertTime = Date().plus(hourMinute)
</pre>
<p>First of all, this code removes the possibility of having invalid dates; if you used a string it’s possible that you’d get values like “”, “:”, “aa:aa”, and so on.</p>
<p>It’s also easier to understand. In the first example, is “11:30”, 11 minutes and 30 seconds? Is it some kind of coordinate, like x=11, y=30? It’s not clear because it’s just a string and that can represent many things.</p>
<h3 id="magic-numbers">Magic numbers</h3>
<p>Magic numbers refers to the use of hard-coded, literal values in code that have no descriptive meaning. These values are called “magic” because they have no clear explanation or context, making it difficult to understand the purpose of the code that uses them.</p>
<p>Magic numbers can also make it more difficult to change the code. Imagine you have two places where the number “15” is used. How do you know if you need to replace both of them?</p>
<p>Automated tools are really good at detecting magic numbers. You can easily rely on them for this purpose.</p>
<p>To resolve the issue of magic numbers, it’s best to replace them with named constants or enumerated values that have descriptive names that explain their purpose. This makes the code easier to understand and maintain, as the values have a clear meaning and context.</p>
<p>Let’s use the same example from the last code smell. If you take close look, you can see that we have some magic numbers like <code>1000</code> and <code>60</code>:</p>
<pre class="language-kotlin hljs">private const val ONE_SECOND_MILLIS = 1000
private const val ONE_MINUTE_MILLIS = 60 * ONE_SECOND_MILLIS
private const val ONE_HOUR_MILLIS = 60 * ONE_MINUTE_MILLIS

class HourMinute(val hours: Int, val minutes: Int) {
   ...
   val millis = hours * ONE_HOUR_MILLIS + minutes * ONE_MINUTE_MILLIS
}
</pre>
<p>We can address this code smell by replacing the numbers with constants that define what they are. This makes it much easier for developers to understand what’s happening.</p>
<h2 id="further-reading">Further reading</h2>
<p>To further improve your knowledge of code smells, I recommend the following books:</p>
<ul>
<li><em>Refactoring: Improving the Design of Existing Code</em>: Martin Fowler provides a comprehensive guide to refactoring, focusing on identifying and fixing code smells; this book is a must-read for developers interested in improving their code quality</li>
<li><em>Clean Code: A Handbook of Agile Software Craftsmanship</em>: Robert C. Martin provides a comprehensive guide for writing clean, maintainable, and scalable code and also discusses how to identify and fix code smells</li>
</ul>
<p>There are many other books on this topic, but these two are a good start.</p>
<h3>Conclusion</h3>
<p>Maintainable code isn’t the norm, it requires effort to write. But being able to produce maintainable code is an essential skill that all developers should master.</p>
<p>In this article, we discussed how to spot code smells using both manual and automated tools. We also investigated how to remove five of the most common code smells. I hope these tips will help you become a better Kotlin developer.</p><div class="code-block code-block-32" >
<div class="blog-plug inline-plug kotlin-plug"><h2><a href="https://lp.logrocket.com/blg/kotlin-signup">LogRocket</a>: Instantly recreate issues in your Android apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is an Android monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your Android apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your Android apps — <a class="signup" href="hhttps://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165693" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165693" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165693" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/12/victor-brandalise.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/12/victor-brandalise.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/victorbrandalise/">
Victor Brandalise <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Victor is very curious and likes understanding how and why things work; this is what drives him to learn new things. Most of his time is spent learning Android and Kotlin, but he also leaves some time for other subjects.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/kotlin/">#kotlin</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/how-to-write-scenarios-using-gherkin-language/" rel="prev">How to write scenarios using Gherkin language</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/fix-nullpointerexception-android/" rel="next">How to fix a <code>NullPointerException</code> in Android</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/identifying-addressing-kotlin-code-smells/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Learn how to build a monorepo in Next.js - LogRocket Blog</title>
			<link>https://blog.logrocket.com/build-monorepo-next-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/build-monorepo-next-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Learn how to build a monorepo in Next.js - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/build-monorepo-next-js/">Learn how to build a monorepo in Next.js - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-144428 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-nextjs" id="post-144428">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/oghenetegadenedo/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/oghenetega-denedo.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/oghenetega-denedo.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/oghenetegadenedo/">
Oghenetega Denedo <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a curiosity-driven software engineer with a focus on building reliable software that's easy to maintain and follows industry best practices.</span>
</div>
</div>
<h1 class="posttitle">Learn how to build a monorepo in Next.js</h1>
<p>
<span class="post-date"><time class="post-date">
April 18, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2826</span>
<span class="logrocket_editor"/>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/12/learn-how-to-build-monorepo-next-js.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Introduction To Building A Monorepo In Next.js"                /> <article class="article-post">
<p><em><strong>Editor’s Note:</strong> This post was reviewed for accuracy on 18 April 2023. This month, Next.js released v13.3 to include features like the <a href="https://nextjs.org/blog/next-13-3">file-based Metadata API, dynamic open graph images, and static export for the <code>app</code> router</a>. Turborepo <a href="https://turbo.build/blog/turbo-1-8-0">also recently released v1.8</a>.</em><em> Check out <a href="https://blog.logrocket.com/tag/nextjs/">our Next.js archives </a>and our <a href="https://podrocket.logrocket.com/turborepo">podcast episode with Turborepo creator Jared Palmer</a> to learn more.</em></p>
<p>Monorepo architecture has become a very popular trend among devs creating modern web apps. Although the practice isn’t new by any means, large companies like Google and Microsoft have utilized monorepos for a long time to manage software at scale, and it’s also used in popular open-source projects like React, Next.js, Jest, Babel, and many more.</p>
<p>In this article, we will discuss what monorepos are and the tools you need for working with them.</p>
<p>We’ll also explore how you can build a monorepo for a Next.js project with a sample use case to follow along with.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-monorepo">What is a monorepo?</a></li>
<li><a href="#benefits-monorepo-next-js">Benefits of using a monorepo in Next.js</a>
<ul >
<li><a href="#simple-code-sharing">Simple code sharing</a></li>
<li><a href="#atomic-commits">Atomic commits</a></li>
<li><a href="#consistency">Consistency</a></li>
</ul>
</li>
<li><a href="#monorepo-tools">Monorepo tools</a></li>
<li><a href="#building-monorepo">Building the monorepo</a></li>
<li><a href="#project-setup">Project setup</a></li>
<li><a href="#creating-workspaces">Creating workspaces</a></li>
<li><a href="#set-up-next-js-applications">Setting up the Next.js applications</a></li>
<li><a href="#set-turborepo">Setting up Turborepo</a>
<ul >
<li><a href="#installing-turborepo">Installing Turborepo</a></li>
<li><a href="#running-tasks">Running tasks</a></li>
</ul>
</li>
<li><a href="#linting-formatting">Linting and formatting</a>
<ul >
<li><a href="#set-eslint">Set up ESLint</a></li>
<li><a href="#running-linting-formatting-tasks">Running linting and formatting tasks</a></li>
</ul>
</li>
<li><a href="#building-reusable-component-library">Building a reusable component library</a></li>
</ul>
<h2 id="what-monorepo">What is a monorepo?</h2>
<p>A monorepo is a single version-controlled repository that contains several isolated projects with well-defined relationships.</p>
<p>This approach differs from more typical methods of software development, where each project is usually stored on a separate repository with its own configuration for building, testing, and deployment.</p>
<p><img             class="aligncenter wp-image-144458 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/monorepo-vs-multirepo.jpeg" alt="Monorepo Vs. Multirepo" width="730" height="354"    /><noscript><img               class="aligncenter wp-image-144458 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/monorepo-vs-multirepo.jpeg" alt="Monorepo Vs. Multirepo" width="730" height="354"  /></noscript></p>
<h2 id="benefits-monorepo-next-js">Benefits of using a monorepo in Next.js</h2>
<p>There are some key factors that have caused this shift in direction regarding how software projects are structured (particularly those with large codebases).</p>
<p>These factors are:</p>
<h3 id="simple-code-sharing">Simple code sharing</h3>
<p>Applications built in a monorepo can easily share reusable code and configurations, since they share the same repository.</p>
<p>In contrast to a polyrepo, this means that there is reduced code duplication, ensuring faster development and ease of maintenance.</p>
<p>Furthermore, developers don’t have to go through the difficult process of publishing packages and resolving incompatibilities with projects that rely on them.</p>
<h3 id="atomic-commits">Atomic commits</h3>
<p>Large-scale changes affecting multiple applications can be made in a single commit while ensuring the application works as expected before committing changes.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>An excellent example of an atomic commit is when a breaking change is made to a shared library that’s used by several apps, thereby forcing the developer to ensure the apps that depend on it are updated to be compatible with the recent change.</p>
<h3 id="consistency">Consistency</h3>
<p>Monorepos offer better consistency than polyrepos, since the codebase is all in one place and each project can easily share the same coding style and tools for testing, deployment, and code maintenance.</p>
<h2 id="monorepo-tools">Monorepo tools</h2>
<p>Monorepos are very useful for managing projects, but to get the most out of them, you need to work with the right tools to ensure your development workflow is fast and effective.</p>
<p>Available monorepo tools vary based on their features, language support, and barrier to entry in terms of the expertise required to use them.</p>
<p>The following is a list of monorepo tools for working with JavaScript/TypeScript codebases:</p>
<ul>
<li><a href="https://github.com/vercel/turborepo">Turborepo</a>: Smart build system maintained by Vercel for JavaScript/TypeScript monorepos</li>
<li><a href="https://github.com/nrwl/nx">Nx</a>: Next-generation build system with first-class monorepo support and powerful integrations</li>
<li><a href="https://github.com/bazelbuild/bazel">Bazel</a>: Fast, scalable, multi-language, and extensible build system</li>
<li><a href="https://github.com/lerna/lerna">Lerna</a>: Fast and modern build system for managing and publishing multiple JavaScript/TypeScript packages from the same repository</li>
</ul>
<p>Turborepo is the tool of choice for this tutorial. It’s an easy-to-use, fast, and effective build system for TypeScript/JavaScript codebases.</p>
<blockquote><p><strong>N.B.,</strong> if you want to see what else can be done with Turborepo, we have another tutorial focused on <a href="https://blog.logrocket.com/build-full-stack-typescript-application-turborepo/">building a full-stack TypeScript monorepo</a></p></blockquote>
<p>Turborepo is built on <a href="https://docs.npmjs.com/cli/v7/using-npm/workspaces">workspaces</a>, a feature supported by Yarn, npm, and <a href="https://blog.logrocket.com/managing-full-stack-monorepo-pnpm/">pnpm</a> for managing multiple packages within a top-level root package.</p>
<p>Turborepo ships with the following features that make working with monorepos easy:</p>
<ul>
<li>Incremental builds: This ensures builds are executed when there are changes in a workspace to prevent unnecessary computations</li>
<li>Parallel execution: Executes tasks in parallel while maximizing the use of every available core in the CPU to ensure quick executions</li>
<li>Remote caching: This is an impressive feature Turborepo supports that allows you to share the cache of task executions with your dev team and CI/CD server to cut down execution time</li>
<li>Dependency graph visualization: This supports generating a graph of a task execution plan to give a high-level view of the steps taken to run it</li>
</ul>
<h2 id="building-monorepo">Building the monorepo</h2>
<p>For this tutorial, we’ll build a monorepo for a sample ecommerce application that’s made up of two independent Next.js apps: an admin and a store.</p>
<p>We’ll also cover how to leverage the significant benefits monorepos provide. These are primarily the following:</p>
<ul>
<li>Code sharing; to make a reusable component library that can be used by both Next.js apps</li>
<li>A shared configuration package for linting and formatting</li>
</ul>
<h2 id="project-setup">Project setup</h2>
<p>In your terminal, enter the following command to create a new directory for the project and set up the <code>package.json</code>:</p>
<pre class="language-bash hljs">mkdir nextjs-monorepo 
cd nextjs-monorepo 
yarn init -y
</pre>
<p>This is the first step in building the monorepo; now we must set up the project’s workspaces.</p>
<h2 id="creating-workspaces">Creating workspaces</h2>
<p>Earlier in this article, I mentioned that Turborepo is built on workspaces — all packages and apps in the monorepo will be stored on a separate workspace of their own.</p>
<p>Open the <code>package.json</code> file at the root of the project and insert the code below:</p>
<pre class="language-json hljs">{
  "name": "nextjs-monorepo",
  "private": true,
  "version": "1.0.0",
  "workspaces": [
    "apps/*",
    "packages/config/*",
    "packages/shared/*"
  ],
  "engines": {
    "node": ">=14.0.0"
  },
  "packageManager": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="eb928a9985abdac5d9d9c5dadc">[email protected]</a>"
}
</pre>
<p>The <code>workspaces</code> field in the <code>package.json</code> file is an array of paths that tells the package manager where our workspaces are located.</p>
<p><code>apps/*</code> is for all the independent Next.js applications; <code>packages/config/*</code> stores reusable packages for linting and formatting; and <code>packages/shared/*</code> contains reusable code that is used by projects in <code>app/</code> — this is where the UI component library will be stored.</p>
<h2 id="set-up-next-js-applications">Setting up the Next.js applications</h2>
<p>At the root of the project, create a new folder, <code>apps/</code>, to store the Next.js apps we’re going to set up:</p>
<pre class="language-bash hljs">mkdir apps
cd apps
</pre>
<p>Next, let’s add the <code>admin</code> and <code>store</code> applications:</p>
<pre class="language-json hljs">yarn create next-app admin 
yarn create next-app store
</pre>
<p>When it’s installed, open the <code>package.json</code> file of the <code>admin</code> application, located at <code>apps/admin/package.json</code>. Then, replace the value of the <code>dev</code> script with the next <code>dev</code> — port 3001 — so it can run on a different port.</p>
<p>Once that’s done, run the development server for both projects with <code>yarn dev</code> to ensure everything works properly.</p>
<p>In the <code>apps/admin/pages/index.js</code> file, insert the following code:</p>
<pre class="language-javascript hljs">export default function Home() {
  return (
    &lt;div>
      &lt;h1>Admin&lt;/h1>
      &lt;button>Click Me!&lt;/button>
    &lt;/div>
  );
}
</pre>
<p>We will do the same in the <code>apps/store/pages/index.js</code> file, so insert the following code once again:</p>
<pre class="language-javascript hljs">export default function Home() {
  return (
    &lt;div>
      &lt;h1>Store&lt;/h1>
      &lt;button>Click Me!&lt;/button>
    &lt;/div>
  );
}
</pre>
<p>Now, we’ve completed the basic setup necessary for both Next.js apps. In the next section, we’ll set up Turborepo for running our development tasks.</p>
<h2 id="set-turborepo">Setting up Turborepo</h2>
<p>Workspaces and tasks are the building blocks of a monorepo.</p>
<p>Package managers like Yarn and npm work well for installing packages and configuring workspaces, but they aren’t optimized for running tasks in a complex project setup like a monorepo, and this is where Turborepo shines.</p>
<h3 id="installing-turborepo">Installing Turborepo</h3>
<p>Let’s start by installing Turborepo for our project. At the root of the monorepo, run the following script:</p>
<pre class="language-bashhljs">yarn add turborepo -DW
</pre>
<p>Once the installation is complete, create a new file, <code>turbo.json</code>, at the root of the monorepo to store the configuration required for Turborepo to work. Then, enter the following code:</p>
<pre class="language-json hljs">{
  "$schema": "https://turborepo.org/schema.json",
}
</pre>
<h3 id="running-tasks">Running tasks</h3>
<p>Let’s configure Turborepo to run the Next.js applications in <code>apps/</code>. Open the <code>turbo.json</code> file and enter the code below:</p>
<pre class="language-json hljs">{
  "$schema": "https://turborepo.org/schema.json",
  "pipeline": {
    "dev": {
      "cache": false
    }
  }
}
</pre>
<p>Let’s take a moment to examine the contents of the <code>turbo.json</code> file:</p>
<ul>
<li>The <code>pipeline</code> field defines the tasks that Turborepo will run on the monorepo; every property in the <code>pipeline</code> object is a task that corresponds to a script in the <code>package.json</code> file of a workspace</li>
<li>The <code>dev</code> field inside the <code>pipeline</code> object defines a workspace’s dev task; <code>"cache": false</code> tells Turborepo not to cache the results of this task</li>
</ul>
<blockquote><p><strong>N.B.,</strong> Turborepo will only run tasks that are defined in the <code>scripts</code> section of the workspace’s <code>package.json</code> file</p></blockquote>
<p>We’ll need to define a script in the <code>scripts</code> field of the <code>package.json</code> file at the root of the monorepo to run the dev server of the Next.js applications.</p>
<p>Insert the following code in the <code>package.json</code> file at the root of the monorepo:</p>
<pre class="language-json hljs">{
  "scripts": {
    "dev": "turbo run dev --parallel"
  }
}
</pre>
<p>The <code>--parallel</code> flag tells Turborepo to run the <code>dev</code> task of the workspaces in parallel.</p>
<p>Enter <code>yarn dev</code> in your terminal at the root of the monorepo to start the development server for the Next.js applications.</p>
<p>If that was successful, you should have an output similar to the image below:</p>
<p><img             class="aligncenter wp-image-144464 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/turborepo-output.jpeg" alt="Turborepo Output" width="730" height="332"    /><noscript><img               class="aligncenter wp-image-144464 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/turborepo-output.jpeg" alt="Turborepo Output" width="730" height="332"  /></noscript></p>
<p>Now that Turborepo is up and running, the next step is to set up a reusable configuration package for linting and formatting.</p>
<h2 id="linting-formatting">Linting and formatting</h2>
<p>Monorepos enable the use of a unified code standard for all projects within it to ensure consistency throughout the codebase.</p>
<p>An automated code linting and formatting tool like <a href="https://blog.logrocket.com/troubleshooting-next-js-app-eslint/">ESLint</a> can be configured to extend a shared configuration that every workspace in the project can use.</p>
<h3 id="set-eslint">Set up ESLint</h3>
<p>We’ll need to create a new workspace for the shared ESLint config package that will be used across the workspaces in <code>apps/</code>.</p>
<p>Enter the following script to create a new workspace for the ESLint config package:</p>
<pre class="language-bash hljs">mkdir -p packages/config/eslint-config-custom 
cd packages/config/eslint-config-custom    
</pre>
<p>Create a <code>package.json</code> file in <code>packages/config/eslint-config-custom</code> and insert the following code:</p>
<pre class="language-json hljs">{
  "name": "eslint-config-custom",
  "version": "1.0.0",
  "main": "index.js",
}    
</pre>
<p><code>"main": "index.js"</code> specifies the entry point of this package and <code>index.js</code> contains the ESLint configuration that will be imported by the modules that will use it.</p>
<p>Install ESLint and the plugins relevant to this project with the following:</p>
<pre class="language-bash hljs">yarn add eslint eslint-config-next eslint-config-prettier eslint-config-react eslint-config-turbo
</pre>
<p>Create a new file, <code>index.js</code>, in <code>packages/config/eslint-config-custom</code> and enter the following code:</p>
<pre class="language-javascript hljs">module.exports = {
  extends: ["next", "turbo", "prettier"],
};
</pre>
<p>Now we’re done with setting up the reusable ESLint configuration package for this project, the next step is using it in our Next.js apps.</p>
<p>To use the <code>eslint-config-custom</code> package in the <code>admin</code> and <code>store</code> workspaces, we’ll need to add it as a dependency.</p>
<p>In the <code>package.json</code> file of the <code>admin</code> and <code>store</code> workspaces, remove every ESLint package and plugin and insert the following code:</p>
<pre class="language-json hljs">{
  "devDependencies": {
   "eslint-config-custom": "*"
  }    
}
</pre>
<p>Update the <code>.eslintrc.json</code> file in the <code>apps/store</code> and <code>apps/admin</code> workspaces with the following code:</p>
<pre class="language-json hljs">{
  "root": true,
  "extends": ["custom"] // Tells ESLint to use the "eslint-config-custom" package
}
</pre>
<p>Finally, run <code>yarn install</code> at the root of the monorepo to update the dependencies in the <code>node_modules</code> folder.</p>
<p>If you followed the previous steps correctly, you should find the local <code>eslint-config-custom</code> package in the root <code>node_modules</code> folder.</p>
<p><img             class="aligncenter wp-image-144467 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/eslint-config-custom-package.jpeg" alt="Eslint-config-custom Package" width="730" height="777"    /><noscript><img               class="aligncenter wp-image-144467 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/eslint-config-custom-package.jpeg" alt="Eslint-config-custom Package" width="730" height="777"  /></noscript></p>
<h3 id="running-linting-formatting-tasks">Running linting and formatting tasks</h3>
<p>Before we start running tasks for linting and formatting, we’ll need to add the necessary scripts in the <code>package.json</code> file of the <code>admin</code> and <code>store</code> apps.</p>
<p>Open the <code>package.json</code> file of the <code>admin</code> and <code>store</code> apps and insert the following in the <code>scripts</code> field:</p>
<pre class="language-json hljs">{
  "lint": "eslint .",
  "format": "eslint --fix --ext .js,.jsx ."
}
</pre>
<p>Next, we’ll need to create the tasks for linting and formatting the workspaces in the monorepo. In the <code>turbo.json</code> file at the root of the monorepo, add the following code in the <code>pipeline</code> field:</p>
<pre class="language-json hljs">{
  "lint": {
    "outputs": []
  },
  "format": {
    "outputs": []
  }  
}
</pre>
<p>The <code>outputs</code> field in the <code>lint</code> and <code>format</code> tasks stores an array of globs — any file that matches the pattern of the glob is treated as an artifact that will be cached.</p>
<p>The value of the <code>output</code> in the <code>lint</code> and <code>format</code> tasks is set to an empty array, which tells Turborepo to cache the logs to <code>stdout</code> and <code>stderr</code> of this task. As a result, whenever this task is re-run and there are no changes in the workspace, Turborepo replays the cached logs, which means the execution time of a task is very fast.</p>
<p>To run the new tasks, we’ll need to update the <code>scripts</code> field of the <code>package.json</code> file at the root of the monorepo with the following code:</p>
<pre class="language-json hljs">{
  "lint": "turbo run lint",
  "format": "turbo run format"  
}
</pre>
<p>Once that’s complete, you can now run the <code>lint</code> and <code>format</code> tasks by entering the following command:</p>
<pre class="language-bash hljs">yarn lint
yarn format
</pre>
<p>Here’s a sample output of the execution of <code>yarn lint</code>:</p>
<p><img             class="aligncenter wp-image-144469 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/yarn-lint-output.jpeg" alt="Yarn-lint Output" width="730" height="390"    /><noscript><img               class="aligncenter wp-image-144469 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/yarn-lint-output.jpeg" alt="Yarn-lint Output" width="730" height="390"  /></noscript></p>
<h2 id="building-reusable-component-library">Building a reusable component library</h2>
<p>In modern frontend development, components are the building blocks of every application, irrespective of the size of the project.</p>
<p>The breaking down of complex UIs into reusable components and their abstraction to a shared component library is a standard development practice today — it makes codebases easier to maintain while still following software development best practices like DRY.</p>
<p>We will build our own reusable component library that projects in <code>apps/</code> can make use of. To get started, we’ll need to create a new workspace.</p>
<p>Enter the following command at the root of the monorepo to create a new workspace for the component library:</p>
<pre class="language-bash hljs">mkdir -p packages/shared/ui
cd packages/shared/ui
</pre>
<p>In <code>packages/shared/ui</code>, create a new <code>package.json</code> file and insert the following:</p>
<pre class="language-json hljs">{
  "name": "ui",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "lint": "eslint .",
    "format": "eslint --fix --ext .js,.jsx ."
  },
  "devDependencies": {
    "eslint": "^7.32.0",
    "eslint-config-custom": "*",
    "react": "^18.2.0"
  }
}
</pre>
<p>Next, let’s create a reusable button component that can be used by the Next.js applications. In the <code>packages/shared/ui</code> workspace, create a new file, <code>Button.jsx</code>, and enter the following code:</p>
<pre class="language-jsx hljs">import * as React from "react";

export const Button = ({ children }) => {
  return &lt;button>{children}&lt;/button>;
};
</pre>
<p>Create a new file, <code>index.js</code>, that’ll serve as the entry point to this package and export the individual React components.</p>
<p>Add the following code to the <code>index.js</code> file:</p>
<pre class="language-jsx hljs">import { Button } from "./Button.jsx";
export { Button };
</pre>
<p>To use the <code>Button</code> component in our Next.js apps, we’ll need to add the <code>ui</code> package as a dependency in the workspace’s <code>package.json</code> file.</p>
<p>Add the <code>ui</code> package by inserting the following code in the <code>dependencies</code> field within the <code>package.json</code> file of the <code>admin</code> and <code>store</code> workspaces, respectively:</p>
<pre class="language-json hljs">{
  "dependencies": {
    "ui": "*"
  }
}
</pre>
<p>Once that’s complete, run <code>yarn install</code> to update the dependencies in the <code>node_modules</code> folder.</p>
<p>Next, in the <code>pages/index.js</code> file of the Next.js apps, replace the existing code with the following:</p>
<pre class="language-javascript hljs">// apps/admin/pages/index.js
import { Button } from "ui";
export default function Home() {
  return (
    &lt;div>
      &lt;h1>Admin&lt;/h1>
      &lt;Button>Click Me!&lt;/Button>
    &lt;/div>
  );
}

// apps/store/pages/index.js
import { Button } from "ui";
export default function Home() {
  return (
    &lt;div>
      &lt;h1>Store&lt;/h1>
      &lt;Button>Click Me!&lt;/Button>
    &lt;/div>
  );
}
</pre>
<p>Restart the development server, visit each application, and you will observe an error similar to the following image:</p>
<p><img             class="aligncenter wp-image-144473 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/error-signal-1.jpeg" alt="Error Signals" width="730" height="283"    /><noscript><img               class="aligncenter wp-image-144473 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/error-signal-1.jpeg" alt="Error Signals" width="730" height="283"  /></noscript></p>
<p>The reason for this error is that we haven’t configured our Next.js apps to handle the transpilation of local packages, like the <code>ui</code> package in <code>packages/shared</code>.</p>
<p>There’s a nice package on npm that solves this problem: <a href="https://www.npmjs.com/package/next-transpile-modules">next-transpile-modules</a>. It enables the transpilation of local packages with a Next.js/Babel configuration.</p>
<p>Let’s install the <code>next-transpile-modules</code> package in the <code>admin</code> and <code>store</code> workspaces by entering the following command:</p>
<pre class="language-bash hljs">yarn workspace admin add -D next-transpile-modules
yarn workspace store add -D next-transpile-modules
</pre>
<p>In the <code>next.config.js</code> file of the <code>admin</code> and <code>store</code> workspaces, enter the following code to use the <code>next-transpile-modules</code> package to transpile the component library package:</p>
<pre class="language-javascript hljs">/** @type {import('next').NextConfig} */
const withTM = require("next-transpile-modules")(["ui"]);
module.exports = withTM({
  reactStrictMode: true,
  swcMinify: true,
});
</pre>
<p>Since we’ve made changes to the <code>next.config.js</code> file, we’ll have to restart the development server for the changes to take effect. After restarting the server, navigate to <a href="http://localhost:3000">localhost:3000</a> and the error should be resolved, with everything now working as expected.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Monorepos will continue to grow in popularity in the web development community because of their numerous benefits and the advancement of tools that make working with them easier for developers.</p>
<p>I hope you found this guide to building a monorepo in Next.js useful — let me know of your own experiences in the comments below.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-144428" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/build-monorepo-next-js/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/build-monorepo-next-js/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-144428" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/build-monorepo-next-js/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-144428" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/build-monorepo-next-js/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/oghenetega-denedo.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/oghenetega-denedo.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/oghenetegadenedo/">
Oghenetega Denedo <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a curiosity-driven software engineer with a focus on building reliable software that's easy to maintain and follows industry best practices.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/nextjs/">#nextjs</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/understanding-the-different-types-of-survey-questions/" rel="prev">Understanding the different types of survey questions</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/add-stepper-components-react-app/" rel="next">Add stepper components to your React app</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/build-monorepo-next-js/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>NestJS interceptors: Guide and use cases - LogRocket Blog</title>
			<link>https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>NestJS interceptors: Guide and use cases - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/">NestJS interceptors: Guide and use cases - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-166686 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-nestjs" id="post-166686">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/taofiqaiyelabegan/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/06/taofiq-aiyelabegan.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/06/taofiq-aiyelabegan.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/taofiqaiyelabegan/">
Taofiq Aiyelabegan <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Taofiq is a technical writer and software engineer working on building mobile and web applications. Additionally, he likes to contribute to open source projects and exploring new topics.</span>
</div>
</div>
<h1 class="posttitle">NestJS interceptors: Guide and use cases</h1>
<p>
<span class="post-date"><time class="post-date">
April 12, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2585</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nestjs-interceptors-guide-use-cases.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="NestJS Interceptors: Guide and Use Cases"                /> <article class="article-post">
<p>NestJS interceptors are class-annotated with injectable decorators and implement the <code>NestInterceptor</code> interface. This interface has two methods:  <code>intercept</code> and <code>handleRequest</code>. The <code>intercept</code> method is called before sending the request to a controller, while the <code>handleRequest</code> method is called after the request has been processed by the controller and a response is returned.</p>
<p>In this article, we will look at what NestJS interceptors are, how to use them, and some use cases for them.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#nestjs-interceptors">What are NestJS interceptors?</a></li>
<li><a href="#exploring-intercept-method-execution-context-call-handler">Exploring the <code>intercept</code> method, <code>ExecutionContext</code>, and <code>CallHandler</code></a>
<ul >
<li><a href="#creating-custom-interceptor">Creating a custom interceptor</a></li>
<li><a href="#binding-interceptors-nestjs">Binding interceptors in NestJS</a></li>
<li><a href="#logging-texts">Logging texts</a></li>
</ul>
</li>
<li><a href="#nestjs-interceptors-use-cases">NestJS interceptors use cases</a>
<ul >
<li><a href="#logging">Logging</a></li>
<li><a href="#data-validation">Data validation</a></li>
<li><a href="#authentication-authorization">Authentication and authorization</a></li>
<li><a href="#exception-mapping">Exception mapping</a></li>
</ul>
</li>
</ul>
<h2 id="nestjs-interceptors">What are NestJS interceptors?</h2>
<p>Interceptors are the most powerful form of the <code>request-response</code> pipeline. They have direct access to the request before hitting the route handler. We can mutate the response after it has passed through the route handler. To get a better understanding of what these interceptors are, let’s take a look at the diagram below:</p>
<p><img             class="aligncenter size-full wp-image-166695 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptor-diagram.png" alt="NestJS Interceptor Diagram" width="730" height="388"    /><noscript><img               class="aligncenter size-full wp-image-166695" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptor-diagram.png" alt="NestJS Interceptor Diagram" width="730" height="388"  /></noscript></p>
<p>The diagram above is a typical <code>request-response</code> diagram of how users or clients interact with a server. Let’s say a client makes a request to the Nest API endpoint. That will then process that request and send back a response to the client. An interceptor is what lies between the <code>request</code> and the <code>response</code>. For example, we can create an interceptor so that when a client makes a request to the server,  it will be intercepted by the interceptor before the request reaches the server.</p>
<p>In the interceptor, we can do any processes and modify the request before it’s sent to the server. We can also set up the interceptor to intercept the response before being sent back to the client.</p>
<h2 id="exploring-intercept-method-execution-context-call-handler">Exploring the <code>intercept</code> method, <code>ExecutionContext</code>, and <code>CallHandler</code></h2>
<p>The <code>intercept</code> method is a method that implements a custom interceptor. It takes in two arguments, namely: <code>ExecutionContext</code> and <code>CallHandler</code>. The <code>ExecutionContext</code> is an object that provides methods to access the route handler and class that can be called or invoked. The <code>CallHandler</code> is an interface that provides access to an <code>Observable</code>, which represents the response stream from the <a href="https://blog.logrocket.com/understanding-controllers-routes-nestjs/">route handler</a>.</p>
<h3 id="creating-custom-interceptor">Creating a custom interceptor</h3>
<p>To start, create a project from our terminal with the <code>nest new interceptors</code> command. This will bootstrap our NestJS project:</p>
<p><img             class="aligncenter wp-image-166697 size-medium jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-start-156x300.png" alt="NestJS Start Screen" width="156" height="300"  /><noscript><img               class="aligncenter wp-image-166697 size-medium" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-start-156x300.png" alt="NestJS Start Screen" width="156" height="300"/></noscript></p>
<p>Inside the <code>app.servive.ts</code>, implement a <code>User</code> interface, as shown below:</p>
<pre class="language-typescript hljs">export interface User {
 id: number;
 first_name: string;
 last_name: string;
 email: string;
}
</pre>
<p>Then, rename the <code>getHello</code> method (default) to <code>getUsers</code>. This will return an array of the <code>Users</code> object. Here’s what that looks like:</p>
<pre class="language-javascript hljs">import { Injectable } from '@nestjs/common';

export interface User {
 id: number;
 first_name: string;
 last_name: string;
 email: string;
}
@Injectable()
export class AppService {
 getUsers(): User[] {
   return [
     {
       id: 1,
       first_name: 'John',
       last_name: 'Doe',
       email: '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c18baea9af81a6aca0a8adefa2aeac">[email protected]</a>',
     },
     {
       id: 2,
       first_name: 'Bod',
       last_name: 'Madley',
       email: '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="13677c777753747e727a7f3d707c7e">[email protected]</a>',
     },
   ];
 }
}
</pre>
<p>Now, inside the <code>app.controller.ts</code>, we have a <code>getHello</code> method that calls the <code>getUsers</code> function in the <code>app.service.ts</code> by default. We’ll change the name to <code>getUsers</code> as well:</p>
<pre class="language-typescript hljs">import { Controller, Get} from '@nestjs/common';
import { AppService, User } from './app.service';

@Controller()
export class AppController {
 constructor(private readonly appService: AppService) {}

 @Get()
 getUsers(): User[] {
   return this.appService.getUsers();
 }
}
</pre>
<p>Let’s call this endpoint in our <a href="https://blog.logrocket.com/how-automate-api-tests-postman/">Postman</a> and see the response we get back:</p>
<p><img             class="aligncenter size-full wp-image-166699 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-local-host.png" alt="NestJS Local Host Terminal" width="730" height="450"    /><noscript><img               class="aligncenter size-full wp-image-166699" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-local-host.png" alt="NestJS Local Host Terminal" width="730" height="450"  /></noscript></p>
<p>The endpoint returns an array of two objects as specified in the <code>app.service.ts</code>. Now, say we want to modify the response sent to the user from this endpoint by changing the <code>first_name</code> and <code>last_name</code> snake case to <code>CamelCase</code>. We can use a custom interceptor to achieve this.</p>
<p>Let’s build a simple custom interceptor and see how to use it in NestJS applications. Create a file in the <code>src</code> folder called <code>custom.interceptors.ts</code>. The interceptor will be created using a class that will implement a <code>NestInterceptor</code>. Then, the <code>intercept</code> method will be implemented. This method will take the two params mentioned earlier (<code>ExecutionContext</code> and <code>Handler</code>).</p>
<p>Then, create a folder in the <code>src</code> folder named <code>interceptors</code>. After that, create a file called <code>custom.interceptor.ts</code>, where we will create our custom interceptor.</p>
<p>Here’s the code:</p>
<pre class="language-typescript hljs">import { CallHandler, ExecutionContext, NestInterceptor } from '@nestjs/common';
import { map, Observable } from 'rxjs';
import { User } from 'src/app.service';

export class CustomInterceptors implements NestInterceptor {
 intercept(context: ExecutionContext, handler: CallHandler): Observable&lt;any> {
   console.log('Before...');
   return handler.handle().pipe(
     map((data) =>
       data.map((item: User) => {
         console.log('After....');
         const res = {
           ...item,
           firstName: item.first_name,
           lastName: item.last_name,
         };
         delete res.first_name, delete res.last_name;
         return res;
       }),
     ),
   );
 }
}
</pre>
<p>Here, we are implementing a custom interceptor that intercepts the response sent back to a client when it makes a request to the endpoint at <code>http://localhost:3000/</code>.</p>
<p>Normally, the response sent back looks like this format:</p>
<pre class="language-typescript hljs">[

{
   "id": 1,

   "first_name": "John",

   "last_name": "Doe",

   "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4e042126200e29232f2722602d2123">[email protected]</a>"

},

{
   "id": 2,

   "first_name": "Bod",

   "last_name": "Madley",

   "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8bffe4efefcbece6eae2e7a5e8e4e6">[email protected]</a>"

}

]
</pre>
<p>However, we do not want to send the data back to the client in this format. We want to modify the response to have a <code>CamelCase</code> name instead of the <code>first_name</code> and <code>last_name</code>. First, as previously explained, we implement the <code>intercept</code> method using the <code>context</code> and <code>handler</code> params.</p>
<h3 id="logging-texts">Logging texts</h3>
<p>In the code above, we logged a <code>"Before.."</code> text where the interception occurs when the client makes the request before reaching the API endpoint/server. Then, we called the <code>handler.handle</code> method to trigger the execution of the controller. We also used the <code>Interceptors</code> on the <code>pipe</code> method. This processes any additional modifications before the response is returned to the client. Inside the <code>handler.handle</code> method, we used the <code>map</code> operator to transform the returned data.</p>
<p>We also mapped over the array of data and logged an <code>"After"</code> text. This is where the interceptor occurs when sending back the data to the client. From there, we took the item (each <code>User</code> object) from the <code>map</code> method and stored it in a variable <code>res</code>. This is where we spread the values in the object and add the <code>CamelCase</code> transformation we want to achieve for <code>first_name</code> and <code>last_name</code>.</p>
<p>Then, we used the <code>delete</code> operator to remove the initial <code>first_name</code> and <code>last_name</code> values from the transformed object. Lastly, we needed to bind this custom interceptor to the controller that returns this data for our response to be properly transformed. We do the binding in the <code>app.controller.ts</code> as follows:</p>
<pre class="language-typescript hljs">@Get()
 @UseInterceptors(CustomInterceptors)
 getUsers(): User[] {
   return this.appService.getUsers();
 }
</pre>
<p>Now, let’s rerun the request and see the response we get back:</p>
<p><img             class="aligncenter size-full wp-image-166701 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-validation-one.png" alt="NestJS Validation Step One" width="730" height="535"    /><noscript><img               class="aligncenter size-full wp-image-166701" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-validation-one.png" alt="NestJS Validation Step One" width="730" height="535"  /></noscript></p>
<p>Here, we can see that when we make the request to that endpoint, we get transformed data, the <code>firstName</code> and <code>lastName</code>. This better explains the concept of interceptors. The client makes the request to the endpoint, then before the response is sent back, we intercept it and transform it to return a data type we wanted.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<h2 id="binding-interceptors-nestjs">Binding interceptors in NestJS</h2>
<p>As we saw in the previous section, to set up our custom interceptor, we used the <code>@UseInterceptors()</code> decorator that applies the interceptor to that specific route (<code>getUsers</code>). So, if we have another route with <code>getReports</code>, the interceptor will not be applied because we only specified it to apply to a particular route. Like <a href="https://blog.logrocket.com/understanding-guards-nestjs/">NestJS guards and pipes</a>, interceptors can also be global-scoped, controller-scoped, or method-scoped.</p>
<p>To implement the interceptor to apply to each route handler defined in a controller (controller-scoped), we will define it above the controller itself, as follows:</p>
<pre class="language-typescript hljs">@Controller()
@UseInterceptors(CustomInterceptors)
export class AppController {
 constructor(private readonly appService: AppService) {}

 @Get()
 getUsers(): User[] {
   return this.appService.getUsers();
 }

@Get('/reports')
 getReports(): Reports[] {
   return this.appService.getReports();
 }
}
</pre>
<p>Now, when we make a request to either the <code>"/"</code> route or the <code>"/reports"</code>, the interceptor will always transform the response to the specified logic in the interceptor.</p>
<p>To set up a global interceptor, we will use the <code>useGlobalInterceptors</code> method in the <code>main.ts</code> file, as shown below:</p>
<pre class="language-typescript hljs">import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
 const app = await NestFactory.create(AppModule);
 // global scoped interceptor
 app.useGlobalInterceptors(new CustomInterceptors());
 await app.listen(3000);
}
bootstrap();
</pre>
<p>With this, the <code>CustomInterceptor</code> will be applied across the entire application for all the controllers and router handlers. However, if we register our <code>CustomInterceptor</code> globally, we will not be able to inject any dependencies which are defined within a modular scope. To solve this, we can register our interceptor within a scoped module, as shown below:</p>
<pre class="language-typescript hljs">import { Module } from '@nestjs/common';
import { APP_INTERCEPTOR } from '@nestjs/core';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { CustomInterceptors } from './interceptors/custom.interceptor';

@Module({
 imports: [],
 controllers: [AppController],
 providers: [
   AppService,
   {
     provide: APP_INTERCEPTOR,
     useClass: CustomInterceptors,
   },
 ],
})
export class AppModule {}
</pre>
<h2 id="nestjs-interceptors-use-cases">NestJS interceptors use cases</h2>
<h3 id="logging">Logging</h3>
<p>NestJS interceptors can be used for logging. Developers often need to track their Nest applications’ requests and responses. This is useful for debugging purposes and monitoring the performance of the application. Now, let’s create a logger interceptor to log a client’s request method, the URL.</p>
<p>Here’s the code:</p>
<pre class="language-typescript hljs">import {
 CallHandler,
 ExecutionContext,
 Logger,
 NestInterceptor,
} from '@nestjs/common';
import { Observable, map } from 'rxjs';

export class LoggerInterceptor implements NestInterceptor {
 intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any> {
   console.log('Before...');

   const req = context.switchToHttp().getRequest();
   const method = req.method;
   const url = req.url;
   console.log(`Method: ${method}, URL: ${url}`);
   const now = Date.now();
   return next.handle().pipe(
     map((data) => {
       Logger.log(
         `${method} ${url} ${Date.now() - now}ms`,
         context.getClass().name,
       ),
         console.log('After...');
       return data;
     }),
   );
 }
}
</pre>
<p>Then, we use it in our <code>app.module.ts</code> file, as shown below:</p>
<pre class="language-typescript hljs"> @Get('/logger')
 @UseInterceptors(LoggerInterceptor)
 getUsersLogger() {
   return 'Request Logged';
 }
</pre>
<p><img             class="aligncenter size-full wp-image-166716 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-logger.png" alt="Interceptors Logged in the NestJS Logger" width="730" height="105"    /><noscript><img               class="aligncenter size-full wp-image-166716" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-logger.png" alt="Interceptors Logged in the NestJS Logger" width="730" height="105"  /></noscript></p>
<p>When we call this <code>logger</code> endpoint and check our terminal, we will see the logs of the request method (<code>GET</code>). We will see the URL that was called (<code>/logger</code>). We will also see the in-built <code>logger</code> method logging the time it takes for the request to be completed (<code>2ms</code>) in the <code>map</code> operator. Having the data on how long it takes the client to make a complete request to an endpoint can be useful for application performance and debugging purposes.</p>
<h3 id="data-validation">Data validation</h3>
<p>Remember we mentioned that we could intercept the client request before it gets to the server and the response is processed? Well, a good use case of this is <a href="https://blog.logrocket.com/nestjs-data-dynamoose/">data validation</a>. Let’s say we have a <code>POST</code> route handler that saves the details of a user into a database. We can use an interceptor to intercept the client request and ensure it meets our predefined criteria. Say we want <code>first_name</code> and <code>last_name</code> to be compulsory for users that call the <code>POST</code> endpoint.</p>
<p>Before the request is processed and saved to the database, we can make the interceptor enforce the client to ensure they enter the <code>first_name</code> and <code>last_name</code>. Only when this criterion is met can the request proceed to be processed. We will create a new <code>data-validation.interceptor.ts</code> file and do the implementation there:</p>
<pre class="language-typescript hljs">import {
 NestInterceptor,
 ExecutionContext,
 CallHandler,
 BadRequestException,
} from '@nestjs/common';
import { Observable, map } from 'rxjs';

export class DataValidationInterceptor implements NestInterceptor {
 intercept(context: ExecutionContext, handler: CallHandler): Observable&lt;any> {
   const req = context.switchToHttp().getRequest();
   if (!req.body.first_name || !req.body.last_name) {
     throw new BadRequestException(
       'Both First Name and Last Name are required',
     );
   }

   const { first_name, last_name } = req.body;

   return handler
     .handle()
     .pipe(map((data) => ({ data, first_name, last_name })));
 }
}
</pre>
<p>Here, we get the <code>req</code> object using the <code>context.switchToHttp().getRequest()</code> method. In the <code>request</code> object, we have access to the <code>request body object</code>, where we make our validation check. If there is no <code>first_name</code> or <code>last_name</code> in the <code>request body</code>, then the request should not be processed, and a <code>Bad Request</code> error should be thrown telling the client to enter both <code>first_name</code> and <code>last_name</code>.</p>
<p>Furthermore, if the <code>request body</code> contains both values, the request should be processed without error. Now, let’s bind this interceptor to our <code>Post</code> route in the <code>app.controller.ts</code> file:</p>
<pre class="language-typescript hljs">@Post('/validation')
 @UseInterceptors(DataValidationInterceptor)
 getUsersValidation() {
   return 'Data Validated';
 }
</pre>
<p><img             class="aligncenter size-full wp-image-166703 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-validation-two.png" alt="NestJS Validation Step Two" width="730" height="337"    /><noscript><img               class="aligncenter size-full wp-image-166703" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-validation-two.png" alt="NestJS Validation Step Two" width="730" height="337"  /></noscript></p>
<p><img             class="aligncenter size-full wp-image-166705 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-validation-three.png" alt="NestJS Validation Step Three" width="730" height="335"    /><noscript><img               class="aligncenter size-full wp-image-166705" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-validation-three.png" alt="NestJS Validation Step Three" width="730" height="335"  /></noscript></p>
<p>Here, we can see that when we make the request in the first image, a <code>400 bad request error</code> is thrown. This error message clearly states that we need to pass in the <code>first_name</code> and <code>last_name</code>. When both fields were passed in the second image, the request was processed, and a <code>success</code> response was returned. This is how we can use interceptors for data validation in NestJS applications.</p>
<h3 id="authentication-authorization">Authentication and authorization</h3>
<p>The third use case of interceptors is authorization and authentication. When building backend applications, we often want to protect the routes in our application so that only authorized data can use or call the endpoints. To implement an <code>Auth Interceptor</code> in NestJS, we will create a new file in the <code>interceptors</code> folder called <code>auth.interceptors.ts</code> and implement it as follows:</p>
<pre class="language-typescript hljs">import {
 CallHandler,
 ExecutionContext,
 NestInterceptor,
 UnauthorizedException,
} from '@nestjs/common';
import { Observable } from 'rxjs';

export class AuthInterceptor implements NestInterceptor {
 intercept(context: ExecutionContext, handler: CallHandler): Observable&lt;any> {
   const req = context.switchToHttp().getRequest();
   const authHeader = req.headers.authorization;
   const token = authHeader &amp;&amp; authHeader.split(' ')[1];

   console.log('token', token);
   console.log('auth', authHeader);
   if (!token) {
     throw new UnauthorizedException('No token provided');
   }
   return handler.handle();
 }
}
</pre>
<p>Like the data validation use case where we can access the body of a request from the <code>request</code> object, we can also access the <code>request</code> header from the <code>request</code> object. First, we get the <code>request</code> from the <code>context</code> method and then store the <code>request</code> header authorization value present in any incoming request in a <code>token</code> variable.</p>
<p>Afterward, we check if there is no token in the authorization header. Then, we throw an <code>UnauthorizedExecption</code> error, which means the user is not authorized. If there is a valid token, then the request is processed.</p>
<p>Let’s bind this interceptor in our <code>controller</code> file and see how it works. Of course, it is an <code>auth interceptor</code>. It will only make sense if we use the controller-scoped method of binding. So, the <code>auth</code> will be applied to any route called within this controller, as shown below:</p>
<pre class="language-typescript hljs">@Controller()
@UseInterceptors(AuthInterceptor)
export class AppController {
 constructor(private readonly appService: AppService) {}
</pre>
<p><img             class="aligncenter size-full wp-image-166707 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-one.png" alt="NestJS Interceptor Host Part One" width="730" height="342"    /><noscript><img               class="aligncenter size-full wp-image-166707" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-one.png" alt="NestJS Interceptor Host Part One" width="730" height="342"  /></noscript></p>
<p><img             class="aligncenter size-full wp-image-166710 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-two.png" alt="NestJS Interceptor Host Part Two" width="730" height="470"    /><noscript><img               class="aligncenter size-full wp-image-166710" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-two.png" alt="NestJS Interceptor Host Part Two" width="730" height="470"  /></noscript></p>
<p>Here, we are making an API call to the <code>getUsers</code> route. When we provided no <code>auth</code> in the first illustration, it threw an unauthorized error. However, after passing in a <code>bearer</code> token in the authorization header, we returned our normal response.</p>
<h3 id="exception-mapping">Exception mapping</h3>
<p>Another use case of NestJS interceptors is exception mapping. This is basically overriding the predefined exceptions using the <a href="https://blog.logrocket.com/understanding-rxjs-observables/">RxJS</a> operator called <code>catchError()</code>. Here’s what that looks like:</p>
<pre class="language-typescript hljs">import {
 BadRequestException,
 CallHandler,
 ExecutionContext,
 NestInterceptor,
} from '@nestjs/common';
import { catchError, throwError } from 'rxjs';

export class ExceptionInterceptor implements NestInterceptor {
 intercept(context: ExecutionContext, handler: CallHandler): any {
   return handler
     .handle()
     .pipe(catchError((err) => throwError(() => new BadRequestException())));
 }
}
</pre>
<p>Here’s the code for <code>App.module.ts</code>:</p>
<pre class="language-typescript hljs"> @Get('/exception')
 @UseInterceptors(ExceptionInterceptor)
 getUsersException() {
    throw new UnprocessableEntityException();
 }
</pre>
<p><img             class="aligncenter size-full wp-image-166712 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-three.png" alt="NestJS Interceptor Host Part Three" width="730" height="375"    /><noscript><img               class="aligncenter size-full wp-image-166712" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-three.png" alt="NestJS Interceptor Host Part Three" width="730" height="375"  /></noscript></p>
<p><img             class="aligncenter size-full wp-image-166714 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-four.png" alt="NestJS Interceptor Host Part Four" width="730" height="348"    /><noscript><img               class="aligncenter size-full wp-image-166714" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nest-js-interceptors-host-four.png" alt="NestJS Interceptor Host Part Four" width="730" height="348"  /></noscript></p>
<p>The first illustration shows that the <code>getUsersException</code> method throws an <code>Unprocessable entity error</code> when called. We can override the default exception thrown with exception mapping, as shown in the second illustration.</p>
<h2>Conclusion</h2>
<p>In this tutorial, we have learned what interceptors are in NestJS, how powerful they are to the request-response cycle, and their use cases when building a NestJS application. With interceptors, you can make your applications more scalable and efficient and ensure that the application data is secured and consistent. You can find the source code used in this article <a href="https://github.com/Taofiqq/nest-interceptors">here</a>.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166686" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166686" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166686" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/06/taofiq-aiyelabegan.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/06/taofiq-aiyelabegan.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/taofiqaiyelabegan/">
Taofiq Aiyelabegan <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Taofiq is a technical writer and software engineer working on building mobile and web applications. Additionally, he likes to contribute to open source projects and exploring new topics.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/nestjs/">#nestjs</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/product-management/problem-statement-template-examples/" rel="prev">How to write a problem statement: Template and examples</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/product-development-manager-role-job-description/" rel="next">Product development manager: Role, responsibilities, job description</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/nestjs-interceptors-guide-use-cases/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Next.js font optimization: Adding custom and Google fonts - LogRocket Blog</title>
			<link>https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Next.js font optimization: Adding custom and Google fonts - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/">Next.js font optimization: Adding custom and Google fonts - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-153299 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-nextjs" id="post-153299">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ibadehinmojeed/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ibadehinmojeed/">
Ibadehin Mojeed <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an advocate of project-based learning. I also write technical content around web development.</span>
</div>
</div>
<h1 class="posttitle">Next.js font optimization: Adding custom and Google fonts</h1>
<p>
<span class="post-date"><time class="post-date">
March 30, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">12 min read</span>
<span class="wordcount">3635</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/12/Next-js-font-optimization-custom-Google-fonts.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Next Js Font Optimization Adding Custom And Google Fonts"                /> <article class="article-post">
<p><em><strong>Editor’s note:</strong> This article was updated on 30 March 2023 to include information on FOIT (flash of invisible text), reusing fonts, and relevant details (pertaining to Google Fonts) on improving privacy for sites subject to GDPR.</em></p>
<p>How we load fonts in our web project can make or break the user’s experience. With system fonts, we are guaranteed that text will render at the earliest possible time. But we may not desire these font types, and more importantly, they are not consistent between operating systems.</p>
<p>Web fonts, on the other hand, allow us to maintain a consistent look. Adding web fonts can be a simple task. However, it can also become tedious if we care about performance optimization.</p>
<p>One issue associated with web fonts that are hosted with font delivery services like Google Fonts is the cost of external network requests. While we can greatly reduce this incurred cost by self-hosting the fonts, we also have the issue of layout shift to deal with.</p>
<p>Next.js v13 introduced a font system called <code>next/font</code> to help abstract the complexity of optimizing fonts. This article covers how to use this font system to add custom fonts and Google Fonts in a Next.js project as well as to optimize the font loading experience.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#adding-fonts-next-js">Adding fonts in Next.js</a>
<ul >
<li><a href="#creating-your-project">Creating your project</a></li>
<li><a href="#understanding-font-rendering-process">Understanding the font rendering process</a></li>
</ul>
</li>
<li><a href="#how-next-font-system-helps-font-optimization-next-js">How the <code>next/font</code> system helps with font optimization in Next.js</a></li>
<li><a href="#adding-google-fonts-next-font">Adding Google Fonts with <code>next/font</code></a>
<ul >
<li><a href="#adding-font-single-page">Adding font on a single page</a></li>
<li><a href="#applying-font-styles">Applying font styles</a></li>
<li><a href="#reusing-fonts">Reusing fonts</a></li>
<li><a href="#adding-multiple-fonts">Adding multiple fonts</a></li>
<li><a href="#using-style-prop">Using the <code>style</code> prop</a></li>
<li><a href="#adding-non-variable-fonts">Adding non-variable fonts</a></li>
<li><a href="#adding-global-font-style">Adding a global font style</a></li>
<li><a href="#injecting-fonts-head">Injecting fonts in the <code>&lt;head></code></a></li>
<li><a href="#declaring-global-font-css-variables-syntax">Declaring global font with CSS variables syntax</a></li>
<li><a href="#using-variable-key-option">Using the <code>variable</code> key option</a></li>
</ul>
</li>
<li><a href="#adding-custom-fonts-next-js">Adding custom fonts in Next.js</a>
<ul >
<li><a href="#using-locally-configured-fonts">Using locally configured fonts</a></li>
</ul>
</li>
<li><a href="#adding-fonts-next-js-tailwind-css">Adding fonts to Next.js with Tailwind CSS</a>
<ul >
<li><a href="#configuring-tailwind-config-js-file">Configuring <code>tailwind.config.js</code> file</a></li>
</ul>
</li>
</ul>
<p>See the <a href="https://next-js-fonts-optimization.vercel.app/">demo project here</a>. You can interact with the project to see how page elements render different fonts. Here is the <a href="https://github.com/Ibaslogic/Next.js-fonts-optimization">project source code</a>.</p>
<p>Now, let’s dive in.</p>
<h2 id="adding-fonts-next-js">Adding fonts in Next.js</h2>
<p><a href="https://blog.logrocket.com/how-to-use-web-fonts-css/">Adding web fonts like Google Fonts</a> in a Next.js application can be as simple as embedding <code>&lt;link></code> tags generated from the font delivery service into the <code>Head</code>component of the <code>pages/_document.js</code> file.</p>
<h3 id="creating-your-project">Creating your project</h3>
<p>If you don’t have a Next.js project, start by creating one with the following command:</p>
<pre class="language-bash hljs">npx <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="94f7e6f1f5e0f1b9faf1ece0b9f5e4e4d4f8f5e0f1e7e0">[email protected]</a> nextjs-fonts 
cd nextjs-fonts
</pre>
<p>Then, run your build process with <code>npm run dev</code>.</p>
<p>Now, add the following <code>Home</code> component in the <code>pages/index.js</code> file:</p>
<pre class="language-javascript hljs">export default function Home() {
  return (
    &lt;div>
      &lt;h1>Home page&lt;/h1>
    &lt;/div>
  );
}
</pre>
<p>Let’s implement <a href="https://fonts.google.com/knowledge/glossary/variable_fonts">a variable font</a> called “<a href="https://fonts.google.com/specimen/Dancing+Script?query=danc&amp;vfonly=true">Dancing Script</a>” from Google Fonts by adding <code>&lt;link></code> tags provided by the font delivery service into the <a href="https://github.com/Ibaslogic/Next.js-fonts-optimization/blob/main/pages/_document.js"><code>Head</code>component</a> of the <code>pages/_document.js</code> file, like so:</p>
<pre class="language-javascript hljs">&lt;Head>
  {/* preconnect scripts... */}
  &lt;link
    href="https://fonts.googleapis.com/css2?family=Dancing+Script:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f681919e82b6c2c6c6d8d8c1c6c6">[email protected]</a>&amp;display=swap"
    rel="stylesheet"
  />
&lt;/Head>
</pre>
<p>After that, we will update the font family in the <code>styles/globals.css</code> file:</p>
<pre class="language-css hljs">body {
  /* ... */
  font-family: 'Dancing Script', 'Helvetica Neue', cursive;
}
</pre>
<p>The output looks like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img1-Dancing-Script-font-embedded-Link-tag.png" alt="Browser Opened To Localhost In Light Mode With Text In Dancing Script Font Reading Home Page" width="730" height="358"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img1-Dancing-Script-font-embedded-Link-tag.png" alt="Browser Opened To Localhost In Light Mode With Text In Dancing Script Font Reading Home Page" width="730" height="358"/></noscript></p>
<p>That is easy, right? Let’s see the problem with this implementation in the next section.</p>
<h3 id="understanding-font-rendering-process">Understanding the font rendering process</h3>
<p>Ideally, when a web font is applied to a web document, the browser will start downloading the font after parsing the HTML. This happens right before the text is rendered.</p>
<p>While we expect the font to load and render quickly, that is not always the case. It may take some extra seconds for the fonts to load, especially when it involves an external request, as is the case with Google Fonts.</p>
<p>See the request URL below:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img2-Font-rendering-request-URL.png" alt="Browser Developer Pane Open In Dark Mode With Red Arrow Pointing To External Request Url For Font Rendering" width="730" height="383"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img2-Font-rendering-request-URL.png" alt="Browser Developer Pane Open In Dark Mode With Red Arrow Pointing To External Request Url For Font Rendering" width="730" height="383"/></noscript></p>
<p>So, pending the completion of the downloading font, we need to tell the browser how to behave with regard to the text content using the <code>font-display</code> CSS descriptor.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}</meta></div>
<p>By providing a value of <code>swap</code>, as we have seen with Google Fonts (the <code>display=swap</code> parameter in the URL will trigger a <code>font-display: swap</code>), we instruct the browser to render the page immediately with a fallback font and then swap the font with the web font after it has completely loaded.</p>
<p>This however triggers <a href="https://fonts.google.com/knowledge/glossary/fout">a flash of unstyled text</a>, otherwise called FOUT. That switching moment can cause a shift in the text layout when the font is changed. If we simulate a font request on a slower connection, the FOUT will behave like so:</p>
<p><img             class="aligncenter wp-image-167553 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/fout-flsh-of-unstyled-text.gif" alt="FLOUT Flash Of Unstyled Text" width="600" height="289"  /><noscript><img               class="aligncenter wp-image-167553 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/fout-flsh-of-unstyled-text.gif" alt="FLOUT Flash Of Unstyled Text" width="600" height="289"/></noscript></p>
<p>Apart from the value of <code>swap</code>, other possible values for <code>font-display</code> include <code>auto</code>, <code>block</code>, <code>fallback</code>, and <code>optional</code>. With a value of <code>block</code>, we tell the browser to hide the text until the web font is fully loaded. This will trigger <a href="https://fonts.google.com/knowledge/glossary/foit">a flash of invisible text</a>, otherwise called FOIT, like that shown in the example below:</p>
<p><img             class="aligncenter wp-image-167555 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/foit-flash-of-invisible-text.gif" alt="FOIT Flash Of Invisible Text" width="600" height="289"  /><noscript><img               class="aligncenter wp-image-167555 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/foit-flash-of-invisible-text.gif" alt="FOIT Flash Of Invisible Text" width="600" height="289"/></noscript></p>
<p>Here, the browser delays rendering the text until the font is loaded. We’ve added a background color to the page so we know when the page is rendered while waiting to display the text.</p>
<p>Meanwhile, a default value of <code>auto</code> tells the browser to apply its default font rendering. This implementation differs across browsers.</p>
<p>For use cases where “content is king”, we usually prefer FOUT over FOIT so that users can read content as soon as possible.</p>
<p>Now that we know some of the issues with fonts loading, we can improve the loading experience using three strategies:</p>
<ol>
<li>Eliminate the external network request by serving the fonts locally from our domain</li>
<li>Preloading the font so that browser can schedule downloading it early</li>
<li>Use the CSS <code>size-adjust</code> property to reduce layout shifts when switching between fonts</li>
</ol>
<p>We can manually implement these optimization strategies, but let’s take a look at how Next.js 13 makes the process easier with the <code>next/font</code> system.</p>
<h2 id="how-next-font-system-helps-font-optimization-next-js">How the <code>next/font</code> system helps with font optimization in Next.js</h2>
<p>The <code>next/font</code> system is one of many powerful features introduced in Next.js 13. This font system significantly simplifies font optimization. It automatically self-hosts any Google Fonts by including them in deployment alongside other web components like HTML and CSS files.</p>
<p>Since no external request is involved by the browser, this implementation not only results in a faster load time, it also ensures we’re not <a href="https://thehackernews.com/2022/01/german-court-rules-websites-embedding.html">violating the European Union’s General Data Protection Regulation (GDPR)</a> by not transferring the user’s personal data to a third-party system like Google.</p>
<p>That is not the case when we embed the web font into the <code>&lt;head></code> as we’ve seen earlier.</p>
<p>In addition, the <code>next/font</code> system implements a strategy that prevents layout shift or significantly reduces the impact using the <a href="https://blog.logrocket.com/css-font-size-adjust-how-to/">CSS <code>size-adjust</code> property</a>.</p>
<h2 id="adding-google-fonts-next-font">Adding Google Fonts with <code>next/font</code></h2>
<p>Web fonts, including those from Google Fonts, can either be variable fonts or non-variable fonts. <a href="https://blog.logrocket.com/variable-fonts-is-the-performance-trade-off-worth-it/">A variable font has the advantage</a> of integrating many variations of a typeface into a single file. Next.js recommends this type of font over the non-variable type. So, let’s start with that.</p>
<h3 id="adding-font-single-page">Adding font on a single page</h3>
<p><a href="https://fonts.google.com/specimen/Dancing+Script?query=danc&amp;vfonly=true">Dancing Script from Google Fonts</a> is a type of variable font. If you added this font to your project earlier when we covered the <code>&lt;link></code> tags method, make sure you remove it before proceeding.</p>
<p>Now, let’s load Dancing Script using the <code>next/font</code> system. In the <code>pages/index.js</code> file, let’s import the font from <code>next/font/google</code> as a function and create a new instance of it:</p>
<pre class="language-javascript hljs">import { Dancing_Script } from 'next/font/google';
const dancingScript = Dancing_Script({ subsets: ['latin'] });

console.log(dancingScript);

export default function Home() {
  return (
    // ...
  );
}
</pre>
<p><strong><em>N.B.,</em></strong> <em>i</em><em>f a font name includes a space (for instance, “Dancing Script”), we must replace the space with an underscore (i.e</em> <code>*Dancing_Script*</code><em>)</em></p>
<p>In the code above, we assign the font instance to a <code>dancingScript</code> variable and log it to see what it returns. If we save the file and reload the page, we should see the returned object in the browser developer tools panel as well as in the terminal:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img3-Returned-object-dancingScript-variable-developer-tools-panel.png" alt="Browser Developer Tools Panel Showing Returned Object For Dancing Script Variable" width="730" height="128"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img3-Returned-object-dancingScript-variable-developer-tools-panel.png" alt="Browser Developer Tools Panel Showing Returned Object For Dancing Script Variable" width="730" height="128"/></noscript></p>
<p>The font loader returns an object containing options that we can use to apply the font style.</p>
<p>For optimization purposes, we subset the font to Latin. This strips out unrequired languages from the web font. Doing this ensures a preload link for the required font language is also added in the <code>&lt;head></code> element:</p>
<p><img             class="aligncenter wp-image-167550 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/subset-font-latin-stip-out-unrequired-languages.png" alt="Subset Font Latin Strip Out Unrequired Languages" width="720" height="210"    /><noscript><img               class="aligncenter wp-image-167550 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/subset-font-latin-stip-out-unrequired-languages.png" alt="Subset Font Latin Strip Out Unrequired Languages" width="720" height="210"  /></noscript></p>
<p>The preload suggests to the browser that it should schedule the font for early download.</p>
<p>If we recall, every font has a <code>font-display</code> property applied to it. By default, the value applied to fonts from the <code>next/font</code> system is <code>font-display:swap</code>. By combining the display implementation together with preloading the font and then the underlying CSS <code>size-adjust</code> property used by the Next.js font system, we’ll get the most effective result.</p>
<h3 id="applying-font-styles">Applying font styles</h3>
<p>As we saw earlier, the returned object contains the <code>className</code> property and a <code>style</code> object that we can use to apply the font. Using the <code>className</code>, we can apply a font to an element like so:</p>
<pre class="language-javascript hljs">export default function Home() {
  return (
    &lt;div>
      &lt;h1 className={dancingScript.className}>Home page&lt;/h1>
    &lt;/div>
  );
}
</pre>
<p>Now, we can save the file and restart the dev server.</p>
<p>If we check the frontend, we should see the font applied. Even if the font request is slower than expected, we will not experience a layout shift or a FOUT.</p>
<p>The browser developer tools shows that the request is within our infrastructure and not from a delivery service:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img5-Updated-request-URL-localhost.png" alt="Browser Developer Tools Panel With Red Arrow Pointing To Updated Request Url Showing Request Now Comes From Within Infrastructure" width="730" height="290"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img5-Updated-request-URL-localhost.png" alt="Browser Developer Tools Panel With Red Arrow Pointing To Updated Request Url Showing Request Now Comes From Within Infrastructure" width="730" height="290"/></noscript></p>
<h3 id="reusing-fonts">Reusing fonts</h3>
<p>If we want to use the “Dancing Script” font again in another file, say <code>pages/about.js</code>, we could call the font function in that file and use it as we did before. However, loading the same font function in multiple files is not advisable because:</p>
<ol>
<li>Updating the font becomes rigid; we would have to manually change the font in separate files instead of a single place</li>
<li>Multiple instances of the font are hosted</li>
</ol>
<p>In this scenario, the recommendation is to create a separate file where we load the font. Then, we can import the font in each file that requires it.</p>
<p>So, let’s create a <code>utils/fonts.js</code> file and export the “Dancing Script” font as a constant:</p>
<pre class="language-javascript hljs">import { Dancing_Script } from 'next/font/google';
export const dancingScript = Dancing_Script({ subsets: ['latin'] });
</pre>
<p>Save the file.</p>
<p>Now, we can reference the font from the <code>pages/index.js</code> and <code>pages/about.js</code> files:</p>
<pre class="language-javascript hljs">import { dancingScript } from '../utils/fonts';
</pre>
<h3 id="adding-multiple-fonts">Adding multiple fonts</h3>
<p>Adding multiple Next.js fonts using <code>next/font</code> is as simple as defining multiple font instances and applying the auto-generated classes to the document element.</p>
<p>In the <code>utils/fonts.js</code> file, let’s also import an <code>Oswald</code> variable font from Google and export it so we can use it in another file:</p>
<pre class="language-javascript hljs">import { Dancing_Script, Oswald } from 'next/font/google';

export const dancingScript = Dancing_Script({ subsets: ['latin'] });
export const oswald = Oswald({ subsets: ['latin'] });
</pre>
<p>Save the file and import the font in the <code>pages/index.js</code> file so we have the following:</p>
<pre class="language-javascript hljs">import { dancingScript, oswald } from '../utils/fonts';

export default function Home() {
  return (
    &lt;div className={oswald.className}>
      &lt;h1 className={dancingScript.className}>Home page&lt;/h1>
      &lt;p>This paragraph uses another font&lt;/p>
    &lt;/div>
  );
}
</pre>
<p>In the above code, we applied the <code>Oswald</code> variable font to the wrapper element to make it available for the child elements. The paragraph within the wrapper will inherit the font. Meanwhile, the font on theelement will override the wrapper font.</p>
<p>See the output below:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img6-Multiple-fonts-Next-js-developer-pane.png" alt="Browser Open To Localhost With Title Text In Dancing Script Font Reading Home Page Above Paragraph Text In Oswald Font. Developer Tools Panel Is Open With Red Arrow Pointing To Overridden Wrapper Font In H1" width="730" height="507"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img6-Multiple-fonts-Next-js-developer-pane.png" alt="Browser Open To Localhost With Title Text In Dancing Script Font Reading Home Page Above Paragraph Text In Oswald Font. Developer Tools Panel Is Open With Red Arrow Pointing To Overridden Wrapper Font In H1" width="730" height="507"/></noscript></p>
<h3 id="using-style-prop">Using the <code>style</code> prop</h3>
<p>We can also use the <code>style</code> option returned from the font loader to apply font via the <code>style</code> attribute. The following code uses the <code>style</code> option to apply a font to the wrapper element:</p>
<pre class="language-javascript hljs">export default function Home() {
  return (
    &lt;div style={oswald.style}>
      &lt;h1 className={dancingScript.className}>Home page&lt;/h1>
      &lt;p>This paragraph uses another font&lt;/p>
    &lt;/div>
  );
}
</pre>
<p>The above code will give us the same result as before.</p>
<h3 id="adding-non-variable-fonts">Adding non-variable fonts</h3>
<p>Unlike their variable counterparts, a non-variable font will require a <code>weight</code> option. The <code>weight</code> can be a string or an array of values.</p>
<p>An example of a <a href="https://fonts.google.com/specimen/Merriweather">non-variable font is Merriweather</a>, which is also available through Google Fonts. Let’s open the <code>utils/fonts.js</code> file and import it from <code>next/font/google</code> so that we can export an instance of it from the file:</p>
<pre class="language-javascript hljs">import {
  Dancing_Script,
  Oswald,
  Merriweather,
} from 'next/font/google';

// ...

export const merriweather = Merriweather({
  weight: ['300', '400', '700'],
  style: ['normal', 'italic'],
  subsets: ['latin'],
});
</pre>
<p>We added a required <code>weight</code> option and some optional <code>style</code> values in the font instance. If we save the file, we can now apply the generated class to a document element. Let’s do that in the <code>pages/index.js</code> file:</p>
<pre class="language-javascript hljs">import {
  // ...
  merriweather
} from '../utils/fonts';

export default function Home() {
  return (
   // ...
      &lt;p className={merriweather.className}>
        This text uses a non variable font
      &lt;/p>
    // ...
    &lt;/div>
  );
}
</pre>
<p>If we save the file, the font should apply.</p>
<h3 id="adding-global-font-style">Adding a global font style</h3>
<p>To apply a font throughout the entire web document, we will import the font in the <code>pages/_app.js</code> file and pass the generated class to the <code>Component</code> wrapper element, like so:</p>
<pre class="language-javascript hljs">import { Raleway } from 'next/font/google';
const raleway = Raleway({ subsets: ['latin'] });

function MyApp({ Component, pageProps }) {
  return (
    &lt;div className={raleway.className}>
      &lt;Component {...pageProps} />
    &lt;/div>
  );
}

export default MyApp;
</pre>
<p>In the code above, we imported a <code>Raleway</code> font, which is also a variable font. So, adding a <code>weight</code> option in the configuration is optional.</p>
<h3 id="injecting-fonts-head">Injecting fonts in the <code>&lt;head></code></h3>
<p>Another way to apply font across the document is by injecting the font in the <code>&lt;head></code>. In the <code>pages/_app.js</code> file, we can use the <code>&lt;style></code> tag before the <code>Component</code> to apply a global font:</p>
<pre class="language-javascript hljs">function MyApp({ Component, pageProps }) {
  return (
    &lt;>
      &lt;style jsx global>{`
        html {
          font-family: ${raleway.style.fontFamily};
        }
      `}&lt;/style>
      &lt;Component {...pageProps} />
    &lt;/>
  );
}

export default MyApp;
</pre>
<p>Remember, we have access to the font family from the <code>style</code> object.</p>
<h3 id="declaring-global-font-css-variables-syntax">Declaring global font with CSS variables syntax</h3>
<p>The syntax for <a href="https://blog.logrocket.com/how-to-use-css-variables-like-a-pro/">CSS variables provides the flexibility</a> of declaring multiple fonts in a stylesheet. The following code imports two different fonts in the <code>pages/_app.js</code> file, which we then used to declare global CSS variables:</p>
<pre class="language-javascript hljs">import { Raleway, IBM_Plex_Sans } from 'next/font/google';

const raleway = Raleway({ subsets: ['latin'] });
const ibmSans = IBM_Plex_Sans({
  weight: '700',
  subsets: ['latin'],
});

function MyApp({ Component, pageProps }) {
  return (
    &lt;>
      &lt;style jsx global>{`
        :root {
          --raleway-font: ${raleway.style.fontFamily};
          --ibmSans-font: ${ibmSans.style.fontFamily};
        }
      `}&lt;/style>
      &lt;Component {...pageProps} />
    &lt;/>
  );
}

export default MyApp;
</pre>
<p>The <code>:root</code> pseudo-class in the code will select the root element — i.e., the <code>&lt;html></code>.<br/>
Now, we can apply the CSS variables in a CSS file. The below code applies the variables in a <code>styles/globals.css</code> file:</p>
<pre class="language-css hljs">body {
  font-family: var(--raleway-font);
}

h1, h2, h3 {
  font-family: var(--ibmSans-font);
}
</pre>
<h3 id="using-variable-key-option">Using the <code>variable</code> key option</h3>
<p>While creating a font instance, we can also add a <code>variable</code> key that lets us declare a CSS variable. This option lets us easily use fonts with Tailwind CSS and CSS modules without using the global <code>&lt;style></code> syntax.</p>
<p>The following code declares a CSS variable called <code>--antonio-font</code> via the <code>variable</code> key option:</p>
<pre class="language-css hljs">const antonio = Antonio({
  subsets: ['latin'],
  variable: '--antonio-font',
});
</pre>
<p>If we log the result, we should see the returned object containing a <code>variable</code> property that will let us access the font:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img7-Returned-object-antonio-font-CSS-variable.png" alt="Browser Developer Tools Panel Showing Returned Object For Antonio Font Variable" width="730" height="146"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img7-Returned-object-antonio-font-CSS-variable.png" alt="Browser Developer Tools Panel Showing Returned Object For Antonio Font Variable" width="730" height="146"/></noscript></p>
<p>We can now apply the variable name via a <code>className</code> attribute on a container element. If we declare a global font in the <code>pages/_app.js</code> file, the <code>Component</code>wrapper should look like this:</p>
<pre class="language-javascript hljs">&lt;div className={antonio.variable}>
  &lt;Component {...pageProps} />
&lt;/div>
</pre>
<p>From here, we can use the font with Tailwind CSS — as you will see later in this article — or <a href="https://blog.logrocket.com/a-deep-dive-into-css-modules/">with CSS modules</a>. For CSS modules, let’s say we have an <code>About</code> page component that uses this module, like so:</p>
<pre class="language-css hljs">import styles from './About.module.css';

const About = () => {
  return (
    &lt;div>
      &lt;h1>About page&lt;/h1>
      &lt;p className={styles.text}>This is about page content&lt;/p>
    &lt;/div>
  );
};

export default About;
</pre>
<p>We can use the CSS variable that we declared earlier to access the font in the <code>About.module.css</code> file, like so:</p>
<pre class="language-css hljs">.text {
  font-family: var(--antonio-font);
  font-style: italic;
}
</pre>
<h2 id="adding-custom-fonts-next-js">Adding custom fonts in Next.js</h2>
<p>In some scenarios, the font we want to use in Next.js may not be from Google Fonts. Instead, it could be a custom font that we created, a font that we bought, or one that we downloaded from another font site.</p>
<p>We can use any of these fonts locally by configuring them using the <code>next/font/local</code>. We will demonstrate how to do so by downloading a font called <a href="https://www.fontsquirrel.com/fonts/cooper-hewitt">Cooper Hewitt</a> from Font Squirrel.</p>
<p>The Cooper Hewitt font doesn’t come in the more modern and well-compressed <code>.woff2</code> format. As a result, our first step is to convert it using the <a href="https://www.fontsquirrel.com/tools/webfont-generator">Font</a> <a href="https://www.fontsquirrel.com/tools/webfont-generator">SquirrelWebfont</a> <a href="https://www.fontsquirrel.com/tools/webfont-generator">Generator</a>. Then, we will add the <code>bold</code> and <code>normal</code> weight variations of the font to our project’s <code>[public/fonts](https://github.com/Ibaslogic/Next.js-fonts-optimization/tree/main/public/fonts)</code> folder:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img8-Custom-fonts-Next-js-Cooper-Hewitt-weight-variations.png" alt="Project File Structure With Public Folder Open To Show Fonts Subfolder, Which Is Also Open And Contains Two Cooper Hewitt Font Variations" width="730" height="176"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/12/img8-Custom-fonts-Next-js-Cooper-Hewitt-weight-variations.png" alt="Project File Structure With Public Folder Open To Show Fonts Subfolder, Which Is Also Open And Contains Two Cooper Hewitt Font Variations" width="730" height="176"/></noscript></p>
<h3 id="using-locally-configured-fonts">Using locally configured fonts</h3>
<p>Similar to using Google Fonts with Next.js, we can load the local fonts across the entire document or use them for a specific page. To load the local fonts sitewide, we will import the font loader from <code>next/font/local</code> in the <code>pages/_app.js</code> file:</p>
<pre class="language-javascript hljs">import localFont from 'next/font/local';
</pre>
<p>Next, we will define a new instance where we specify the <code>src</code> of the local font files as an array of objects:</p>
<pre class="language-javascript hljs">const cooper = localFont({
  src: [
    {
      path: '../public/fonts/cooperhewitt-book-webfont.woff2',
      weight: '400',
    },
    {
      path: '../public/fonts/cooperhewitt-bold-webfont.woff2',
      weight: '700',
    },
  ],
});
</pre>
<p>Each of the objects represents the font for a specific weight. If we use a variable font, we can instead specify the <code>src</code> as a string, like so:</p>
<pre class="language-javascript hljs">const variableFont = localFont({ src: '../public/fonts/my-variable-font.woff2' });
</pre>
<p>From this point, how we apply the font styles is the same as the method used for Google Fonts that we covered earlier. We can use either the <code>className</code> syntax, <code>style</code>, or CSS variables.</p>
<p>Let’s declare a CSS variable for the local font globally with the <code>&lt;style></code> syntax:</p>
<pre class="language-css hljs">function MyApp({ Component, pageProps }) {
  return (
    &lt;>
      &lt;style jsx global>{`
        :root {
          /* ... */
          --cooper-font: ${cooper.style.fontFamily};
        }
      `}&lt;/style>
      &lt;Component {...pageProps} />
    &lt;/>
  );
}
</pre>
<p>We can now use the <code>--cooper-font</code> CSS variable in the components stylesheet. Let’s say we have a <code>Contact</code> page component, like so:</p>
<pre class="language-css hljs">import styles from './Contact.module.css';

const contact = () => {
  return (
    &lt;div className={styles.contact}>
      &lt;h1>Contact page&lt;/h1>
      &lt;p>This is contact content uses a local font&lt;/p>
    &lt;/div>
  );
};

export default contact;
</pre>
<p>We can use the CSS variable to access the font in the <code>Contact.module.css</code> file:</p>
<pre class="language-css hljs">.contact > *{
  font-family: var(--cooper-font);
}
</pre>
<h2 id="adding-fonts-next-js-tailwind-css">Adding fonts to Next.js with Tailwind CSS</h2>
<p>To use the <code>next/font</code> package <a href="https://blog.logrocket.com/how-to-use-custom-fonts-tailwind-css/">with Tailwind CSS</a>, we will use the CSS variable syntax. Fortunately, we have already declared a couple of CSS variables in the <code>pages/_app.js</code> file.</p>
<p>Recall how earlier, we injected the following in the <code>&lt;head></code>:</p>
<pre class="language-javascript hljs">&lt;style jsx global>{`
  :root {
    --raleway-font: ${raleway.style.fontFamily};
    --ibmSans-font: ${ibmSans.style.fontFamily};
    --cooper-font: ${cooper.style.fontFamily};
  }
`}&lt;/style>
</pre>
<p>We also defined a CSS variable name with the <code>variable</code> option:</p>
<pre class="language-css hljs">const antonio = Antonio({
  subsets: ['latin'],
  variable: '--antonio-font',
});
</pre>
<p>We can use any of these CSS variable declarations to add Next.js fonts with Tailwind CSS.</p>
<h3 id="configuring-tailwind-config-js-file">Configuring <code>tailwind.config.js</code> file</h3>
<p>Let’s add the CSS variables as a font family in the Tailwind CSS configuration file:</p>
<pre class="language-css hljs">const { fontFamily } = require('tailwindcss/defaultTheme');

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        antonio: ['var(--antonio-font)', ...fontFamily.sans],
        ibm: ['var(--ibmSans-font)', ...fontFamily.sans],
        cooper: ['var(--cooper-font)', 'ui-serif', 'Georgia'],
      },
    },
  },
  plugins: [],
};
</pre>
<p>We can now use <code>font-antonio</code>, <code>font-ibm</code>, and <code>font-cooper</code> utility class names to apply the fonts. A component that implements these utilities will look like this:</p>
<pre class="language-javascript hljs">const Tailwind = () => {
  return (
    &lt;div>
      &lt;h1 className="font-ibm">With Tailwind CSS&lt;/h1>
      &lt;p className="font-antonio">This is a first paragraph&lt;/p>
      &lt;p className="font-cooper">This is a second paragraph&lt;/p>
    &lt;/div>
  );
};

export default Tailwind;
</pre>
<p>If we want to apply one of the utilities (for instance, <code>font-cooper</code>) globally to the document, we can add it as <code>className</code> to the <code>Component</code> wrapper element in the <code>pages/_app.js</code> file:</p>
<pre class="language-javascript hljs">function MyApp({ Component, pageProps }) {
  return (
    &lt;>
      {/* ... */}
      &lt;div className={`${antonio.variable} font-cooper`}>
        &lt;Component {...pageProps} />
      &lt;/div>
    &lt;/>
  );
}

export default MyApp;
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>As we have seen in this article, the <code>next/font</code> system introduced in Next.js v13 simplifies font optimization by abstracting its complexity. We have used this system to add both custom and Google Fonts font families in a Next.js application.</p>
<p><a href="https://next-js-fonts-optimization.vercel.app/">In our demo project</a>, we added multiple fonts to help demonstrate the various methods for using fonts in Next.js. However, in a production site, we should consider minimizing the number of fonts to preload.</p>
<p>I hope you enjoyed this article. If you have questions or contributions, share your thoughts in the comment section. See the <a href="https://github.com/Ibaslogic/Next.js-fonts-optimization">complete source code for the project on GitHub</a>.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-153299" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-153299" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-153299" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ibadehinmojeed/">
Ibadehin Mojeed <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an advocate of project-based learning. I also write technical content around web development.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/nextjs/">#nextjs</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/build-real-time-vue-app-websockets/" rel="prev">How to build a real-time Vue app with WebSockets</a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/build-blockchain-with-go/" rel="next">How to build a blockchain with Go</a> &amp;raquo;</div></div>
</div>
</div>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/next-js-font-optimization-custom-google-fonts/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Next.js vs. Nuxt.js: Ultimate guide - LogRocket Blog</title>
			<link>https://blog.logrocket.com/next-js-vs-nuxt-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/next-js-vs-nuxt-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Next.js vs. Nuxt.js: Ultimate guide - LogRocket Blog</h1>
<a href="https://blog.logrocket.com/next-js-vs-nuxt-js/">Next.js vs. Nuxt.js: Ultimate guide - LogRocket Blog</a>
<div class="col-md-8 flex-first flex-md-unordered post-153148 post type-post status-publish format-standard has-post-thumbnail hentry category-uncategorized tag-nextjs tag-nuxtjs" id="post-153148">
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/judemiracle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/judemiracle/">
Jude Miracle <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer passionate about the Web3 ecosystem and love to spend time learning and tinkering with new tools and technologies.</span>
</div>
</div>
<h1 class="posttitle">Next.js vs. Nuxt.js: Ultimate guide</h1>
<p>
<span class="post-date"><time class="post-date">
April 11, 2023 </p></span>
<span class="dot"/>
<span class="readingtime">13 min read</span>
<span class="wordcount">3784</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<img width="730" height="487" src="https://blog.logrocket.com/wp-content/uploads/2022/12/next-js-vs-nuxt-js-1.png" class="featured-image img-fluid wp-post-image jetpack-lazy-image" alt="Next.js vs. Nuxt.js: Ultimate guide"                /> <article class="article-post">
<p><em><strong>Editor’s Note:</strong> This post was reviewed for accuracy on 11 April 2023. Since publication, Next.js v13.3 was released with features such as <a href="https://nextjs.org/blog/next-13-3">the file-based Metadata API, dynamic open graph images, and static export for the <code>app</code> router</a>. Nuxt.js also released v3.3, <a href="https://nuxt.com/blog/v3-3">which includes minor feature updates</a>. You can read more about <a href="https://blog.logrocket.com/tag/nuxtjs/">Nuxt.js</a> and <a href="https://blog.logrocket.com/tag/nextjs/">Next.js</a> in our archive.</em></p>
<p>With the constant emergence of new tools and technologies in the web development ecosystem, it can be challenging for an aspiring developer to choose a particular language, tool, or framework. As an experienced developer, it is essential to have a quality tech stack and constantly evaluate which of these many tech stacks is best for you and your team.</p>
<p>Next.js and Nuxt.js are modern JavaScript frameworks used to build modern web applications. Both are static site generators that embrace Jamstack architecture and are used on top of React and Vue, respectively.</p>
<p>Next.js is a React-based framework created by Vercel and used to build performant static web applications. Next.js offers client-side and server-side rendering features and is used to develop fullstack React applications. On the other hand, Nuxt.js is an open source Vue-based framework used to build complex and universal Vue applications that take advantage of the best technologies in a fast, easy, and organized way.</p>
<p>Aside from their similar names, these two frameworks share many similarities and provide comprehensive support for building web applications. By the article’s conclusion, you will have a good understanding of the differences between Next.js and Nuxt.js and will be able to make an informed decision on which framework is best for you.</p>
<p>This article provides an overview of two Jamstack frameworks: Next.js and Nuxt.js, including their pros, cons, features, and use cases.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#next-js">What is Next.js?</a></li>
<li><a href="#next-js-use-cases">Next.js use cases</a></li>
<li><a href="#pros-next-js">Pros of using Next.js</a></li>
<li><a href="#cons-next-js">Cons of using Next.js</a></li>
<li><a href="#getting-started-next-js">Getting started with Next.js</a></li>
<li><a href="#nuxt-js">What is Nuxt.js?</a></li>
<li><a href="#nuxt-js-use-cases">Nuxt.js use cases</a></li>
<li><a href="#pros-nuxt-js">Pros of using Nuxt.js</a></li>
<li><a href="#cons-nuxt-js">Cons of using Nuxt.js</a></li>
<li><a href="#getting-started-nuxt-js">Getting started with Nuxt.js</a></li>
<li><a href="#comparing-next-js-nuxt-js">Comparing Next.js and Nuxt.js</a></li>
</ul>
<h2 id="next-js">What is Next.js?</h2>
<p>Next.js is an open source, React-based framework that lets you create hybrid apps that combine server-rendered and statically generated web pages using React. Its authors tout it as a zero-configuration, single-command toolchain for React projects. Next.js enables developers to use React to make exceptionally user-friendly websites and applications that are highly functional.</p>
<h2 id="next-js-features">Next.js features</h2>
<p>For the creation of static websites and online applications, Next.js offers some incredible features:</p>
<h3 id="file-based-system-routing">File-based system routing</h3>
<p>In Next.js, a page is a React component that routes based on its file name. To enable routing in our Next app, Next.js uses a file-based system. It automatically treats every file within the <code>pages</code> folder as a route. Next.js has different route patterns:</p>
<ul>
<li><strong>Index routes</strong>: Next.js router automatically serves files named <code>index</code> in the <code>pages</code> folder as the default route for each directory:
<pre class="language-javascript hljs">next-app
└── pages
└── index.js // path: base-url (/)

next-app
└── pages
└── blog.js // path: /blog</pre>
</li>
<li><strong>Nested routes</strong>: Next.js allows you to create nested routes. By defining the nested folder structure, the files will automatically be routed. Nested routes help eliminate path redundancy:
<pre class="language-javascript hljs">next-app
└── pages
├── index.js // top index route
└── posts // nested route
└── index.js // path: /posts</pre>
</li>
<li><strong>Dynamic segment routes</strong>: using brackets <code>([param])</code>, Next.js allows you to define dynamic routes for your app. You can use a dynamic name on your pages in place of one that is static:
<pre class="language-javascript hljs">next-app
└── pages
├── index.js // top index route
└── blog
└── [slug].js // path: /blog/:slug</pre>
</li>
</ul>
<p>Find out more about how the routes operate by looking at the <a href="https://nextjs.org/docs/routing/introduction">documentation</a>:</p>
<blockquote><p>Next.js v13 changes how many operations were previously performed. It still supports the same file system-based routing, which uses the <code>pages</code> directory, but it is used for client-side routing. It adopted a new way of routing using the <code>app</code> directory which is used for server-side routing. Learn more about Next v13 <a href="https://beta.nextjs.org/docs/routing/fundamentals">routing</a>.</p></blockquote>
<h3 id="rendering">Rendering</h3>
<p>Data fetching in Next.js allows you to render your data in different ways, depending on the use case of your application. These include server-side rendering, static generation for pre-rendering, and incremental static regeneration for updating or producing content during runtime.</p>
<p>To make your application more efficient on the client side, Next.js uses the server-side rendering technique to offload any data fetching to the server. Next.js allows data to be fetched on the server and send a pre-built page with all the necessary data requested by the client.</p>
<p>We can prevent problems like a fluttering page while data is being fetched using SSR in Next.js, and the content of our website will be SEO-friendly.</p>
<h3 id="prefetching">Prefetching</h3>
<p>Next.js provides a wide range of built-in capabilities that help improve your app. Next.js offers many React components. For example, Next.js uses the <code><a href="https://nextjs.org/docs/api-reference/next/link">next/link</a></code> component to link different pages and pre-fetch and pre-load the next pages a user might visit.</p>
<p>Next.js also offers other built-in React components such as the <code><a href="https://nextjs.org/docs/api-reference/next/image">next/image</a></code> component for image optimization, the <code><a href="https://nextjs.org/docs/api-reference/next/script">next/script</a></code> component for script loading strategies, and the <code><a href="https://nextjs.org/docs/basic-features/font-optimization">next/font</a></code> component for automatic font optimization. The ability to quickly include custom fonts and better privacy and speed are all provided without making any external network calls.</p>
<h3 id="automatic-code-splitting">Automatic code splitting</h3>
<p>To ensure faster page loads in your app, Next.js automatically splits our app into different resources instead of generating a single JavaScript file containing all the app code. It bundles and delivers only the JavaScript and libraries required to render every page the code imports.</p>
<h3 id="ecosystem-compatibility">Ecosystem compatibility</h3>
<p>Next.js works well with JavaScript, Node.js, and React ecosystems. It uses these technologies to broaden its full-stack capabilities. Next.js helps React developers easily add backend code to their projects. It is simple to add code for storing data, getting data, authentication, etc.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<style>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0