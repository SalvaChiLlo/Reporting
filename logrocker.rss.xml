
  <rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:georss="http://www.georss.org/georss"
    xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">
  
    <channel>
      <title>LogRocker Engineering Blog</title>
      <atom:link href="https://raw.githubusercontent.com/SalvaChiLlo/Reporting/main/logrocker.rss.xml" rel="self" type="application/rss+xml" />
      <link>https://LogRocker.engineering/</link>
      <description>The official blog of the LogRocker Engineering team.</description>
      <lastBuildDate>Sat, 29 Apr 2023 21:14:47 +0000</lastBuildDate>
      <language>en-US</language>
      <sy:updatePeriod>hourly</sy:updatePeriod>
      <sy:updateFrequency>
    1	</sy:updateFrequency>
  
  
      <image>
        <url>https://i0.wp.com/LogRocker.engineering/wp-content/uploads/2019/01/cropped-LogRocker_icon.jpg?fit=32%2C32&#038;ssl=1</url>
        <title>LogRocker Engineering Blog</title>
        <link>https://LogRocker.engineering/</link>
        <width>32</width>
        <height>32</height>
      </image>

		<item>
			<title>.NET MAUI tutorial for Android and iOS - LogRocket Blog</title>
			<link>https://blog.logrocket.com/net-maui-tutorial-android-ios/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/net-maui-tutorial-android-ios/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>.NET MAUI tutorial for Android and iOS - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/net-maui-tutorial-android-ios/">.NET MAUI tutorial for Android and iOS - LogRocket Blog</a>
<div class="mainheading">

 <div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rupeshchaudhari/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/Rupesh_Chaudhari.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/Rupesh_Chaudhari.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rupeshchaudhari/">
Rupesh Chaudhari <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Rupesh is a programming enthusiast who is currently working with React Native to build beautiful hybrid mobile apps. He likes to solve competitive programming puzzles and enjoys gaming in his free time.</span>
</div>
</div>
<h1 class="posttitle">.NET MAUI tutorial for Android and iOS</h1>
<p>
<span class="post-date"><time class="post-date">
February 10, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">3017</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<article class="article-post">
<p>If you want to create a cross-platform application that works natively on mobile and desktop platforms, there are many great frameworks to choose from.</p>
<p>One of these is <a href="https://dotnet.microsoft.com/en-us/apps/maui">.NET Multi-platform App UI</a> (MAUI), Microsoft’s open source, cross-platform framework for building mobile and desktop apps using C# and XAML. .NET MAUI enables you to develop applications that can run on iOS, macOS, Android, and Windows, all from a single shared codebase. .NET MAUI is an advancement over <a href="https://dotnet.microsoft.com/en-us/apps/xamarin/xamarin-forms#:~:text=building%20mobile%20apps.-,Xamarin.,API%20that%20is%20highly%20extensible.">Xamarin.Forms</a>, which now includes UI controls redesigned and optimized for better performance and scalability.</p>
<p>.NET MAUI comes equipped with XAML hot reload, which updates your application UI as you modify your XAML code without you needing to recompile. Similarly, it also supports .NET hot reload, which applies your C# code changes to your running application without recompiling the whole thing.</p>
<p>In this article, we’ll explore .NET MAUI, reviewing its architecture, comparing its features to React Native and Flutter, and finally, using it in a project. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#net-maui-architectural-overview">.NET MAUI architectural overview</a></li>
<li><a href="#net-maui-vs-flutter-vs-react-native">.NET MAUI vs. Flutter vs. React Native</a></li>
<li><a href="#net-maui-installation-setup">.NET MAUI installation and setup</a></li>
<li><a href="#creating-new-net-maui-project">Creating a new .NET MAUI project</a></li>
<li><a href="#example-net-maui-app">Example .NET MAUI app</a></li>
<li><a href="#design-list-collection-view">Design a list with <code>CollectionView</code></a></li>
<li><a href="#integrating-http-service">Integrating HTTP service</a></li>
<li><a href="#navigating-to-details-page">Navigating to the <code>Details</code> page</a></li>
</ul>
<h2 id="net-maui-architectural-overview">.NET MAUI architectural overview</h2>
<p>.NET MAUI offers a write-once, run-anywhere experience, while still letting you access native, platform-specific APIs. Under the hood, .NET MAUI uses platform-specific frameworks for creating apps on different target devices:</p>
<ul>
<li>.NET for Android → Android devices</li>
<li>Windows UI 3 (WinUI 3) → Windows devices</li>
<li>.NET for iOS → iOS devices</li>
<li>.NET for macOS → macOS devices</li>
</ul>
<p>The diagram below explains this in more detail:</p>
<figure id="attachment_158761"   class="wp-caption aligncenter"><img             class="wp-image-158761 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/1-net-maui-architectural-overview-diagram.png" alt="Net Maui Architectural Overview Diagram" width="730" height="462"    /><noscript><img               class="wp-image-158761 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/1-net-maui-architectural-overview-diagram.png" alt="Net Maui Architectural Overview Diagram" width="730" height="462"  /></noscript><figcaption id="caption-attachment-158761" class="wp-caption-text">Image from learn.microsoft.com</figcaption></figure>
<p>For more insight into .NET MAUI’s architecture, you can also refer to the official <a href="https://learn.microsoft.com/en-us/dotnet/maui/what-is-maui?view=net-maui-7.0#how-net-maui-works">documentation</a>.</p>
<h2 id="net-maui-vs-flutter-vs-react-native">.NET MAUI vs. Flutter vs. React Native</h2>
<p>While there are many cross-platform frameworks, <a href="https://blog.logrocket.com/react-native-vs-flutter/">Flutter and React Native are the most popular</a>, used by developers across the globe.</p>
<p>If we compare these on the basis of community size and third-party library compatibility .NET MAUI is a less mature option, released in May 2022. Therefore, it can be challenging to get help from the community if you get stuck somewhere. Additionally, Visual Studio for Mac can be a little buggy and less performant than on Windows OS.</p>
<p>.NET MAUI mainly uses C# and XAML code, so if you’re already familiar with the .NET ecosystem, then MAUI can easily become your go-to framework. On the other hand, <a href="https://blog.logrocket.com/pros-cons-flutter-app-development/">Flutter uses Dart, which is a programming language introduced by Google</a> that has a significantly higher learning curve. Finally, we have React Native; developed by Facebook and built on top of JavaScript, React Native is a cross-platform application development framework.</p>
<p>Although all of these frameworks can deploy to Android, iOS, macOS, and Windows, some require extra tweaking to do so, like React Native, which uses <code><a href="https://github.com/microsoft/react-native-windows">react-native-windows</a></code> and <a href="https://github.com/microsoft/react-native-macos"><code>react-native-macos</code></a> for Windows and macOS support. On the other hand, .NET MAUI comes with support for these out of the box.</p>
<p>However, unlike Flutter and React Native, you can’t deploy .NET MAUI apps directly on the web. As an added bonus for Flutter, Flutter apps can also be distributed and run on Linux based operating systems. Ultimately, it’s up to you to decide which framework is the best fit. But, if you need a .NET ecosystem, .NET MAUI can surely be your framework of choice.</p>
<h2 id="net-maui-installation-setup">.NET MAUI installation and setup</h2>
<p>Before writing our .NET MAUI app, we first need to correctly install and set up .NET MAUI in our systems. Since I’m using macOS, I’ll guide you through the installation steps for macOS. If you’re using Windows, you can refer to the <a href="https://learn.microsoft.com/en-us/dotnet/maui/get-started/installation?view=net-maui-7.0&amp;tabs=vswin">docs</a>.</p>
<p>First, we’ll download <a href="https://visualstudio.microsoft.com/vs/mac/">Visual Studio 2022 for Mac</a>. You’ll be prompted to add configuration for the installation; select <strong>.NET</strong> <em>→ </em><strong>.NET MAUI</strong> → <strong>iOS</strong> → <strong>Android</strong>. That’s it! Now, you should be able to run Visual Studio 2022 for Mac on your system.</p>
<h2 id="creating-new-net-maui-project">Creating a new .NET MAUI project</h2>
<p>When you open VS 2022, you’ll see a popup like the one below. To create a new project, click <strong>New</strong>:</p>
<p><img             class="aligncenter wp-image-158764 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/2-create-new-vs-code-app-homepage.png" alt="Create New Vs Code App Homepage" width="730" height="485"    /><noscript><img               class="aligncenter wp-image-158764 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/2-create-new-vs-code-app-homepage.png" alt="Create New Vs Code App Homepage" width="730" height="485"  /></noscript></p>
<p>Then, you’ll be prompted to select the project type. Select <strong>Multiplatform App</strong> and <strong>.NET MAUI App</strong>, then click <strong>Continue</strong>:</p>
<p><img             class="aligncenter wp-image-158766 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/3-vs-code-select-multiplatform-app.png" alt="Vs Code Select Multiplatform App" width="730" height="536"    /><noscript><img               class="aligncenter wp-image-158766 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/3-vs-code-select-multiplatform-app.png" alt="Vs Code Select Multiplatform App" width="730" height="536"  /></noscript></p>
<p>Select <strong>.NET 7.0</strong> as the target framework and click <strong>Continue</strong>:</p>
<p><img             class="aligncenter wp-image-158768 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/4-net-7-target-framework.png" alt="Net 7 Target Framework" width="730" height="521"    /><noscript><img               class="aligncenter wp-image-158768 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/4-net-7-target-framework.png" alt="Net 7 Target Framework" width="730" height="521"  /></noscript></p>
<p>Enter the project name and uncheck the <code>Put project in a subfolder</code> checkbox. Click <strong>Create</strong> to create your app:</p>
<p><img             class="aligncenter wp-image-158771 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/5-create-configure-net-maui-vs-code-app.png" alt="Create Configure Net Maui Vs Code App" width="730" height="515"    /><noscript><img               class="aligncenter wp-image-158771 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/5-create-configure-net-maui-vs-code-app.png" alt="Create Configure Net Maui Vs Code App" width="730" height="515"  /></noscript></p>
<p>Now, your project should be created, and VS 22 should be open. After selecting your preferred debug device or simulator from the list, move your mouse cursor to the top left corner of the app and click the <strong>play</strong> icon:</p>
<p><img             class="aligncenter wp-image-158775 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/6-select-maui-debug-service-play.png" alt="Select Maui Debug Service Play" width="295" height="39"  /><noscript><img               class="aligncenter wp-image-158775 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/6-select-maui-debug-service-play.png" alt="Select Maui Debug Service Play" width="295" height="39"/></noscript></p>
<p>You’ll notice that the build times for Android and iOS are very fast. Your simulator will open the app with predefined dummy text on the screen:</p>
<p><img             class="aligncenter wp-image-158777 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/7-android-simulator-open-dummy-text.png" alt="Android Simulator Open Dummy Text" width="505" height="905"    /><noscript><img               class="aligncenter wp-image-158777 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/7-android-simulator-open-dummy-text.png" alt="Android Simulator Open Dummy Text" width="505" height="905"  /></noscript></p>
<p>&amp;nbsp;</p>
<p><img             class="aligncenter wp-image-158779 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/8-android-text-dummy-simulator-2.png" alt="Android Text Dummy Simulator" width="524" height="926"    /><noscript><img               class="aligncenter wp-image-158779 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/8-android-text-dummy-simulator-2.png" alt="Android Text Dummy Simulator" width="524" height="926"  /></noscript></p>
<p>And with that, you’ve just created your first .NET MAUI app for Android and iOS. Before we jump into the code, first, let’s understand what we’ll build.</p>
<h2 id="example-net-maui-app">Example .NET MAUI app</h2>
<p>Our example application will be fairly simple, displaying just two screens, including a list screen that will display a vertical list of products with images. When we tap an image, we’ll navigate to the <code>Product Detail</code> screen, which will display all the information about that product. We’ll also use HTTP services to fetch the list of products from a REST API.</p>
<p>Our final app UI will look like the images below:</p>
<p><img             class="aligncenter wp-image-158782 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/9-final-net-maui-app-ui-2.gif" alt="Final Net Maui App UI" width="440" height="876"  /><noscript><img               class="aligncenter wp-image-158782 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/9-final-net-maui-app-ui-2.gif" alt="Final Net Maui App UI" width="440" height="876"/></noscript></p>
<p><img             class="aligncenter wp-image-158785 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/10-final-net-maui-app-ui-1.gif" alt="Final Net Maui App" width="440" height="876"  /><noscript><img               class="aligncenter wp-image-158785 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/10-final-net-maui-app-ui-1.gif" alt="Final Net Maui App" width="440" height="876"/></noscript></p>
<p>You can find the code for this tutorial in this <a href="https://github.com/hrupesh/NET_MAUI_ProductStoreDemo">GitHub repository</a>.</p>
<h2 id="design-list-collection-view">Design a list with <code>CollectionView</code></h2>
<p>XAML is the basic building block to create a UI in .NET MAUI; let’s create a UI to render a list of products. Before we start, we need to organize our code files so that all of our respective code chunks belong in a particular folder:</p>
<ul>
<li><code>Views</code>: UI elements and screen</li>
<li><code>Models</code>: Data structures and types</li>
<li><code>Services</code>: API handlers and business logic</li>
</ul>
<p>Delete the <code>MainPage.xaml</code> file and its code-behind file, or the <code>.cs</code> file associated with that file. In this case, it’s <code>MainPage.xaml.cs</code>.</p>
<p>Create a new folder inside <code>Project</code> by right-clicking on the project in the <code>Solution Explorer</code> window and naming it <code>Views</code>. In the next step, we’ll add the <code>ProductList</code> file inside this folder:</p>
<p><img             class="aligncenter wp-image-158798 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/11-new-project-product-list.png" alt="New Project Product List" width="501" height="901"    /><noscript><img               class="aligncenter wp-image-158798 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/11-new-project-product-list.png" alt="New Project Product List" width="501" height="901"  /></noscript></p>
<p>Right click on the created <code>Views</code> folder and select <strong>Add</strong> → <strong>New Class</strong>:</p>
<p><img             class="aligncenter wp-image-158796 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/12-add-new-net-maui-class.png" alt="Add New Net Maui Class" width="489" height="252"    /><noscript><img               class="aligncenter wp-image-158796 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/12-add-new-net-maui-class.png" alt="Add New Net Maui Class" width="489" height="252"  /></noscript></p>
<p>You’ll be prompted to select the type of file you want to create. Select <strong>.Net MAUI</strong> → <strong>.NET MAUI ContentPage(XAML)</strong>. Change file name to <code>ProductList</code> and press <strong>Create</strong>:</p>
<p><img             class="aligncenter wp-image-158794 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/13-select-net-maui-xaml-file.png" alt="Select Net Maui Xaml File" width="730" height="562"    /><noscript><img               class="aligncenter wp-image-158794 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/13-select-net-maui-xaml-file.png" alt="Select Net Maui Xaml File" width="730" height="562"  /></noscript></p>
<p>This will create two files, <code>ProductList.xaml</code> and its code-behind file, <code>ProductList.xaml.cs</code>, which will contain all of its code logic.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Before writing any code in <code>ProductList.xaml</code>, we first need to update our <code>AppShell.xaml</code> file, which is the root of our UI, and as the name suggests, is the <code>Shell</code> or structure of our app’s UI:</p>
<pre class="language-xml hljs">&lt;?xml version="1.0" encoding="UTF-8" ?>
&lt;Shell
    x:Class="MAUIPostFeed.AppShell"
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
   // Added views to refer to Views folder inside project
    xmlns:views="clr-namespace:MAUIPostFeed.Views"
    Shell.FlyoutBehavior="Disabled">
    &lt;ShellContent
        Title="Products"
        // Using views to access Views.ProductList file
        ContentTemplate="{DataTemplate views:ProductList}" 
     />
&lt;/Shell>
</pre>
<p>Now that our page is set up correctly in <code>AppShell</code>, let’s write the code in the <code>ProductList.xaml</code> file:</p>
<pre class="language-cs hljs">&lt;?xml version="1.0" encoding="utf-8" ?>
&lt;ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
        xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
        x:Class="MAUIPostFeed.Views.ProductList"
        &amp;gt;
        &lt;CollectionView x:Name="productsCollection"
                ItemsSource="{Binding Products}"
                Margin="10"
                SelectionMode="Single"
                >
            &lt;CollectionView.ItemsLayout>
                &lt;LinearItemsLayout Orientation="Vertical" ItemSpacing="20"              />
            &lt;/CollectionView.ItemsLayout>
            &lt;CollectionView.ItemTemplate>
                &lt;DataTemplate>
                    &lt;VerticalStackLayout>
                       &lt;Image HeightRequest="180" Aspect="AspectFill" >
                            &lt;Image.Source>
                                &lt;UriImageSource
                                    Uri="{Binding thumbnail}"
                                    CacheValidity="00:12:00:00"
                                />
                            &lt;/Image.Source>
                        &lt;/Image>
                        &lt;HorizontalStackLayout>
                            &lt;Label Text="{Binding title}" FontSize="Title"                               FontAttributes="Bold" />
                            &lt;Label Text="{Binding discountPercentage}"                                           FontSize="Default" Margin="40,4,0,0"                                                    FontAttributes="Italic"                                       FontFamily="Open-Sans" />
                            &lt;Label Text=" % OFF" FontSize="Default" 
                               Margin="0,4,0,0" FontAttributes="Italic" 
                               FontFamily="Open-Sans"  />
                        &lt;/HorizontalStackLayout>
                        &lt;Label Text="{Binding description}" MaxLines="2" 
                            FontSize="Subtitle" TextColor="Gray"  />
                    &lt;/VerticalStackLayout>
                &lt;/DataTemplate>
            &lt;/CollectionView.ItemTemplate>
        &lt;/CollectionView>
&lt;/ContentPage>
</pre>
<p>In the code above, we added <code>x:Class="MAUIPostFeed.Views.ProductList"</code> to give a class name to <code>ContentPage</code> so that we can access its <code>Controls</code> properties from the code-behind file.</p>
<p>We then created a <code>CollectionView</code> with <code>ItemSource = Products</code>, which comes from <code>Binding</code>. Binding is a mechanism in XAML through which XAML and code-behind classes can communicate. We haven’t yet created <code>Products</code>; we’ll do that in the next step. Finally, we used <code>CollectionView.ItemTemplate</code> to define how a list item should render.</p>
<p>With that, the UI part for the list page is done. Now, let’s work on actually setting up an HTTP service to fetch products from the REST API and store it in <code>ObservableCollection</code>.</p>
<p>Let’s start with the code-behind file of <code>ProductList</code>. Paste the following code in the <code>ProductList.xaml.cs</code> file:</p>
<pre class="language-cs hljs">using MAUIPostFeed.Models;

namespace MAUIPostFeed.Views;

public partial class ProductList : ContentPage
{
        public ProductList()
        {
                InitializeComponent();
                // Initializing the BindingContext with Products
                BindingContext = new Models.AllProducts();
        }
}
</pre>
<p>In the code above, we set <code>BindingContext</code> to <code>Models.AllProducts</code>. But, we haven’t created any models yet, so let’s do that now.</p>
<h2 id="integrating-http-service">Integrating HTTP service</h2>
<p>Add a new folder to your project named <code>Models</code>. Inside, create a new class called <code>AllProducts.cs</code>. This model will contain the list of <code>Products</code> we want to display. Paste the following code inside the <code>AllProducts.cs</code> file:</p>
<pre class="language-cs hljs">using System.Collections.ObjectModel;
using MAUIPostFeed.Services;

namespace MAUIPostFeed.Models
{
    public class AllProducts
    {
        public ObservableCollection&lt;Product> Products { get; set; } =                                new ObservableCollection&lt;Product>();
        readonly IProductsRepository ProductsRepository =                                            new ProductsService();

        public AllProducts() =>
            LoadProducts();

        public async void LoadProducts()
        {
            ObservableCollection&lt;Product> temp =                                                await ProductsRepository.LoadProducts();
            for (int i = 0; i &lt; temp.Count; i++)
            {
                Products.Add(temp[i]);
            }
        }
    }
}
</pre>
<p>In the code above, we created a class called <code>AllProducts</code> and added a <code>Products</code> property, which is an <code>ObservableCollection</code> of <code>Product</code>. We’ll create the <code>Product</code> class later.</p>
<p>Next, we added a <code>ProductsRepository</code> property on type <code>IProductsRepository</code>, which instantiates with <code>ProductService</code>. We’ll create these classes in the next steps.</p>
<p>In the constructor of the class, we have called the <code>LoadProducts</code> method, which fetches the <code>Product</code> list from <code>ProductsRepository</code>. Then, we push each product into our class property <code>Products</code>.</p>
<p>We need one more <code>Model</code> in our code, which will hold the structure of <code>Products</code>. Add a new class in <code>Models</code> and name it <code>Products.cs</code>. Then, add the following code into the new class:</p>
<pre class="language-cs hljs">using System;
using System.Collections.ObjectModel;

namespace MAUIPostFeed.Models;

public class Product
{
    public int id { get; set; }
    public string title { get; set; }
    public string description { get; set; }
    public int price { get; set; }
    public double discountPercentage { get; set; }
    public double rating { get; set; }
    public int stock { get; set; }
    public string brand { get; set; }
    public string category { get; set; }
    public string thumbnail { get; set; }
    public List&lt;string> images { get; set; }
}

public class Products
{
    public ObservableCollection&lt;Product> products { get; set; }
    public int total { get; set; }
    public int skip { get; set; }
    public int limit { get; set; }
}
</pre>
<p>In the file above, we’ve created two classes. The first, <code>Product</code>, holds the structure of a single <code>Product</code>. The second, <code>Products</code>, contains a <code>Product</code> list and some other data that we get from the API.</p>
<p>With that, we’re done with <code>Models</code>. Now, let’s create <code>Services</code>, which will interact with the network and fetch products.</p>
<p>In the project, add a new folder called <code>Services</code>. Inside it, create a new class called <code>IProductsRepository</code> and add the following code inside the file:</p>
<pre class="language-cs hljs">using System;
using System.Collections.ObjectModel;
using MAUIPostFeed.Models;

namespace MAUIPostFeed.Services
{
        public interface IProductsRepository
        {
                Task&lt;ObservableCollection&lt;Product>> LoadProducts();
        }
}
</pre>
<p>In the code above, we’ve created an <code>IProductsRepository</code> interface, which has a <code>LoadProducts</code> property, or a <code>Task</code> that returns the <code>ObservableCollection</code> of <code>Product</code>.</p>
<p>Next, we need to create the <code>ProductsService</code> class, which will implement the <code>IProductsRepository</code> class and fetch <code>Products</code> using <code>HTTPClient</code>. Create a new class called <code>'ProductsService.cs</code> and add the following code to it:</p>
<pre class="language-cs hljs">using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Text.Json;
using MAUIPostFeed.Models;

namespace MAUIPostFeed.Services;

public class ProductsService: IProductsRepository
{
    HttpClient client;
    JsonSerializerOptions serializerOptions;

    public ObservableCollection&lt;Product> Products { get; set; }

    private static string BASE_URL { get; set; } =                                                          "https://dummyjson.com/";

    public ProductsService()
    {
        client = new HttpClient();
        serializerOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = true
        };
    }

    public async Task&lt;ObservableCollection&lt;Product>> LoadProducts()
    {
        Products = new ObservableCollection&lt;Product>();

        Uri uri = new Uri(string.Format($"{BASE_URL}products?limit=10",                                   string.Empty));
        try
        {
            HttpResponseMessage response = await client.GetAsync(uri);
            if (response.IsSuccessStatusCode)
            {
                string content =                                                                     await response.Content.ReadAsStringAsync();
                Products temp =                                                    JsonSerializer.Deserialize&lt;Products>(content, serializerOptions);
                Products = temp.products;
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(@"\tERROR {0}", ex.Message);
        }

        return Products;
    }
}
</pre>
<p>As you may have noticed, we’re using the <a href="https://dummyjson.com/"><code>dummyjson</code></a> endpoint to get a list of <code>Products</code>. We used the <code>GetAsync</code> method from <code>HttpClient</code> to call a <code>GET</code> request on the specified API endpoint. Then, we <code>Deserialized</code> it using our <code>Products</code> class and assigned only the <code>products</code> received from the API response.</p>
<p>That’s it. Rebuild your app, and you’ll see a list of ten products on the screen:</p>
<p><img             class="aligncenter wp-image-158791 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/14-rebuild-net-maui-ten-products-example.gif" alt="Rebuild Net Maui Ten Products Example" width="440" height="876"  /><noscript><img               class="aligncenter wp-image-158791 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/14-rebuild-net-maui-ten-products-example.gif" alt="Rebuild Net Maui Ten Products Example" width="440" height="876"/></noscript></p>
<h2 id="navigating-to-details-page">Navigating to the <code>Details</code> page</h2>
<p>At this point, we can see a list of products on the <code>Products</code> page. When the user clicks on any product, they should be navigated to the <code>ProductDetails</code> page; all the relevant product info should be visible there.</p>
<p>To implement this functionality, we’ll pass a <code>Product</code> as a <code>NavigationParam</code> to the <code>ProductDetails</code> page.</p>
<p>Create a new .NET MAUI content page inside the <code>Views</code> folder and name it <code>ProductDetails</code>. Paste the following code inside <code>ProductDetails.xaml</code>:</p>
<pre class="language-xml hljs">&lt;?xml version="1.0" encoding="utf-8" ?>
&lt;ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="MAUIPostFeed.Views.ProductDetails"
             Title="Product Details"
             >
    &lt;ScrollView BackgroundColor="#eee"  >
        &lt;VerticalStackLayout>
            &lt;CarouselView Loop="False"
                ItemsSource="{Binding product.images}"
                VerticalOptions="Start"
                HeightRequest="300"
                HorizontalScrollBarVisibility="Never" >
                &lt;CarouselView.ItemTemplate>
                    &lt;DataTemplate>
                            &lt;Image Source="{Binding}"
                                Aspect="AspectFit"
                                HeightRequest="300" />
                    &lt;/DataTemplate>
                &lt;/CarouselView.ItemTemplate>
            &lt;/CarouselView>
            &lt;VerticalStackLayout Margin="24, 10" Spacing="10" >
                &lt;Label Text="{Binding product.title}" FontSize="Title" FontFamily="OpenSansSemibold" />
                &lt;Label Text="{Binding product.description}" FontSize="Body" FontFamily="OpenSansRegular" />
                &lt;Grid ColumnDefinitions="*,*" ColumnSpacing="30" Margin="0, 10" >
                    &lt;HorizontalStackLayout>
                        &lt;Label Text="💵  $" FontSize="30" VerticalTextAlignment="Center" FontFamily="OpenSansRegular" />
                        &lt;Label Text="{Binding product.price}" FontSize="40" FontFamily="OpenSansRegular" />
                    &lt;/HorizontalStackLayout>
                    &lt;HorizontalStackLayout Grid.Column="1">
                        &lt;Label Text="⭐️  " FontSize="30" VerticalTextAlignment="Center" FontFamily="OpenSansRegular" />
                        &lt;Label Text="{Binding product.rating}" FontSize="40" FontFamily="OpenSansRegular" />
                    &lt;/HorizontalStackLayout>
                &lt;/Grid>
                &lt;HorizontalStackLayout>
                    &lt;Label Text="Stocks left: " FontSize="20" VerticalTextAlignment="Center" FontFamily="OpenSansRegular" />
                    &lt;Label Text="{Binding product.stock}" FontSize="30" FontFamily="OpenSansRegular" />
                &lt;/HorizontalStackLayout>
                &lt;HorizontalStackLayout>
                    &lt;Label Text="Brand: " FontSize="20" VerticalTextAlignment="Center" FontFamily="OpenSansRegular" />
                    &lt;Label Text="{Binding product.brand}" FontSize="30" FontFamily="OpenSansRegular" />
                &lt;/HorizontalStackLayout>
                &lt;HorizontalStackLayout>
                    &lt;Label Text="Category: " FontSize="20" VerticalTextAlignment="Center" FontFamily="OpenSansRegular" />
                    &lt;Label Text="{Binding product.category}" TextTransform="Uppercase" FontSize="30" FontFamily="OpenSansRegular" />
                &lt;/HorizontalStackLayout>
            &lt;/VerticalStackLayout>
        &lt;/VerticalStackLayout>
    &lt;/ScrollView>
&lt;/ContentPage>
</pre>
<p>In the code above, we wrapped the complete UI in a <code>ScrollView</code> and used a <code>CarouselView</code> to display a list of <code>images</code> of the <code>Product</code>. We then used a <code>VerticalStackLayout</code> to display all the relevant information about the product using <code>Label</code>.</p>
<p>However, because we haven’t mapped the navigation params that we got from <code>Navigation</code> with the <code>BindingContext</code>, this won’t work. To do so, add the following code in <code>ProductDetails.xaml.cs</code>:</p>
<pre class="language-cs hljs">using System.ComponentModel;
using MAUIPostFeed.Models;

namespace MAUIPostFeed.Views;

[QueryProperty(nameof(Product), "product")]
public partial class ProductDetails : ContentPage, IQueryAttributable,                                           INotifyPropertyChanged
{
    public Product product { get; private set; }

    public void ApplyQueryAttributes(IDictionary&lt;string, object> query)
    {
        product = query["product"] as Product;
        OnPropertyChanged("product");
    }

    public ProductDetails()
    {
        InitializeComponent();
        BindingContext = this;
    }
}
</pre>
<p>In the code above, we used <code>IQueryAttributable</code> and its <code>ApplyQueryAttributes</code> to set the <code>product</code> property to the value that we get from the <code>QueryProperty</code>.</p>
<p>Finally, add the navigation logic inside the <code>ProductList</code> page. Add the <code>SelectionChanged</code> event handler in the <code>CollectionView</code> of <code>products</code>:</p>
<pre class="language-xml hljs">&lt;CollectionView x:Name="productsCollection"
                ItemsSource="{Binding Products}"
                Margin="10"
                // Add below lines
                SelectionMode="Single"
                SelectionChanged="productsCollection_SelectionChanged"
                >
</pre>
<p>Now that we’ve passed an <code>eventHandler</code>, let’s create the <code>eventHandler</code> in the code-behind file. Add the method below in <code>ProductList.xaml.cs</code>:</p>
<pre class="language-cs hljs">    async void productsCollection_SelectionChanged(System.Object sender,                      Microsoft.Maui.Controls.SelectionChangedEventArgs e)
    {
        if (e.CurrentSelection.Count != 0)
        {
            Product product = e.CurrentSelection.FirstOrDefault()                                          as Product;
            var navigationParams = new Dictionary&lt;string, object>
            {
                { "product", product }
            };
            await Shell.Current.GoToAsync("ProductDetails",                                                           navigationParams);

            productsCollection.SelectedItem = null;
        }
      }
</pre>
<p>In the code above, we’re navigating to the <code>ProductDetails</code> page when any item in <code>CollectionView</code> is selected. Then, we’re setting the <code>selectedItem</code> of the <code>productsCollection</code> list to <code>null</code>, resetting the UI.</p>
<p>If you run this code now, it won’t work because we haven’t yet registered the <code>ProductDetails</code> page in <code>Router1</code>. To do so, paste the following code in <code>AppShell.xaml.cs</code>:</p>
<pre class="language-cs hljs">using MAUIPostFeed.Views;

namespace MAUIPostFeed;

public partial class AppShell : Shell
{
    public AppShell()
    {
        InitializeComponent();
        // Registering the Page into Routes
        Routing.RegisterRoute("ProductDetails",                                                       typeof(ProductDetails));
    }
}
</pre>
<p>With that, our app is complete. Now, if you build and run the project, the output will be similar to the image below:</p>
<p><img             class="aligncenter wp-image-158789 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/15-final-net-maui-ui.gif" alt="Final Net Maui UI" width="440" height="876"  /><noscript><img               class="aligncenter wp-image-158789 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/15-final-net-maui-ui.gif" alt="Final Net Maui UI" width="440" height="876"/></noscript></p>
<p><img             class="aligncenter wp-image-158787 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/16-final-net-maui-app-output.gif" alt="Final Net Maui App Output" width="440" height="876"  /><noscript><img               class="aligncenter wp-image-158787 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/16-final-net-maui-app-output.gif" alt="Final Net Maui App Output" width="440" height="876"/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we learned how to create cross-platform apps for iOS and Android using .NET MAUI. But, .NET MAUI isn’t limited to just iOS and Android; we could also deploy our application on macOS and Windows using the same codebase.</p>
<p>.NET MAUI is a performant framework that is great for building cross-platform apps, especially if you want to remain in a .NET ecosystem without having to learn a new framework. I hope you enjoyed this article, and thanks for reading!</p><div class="code-block code-block-32" >
<div class="blog-plug inline-plug kotlin-plug"><h2><a href="https://lp.logrocket.com/blg/kotlin-signup">LogRocket</a>: Instantly recreate issues in your Android apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is an Android monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your Android apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your Android apps — <a class="signup" href="hhttps://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-158752" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/net-maui-tutorial-android-ios/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/net-maui-tutorial-android-ios/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-158752" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/net-maui-tutorial-android-ios/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-158752" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/net-maui-tutorial-android-ios/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/net-maui-tutorial-android-ios/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>10 React Native component libraries you should know - LogRocket Blog</title>
			<link>https://blog.logrocket.com/react-native-component-libraries/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/react-native-component-libraries/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>10 React Native component libraries you should know - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/react-native-component-libraries/">10 React Native component libraries you should know - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/amanmittal/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/02/amanmittal.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/02/amanmittal.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/amanmittal/">
Aman Mittal <span class="btn follow">Follow</span></a>
<span class="author-description d-block">👨‍💻 Developer 👉 Node.js, React, React Native | Tech Blogger with 1M+ views on Medium</span>
</div>
</div>
<h1 class="posttitle">10 React Native component libraries you should know</h1>
<p>
<span class="post-date"><time class="post-date">
December 15, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1908</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was last updated 15 December 2022 to include newer, more popular libraries.  </em></p>
<p>When building a React Native app, best practice involves taking advantage of isolated UI components to accelerate your development time. This idea is not unique to React Native; it is actually a React philosophy, one that the mobile framework is heavily based upon.</p>
<p>Just like how React allows developers to use native HTML elements, like divs, text inputs, buttons, etc., the React Native framework lets developers use platform-specific native GUI elements, which we can use to develop mobile apps along with our custom styles. But, in some scenarios, these inbuilt components can’t satisfy our design and development goals, meaning we either have to build custom components from scratch or use a component library.</p>
<h2 id="whyshouldyouuseacomponentlibraryinreactnative">Why should you use a component library in React Native?</h2>
<p>Component libraries offer pre-developed components that help us deliver our React Native projects faster. For example, we can <a href="https://blog.logrocket.com/react-native-vector-icons-fonts-react-native-app-ui/">create icon buttons with react-native-vector-icons</a>. Suppose you use a React Native component library that offers a complete UI kit. In this case, you don’t need to write custom styles for inbuilt UI elements or install many third-party, pre-implemented components. Component libraries typically offer a collection of pre-developed, customizable UI elements for building any modern app.</p>
<p>With so many great options available, deciding which component library to use for your new React Native app can be challenging. But, once you understand each component library’s available components, features, limitations, and developer support, it’s easier to select one based on your design goals.</p>
<h2 id="thebestreactnativecomponentlibraries">The best React Native component libraries</h2>
<p>In this article, we’ll explore some of the best open source React Native component libraries. Not only will they help you use a robust approach and boost your project delivery time, <span >but they also offer quality support for platforms like iOS and Android:</span></p>
<ul>
<li><a href="#react-native-paper">React Native Paper</a></li>
<li><a href="#react-native-elements">React Native Elements</a></li>
<li><a href="#nativebase">NativeBase</a></li>
<li><a href="#react-native-ui-kitten">React Native UI Kitten</a></li>
<li><a href="#rnui-react-native-ui-library">RNUI: React Native UI Library</a></li>
<li><a href="#teaset">Teaset</a></li>
<li><a href="#shoutem-ui">Shoutem UI</a></li>
<li><a href="#lottie-react-native">Lottie for React Native</a></li>
<li><a href="#react-native-maps">React Native Maps</a></li>
<li><a href="#react-native-gifted-chat">React Native Gifted Chat</a></li>
</ul>
<p>With each component library, I’ll provide a summary, some highlighted features, and helpful links, so you can select one based on your design goals. Let’s get started!</p>
<h2 id="react-native-paper">React Native Paper</h2>
<p><img             class="aligncenter wp-image-148529 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-paper-ui.png" alt="React Native Paper UI" width="730" height="405"    /><noscript><img               class="aligncenter wp-image-148529 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-paper-ui.png" alt="React Native Paper UI" width="730" height="405"  /></noscript></p>
<p><a href="https://reactnativepaper.com/">React Native Paper</a> is a cross-platform React Native UI library that is based on <a href="https://material.io/design">Google’s Material Design</a>. Developed by the official React Native development partner, <a href="https://github.com/callstack">Callstack</a>, React Native Paper has theming support and offers customizable and production-ready components.</p>
<p>When using this library, you can reduce its bundle size by using a <a href="https://github.com/satya164/babel-plugin-optional-require">Babel plugin</a> that allows you to optionally require modules. This will exclude all the modules that your app doesn’t use and rewrite the import statements to include only those that are imported in the app’s component files.</p>
<p><a href="https://blog.logrocket.com/sharing-code-react-native-web/">React Native Paper also supports web</a> using <a href="https://github.com/necolas/react-native-web">React Native Web</a>.</p>
<h3>How do you use React Native Paper themes?</h3>
<p>Applying themes to a particular component is easy; React Native Paper comes with two default themes, namely <code>light</code> and <code>dark</code>, which you can extend. It also uses the <a href="https://github.com/oblador/react-native-vector-icons"><code>react-native-vector-icons</code> library</a> to support and use icons correctly in buttons, floating action buttons, lists, and more.</p>
<h3>TL;DR: React Native Paper</h3>
<ul>
<li><a href="https://callstack.github.io/react-native-paper/index.html">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/callstack/react-native-paper">GitHub repository</a></li>
<li><a href="https://snack.expo.io/@satya164/github.com-callstack-react-native-paper:example">Live example</a></li>
</ul>
<h2 id="react-native-elements">React Native Elements</h2>
<p><img             class="aligncenter wp-image-148532 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-elements-ui-example.png" alt="React Native Elements UI Example" width="730" height="444"    /><noscript><img               class="aligncenter wp-image-148532 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-elements-ui-example.png" alt="React Native Elements UI Example" width="730" height="444"  /></noscript></p>
<p>One of the oldest and easiest libraries to start with, <a href="https://reactnativeelements.com/">React Native Elements</a> is a cross-platform UI toolkit that implements Material Design. Instead of following an opinionated design system, this toolkit library offers a more basic structure through its generalized inbuilt components, meaning you‘ll have <a href="https://blog.logrocket.com/react-native-styling-tutorial-with-examples/">more control over how you want to customize components</a>. Customization of any component in this library will include a mixture of some custom props, as well as props from the <a href="https://reactnative.dev/">React Native core API</a>.</p>
<p>That said, when using this library, I’ve found that I can write much less boilerplate code than I do when using some of the other libraries covered in this post. The applications built using this UI toolkit also look and feel universal across both iOS and Android platforms.</p>
<p><code>ThemeProvider</code> offers support for theming. Unlike <a href="https://blog.logrocket.com/which-ui-libraries-support-dark-mode/">some of the other libraries</a>, which give you light and dark themes, you’ll have to define your themes to make them work. You can also use React Native Elements in web projects by using React Native Web.</p>
<h3>TL;DR: React Native Elements</h3>
<ul>
<li><a href="https://reactnativeelements.com/docs">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/react-native-elements/react-native-elements">GitHub repository</a></li>
<li><a href="https://expo.dev/@rneui/react-native-elements">Live example</a></li>
</ul>
<h2 id="nativebase">NativeBase</h2>
<p><img             class="aligncenter wp-image-148536 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/nativebase-react-native-example.png" alt="Nativebase React Native Example" width="730" height="207"    /><noscript><img               class="aligncenter wp-image-148536 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/nativebase-react-native-example.png" alt="Nativebase React Native Example" width="730" height="207"  /></noscript></p>
<p><a href="https://nativebase.io/">NativeBase</a> is another library that has existed since the early days of React Native. It supports a long, rich list of cross-platform UI components that also come production-ready, providing not only basic support for each regular component, but also predefined configurations for many components that cover almost all possible use cases.</p>
<p>For example, the <a href="https://docs.nativebase.io/select">Select component</a> renders a cross-platform dropdown UI element and also supports custom styling, like:</p>
<ul>
<li>Using an icon based on a dropdown to open and close states</li>
<li>Adding a placeholder text</li>
<li>Setting a selected value</li>
</ul>
<p>The Select component has support for themes and offers paid templates based on the NativeBase component library, which you can consume to save development time. However, the whole UI library is free and open source.</p>
<p>NativeBase also offers a comprehensive demo app called <a href="https://kitchensink.nativebase.io/">KitchenSink</a> where you can explore all of the components via your web browser.</p>
<h3>TL;DR: NativeBase</h3>
<ul>
<li><a href="https://docs.nativebase.io/docs/GetStarted.html">D</a><a href="https://docs.nativebase.io/">ocumentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/GeekyAnts/NativeBase">GitHub repository</a></li>
<li><a href="https://snack.expo.dev/@native-base/nativebase-playground">Live example</a></li>
</ul>
<h2 id="react-native-ui-kitten">React Native UI Kitten</h2>
<p><img             class="aligncenter wp-image-148561 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-ui-kitten.png" alt="React Native UI Kitten" width="730" height="337"    /><noscript><img               class="aligncenter wp-image-148561 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-ui-kitten.png" alt="React Native UI Kitten" width="730" height="337"  /></noscript></p>
<p><a href="https://akveo.github.io/react-native-ui-kitten/">UI Kitten</a> is another open source library that supports React Native apps. It is based on the <a href="https://eva.design/">Eva Design System</a> and has <a href="https://akveo.github.io/eva-icons/#/">over 480 icons of its own</a>. It provides support for creating customized themes, but it also allows you to use or extend two default visual themes as well.</p>
<p>There are more than 20 essential UI components that you can use, and it is also one of the few UI libraries that offers support for the right-to-left writing system for all of its components, a fact to be noted for global apps. It has support for the web as well.</p>
<p>If you setup this UI library for an existing project, you’ll have to go through some configuration steps. For new projects, you can easily use a pre-developed <a href="https://akveo.github.io/react-native-ui-kitten/docs/guides/getting-started#new-apps">app template</a>. Make sure to <a href="https://akveo.github.io/react-native-ui-kitten/docs/design-system/eva-design-system-intro#eva-design-system">give its design system a read</a> to understand the design principles first.</p>
<h3>TL;DR: React Native UI Kitten</h3>
<ul>
<li><a href="https://akveo.github.io/react-native-ui-kitten/docs">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/akveo/react-native-ui-kitten">GitHub repository</a></li>
<li><a href="https://expo.io/@ui-kitten/kitten-tricks">Live example</a></li>
</ul>
<h2 id="rnui-react-native-ui-library">RNUI: React Native UI Library</h2>
<p><img             class="aligncenter wp-image-148558 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-ui-library-1.jpeg" alt="React Native UI Library" width="730" height="332"    /><noscript><img               class="aligncenter wp-image-148558 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-ui-library-1.jpeg" alt="React Native UI Library" width="730" height="332"  /></noscript></p>
<p>Well-maintained and used by Wix, the <a href="https://wix.github.io/react-native-ui-lib/">RNUI</a> library is a toolset for building amazing React Native apps. It supports both older and the latest React Native versions, and it provides more than 20 customized components, some of which, like <code>Drawer</code>, can be easily integrated for building modern swipeable lists, like the Gmail app’s inbox. It also has custom animated components, like an <a href="https://wix.github.io/react-native-ui-lib/docs/components/media/AnimatedScanner">animated scanner</a>, which is useful for indicating progress for a card, like an uploading status, as well as an animated image.</p>
<p>RNUI is another UI library that supports the right-to-left writing system, and it includes full accessibility support.</p>
<h3>TL;DR: RNUI</h3>
<ul>
<li><a href="https://wix.github.io/react-native-ui-lib/docs/getting-started/setup">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/wix/react-native-ui-lib">GitHub repository</a></li>
<li><a href="https://snack.expo.dev/@ethanshar/rnuilib_snack">Live example</a></li>
</ul>
<h2 id="teaset">Teaset</h2>
<p><img             class="aligncenter wp-image-148556 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/teaset-ui-example.png" alt="Teaset UI Example" width="645" height="548"    /><noscript><img               class="aligncenter wp-image-148556 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/teaset-ui-example.png" alt="Teaset UI Example" width="645" height="548"  /></noscript></p>
<p><a href="https://github.com/rilyu/teaset">Teaset</a> is a UI library that provides over 20 pure components that have a minimal approach to design. The goal of this library is for you and your users to stay more focused on the content of the app instead of its design. It supports some typical components like <code>Input</code> and <code>CheckBox</code>, but then, at the same time, it provides more uncommon components, like <code>Stepper</code>, <code>Badge</code>, <code>TabView</code>, and <code>DrawerView</code>.</p>
<p>At the time of writing, support for the web is <a href="https://github.com/rilyu/teaset/issues/377">not yet available</a> for Teaset.</p>
<h3>TL;DR: Teaset</h3>
<ul>
<li><a href="https://github.com/rilyu/teaset/blob/master/README.md">Documentation</a>: Translated from <a href="https://github.com/rilyu/teaset/tree/master/docs/cn">Chinese</a></li>
<li>No support for Expo</li>
<li><a href="https://github.com/rilyu/teaset">GitHub repository</a></li>
</ul>
<h2 id="shoutem-ui">Shoutem UI</h2>
<p><img             class="aligncenter wp-image-148552 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/shoutem-ui-example.jpeg" alt="Shoutem UI Example" width="730" height="568"    /><noscript><img               class="aligncenter wp-image-148552 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/shoutem-ui-example.jpeg" alt="Shoutem UI Example" width="730" height="568"  /></noscript></p>
<p>If you’re in the market for a professional-looking UI for your React Native iOS or Android apps, then the Shoutem UI kit is a great choice. Shoutem UI is an open source library that is a part of the <a href="https://shoutem.github.io/docs/ui-toolkit/introduction">Shoutem UI toolkit</a>.</p>
<p>Shoutem UI consists of more than 25 composable and customizable UI components that come with pre-defined styles that support other components. You can build complex UIs by combining them. You can also apply custom CSS-like stying using the Shoutem <a href="https://github.com/shoutem/theme">themes library</a> and animations using the <a href="https://github.com/shoutem/animation">animation components library</a>, like <code>ZoomIn</code>, <code>FadeIn</code>, etc.</p>
<h3>TL;DR: Shoutem UI</h3>
<ul>
<li><a href="https://shoutem.github.io/docs/ui-toolkit/introduction">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/shoutem/ui">GitHub repository</a></li>
</ul>
<h2 id="lottie-react-native">Lottie for React Native</h2>
<p><img             class="aligncenter wp-image-148550 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/lottie-react-native-ui.gif" alt="Lottie React Native UI" width="730" height="183"  /><noscript><img               class="aligncenter wp-image-148550 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/lottie-react-native-ui.gif" alt="Lottie React Native UI" width="730" height="183"/></noscript></p>
<p>Lottie is an excellent open source animated graphic library developed by Airbnb for creating beautiful animations. The Lottie community provides featured animations that you can use freely for React Native iOS or Android applications.</p>
<p>You can also create custom animations using <a href="https://www.adobe.com/products/aftereffects.html">Adobe After Effects</a>. Lottie then uses the <a href="https://github.com/airbnb/lottie-web">Bodymovin</a> extension to export the custom animations to JSON format and render it in the native mobile app. Because of the JSON export format, your app will have a great performance.</p>
<p>The <code><a href="https://github.com/lottie-react-native/lottie-react-native">lottie-react-native</a></code> package includes the <code>Lottie</code> component, which you can use to add Lottie animations in React Native apps. Internally, it uses <code><a href="https://github.com/airbnb/lottie-android">lottie-android</a></code> and <code><a href="https://github.com/airbnb/lottie-ios">lottie-ios</a></code> to render Lottie-formatted files natively on Android and iOS, respectively.</p>
<h3>TL;DR: Lottie for React Native</h3>
<ul>
<li><a href="https://airbnb.io/lottie/#/">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/lottie-react-native/lottie-react-native">GitHub repository</a></li>
</ul>
<h2 id="react-native-maps">React Native Maps</h2>
<p><img             class="aligncenter wp-image-148545 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-maps-ui-example.gif" alt="React Native Maps UI Example" width="730" height="623"  /><noscript><img               class="aligncenter wp-image-148545 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-maps-ui-example.gif" alt="React Native Maps UI Example" width="730" height="623"/></noscript></p>
<p><a href="https://github.com/react-native-maps/react-native-maps">React Native Maps</a> is another useful library that provides customizable map components for your iOS and Android apps. The components in this library include:</p>
<ul>
<li><code>MapView</code></li>
<li><code>Marker</code></li>
<li><code>Polygon</code></li>
<li><code>Polyline</code></li>
<li><code>Callout</code></li>
<li><code>Circle</code></li>
<li><code>HeatMap</code></li>
<li><code>Geojson</code></li>
<li><code>Overlay</code></li>
</ul>
<p>Using these components, you can offer your users different experiences on the map. Additionally, you can combine the components with the <a href="https://github.com/react-native-maps/react-native-maps#using-the-mapview-with-the-animated-api">Animated API</a> to give an animated effect for the components. For example, you can animate the zoom, marker views, and marker coordinates, and also render polygons and polylines on the map.</p>
<p>However, React Native Maps is compatible only with React Native ≥v0.64.3. Be sure to update your React Native version if you plan to use React Native Maps with a project that uses an older React Native version.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3>TL;DR: React Native Maps</h3>
<ul>
<li><a href="https://github.com/react-native-maps/react-native-maps">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/react-native-maps/react-native-maps">GitHub repository</a></li>
</ul>
<h2 id="react-native-gifted-chat">React Native Gifted Chat</h2>
<p><img             class="aligncenter wp-image-148541 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-gifted-chat-example.gif" alt="React Native Gifted Chat Example" width="405" height="780"  /><noscript><img               class="aligncenter wp-image-148541 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/react-native-gifted-chat-example.gif" alt="React Native Gifted Chat Example" width="405" height="780"/></noscript></p>
<p>In some development scenarios, React Native developers add chat screens to their mobile apps. For example, situations like integrating a chatbot or implementing an inter-user chat system require developing a chat component that includes incoming and outgoing messages with avatars, a text input for typing a message, and a send button.</p>
<p>The <a href="https://github.com/FaridSafi/react-native-gifted-chat">react-native-gifted-chat</a> library offers a pre-developed customizable chat component that you can use without having to write one from scratch.</p>
<p>This chat component library comes with the following highlighted features:</p>
<ul>
<li>Highly customizable UI</li>
<li>Useful event handlers, like <code>onPressAvatar</code>, <code>onInputTextChanged</code>, and more</li>
<li>Typing indicator</li>
<li>Quick reply options for building chatbot UI’s</li>
<li>Composer actions, like for attaching photos</li>
</ul>
<h3>TL;DR: React Native Gifted Chat</h3>
<ul>
<li><a href="https://github.com/FaridSafi/react-native-gifted-chat">Documentation</a></li>
<li>Includes support for Expo</li>
<li><a href="https://github.com/FaridSafi/react-native-gifted-chat">GitHub repository</a></li>
<li><a href="https://reverent-bardeen-47c862.netlify.app/">Live example</a></li>
</ul>
<h2 id="sowhatisthebestreactnativecomponentlibrary">So, what is the best React Native component library?</h2>
<p>To answer this question, you’ll have to consider your own unique project. If multiple component libraries suit your design or development goals, selecting the one with good developer support, active development timeline, and well-written documentation is a good decision.</p>
<p>The component libraries included in the list are actively maintained. These libraries exist to make your development faster and provide a robust way to build apps so that you’re not reinventing the wheel every time you create a new React Native app. As long as you know what you’re looking to achieve in your UI design, any of these libraries should do the trick.</p>
<p>You can find more third-party, open source UI component libraries from the <a href="https://github.com/jondot/awesome-react-native#ui"><code>awesome-react-native</code></a> GitHub repository. Do you have a favorite React Native component library? Let us know in the comments!</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-14965" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/react-native-component-libraries/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/react-native-component-libraries/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-14965" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/react-native-component-libraries/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-14965" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/react-native-component-libraries/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/react-native-component-libraries/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>15 ways to implement vertical alignment with CSS - LogRocket Blog</title>
			<link>https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>15 ways to implement vertical alignment with CSS - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/">15 ways to implement vertical alignment with CSS - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/facundocorradini/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/facundocorradini.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/facundocorradini.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/facundocorradini/">
Facundo Corradini <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer, CSS specialist, best cebador de mates ever.</span>
</div>
</div>
<h1 class="posttitle">15 ways to implement vertical alignment with CSS</h1>
<p>
<span class="post-date"><time class="post-date">
September 8, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1635</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><strong><em>Editor’s note</em></strong>: <em>This post was last updated on</em> <em>8</em> <em>September 2</em><em>022</em> <em>to improve code and update any outdated information.</em></p>
<p>Back in the good old days, the limits of CSS made even “simple” things like vertical centering a challenge, with some developers even relying on JavaScript solutions. It was fragile, it was very constrained, and there was always that one exception that made it fail.</p>
<p>Whether we were trying to align an icon or image beside the text, create one of those popular hero banners, or create a modal overlay, centering things on the vertical axis was always a struggle.</p>
<p>But CSS has come a long way since, providing lots of methods that make vertical centering easier every time. Here’s a summary of some of them, along with their use cases and limitations.</p>
<p>To jump ahead in this article:</p>
<ul>
<li><a href="#absolute-positioning-margin-auto">Absolute positioning and <code>margin: auto</code></a></li>
<li><a href="#classic-top-50-translatey-50">The classic <code>top:50%</code>, <code>translateY(-50%)</code></a></li>
<li><a href="#centering-tables">Centering with tables</a></li>
<li><a href="#ghost-element-method">The ghost element method</a></li>
<li><a href="#margin-auto-flex-item">Using <code>margin: auto</code> on a <code>flex</code> item</a></li>
<li><a href="#pseudoelements-flex-container">Pseudo-elements on a <code>flex</code> container</a></li>
<li><a href="#align-flex-container-flex-item">Align on the <code>flex</code> container or the <code>flex</code> item</a></li>
<li><a href="#align-grid-container-grid-item">Align on the <code>grid</code> container or the <code>grid</code> item</a></li>
<li><a href="#pseudoelements-grid">Pseudo-elements on a grid</a></li>
<li><a href="#explicit-grid-row-placement">Explicit grid row placement</a></li>
<li><a href="#margin-auto-grid-item"><code>margin: auto</code> on a <code>grid</code> item</a></li>
</ul>
<p><strong >Side Note:</strong> Unless explicitly stated, each strategy highlighted below will work with inline elements as well, which makes sense given that we’ll be directly transforming their position or display properties.</p>
<h2 id="absolute-positioning-margin-auto">1. Absolute positioning and <code>margin: auto</code></h2>
<p>An element with no intrinsic size can be centered by simply using equal values from the top and bottom. When an element has intrinsic dimensions, we can use <code>0</code> for top and bottom, then apply <code>margin: auto</code>. This automatically centers the element:</p>
<pre class="language-css hljs">.container{
  position:relative;
}
.element{
  position:absolute;
  top: 0; bottom: 0; left: 0; right: 0;
  margin: auto;
  height: 20px; /*requires explicit height*/
}
</pre>
<p>We’ve added additional styles in the CodePen to make the demo more presentable.<br/>
The limitation is, of course, that the element height must be explicitly declared, or it will occupy the entire container.</p>
<h2 id="classic-top-50-translatey-50">2. The classic <code>top:50%</code>, <code>translateY(-50%)</code></h2>
<p>This is one of the first tricks, and still a go-to, for many developers. By relying on absolute positioning, the inner element at 50 percent from the top of their parent, we can then translate it up to 50 percent of its height:</p>
<pre class="language-css hljs">.container{
  position: relative;
}
.element{
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}
</pre>
<p>A fairly solid approach, with the only major limitation being the use of translate that might get in the way of other transforms, for example, when applying transitions or animations.</p>
<h2 id="centering-tables">3. Centering with tables</h2>
<p>A really simple approach and one of the first (back in the day, <a href="https://blog.logrocket.com/building-a-table-component-with-tailwind-css/">everything was centered around tables</a>), is using the behavior of table cells and <code>vertical-align</code> to center an element on a container.</p>
<p>This can be done with actual tables or using semantic HTML, switching the display of the element to <code>table-cell</code>:</p>
<pre class="language-css hljs">.container{
  display: table;
  height: 100%;
}
.element{
  display: table-cell;
  text-align: center;
  vertical-align: middle;
}
</pre>
<p>This works even when both elements are of unknown height. The major limitation is, of course, if you need to have a non-centered sibling, it might get tricky with the background limits.</p>
<p>Also, bear in mind that this totally fails on screen readers (even if your markup is based on divs, setting the CSS display to <code>table</code> and <code>table-cell</code> makes screen readers interpret it as an actual table). So, it’s far from the best when it comes to accessibility.</p>
<h2 id="ghost-element-method">4. The ghost element method</h2>
<p>Another oldie that didn’t catch up for whatever reason is using <code>inline-block</code> with a ghost (pseudo) element that has 100% height of the parent, then setting <code>vertical-align: middle</code> for both the pseudo-element and the element we want to center:</p>
<pre class="language-css hljs">.container::before {
  content: '';
  display: inline-block;
  height: 100%;
  vertical-align: middle;
  margin-left: -0.5ch;
}
.element{
  display: inline-block;
  vertical-align: middle;
}
</pre>
<p>It actually works quite well, with the most noticeable catch being that it moves the horizontal center just a tiny bit to the right because of the always cringy behavior of white space between <code>inline-block</code> elements.</p>
<p>This can be dealt with by adjusting the margin on the pseudo-element. In our case, we’ve assigned <code>margin-left: -0.5ch</code>. We can also get a perfect centering by setting the font size to <code>0</code> on the container and then resetting it to <code>px</code> or <code>rem</code> on the element:</p>
<pre class="language-css hljs">.container {
  font-size: 0;
}
.container::before {
  ...
/*   margin-left: -0.5ch; */
}
.element{
  /* ... */
  font-size: 16px;
}
</pre>
<h2 id="margin-auto-flex-item">5. Using <code>margin: auto</code> on a <code>flex</code> item</h2>
<p>Finally, getting into <a href="https://blog.logrocket.com/how-to-build-a-basic-flexbox-layout-a-tutorial-with-examples/">modern CSS territory, Flexbox</a> introduced a pretty awesome behavior for <code>auto</code> margins. Now, it not only horizontally centers an element as it did in block layouts, but it also centers it on the vertical axis:</p>
<pre class="language-css hljs">.container{
  display: flex;
}
.element{
  margin: auto;
}
</pre>
<p>This tactic is one of my favorites because of its simplicity. The only major limitation is that it’ll only work with a single element.</p>
<h2 id="pseudoelements-flex-container">6. Pseudo-elements on a <code>flex</code> container</h2>
<p>Not the most practical approach in the world, but we can also use flexible, empty, pseudo-elements to push an element to the center:</p>
<pre class="language-css hljs">.container{
  display: flex;
  flex-direction: column;
}
.container::before,
.container::after {
  content: "";
  flex: 1;
}
.element{
  /* ... */
  margin: 0 auto;
}
</pre>
<p>This can be useful when we want to keep flexible spacing on a column-oriented flex container with multiple items.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h2 id="align-flex-container-flex-item">7 and 8. Align on the <code>flex</code> container or the <code>flex</code> item</h2>
<p>Flexbox also introduced really great alignment properties (that are now forked into their own <a href="https://www.w3.org/TR/css-align-3/#propdef-align-content">box alignment module</a>).</p>
<p>This allows us to control how items are placed and how empty space is distributed in ways that would have required either magic numbers in CSS for a specific number of elements, or clever JavaScript for dynamic amounts.</p>
<p>Depending on the <code>flex-direction</code>, we might use <code>justify-content</code> or <code>align-items</code> to adjust as needed.</p>
<p>On the container:</p>
<pre class="language-css hljs">.container{
  display: flex;
  justify-content: center;
  align-items: center;
}
</pre>
<p>On a particular flex item:<br/>
&lt;</p>
<pre class="language-css hljs">.container{
  display: flex;
}
.element{
  align-self: center;
  margin: 0 auto;
}
</pre>
<p>There are not many downsides to this, except when you need to support older browsers. IE 11 should work, but its implementation of Flexbox is quite buggy, so it should always be treated with extra care.</p>
<p>IE 10 requires additional work that has different syntax and requires the <code>-ms</code> vendor prefix.</p>
<h2 id="vertical-align-inline-elements">9. Using <code>vertical-align</code> for inline elements</h2>
<p>You can also use the vertical-align property to center inline, inline-block, or table cell elements vertically. One of the many applications for this approach is to vertically align an image with text or to vertically align the content of a table cell.</p>
<pre class="language-css hljs">.element {
  display: &lt;inline OR inline-block>;
  vertical-align: middle;
}
</pre>
<blockquote class="embedly-card" data-card-controls="1" data-card-align="center" data-card-theme="light">
<h4><a href="https://codepen.io/asaoluelijah/embed/gOzgjxo">CodePen Embed – Centering (inline): vertical-align</a></h4>
<p>No Description</p>
</blockquote>
<p></p>
<blockquote><p>CodePen link: <a href="https://codepen.io/asaoluelijah/pen/gOzgjxo">https://codepen.io/asaoluelijah/pen/gOzgjxo</a></p></blockquote>
<p>This method not working with the block element could be a deal breaker. Apart from that, it works reasonably well and is also supported by older browsers.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h2 id="align-grid-container-grid-item">10 and 11. Align on the <code>grid</code> container or the <code>grid</code> item</h2>
<p>CSS grid includes pretty much the same alignment options as Flexbox, so we can use it on the <code>grid</code> container:</p>
<pre class="language-css hljs">.container{
  display: grid;
  align-items: center;
  justify-content: center;
}
</pre>
<p>Or we can use it just on a specific <code>grid</code> item:</p>
<pre class="language-css hljs">.container{
  display: grid;
}
.element{
  justify-self: center;
  align-self: center
}
</pre>
<p>Lack of legacy browser support is the only limitation of this technique.</p>
<h2 id="pseudoelements-grid">12. Pseudo-elements on a grid</h2>
<p>Similarly to the Flexbox alternative, we can use a three-row grid with pseudo-elements:</p>
<pre class="language-css hljs">.container{
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: repeat(3, 1fr);
}
.container::before,
.container::after{
  content:"";
}
</pre>
<p>Remember that <code>[1fr](https://github.com/w3c/csswg-drafts/issues/1777)</code> <a href="https://github.com/w3c/csswg-drafts/issues/1777">actually means</a> <code>[minmax(auto, 1fr)](https://github.com/w3c/csswg-drafts/issues/1777)</code>, so the empty rows will not necessarily take one-third of the container height. They will collapse as needed all the way down to their minimal value of <code>auto</code>, which, without content, means <code>0</code>.</p>
<p>This might look like a silly approach, but it allows us to easily pull off one of my favorite CSS Grid tricks: combining <code>fr</code> rows with <code>minmax</code> ones, which causes the empty <code>fr</code> ones to collapse first, followed by the <code>mixmax</code> ones.</p>
<p>So, having the pseudos take the fully-collapsible rows allows the auto-placement algorithm to work its magic on our actual elements, except if we need to support IE, which lacks auto-placement.T his leads us to the next method…</p>
<h2 id="explicit-grid-row-placement">13. Explicit grid row placement</h2>
<p>CSS grid allows items to be explicitly placed on a specific row, so the same grid declaration as above and the item placed on the second row will be enough:</p>
<pre class="language-css hljs">.container{
  display:grid;
  grid-template-columns:1fr;
  grid-template-rows: repeat(3, 1fr);
}
.element{
  grid-row: 2 / span 1; /* or grid-row: 2/3 */
}
</pre>
<p>This can work down to IE10. Believe it or not, IE was one of the first and stronger supporters for CSS grid, shipping it all the way back in 2011 with IE10. It has a completely different syntax, but we can make it work:</p>
<pre class="language-css hljs">.container{
  display: -ms-grid;
  -ms-grid-rows: (1fr)[3];
  -ms-grid-columns: 1fr;
}
.element{
  -ms-grid-column: 1;
  -ms-grid-row: 2;
}
</pre>
<h2 id="margin-auto-grid-item">14. <code>margin: auto</code> on a <code>grid</code> item</h2>
<p>Similarly to Flexbox, applying <code>margin:</code> <code>auto</code> on a <code>grid</code> item centers it on both axes.</p>
<pre class="language-css hljs">.container{
  display: grid;
}
.element{
  margin: auto;
}
</pre>
<h2 id="grid-place-items"><strong>15.</strong> <code>grid</code> <strong>+</strong> <code>place-items</code></h2>
<p>Saving the best for last; another beautiful and straightforward <code>grid</code> implementation is applying the <code>center</code> value to a <code>place-items</code> property in the same grid element, and all its child elements are magically centered.</p>
<pre class="language-css hljs">.container{
  display: grid;
  place-items: center;
}
.element{
/* Additional styling for child element? */
}
</pre>
<blockquote class="embedly-card" data-card-controls="1" data-card-align="center" data-card-theme="light">
<h4><a href="https://codepen.io/asaoluelijah/embed/dyeNjYM">CodePen Embed – Centering: grid + place-items</a></h4>
<p>No Description</p>
</blockquote>
<p></p>
<blockquote><p>CodePen link: <a href="https://codepen.io/asaoluelijah/pen/dyeNjYM">https://codepen.io/asaoluelijah/pen/dyeNjYM</a></p></blockquote>
<p>However, the <code>place-item</code> property is still relatively new, and browser support may be an issue given that it is incompatible with <a href="https://caniuse.com/#search=place-items">older browsers</a> like IE11 and Chrome 4-58.</p>
<h2 id="css-alignment-future-implementations">Some (probable) future implementations</h2>
<p>According to the <a href="https://www.w3.org/TR/css-align-3/">CSS Box Alignment Module Level 3 specification</a>, <code>align-content</code> should work on the block axis of <code>block</code> containers and <code>multicol</code> containers, so (if browsers implement it) we should be able to center the content of those containers just like we do in <code>flex</code> or <code>grid</code> containers.</p>
<h2 id="conclusion">Conclusion</h2>
<p>And that’s it. What was once extremely hard can now be achieved in a dozen-plus different ways, and I’m probably missing a couple more. If you know other techniques, please share them in the comments.</p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-387" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-387" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-387" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/15-ways-implement-vertical-alignment-css/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>18 JavaScript and TypeScript shorthands to know - LogRocket Blog</title>
			<link>https://blog.logrocket.com/javascript-typescript-shorthands/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/javascript-typescript-shorthands/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>18 JavaScript and TypeScript shorthands to know - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/javascript-typescript-shorthands/">18 JavaScript and TypeScript shorthands to know - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ibiyemiadewakun/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/07/Ibiyemi-Adewakun.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/07/Ibiyemi-Adewakun.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ibiyemiadewakun/">
Ibiyemi Adewakun <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Ibiyemi is a full-stack developer from Lagos. When she's not writing code, she likes to read, listen to music, and put cute outfits together.</span>
</div>
</div>
<h1 class="posttitle">18 JavaScript and TypeScript shorthands to know</h1>
<p>
<span class="post-date"><time class="post-date">
January 3, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2639</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note:</strong></em> <em>This guide to the most useful JavaScript and TypeScript shorthands was last updated on 3 January 2023 to address errors in the code and include information about the satisfies operator introduced in TypeScript v4.9.</em></p>
<p>JavaScript and TypeScript share a number of useful shorthand alternatives for common code concepts. Shorthand code alternatives can help reduce lines of code, which is something we typically strive for.</p>
<p>In this article, we will review 18 common <a href="https://blog.logrocket.com/tag/vanilla-javascript/">JavaScript</a> and <a href="https://blog.logrocket.com/tag/typescript/">TypeScript</a> and shorthands. We will also explore examples of how to use these shorthands.</p>
<p>Read through these useful JavaScript and TypeScript shorthands or navigate to the one you’re looking for in the list below.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#javascript-typescript-shorthands">JavaScript and TypeScript shorthands</a></li>
<li><a href="#ternary-operator">Ternary operator</a></li>
<li><a href="#short-circuit-evaluation">Short-circuit evaluation</a></li>
<li><a href="#nullish-coalescing-operator">Nullish coalescing operator</a></li>
<li><a href="#template-literals">Template literals</a></li>
<li><a href="#object-property-assignment-shorthand">Object property assignment shorthand</a></li>
<li><a href="#optional-chaining">Optional chaining</a></li>
<li><a href="#object-destructuring">Object destructuring</a></li>
<li><a href="#spread-operator">Spread operator</a></li>
<li><a href="#object-loop-shorthand">Object loop shorthand</a></li>
<li><a href="#array-indexof-shorthand-bitwise-operator"><code>Array.indexOf</code> shorthand using the bitwise operator</a></li>
<li><a href="#casting-values-boolean">Casting values to Boolean with <code>!!</code></a></li>
<li><a href="#arrow-lambda-function-expression">Arrow/lambda function expression</a></li>
<li><a href="#implicit-return-arrow-function-expressions">Implicit return using arrow function expressions</a></li>
<li><a href="#double-bitwise-not-operator">Double bitwise NOT operator</a></li>
<li><a href="#exponent-power-shorthand">Exponent power shorthand</a></li>
<li><a href="#typescript-constructor-shorthand">TypeScript constructor shorthand</a></li>
<li><a href="#typescript-satisfied-operator">TypeScript satisfies operator</a></li>
</ul>
<h2 id="javascript-typescript-shorthands">JavaScript and TypeScript shorthands</h2>
<p>Using shorthand code is not always the right decision when<a href="https://blog.logrocket.com/12-tips-for-writing-clean-and-scalable-javascript-3ffe30abfe20/"> writing clean and scalable code</a>. Concise code can sometimes be more confusing to read and update. So, it is important that your code is legible and conveys meaning and context to other developers.</p>
<p>Our decision to use shorthands must not be detrimental to other desirable code characteristics. Keep this in mind when using the following shorthands for<a href="https://blog.logrocket.com/a-comprehensive-guide-to-javascript-expressions/"> expressions and operators in JavaScript</a> and TypeScript.</p>
<p>All shorthands available in JavaScript are available in the same syntax in TypeScript. The only slight differences are in specifying the type in TypeScript, and the TypeScript constructor shorthand is exclusive to TypeScript.</p>
<h2 id="ternary-operator">Ternary operator</h2>
<p>The ternary operator is one of the most popular shorthands in JavaScript and TypeScript. It replaces the traditional <code>if…else</code> statement. Its syntax is as follows:</p>
<pre class="language-javascript hljs">[condition] ? [true result] : [false result]
</pre>
<p>The following example demonstrates a traditional <code>if…else</code> statement and its shorthand equivalent using the ternary operator:</p>
<pre class="language-javascript hljs">// Longhand

const mark = 80

if (mark >= 65) {
  return "Pass"
} else {
  return "Fail"
}

// Shorthand
const mark = 80

return mark >= 65 ? "Pass" : "Fail"
</pre>
<blockquote><p>The ternary operator is great when you have single-line operations like assigning a value to a variable or returning a value based on two possible conditions. Once there are more than two outcomes to your condition, using <code>if/else</code> blocks are much easier to read.</p></blockquote>
<h2 id="short-circuit-evaluation">Short-circuit evaluation</h2>
<p>Another way to replace an <code>if…else</code> statement is with short-circuit evaluation. This shorthand uses the logical OR operator <code>||</code> to assign a default value to a variable when the intended value is falsy.</p>
<p>The following example demonstrates how to use short-circuit evaluation:</p>
<pre class="language-javascript hljs">// Longhand
let str = ''
let finalStr

if (str !== null &amp;&amp; str !== undefined &amp;&amp; str != '') {
  finalStr = str
} else {
  finalStr = 'default string'
}

// Shorthand
let str = ''
let finalStr = str || 'default string' // 'default string
</pre>
<blockquote><p>This shorthand is best used when you have a single-line operation and your condition depends on the falseness or non-falseness of a value/statement.</p></blockquote>
<h2 id="nullish-coalescing-operator">Nullish coalescing operator</h2>
<p>The <a href="https://blog.logrocket.com/optional-chaining-and-nullish-coalescing-in-javascript/">nullish coalescing operator</a> <code>??</code> is similar to short-circuit evaluation in that it assigns a variable a default value. However, the nullish coalescing operator only uses the default value when the intended value is also nullish.</p>
<p>In other words, if the intended value is falsy but not nullish, it will not use the default value.</p>
<p>Here are two examples of the nullish coalescing operator:</p>
<h3>Example one</h3>
<pre class="language-javascript hljs">// Longhand
let str = ''
let finalStr

if (str !== null &amp;&amp; str !== undefined) {
  finalStr = 'default string'
} else {
  finalStr = str
}

// Shorthand
let str = ''
let finaStr = str ?? 'default string' // ''
</pre>
<h3>Example two</h3>
<pre class="language-javascript hljs">// Longhand
let num = null
let actualNum

if (num !== null &amp;&amp; num !== undefined) {
  actualNum = num
} else {
  actualNum = 0
}

// Shorthand
let num = null
let actualNum = num ?? 0 // 0
</pre>
<h2 id="logical-nullish-assignment-operator">Logical nullish assignment operator</h2>
<p>This is similar to the nullish coalescing operator by checking that a value is nullish and has added the ability to assign a value following the null check.</p>
<p>The example below demonstrates how we would check and assign in longhand and shorthand using the logical nullish assignment:</p>
<pre class="language-javascript hljs">// Longhand
let num = null

if (num === null) {
  num = 0
}

// shorthand
let num = null

num ??= 0
</pre>
<blockquote><p>JavaScript has several other assignment shorthands like addition assignment <code>+=</code>, multiplication assignment <code>*=</code>, division assignment <code>/=</code>, remainder assignment <code>%=</code>, and several others. You can find a full list of assignment operators<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators"> here</a>.</p></blockquote>
<h2 id="template-literals">Template literals</h2>
<p>Template literals, which was introduced as part of<a href="https://blog.logrocket.com/javascript-es6-5-new-abstractions-to-improve-your-code-54a369e82407/"> JavaScript’s powerful ES6 features</a>, can be used instead of <code>+</code> to concatenate multiple variables within a string. To use template literals, wrap your strings in <code>``</code> and variables in <code>${}</code> within those strings.</p>
<p>The example below demonstrates how to use template literals to perform string interpolation:</p>
<pre class="language-javascript hljs">// Longhand
const name = 'Iby'
const hobby = 'to read'

const fullStr = name + ' loves ' + hobby // 'Iby loves to read'

// Shorthand
const name = 'Iby'
const hobby = 'to read'

const fullStr = `${name} loves ${hobby}` // 'Iby loves to read'
</pre>
<p>You can also use template literals to build multi-line strings without using <code>\n</code>. For example:</p>
<pre class="language-javascript hljs">// Shorthand
const name = 'Iby'
const hobby = 'to read'
const fullStr = `${name} loves ${hobby}.
She also loves to write!` 
</pre>
<p>Using template literals is helpful for adding strings whose values may change into a larger string, like HTML templates. They are also useful for creating multi-line string because string wrapped in template literals retain all white spacing and indentation.</p>
<h2 id="object-property-assignment-shorthand">Object property assignment shorthand</h2>
<p>In JavaScript and TypeScript, you can assign a property to an object in shorthand by mentioning the variable in the object literal. To do this, the variable must be named with the intended key.</p>
<p>See an example of the object property assignment shorthand below:</p>
<pre class="language-javascript hljs">// Longhand
const obj = {
  x: 1,
  y: 2,
  z: 3
}
</pre>
<pre class="language-javascript hljs">// Shorthand
const x = 8
const y = 10
const obj = { x, y }
</pre>
<h2 id="optional-chaining">Optional chaining</h2>
<p>Dot notation allows us to access the keys or values of an object. With<a href="https://blog.logrocket.com/optional-chaining-and-nullish-coalescing-in-javascript/"> optional chaining</a>, we can go a step further and read keys or values even when we are not sure whether they exist or are set.</p>
<p>When the key does not exist, the value from optional chaining is <code>undefined</code>. This helps us avoid unneeded <code>if/else</code> check conditions when reading values from objects and unnecessary <code>try/catch</code> to handle errors thrown from trying to access object keys that don’t exist.</p>
<p>See an example of optional chaining in action below:</p>
<pre class="language-javascript hljs">// Longhand
const obj = {
  x: {
    y: 1,
    z: 2
  },
  others: [
    'test',
    'tested'
  ] 
}

if (obj.hasProperty('others') &amp;&amp; others.length >= 2) {
  console.log('2nd value in others: ', obj.others[1])
}
</pre>
<pre class="language-javascript hljs">// Shorthand
const obj = {
  x: {
    y: 1,
    z: 2
  },
  others: [
    'test',
    'tested'
  ] 
}

console.log('2nd value in others: ', obj.others?.[1]) // 'tested'
console.log('3rd value in others: ', obj.others?.[2]) // undefined
</pre>
<h2 id="object-destructuring">Object destructuring</h2>
<p>Besides the traditional dot notation, another way to read the values of an object is by destructuring the object’s values into their own variables.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The following example demonstrates how to read the values of an object using the traditional dot notation compared to the shorthand method using object destructuring:</p>
<pre class="language-javascript hljs">// Longhand
const obj = {
  x: {
    y: 1,
    z: 2
  },
  other: 'test string'
}

console.log('Value of z in x: ', obj.x.z)
console.log('Value of other: ', obj.other)

// Shorthand
const obj = {
  x: {
    y: 1,
    z: 2
  },
  other: 'test string'
}

const {x, other} = obj
const {z} = x

console.log('Value of z in x: ', z)
console.log('Value of other: ', other)

You can also rename the variables you destructure from the object. Here's an example:
const obj = {x: 1, y: 2}
const {x: myVar} = object

console.log('My renamed variable: ', myVar) // My renamed variable: 1
</pre>
<h2 id="spread-operator">Spread operator</h2>
<p>The spread operator <code>…</code> is used to access the content of arrays and objects. You can use the spread operator to replace<a href="https://blog.logrocket.com/javascript-array-methods/"> array functions</a>, like <code>concat</code>, and object functions, like <code>object.assign</code>.</p>
<p>Review the examples below to see how the spread operator can replace longhand array and object functions:</p>
<pre class="language-javascript hljs">// Longhand
const arr = [1, 2, 3]
const biggerArr = [4,5,6].concat(arr)

const smallObj = {x: 1}
const otherObj = object.assign(smallObj, {y: 2})

// Shorthand
const arr = [1, 2, 3]
const biggerArr = [...arr, 4, 5, 6]

const smallObj = {x: 1}
const otherObj = {...smallObj, y: 2}
</pre>
<h2 id="object-loop-shorthand">Object loop shorthand</h2>
<p>The traditional JavaScript <code>for</code> loop syntax is as follows:</p>
<pre class="language-javascript hljs">for (let i = 0; i &lt; x; i++) { … }
</pre>
<p>We can use this loop syntax to iterate through arrays by referencing the array length for the iterator. There are three <code>for</code> loop shorthands that offer different ways to iterate through an array object:</p>
<ul>
<li><code>for…of</code>: To access the array entries</li>
<li><code>for…in</code>: To access the indexes of an array and the keys when used on an object literal</li>
<li><code>Array.forEach</code>: To perform operations on the array elements and their indexes using a callback function</li>
</ul>
<p>Please note, <code>Array.forEach</code> callbacks have three possible arguments, which are called in this order:</p>
<ul>
<li>The element of the array for the ongoing iteration</li>
<li>The element’s index</li>
<li>A full copy of the array</li>
</ul>
<p>The examples below demonstrate these object loop shorthands in action:</p>
<pre class="language-javascript hljs">// Longhand
const arr = ['Yes', 'No', 'Maybe']

for (let i = 0; i &lt; arr.length; i++) {
  console.log('Here is item: ', arr[i])
}

// Shorthand
const arr = ['Yes', 'No', 'Maybe']

for (let str of arr) {
  console.log('Here is item: ', str)
}

arr.forEach((str) => {
  console.log('Here is item: ', str)
})

for (let index in arr) {
  console.log(`Item at index ${index} is ${arr[index]}`)
}

// For object literals
const obj = {a: 1, b: 2, c: 3}

for (let key in obj) {
  console.log(`Value at key ${key} is ${obj[key]}`)
}
</pre>
<h2 id="array-indexof-shorthand-bitwise-operator"><code>Array.indexOf</code> shorthand using the bitwise operator</h2>
<p>We can look up the existence of an item in an array using the <code>Array.indexOf</code> method. This method returns the index position of the item if it exists in the array and returns <code>-1</code> if it does not.</p>
<p>In JavaScript, <code>0</code> is a falsy value, while numbers less than or greater than <code>0</code> are considered truthy. Typically, this means we need to use an <code>if…else</code> statement to determine if the item exists using the returned index.</p>
<p><a href="https://blog.logrocket.com/interesting-use-cases-for-javascript-bitwise-operators/">Using the bitwise operator</a> <code>~</code> instead of an <code>if…else</code> statement allows us to get a truthy value for anything greater than or equal to <code>0</code>.</p>
<p>The example below demonstrates the <code>Array.indexOf</code> shorthand using the bitwise operator instead of an <code>if…else</code> statement:</p>
<pre class="language-javascript hljs">const arr = [10, 12, 14, 16]

const realNum = 10
const fakeNum = 20

const realNumIndex = arr.indexOf(realNum)
const noneNumIndex = arr.indexOf(fakeNum)

// Longhand
if (realNumIndex > -1) {
  console.log(realNum, ' exists!')
} else if (realNumIndex === -1) {
  console.log(realNum, ' does not exist!')
}

if (noneNumIndex > -1) {
  console.log(fakeNum, ' exists!')
} else if (noneNumIndex === -1) {
  console.log(fakeNum, ' does not exist!')
}

// Shorthand
const arr = [10, 12, 14, 16]

const realNum = 10
const fakeNum = 20

const realNumIndex = arr.indexOf(realNum)
const noneNumIndex = arr.indexOf(fakeNum)

console.log(realNum + (~realNumIndex ? ' exists!' : ' does not exist!')
console.log(fakeNum + (~noneNumIndex ? ' exists!' : ' does not exist!')
</pre>
<h2 id="casting-values-boolean">Casting values to Boolean with <code>!!</code></h2>
<p>In JavaScript, we can cast variables of any type to a Boolean value using the <code>!![variable]</code> shorthand.</p>
<p>See an example of using the <code>!! [variable]</code> shorthand to cast values to <code>Boolean</code>:</p>
<pre class="language-javascript hljs">// Longhand
const simpleInt = 3
const intAsBool = Boolean(simpleInt)

// Shorthand
const simpleInt = 3
const intAsBool = !!simpleInt
</pre>
<h2 id="arrow-lambda-function-expression">Arrow/lambda function expression</h2>
<p>Functions in JavaScript can be written<a href="https://blog.logrocket.com/anomalies-in-javascript-arrow-functions/"> using arrow function syntax</a> instead of the traditional expression that explicitly uses the <code>function</code> keyword. Arrow functions are similar to<a href="https://blog.logrocket.com/a-complete-guide-to-kotlin-lambda-expressions/"> lambda functions in other languages</a>.</p>
<p>Take a look at this example of writing a function in shorthand using an arrow function expression:</p>
<pre class="language-javascript hljs">// Longhand
function printStr(str) {
  console.log('This is a string: ', str)
}
printStr('Girl!')

// Shorthand
const printStr = (str) => {
  console.log('This is a string: ', str)
}
printStr('Girl!')

// Shorthand TypeScript (specifying variable type)
const printStr = (str: string) => {
  console.log('This is a string: ', str)
}
printStr('Girl!')
</pre>
<h2 id="implicit-return-arrow-function-expressions">Implicit return using arrow function expressions</h2>
<p>In JavaScript, we typically use the <code>return</code> keyword to return a value from a function. When we define our function using arrow function syntax, we can implicitly return a value by excluding braces <code>{}</code>.</p>
<p>For multi-line statements, such as expressions, we can wrap our return expression in parentheses <code>()</code>. The example below demonstrates the shorthand code for implicitly returning a value from a function using an arrow function expression:</p>
<pre class="language-javascript hljs">// Longhand
function capitalize(name) {
  return name.toUpperCase()
}

function add(numA, numB) {
  return numA + numB
}

// Shorthand
const capitalize = (name) => name.toUpperCase()

const add = (numA, numB) => (numA + numB)

// Shorthand TypeScript (specifying variable type)
const capitalize = (name: string) => name.toUpperCase()

const add = (numA: number, numB: number) => (numA + numB)
</pre>
<h2 id="double-bitwise-not-operator">Double bitwise NOT operator</h2>
<p>In JavaScript, we typically access mathematical functions and constants using the built-in <code>Math</code> object. Some of those functions are <code>Math.floor()</code> , <code>Math.round()</code>, <code>Math.trunc()</code>, and many others.</p>
<p>The <code>Math.trunc()</code> (available in ES6) returns the integer part. For example, number(s) before the decimal of a given number achieves this same result using the Double bitwise NOT operator <code>~~</code>.</p>
<p>Review the example below to see how to use the Double bitwise NOT operator as a <code>Math.trunc()</code> shorthand:</p>
<pre class="language-javascript hljs">// Longhand
const num = 4.5
const floorNum = Math.trunc(num) // 4

// Shorthand
const num = 4.5
const floorNum = ~~num // 4
</pre>
<blockquote><p>It is important to note that the Double bitwise NOT operator <code>~~</code> is not an official shorthand for <code>Math.trunc</code> because some edge cases do not return the same result. More details on this are available<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#using_bitwise_no-ops_to_truncate_numbers"> here</a>.</p></blockquote>
<h2 id="exponent-power-shorthand">Exponent power shorthand</h2>
<p>Another mathematical function with a useful shorthand is the <code>Math.pow()</code> function. The alternative to using the built-in <code>Math</code> object is the <code>**</code> shorthand.</p>
<p>The example below demonstrates this exponent power shorthand in action:</p>
<pre class="language-javascript hljs">// Longhand
const num = Math.pow(3, 4) // 81

// Shorthand
const num = 3 ** 4 // 81
</pre>
<h2 id="typescript-constructor-shorthand">TypeScript constructor shorthand</h2>
<p>There is a shorthand for creating a class and assigning values to class properties via the<a href="https://blog.logrocket.com/writing-constructor-typescript/"> constructor in TypeScript</a>. When using this method, TypeScript will automatically create and set the<a href="https://blog.logrocket.com/when-how-use-interfaces-classes-typescript/"> class properties</a>. This shorthand is exclusive to TypeScript alone and not available in JavaScript class definitions.</p>
<p>Take a look at the example below to see the TypeScript constructor shorthand in action:</p>
<pre class="language-typescript hljs">// Longhand
class Person {
  private name: string
  public age: int
  protected hobbies: string[]

  constructor(name: string, age: int, hobbies: string[]) {
    this.name = name
    this.age = age
    this.hobbies = hobbies
  }
}

// Shorthand
class Person {
  constructor(
    private name: string,
    public age: int,
    protected hobbies: string[]
  ) {}
}
</pre>
<h2 id="typescript-satisfied-operator">TypeScript satisfies operator</h2>
<p>The satisfies operator gives some flexibility from the constraints of setting a type with the error handling covering having explicit types.</p>
<p>It is best used when a value has multiple possible types. For example, it can be a string or an array; with this operator, we don’t have to add any checks. Here’s an example:</p>
<pre class="language-typescript hljs">// Longhand
type Colors = "red" | "green" | "blue";
type RGB = [red: number, green: number, blue: number];
const palette: Record&lt;Colors, string | RGB> = {
    red: [255, 0, 0],
    green: "#00ff00",
    blue: [0, 0, 255]
};

if (typeof palette.red !== 'string') {
    console.log(palette.red.at(0))
}

// shorthand
type Colors = "red" | "green" | "blue";
type RGB = [red: number, green: number, blue: number];
const palette = {
    red: [255, 0, 0],
    green: "#00ff00",
    blue: [0, 0, 255]
} satisfies Record&lt;Colors, string | RGB>;

console.log(palette.red.at(0))
</pre>
<p>In the longhand version of our example above, we had to do a <code>typeof</code> check to make sure <code>palette.red</code> was of the <code>type RGB</code> and that we could read its first property with <code>at</code>.</p>
<p>While in our shorthand version, using <code>satisfies</code>, we don’t have the type restriction of <code>palette.red</code> being <code>string</code>, but we can still tell the compiler to make sure <code>palette</code> and its properties have the correct shape.</p>
<blockquote><p>The <code>Array.property.at()</code> i.e., <code>at()</code> method, accepts an integer and returns the item at that index. <code>Array.at</code> requires <code>ES2022</code> target, which is available from TypeScript v4.6 onwards. More information is available<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at"> here</a>.</p></blockquote>
<h2>Conclusion</h2>
<p>These are just a few of the most commonly used JavaScript and TypeScript shorthands.</p>
<p>JavaScript and TypeScript longhand and shorthand code typically work the same way under the hood, so choosing shorthand usually just means writing less lines of code. Remember, using shorthand code is not always the best option. What is most important is writing clean and understandable code that other developers can read easily.</p>
<p>What are your favorite JavaScript or TypeScript shorthands? Share them with us in the comments!</p><div class="code-block code-block-27" >
<div class="blog-plug inline-plug vanilla-javascript-cta"><h2><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Debug JavaScript errors more easily by understanding the context</h2>
<p>Debugging code is always a tedious task. But the more you understand your errors the easier it is to fix them.</p>
<p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> allows you to understand these errors in new and unique ways. Our frontend monitoring solution tracks user engagement with your JavaScript frontends to give you the ability to find out exactly what the user did that led to an error.</p>
<a href="https://lp.logrocket.com/blg/javascript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"/></noscript></a>
<p >LogRocket records console logs, page load times, stacktraces, slow network requests/responses with headers + bodies, browser metadata, and custom logs. Understanding the impact of your JavaScript code will never be easier!</p>
<a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-29 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-29 .fadeOut {
    opacity:0 !important;
}

.code-block-29 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-107594" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/javascript-typescript-shorthands/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/javascript-typescript-shorthands/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-107594" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/javascript-typescript-shorthands/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-107594" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/javascript-typescript-shorthands/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/javascript-typescript-shorthands/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>3 ways to add custom fonts to your MUI project - LogRocket Blog</title>
			<link>https://blog.logrocket.com/add-custom-fonts-mui/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/add-custom-fonts-mui/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>3 ways to add custom fonts to your MUI project - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/add-custom-fonts-mui/">3 ways to add custom fonts to your MUI project - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/lindaikechukwu/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/09/lindaikechukwu.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/09/lindaikechukwu.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/lindaikechukwu/">
Linda Ikechukwu <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer. Writer. Community Strategist. Building web interfaces that connect products to their target users.</span>
</div>
</div>
<h1 class="posttitle">3 ways to add custom fonts to your MUI project</h1>
<p>
<span class="post-date"><time class="post-date">
November 15, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1216</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was last updated 15 November 2022 to reflect changes made in MUI v5, including removing the deprecated <code>createMuiTheme</code> function. </em></p>
<p>With over 82k stars and 2,600 contributors on <a href="https://github.com/mui-org/material-ui">GitHub</a> at the time of writing, MUI is one of the most loved UI component libraries for React developers. With its diverse set of commonly used UI components, developers can quickly and easily build web interfaces, focusing on functionality instead of UI implementation.</p>
<p>MUI uses principles from the <a href="https://material.io/design/guidelines-overview">material design guide created by Google</a>. In this article, we’ll explore MUI and review three different ways to add custom fonts to your MUI project. Let’s get started!</p>
<ul>
<li><a href="#getting-started-mui">Getting started with MUI</a></li>
<li><a href="#add-custom-fonts-mui-project">How to add custom fonts to your MUI project</a></li>
<li><a href="#google-fonts-cdn">Method 1: Use the Google Fonts CDN</a></li>
<li><a href="#self-host-fonts-using-google">Method 2: Self host fonts using google-webfonts-helper</a></li>
<li><a href="#self-host-fonts-typefaces-npm-packages">Method 3: Self host fonts using the Typefaces npm packages</a></li>
<li><a href="#defining-different-fonts-different-elements">Defining different fonts for different elements</a></li>
</ul>
<h2 id="getting-started-mui">Getting started with MUI</h2>
<p>This article assumes that you use <a href="https://create-react-app.dev">Create React App</a> or any of the <a href="https://github.com/facebook/create-react-app/blob/master/README.md#popular-alternatives">other React toolchains</a>. If you’re setting up your own toolchain and build pipeline, be sure to include a plugin or loader for loading fonts.</p>
<p>To get started, install Create React App as follows:</p>
<pre class="language-bash hljs">/ with npm
npx create-react-app font-app
//with yarn
yarn create-react-app font-app
</pre>
<p>To use MUI in your application, install it via npm or yarn:</p>
<pre class="language-bash hljs">// with npm
npm install @mui/material @emotion/react @emotion/styled

// with yarn
yarn add @mui/material @emotion/react @emotion/styled
</pre>
<p>Then, we’ll add some UI components to work within our <code>App.js</code> folder:</p>
<pre class="language-javascript hljs">import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import './App.css';

function App() {
  return (
    &lt;div className="App">
      &lt;div>
      &lt;Typography variant="h2" gutterBottom>
          Welcome to React
      &amp;lt;/Typography>
        &lt;Button variant="contained" color="secondary">Ready To Go&lt;/Button>
      &lt;/div>
    &lt;/div>
  );
}
export default App;

</pre>
<h2 id="add-custom-fonts-mui-project">How to add custom fonts to your MUI project</h2>
<p>Using your browser’s inspector to inspect the button and header, you’ll see that the UI components are rendered using the default font family of Roboto. So, how do we change that?</p>
<figure id="attachment_143387"   class="wp-caption aligncenter"><img             class="wp-image-143387 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/button-header-rendered-roboto-font.png" alt="Button Header Rendered Roboto Font" width="512" height="283"    /><noscript><img               class="wp-image-143387 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/button-header-rendered-roboto-font.png" alt="Button Header Rendered Roboto Font" width="512" height="283"  /></noscript><figcaption id="caption-attachment-143387" class="wp-caption-text">Roboto font</figcaption></figure>
<p>We’ll go through three different ways to add any font of your choice to your MUI project.</p>
<h2 id="google-fonts-cdn">Method 1: Use the Google Fonts CDN</h2>
<p>Head over to <a href="https://fonts.google.com/">Google Fonts</a> and select the font family of your choice; I’ll use the <a href="https://fonts.google.com/specimen/Chilanka">Chilanka Cursive</a> font. Copy the CDN link and add it to the <code>&lt;head></code> of the <code>public/index.html</code> file as follows:</p>
<pre class="language-html hljs">&lt;link href="https://fonts.googleapis.com/css2?family=Chilanka&amp;display=swap" rel="stylesheet">
</pre>
<p>To use the font, you’ll have to initialize it using <a href="https://mui.com/material-ui/customization/theming/#createtheme-options-args-theme"><code>CreateTheme</code></a>, an API provided by MUI that generates a custom theme based on the options received, and <a href="https://mui.com/material-ui/customization/theming/#theme-provider"><code>ThemeProvider</code></a>, a component used to inject custom themes into your application.</p>
<p>Add the code below to your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import { createTheme, ThemeProvider } from '@mui/material';
const theme = createMuiTheme({
  typography: {
    fontFamily: [
      'Chilanka',
      'cursive',
    ].join(','),
  },});
</pre>
<p>Then, wrap your components with the default MUI <code>ThemeProvider</code> component, passing it <code>theme</code> props. The value of the <code>theme</code> props should be the name of your defined theme:</p>
<pre class="language-javascript hljs">&lt;ThemeProvider theme={theme}>
 &lt;div className="App">
   &lt;div>
     &lt;Typography variant="h2" gutterBottom>
       Welcome to React
     &lt;/Typography>
     &lt;Button variant="contained" color="secondary">Ready To Go&lt;/Button>
   &lt;/div>
 &lt;/div>
&lt;/ThemeProvider>
</pre>
<p>Inspecting the components now with the browser inspector tool, you’ll find that the font family has changed to Chilanka:</p>
<figure id="attachment_143389"   class="wp-caption aligncenter"><img             class="wp-image-143389 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-components-rendered-chilanka.png" alt="React Components Rendered Chilanka" width="730" height="389"    /><noscript><img               class="wp-image-143389 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-components-rendered-chilanka.png" alt="React Components Rendered Chilanka" width="730" height="389"  /></noscript><figcaption id="caption-attachment-143389" class="wp-caption-text">Welcome to React in Chilanka font</figcaption></figure>
<h2 id="self-host-fonts-using-google">Method 2: Self host fonts using google-webfonts-helper</h2>
<p>There are some benefits of self-hosting your fonts. It is significantly faster, and your fonts can load offline.</p>
<p><a href="https://google-webfonts-helper.herokuapp.com/fonts">google-webfonts-helper</a> is an amazing tool that makes self-hosting fonts hassle-free. It provides font files and font-face declarations based on the fonts, charsets, styles, and browser support you select.</p>
<p>Simply search for any Google Font and select the desired font weights. I’ll use Josefin Sans:</p>
<figure id="attachment_143391"   class="wp-caption aligncenter"><img             class="wp-image-143391 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/google-fonts-list.png" alt="Google Fonts List" width="512" height="234"    /><noscript><img               class="wp-image-143391 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/google-fonts-list.png" alt="Google Fonts List" width="512" height="234"  /></noscript><figcaption id="caption-attachment-143391" class="wp-caption-text">List of Google Fonts</figcaption></figure>
<p>Copy the resulting font-face declarations into your <code>src/index.css</code> file. You can customize the font file location. The default assumes <code>../fonts/</code>. We’ll use <code>./fonts</code> because we’ll place the downloaded fonts in the <code>src/fonts</code> directory:</p>
<figure id="attachment_143393"   class="wp-caption aligncenter"><img             class="wp-image-143393 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/copy-font-face-declarations-css-file.png" alt="Copy Font Face Declarations CSS File" width="730" height="335"    /><noscript><img               class="wp-image-143393 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/copy-font-face-declarations-css-file.png" alt="Copy Font Face Declarations CSS File" width="730" height="335"  /></noscript><figcaption id="caption-attachment-143393" class="wp-caption-text">Font sources</figcaption></figure>
<p>Finally, download your files. Unzip them and place them in your project in the appropriate location, <code>src/fonts</code>.</p>
<p>Like before, you’ll have to define the font family using <code>CreateTheme</code> and then wrap your components with the <code>ThemeProvider</code> component:</p>
<pre class="language-javascript hljs">const theme = createTheme({
 typography: {
   fontFamily: [
     'Josefin Sans',
     'sans-serif',
   ].join(','),
},});
</pre>
<p>Inspecting now, you should see that the font family has changed to Josefin Sans:</p>
<p><img             class="aligncenter wp-image-143395 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/font-family-changed-themeprovider-component.png" alt="Font Family Changed ThemeProvider Component" width="730" height="398"    /><noscript><img               class="aligncenter wp-image-143395 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/font-family-changed-themeprovider-component.png" alt="Font Family Changed ThemeProvider Component" width="730" height="398"  /></noscript></p>
<h2 id="self-host-fonts-typefaces-npm-packages">Method 3: Self host fonts using the Typefaces npm packages</h2>
<p><a href="https://github.com/KyleAMathews/typefaces">Typefaces</a> is a collection of npm packages for Google Fonts as well as some other open source typefaces created by Kyle Matthews. Just like other dependencies, you can add a font to a project by installing it with npm. Using Typefaces is my favorite method because all website and web app dependencies should be managed through npm whenever possible.</p>
<p>Simply search through the repo for a typeface and click on the <strong><code>font</code></strong> folder to find the correct npm installation command. I’ll go with Cormorant:</p>
<pre class="language-bash hljs">npm install typeface-cormorant
</pre>
<p>Then, import the package into your project’s entry file, <code>src/index.js</code> in our case:</p>
<pre class="language-javascript hljs">import "typeface-cormorant";
</pre>
<p>Like before, you’ll have to define your font family using <code>CreateTheme</code> and wrap your components with the <code>Themeprovider</code> component:</p>
<pre class="language-javascript hljs">const theme = createTheme({
  typography: {
    fontFamily: [
      'Cormorant',
      'serif',
    ].join(','),
},});
</pre>
<p>Inspecting now, you’ll see that the font family has changed to Cormorant:</p>
<p><img             class="aligncenter wp-image-143398 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/cormorant-font-themeprovider-component.png" alt="Cormorant Font Themeprovider Component" width="512" height="297"    /><noscript><img               class="aligncenter wp-image-143398 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/cormorant-font-themeprovider-component.png" alt="Cormorant Font Themeprovider Component" width="512" height="297"  /></noscript></p>
<h2 id="defining-different-fonts-different-elements">Defining different fonts for different elements</h2>
<p>What if you want to define different fonts for our header and button. Say, a primary font and a secondary font?</p>
<p>You’ll simply define two theme constants and wrap the intended components with the <code>Themeprovider</code> component, each with a theme prop of the corresponding font.</p>
<p>For example, if you want to use the Cormorant font for the heading and Josefin Sans for the button, you’ll first define two themes for the two fonts, respectively:</p>
<pre class="language-javascript hljs">const headingFont = createTheme({
  typography: {
    fontFamily: [
      'Cormorant',
      'serif',
    ].join(','),
},});

const buttonFont = createTheme({
  typography: {
    fontFamily: [
      'Josefin Sans',
      'sans-serif',
    ].join(','),
},});
</pre>
<p>Then, wrap the target components with a <code>ThemeProvider</code> component of the required font, like below:</p>
<pre class="language-javascript hljs">function App() {
  return (

    &lt;div className="App">
      &lt;div>
        &lt;ThemeProvider theme={headingFont}>
          &lt;Typography variant="h2" gutterBottom>
            Welcome to React
          &lt;/Typography>
        &lt;/ThemeProvider>
        &lt;ThemeProvider theme={buttonFont}>
          &lt;Button variant="contained" color="secondary">
                         Ready To Go
          &lt;/Button>
        &lt;/ThemeProvider>

      &lt;/div>
    &lt;/div>
  );
}
</pre>
<p>Viola! You’ll see now that the heading is rendered with the Cormorant font and the button with the Josefin Sans font:</p>
<p><img             class="aligncenter wp-image-143400 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/different-fonts-rendered-react-components.png" alt="Different Fonts Rendered React Components" width="512" height="303"    /><noscript><img               class="aligncenter wp-image-143400 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/different-fonts-rendered-react-components.png" alt="Different Fonts Rendered React Components" width="512" height="303"  /></noscript></p>
<p><img             class="aligncenter wp-image-143403 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/welcome-to-react-rendered-mui-font.png" alt="Welcome React Rendered MUI Font" width="730" height="412"    /><noscript><img               class="aligncenter wp-image-143403 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/welcome-to-react-rendered-mui-font.png" alt="Welcome React Rendered MUI Font" width="730" height="412"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we covered three simple ways to add custom fonts to a MUI project, including the Google Fonts CDN, google-webfonts-helper, and npm. <span >We also looked at how to define separate fonts for different components. Be sure to leave a comment if you have any questions, happy coding! </span></p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-25964" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/add-custom-fonts-mui/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/add-custom-fonts-mui/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-25964" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/add-custom-fonts-mui/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-25964" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/add-custom-fonts-mui/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/add-custom-fonts-mui/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>3 ways to implement infinite scroll in React - LogRocket Blog</title>
			<link>https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>3 ways to implement infinite scroll in React - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/">3 ways to implement infinite scroll in React - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/osamuel/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/ogundipe.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/ogundipe.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/osamuel/">
Ogundipe Samuel <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software engineer and technical writer.</span>
</div>
</div>
<h1 class="posttitle">3 ways to implement infinite scroll in React</h1>
<p>
<span class="post-date"><time class="post-date">
April 14, 2023 </time></span>
 <span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1334</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was last updated on 14 April 2023 to include information about the Intersection Observer API. </em></p>
<p>In today’s fast-paced digital landscape, providing a seamless and engaging user experience is more important than ever before. One popular method for improving user experience is implementing infinite scrolling, a web design technique that loads content continuously as the user scrolls down the page.</p>
<p>This intuitive feature <a href="https://blog.logrocket.com/react-pagination-scratch-hooks/">eliminates the need for traditional pagination</a> and has become a staple in modern web applications. In this article, we’ll explore three unique approaches to implementing infinite scrolling in React applications:</p>
<ol>
<li>Building the entire implementation from scratch: Covers the fundamentals of creating an infinite scroll solution from the ground up, giving you full control over customization and functionality</li>
<li>Using an existing infinite scroll library or component: Leverages pre-built libraries or components, which save time and effort but still offer customization options</li>
<li>Leveraging the Intersection Observer API: Harnesses the power of the <a href="https://blog.logrocket.com/lazy-loading-using-the-intersection-observer-api/">Intersection Observer API</a>, which allows for efficient and performant detection when elements come into view, thereby triggering content loading</li>
</ol>
<p>To follow along with this article, you’ll need a basic understanding of React. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#basic-setup">Basic React application setup</a>
<ul >
<li><a href="#set-up-initial-state">Setting up the initial state</a></li>
<li><a href="#load-data">Loading data</a></li>
<li><a href="#call-fetchdata-component-mount">Calling <code>fetchData</code> on component mount</a></li>
</ul>
</li>
<li><a href="#methods-implementing-infinite-scroll-react">Methods for implementing infinite scroll in React</a>
<ul >
<li><a href="#building-entire-implementation-scratch">1. Building the entire implementation from scratch</a></li>
<li><a href="#utilize-existing-infinite-scroll-library-component">2. Utilizing an existing infinite scroll library or component</a></li>
<li><a href="#leveraging-intersection-observer-api">3. Leveraging the Intersection Observer API</a></li>
</ul>
</li>
</ul>
<h2 id="basic-setup">Basic React application setup</h2>
<p>Throughout this article, we’ll build on a consistent foundation to implement the various infinite scrolling techniques. For each method, we’ll adapt the following steps and code snippets.</p>
<h3 id="set-up-initial-state">Setting up the initial state</h3>
<p>First, we’ll set up the initial state for our component. This includes the list of items to display, the necessary loading and error indicators, and a variable to keep track of the current page number:</p>
<pre class="language-javascript hljs">import React, { useState, useEffect, useRef } from 'react';

const InfiniteScrollExample = () => {
  const [items, setItems] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1);

  // ... rest of the component
};
</pre>
<h3 id="load-data">Loading data</h3>
<p>Next, we’ll create a function to fetch data from an API or another data source, increment the page number, and update the state with the fetched items. Additionally, we’ll handle any errors during the data fetching process:</p>
<pre class="language-javascript hljs">const fetchData = async () => {
  setIsLoading(true);
  setError(null);

  try {
    const response = await fetch(`https://api.example.com/items?page=${page}`);
    const data = await response.json();

    setItems(prevItems => [...prevItems, ...data]);
    setPage(prevPage => prevPage + 1);
  } catch (error) {
    setError(error);
  } finally {
    setIsLoading(false);
  }
};
</pre>
<h3 id="call-fetchdata-component-mount">Calling <code>fetchData</code> on component mount</h3>
<p>Lastly, we’ll use the <code>useEffect</code> Hook to call the <code>fetchData</code> function when the component mounts initially:</p>
<pre class="language-javascript hljs">useEffect(() => {
  fetchData();
}, []);
</pre>
<p>These foundational steps will be present in all of the techniques we discuss in this article. As we explore each method for implementing infinite scrolling React, we’ll modify and expand upon this base.</p>
<h2 id="methods-implementing-infinite-scroll-react">Methods for implementing infinite scroll in React</h2>
<h3 id="building-entire-implementation-scratch">1. Building the entire implementation from scratch</h3>
<p>Building the entire infinite scroll implementation from scratch involves handling the scroll event, loading more data, and updating the state in your React application. This approach provides you with full control over customization and functionality.</p>
<p>Extending our basic setup, we’ll first create a function to handle the <code>scroll</code> event. This function will check if the user has reached the bottom of the page and call <code>fetchData</code> if necessary. We’ll add a <code>scroll</code> event listener to the <code>window</code> object and remove it when the component is unmounted:</p>
<pre class="language-javascript hljs">const handleScroll = () => {
  if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isLoading) {
    return;
  }
  fetchData();
};

useEffect(() => {
  window.addEventListener('scroll', handleScroll);
  return () => window.removeEventListener('scroll', handleScroll);
}, [isLoading]);
</pre>
<p>Finally, we render the items, the loading indicator, and any error messages within the component:</p>
<pre class="language-javascript hljs">return (
  &lt;div>
    &lt;ul>
      {items.map(item => (
        &lt;li key={item.id}>{item.name}&lt;/li>
      ))}
    &lt;/ul>
    {isLoading &amp;&amp; &lt;p>Loading...&lt;/p>}
    {error &amp;&amp; &lt;p>Error: {error.message}&lt;/p>}
  &lt;/div>
);
</pre>
<p>With that, we have a fully functional infinite scroll implementation built from scratch. This approach allows for extensive customization and more control over functionality. However, it may be more time-consuming and require more maintenance than using an existing library or component.</p>
<h3 id="utilize-existing-infinite-scroll-library-component">2. Utilizing an existing infinite scroll library or component</h3>
<p>Using an existing infinite scroll library or component can save you time and effort as you leverage pre-built, pre-tested solutions while retaining customization options. One popular library for implementing infinite scrolling in React is <code><a href="https://github.com/ankeetmaini/react-infinite-scroll-component">react-infinite-scroll-component</a></code>. Let’s learn how to use this library to create infinite scrolling in our React application.</p>
<p>First, install the <code>react-infinite-scroll-component</code> library using npm or Yarn:</p>
<pre class="language-bash hljs">npm install react-infinite-scroll-component
or
yarn add react-infinite-scroll-component
</pre>
<p>Then, we’ll extend our basic setup, import the <code>InfiniteScroll</code> component from the library, and wrap the list of items in it. Configure the component by passing the necessary props like <code>dataLength</code>, <code>next</code>, <code>hasMore</code>, and <code>loader</code>:</p>
<pre class="language-javascript hljs">import InfiniteScroll from 'react-infinite-scroll-component';

// ...

return (
  &lt;div>
    &lt;InfiniteScroll
      dataLength={items.length}
      next={fetchData}
      hasMore={true} // Replace with a condition based on your data source
      loader={&lt;p>Loading...&lt;/p>}
      endMessage={&lt;p>No more data to load.&lt;/p>}
    >
      &lt;ul>
        {items.map(item => (
          &lt;li key={item.id}>{item.name}&lt;/li>
        ))}
      &lt;/ul>
    &lt;/InfiniteScroll>
    {error &amp;&amp; &lt;p>Error: {error.message}&lt;/p>}
  &lt;/div>
);
</pre>
<p>With that, we’ve implemented infinite scrolling in our React application using the <code>react-infinite-scroll-component</code> library. We didn’t use <code>scroll</code> handling because <code>react-infinite-scroll-component</code> handles that for us.</p>
<p>The <code>react-infinite-scroll-component</code> library offers a faster and more streamlined implementation process but still provides customization options, like for scroll height and scroll overflow. However, you should keep in mind the trade-off of introducing additional dependencies in your project.</p>
<h3 id="leveraging-intersection-observer-api">3. Leveraging the Intersection Observer API</h3>
<p>The Intersection Observer API is a modern development technique that can detect when elements come into view, thereby triggering content loading for infinite scrolling. The Intersection Observer API observes changes in the intersection of target elements with an ancestor element or the viewport, making it well-suited for implementing infinite scrolling.</p>
<p>Extending our basic setup, create a <code>ref</code> for the <code>observer</code> target element and set up the Intersection Observer in a <code>useEffect</code> Hook. When the target element comes into view, call the <code>fetchData</code> function as follows:</p>
<pre class="language-javascript hljs">const observerTarget = useRef(null);

useEffect(() => {
  const observer = new IntersectionObserver(
    entries => {
      if (entries[0].isIntersecting) {
        fetchData();
      }
    },
    { threshold: 1 }
  );

  if (observerTarget.current) {
    observer.observe(observerTarget.current);
  }

  return () => {
    if (observerTarget.current) {
      observer.unobserve(observerTarget.current);
    }
  };
}, [observerTarget]);
</pre>
<p>Then, render the items, loading indicator, error messages, and the <code>observer</code> target element within the component:</p>
<pre class="language-javascript hljs">return (
  &lt;div>
    &lt;ul>
      {items.map(item => (
        &lt;li key={item.id}>{item.name}&lt;/li>
      ))}
    &lt;/ul>
    {isLoading &amp;&amp; &lt;p>Loading...&lt;/p>}
    {error &amp;&amp; &lt;p>Error: {error.message}&lt;/p>}
    &lt;div ref={observerTarget}>&lt;/div>
  &lt;/div>
);
</pre>
<p>By leveraging the Intersection Observer API, we have created an efficient and performant infinite scrolling solution in our React application. This approach offers a modern, browser-native method for detecting when elements come into view, but it may not be supported in all browsers or environments without using a polyfill.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h2 id="conclusion">Conclusion</h2>
<p>Infinite scrolling is a powerful web design technique. It enhances the user experience by progressively loading content as users scroll down a page, thereby eliminating the need for pagination.</p>
<p>In this article, we explored three different approaches for implementing infinite scrolling in React applications. Each technique has its own advantages and potential drawbacks, so it’s essential to choose the method that best suits your specific requirements and your users’ needs.</p>
<p>By implementing infinite scrolling in your React applications, you can provide an intuitive and engaging user experience that keeps visitors engaged with your content. I hope you enjoyed this article! Be sure to leave a comment if you have any questions.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-1837" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-1837" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-1837" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/3-ways-implement-infinite-scroll-react/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>32 free Flutter templates for great mobile apps - LogRocket Blog</title>
			<link>https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>32 free Flutter templates for great mobile apps - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/">32 free Flutter templates for great mobile apps - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/murtazasulaihi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/murtazasulaihi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/murtazasulaihi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/murtazasulaihi/">
Murtaza Sulaihi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a school professor and I also develop Android applications and Flutter applications.</span>
</div>
</div>
<h1 class="posttitle">32 free Flutter templates for great mobile apps</h1>
<p>
<span class="post-date"><time class="post-date">
September 29, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2290</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>This article showcases a curated list of open source mobile applications for Flutter. Open source projects are always an excellent way to learn any programming framework: these projects will make your Flutter development learning journey faster and give an instant boost to your knowledge.</p>
<p>Let’s get started and see if you find a template to inspire your next project.</p>
<h2>Table of contents</h2>
<ul>
<li><a href="#business-and-finance-templates">Business and finance templates</a></li>
<li><a href="#ecommerce-templates">Ecommerce templates</a></li>
<li><a href="#education-templates">Education templates</a></li>
<li><a href="#productivity-templates">Productivity templates</a></li>
<li><a href="#tools-app-templates">Tools app templates</a></li>
<li><a href="#media-app-templates">Media app templates</a></li>
<li><a href="#games-templates">Games templates</a></li>
</ul>
<h2 id="business-and-finance-templates">Business and finance templates</h2>
<h3>1. Be Thrifty Today</h3>
<p><a href="https://github.com/AmruthPillai/BeThriftyToday" target="_blank" rel="noopener">Be Thrifty Today</a> is a simple and secure money management app developed by <a href="https://github.com/AmruthPillai" target="_blank" rel="noopener">Amruth Pillai</a> that helps track your income and expenses. The app has a simple-to-use UI that allows users to add incomes or expenses and assign the transaction with an appealing and colorful icon to indicate its category.</p>
<p>You can delete transactions by simply swiping from right to left and edit items by holding down onto the transaction.</p>
<p>The app has been designed intuitively using <strong>Flutter and Firebase</strong>. It is quick to add and easy to navigate.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-1" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/be-thrifty-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/be-thrifty-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Be Thrifty"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/be-thrifty-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/be-thrifty-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Be Thrifty 2"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/be-thrifty-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/be-thrifty-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Be Thrifty 3"              /></a>
</div></figure>
</div>
<h3>2. Invoice Ninja</h3>
<p><a href="https://github.com/invoiceninja/admin-portal" target="_blank" rel="noopener">Invoice Ninja</a> is a robust business suite for documenting invoices, tasks, expenses, maintaining inventory, automation, and many more features. This advanced invoicing software supports all desktop and mobile platforms unparalleled to the most prominent companies in the same business.</p>
<p>This is a companion app for the Invoice Ninja, and it was created using <a href="https://github.com/hillelcoren/flutter-redux-starter" target="_blank" rel="noopener">Flutter Redux Starter</a>.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-2" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/invoice-ninja-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/invoice-ninja-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Invoice Ninja"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/invoice-ninja-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/invoice-ninja-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Invoice Ninja 2"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/invoice-ninja-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/invoice-ninja-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Invoice Ninja 3"              /></a>
</div></figure>
</div>
<h3>3. Trace</h3>
<p><a href="https://github.com/trentpiercy/trace" target="_blank" rel="noopener">Trace</a> is a Modern crypto portfolio and market explorer purely built with Flutter developed by <a href="https://github.com/trentpiercy" target="_blank" rel="noopener">Trent Piercy</a>. It is open source, lightweight, fast, and powerful. Some of its features are:</p>
<ul>
<li>Portfolio overview</li>
<li>Aggregate market explorer</li>
<li>Portfolio timeline</li>
<li>Transaction history</li>
<li>Detailed market data</li>
<li>Switching between light and dark themes</li>
</ul>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-3" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/trace-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/trace-1.gif?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Trace"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/trace-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/trace-2.gif?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Trace 2"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/trace-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/trace-3.gif?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Trace 3"              /></a>
</div></figure>
</div>
<h3>4. Receipt Manager</h3>
<p>The <a href="https://github.com/ReceiptManager/Application" target="_blank" rel="noopener">Receipt Manager</a> app is a minimalistic application to manage receipts developed by <a href="https://github.com/monolidth" target="_blank" rel="noopener">Monolidth</a>. It is fast and uses OCR to store receipts permanently in an SQL database.</p>
<p>The user has to take a photo of the receipt, then the application uploads the receipt to the server, parses it, and sends the output as a JSON response back to the application. The application stores the receipt in an SQL database.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-4" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/receipt-manager-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/receipt-manager-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Receipt Manager"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/receipt-manager-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/receipt-manager-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Receipt Manager 2"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/receipt-manager-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/receipt-manager-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Receipt Manager 3"              /></a>
</div></figure>
</div>
<h3>5. HADWIN</h3>
<p>Every application needs a payment service or a transaction interface to make payments while signing up for a subscription. Through <a href="https://github.com/brownboycodes/HADWIN" target="_blank" rel="noopener">HADWIN</a>, one can learn various fundamentals and skills like design patterns and state management/nested state management with the Provider pattern. Also, how to fetch data from servers with restful API to connect the app to backend services.</p>
<p>Build a real-time interface using the Camera API, writing data to local storage, custom navigation stack, complex animations, and deployment to the play store.</p>
<p>This application is just a prototype developed by <a href="https://github.com/brownboycodes" target="_blank" rel="noopener">Nabhodipta Garai</a>, which only simulates transactions.</p>
<p><img             class="aligncenter size-full wp-image-134291 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/hadwin.gif" alt="HADWIN" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-134291" src="https://blog.logrocket.com/wp-content/uploads/2022/09/hadwin.gif" alt="HADWIN" width="730" height="411"/></noscript></p>
<h2 id="ecommerce-templates">Ecommerce templates</h2>
<h3>6. Open Ecommerce App</h3>
<p><a href="https://github.com/4seer/openflutterecommerceapp" target="_blank" rel="noopener">Open Ecommerce App</a> project is a mobile ecommerce application developed by <a href="https://github.com/4seer" target="_blank" rel="noopener">4seer</a>, and other contributors as well.</p>
<p>The idea behind creating this project is to build a commercially viable product that can be used by small and medium businesses to take their products online and reach the masses. The app contains a splash screen, home screen, list of categories, product screens with filters, product details screen with ratings and reviews, ordering process, and user profile with login and favorites.</p>
<p>You can read about the project <a href="https://medium.com/@openflutterproject/open-flutter-project-e-commerce-app-fe97570a633" target="_blank" rel="noopener">here</a> and contribute to it. The app is really detailed and aesthetically designed, which is perfect to look at.</p>
<p><img             class="aligncenter size-full wp-image-134353 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/open-ecommerce-app.png" alt="Open Ecommerce App" width="730" height="493"    /><noscript><img               class="aligncenter size-full wp-image-134353" src="https://blog.logrocket.com/wp-content/uploads/2022/09/open-ecommerce-app.png" alt="Open Ecommerce App" width="730" height="493"  /></noscript></p>
<h3>7 .Shope: A Flutter ecommerce UI template</h3>
<p>Shope is a minimalist template with a clean and beautiful design for Flutter developed by <a href="https://github.com/robertodevs" target="_blank" rel="noopener">Roberto Juarez</a>. The <a href="https://github.com/robertodevs/flutter_ecommerce_template" target="_blank" rel="noopener">Shope</a> ecommerce UI Kit aims to help programmers save time with frontend development.</p>
<p>Developers can use this template to build their apps for Android and iOS in Flutter. The UI Kit includes all resources one needs to reuse the components. It contains thirty-eight screens, assets, icons, and fonts.</p>
<p><img             class="aligncenter size-full wp-image-134355 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/shope.png" alt="Shope" width="730" height="613"    /><noscript><img               class="aligncenter size-full wp-image-134355" src="https://blog.logrocket.com/wp-content/uploads/2022/09/shope.png" alt="Shope" width="730" height="613"  /></noscript></p>
<h3>8. The Complete Ecommerce Flutter UI App</h3>
<p>We have another beautiful UI template for creating an ecommerce application open sourced by <a href="https://github.com/abuanwar072" target="_blank" rel="noopener">Abu Anwar</a>: the <a href="https://github.com/abuanwar072/E-commerce-Complete-Flutter-UI" target="_blank" rel="noopener">Complete Ecommerce Flutter UI App</a>. It features a modern design, attractive colors, and well-designed widgets. This application contains screens like:</p>
<ul>
<li>Onboarding</li>
<li>Signup and login</li>
<li>Forgot password?</li>
<li>Profile screen</li>
<li>OTP verification</li>
<li>Home page</li>
<li>Product details</li>
<li>Order screen</li>
</ul>
<p><img             class="aligncenter size-full wp-image-134357 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/complete-ecommerce-1.png" alt="Complete Ecommerce" width="712" height="645"    /><noscript><img               class="aligncenter size-full wp-image-134357" src="https://blog.logrocket.com/wp-content/uploads/2022/09/complete-ecommerce-1.png" alt="Complete Ecommerce" width="712" height="645"  /></noscript></p>
<p><img             class="aligncenter size-full wp-image-134359 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/complete-ecommerce-2.png" alt="Complete Ecommerce 2" width="673" height="641"    /><noscript><img               class="aligncenter size-full wp-image-134359" src="https://blog.logrocket.com/wp-content/uploads/2022/09/complete-ecommerce-2.png" alt="Complete Ecommerce 2" width="673" height="641"  /></noscript></p>
<h2 id="education-templates">Education templates</h2>
<h3>9. Mathematics Flutter</h3>
<p>Developed by <a href="https://github.com/j-j-gajjar" target="_blank" rel="noopener">Jay Gajjar</a>, <a href="https://github.com/j-j-gajjar/Mathematics" target="_blank" rel="noopener">Mathematics Flutter</a> creates basic arithmetic quizzes for its users, best for ages 4 to 10 years old. Students can challenge themselves by creating a randomized quiz, or a teacher can download a PDF sheet and test their students. This is a simple app with few screens but a powerful concept and a lot to learn from the code because it involves a lot of mathematical logic. It has web support as well as PWA support.</p>
<p><img             class="aligncenter size-full wp-image-134298 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/mathematics-flutter.gif" alt="Mathematics Flutter" width="446" height="782"  /><noscript><img               class="aligncenter size-full wp-image-134298" src="https://blog.logrocket.com/wp-content/uploads/2022/09/mathematics-flutter.gif" alt="Mathematics Flutter" width="446" height="782"/></noscript></p>
<h3>10. Flutter E-book App</h3>
<p><a href="https://github.com/JideGuru/FlutterEbookApp" target="_blank" rel="noopener">Flutter E-Book App</a> is a simple yet intuitive application developed by <a href="https://github.com/JideGuru" target="_blank" rel="noopener">Festus Olusegun</a> to read and download books from the <a href="http://www.feedbooks.com/api" target="_blank" rel="noopener">Feedbooks</a> API.</p>
<p>Users can download, read, and mark favorite books as well as switch to dark mode and delete downloaded books when reading is done. This is developed using Provider state management and Dio to make network calls and download files. Object DB, a NoSQL database, stores files on the device.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-5" class="gallery galleryid-134245 gallery-columns-2 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutter-ebook-app-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutter-ebook-app-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Flutter Ebook App 2"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutter-ebook-app/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutter-ebook-app.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Flutter Ebook App"              /></a>
</div></figure>
</div>
<h3>11. BookSearch</h3>
<p><a href="https://github.com/Norbert515/BookSearch" target="_blank" rel="noopener">BookSearch</a> is a project for beginners open sourced by <a href="https://github.com/Norbert515" target="_blank" rel="noopener">Norbert Kozsir</a> for searching and collecting books as one reads them. It uses the <a href="https://developers.google.com/books/docs/v1/getting_started" target="_blank" rel="noopener">GoogleBooks</a> API and has a clean UI and crisp animation.</p>
<p>The developer has used SQFlite and Flutter Redux and posted a <a href="https://proandroiddev.com/flutter-how-i-built-a-simple-app-in-under-an-hour-from-scratch-and-how-you-can-do-it-too-6d8e7fe6c91b" target="_blank" rel="noopener">detailed tutorial and code here</a>.</p>
<p><img             class="aligncenter size-full wp-image-134302 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/booksearch-1.gif" alt="Booksearch" width="300" height="483"  /><noscript><img               class="aligncenter size-full wp-image-134302" src="https://blog.logrocket.com/wp-content/uploads/2022/09/booksearch-1.gif" alt="Booksearch" width="300" height="483"/></noscript></p>
<p><img             class="aligncenter size-full wp-image-134304 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/booksearch-2.gif" alt="Booksearch" width="300" height="517"  /><noscript><img               class="aligncenter size-full wp-image-134304" src="https://blog.logrocket.com/wp-content/uploads/2022/09/booksearch-2.gif" alt="Booksearch" width="300" height="517"/></noscript></p>
<h3>12. StarBook</h3>
<p><a href="https://github.com/hashirshoaeb/star_book" target="_blank" rel="noopener">StarBook</a> is a digital diary developed by <a href="https://github.com/hashirshoaeb" target="_blank" rel="noopener">Hashir Shoaib</a> that can help users track their mood and productivity throughout the month. This is an incredible way to see how users feel throughout the day, and it allows users to realize their general attitude and how to improve it.</p>
<p>Users can rate their mood each day using different colors and write a short summary. The app focuses on giving every user a personalized experience, increasing their productivity, improving objectivity, and improving emotional health. The app uses <a href="https://blog.logrocket.com/handling-local-data-persistence-flutter-hive/" target="_blank" rel="noopener">Hive</a> to store data locally.</p>
<p><img             class="aligncenter size-full wp-image-134307 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/starbook-1.gif" alt="Starbook" width="600" height="1239"  /><noscript><img               class="aligncenter size-full wp-image-134307" src="https://blog.logrocket.com/wp-content/uploads/2022/09/starbook-1.gif" alt="Starbook" width="600" height="1239"/></noscript></p>
<p><img             class="aligncenter size-full wp-image-134309 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/starbook-2.gif" alt="Starbook" width="600" height="1239"  /><noscript><img               class="aligncenter size-full wp-image-134309" src="https://blog.logrocket.com/wp-content/uploads/2022/09/starbook-2.gif" alt="Starbook" width="600" height="1239"/></noscript></p>
<h2 id="productivity-templates">Productivity templates</h2>
<p>The next set is to-do apps made in Flutter by different programmers. To-dos are the most common applications a programmer develops at their early stage of learning. It is straightforward to make, and one can understand the complex fundamentals of a programming language through it.</p>
<h3>13. Taskist</h3>
<p>In <a href="https://github.com/huextrat/Taskist" target="_blank" rel="noopener">Taskist</a> by <a href="https://github.com/huextrat" target="_blank" rel="noopener">Hugo EXTRAT</a>, the developer has made the application with different animations using Firebase.</p>
<p><img             class="aligncenter size-full wp-image-134312 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/taskist.gif" alt="Taskist" width="720" height="1520"  /><noscript><img               class="aligncenter size-full wp-image-134312" src="https://blog.logrocket.com/wp-content/uploads/2022/09/taskist.gif" alt="Taskist" width="720" height="1520"/></noscript></p>
<h3>14. Note Taking</h3>
<p><a href="https://github.com/bimsina/notes-app" target="_blank" rel="noopener">Note Taking</a> by Bibek Timsina is adorable. The developer has used <strong>SQFlite</strong> to store notes on the device. One can learn how to implement search functionality and use staggered GridView in an application from this template.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-6" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/note-taking-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/note-taking-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Note Taking"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/note-taking-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/note-taking-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Note Taking"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/note-taking-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/note-taking-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Note Taking"              /></a>
</div></figure>
</div>
<h3>15. WhatToDo</h3>
<p><a href="https://github.com/burhanrashid52/WhatTodo" target="_blank" rel="noopener">WhatToDo</a> by Burhanuddin Rashid is a simple to-do app designed in Flutter to keep track of your daily tasks. It is built on the <a href="https://blog.logrocket.com/state-management-flutter-bloc-pattern/" target="_blank" rel="noopener">BLoC pattern</a>. You can add a project and labels by specifying unique colors, then add tasks by defining their priority and due date. You can also sort your tasks based on project, label, and dates.</p>
<p><img             class="aligncenter size-full wp-image-134315 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/whattodo.gif" alt="WhatToDo" width="180" height="320"  /><noscript><img               class="aligncenter size-full wp-image-134315" src="https://blog.logrocket.com/wp-content/uploads/2022/09/whattodo.gif" alt="WhatToDo" width="180" height="320"/></noscript></p>
<h3>16. Tasker</h3>
<p><a href="https://github.com/ErfanRht/Tasker" target="_blank" rel="noopener">Tasker</a> by Erfan Rahmati is a beautifully designed open source task manager application purely built with Dart and Flutter.</p>
<p><img             class="aligncenter size-full wp-image-134373 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/tasker.jpg" alt="Tasker" width="730" height="555"    /><noscript><img               class="aligncenter size-full wp-image-134373" src="https://blog.logrocket.com/wp-content/uploads/2022/09/tasker.jpg" alt="Tasker" width="730" height="555"  /></noscript></p>
<h3>17. Flutter To-Dos</h3>
<p><a href="https://github.com/asjqkkkk/flutter-todos" target="_blank" rel="noopener">Flutter To-Dos</a> by <a href="https://github.com/asjqkkkk" target="_blank" rel="noopener">Xiao Li</a> is completely out-of-the-box thinking on how one designs and develops a to-do app.</p>
<p>This developer has added custom themes and colors that users can change according to their taste, and custom icons can be added to each to-do item.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>It has a very niche way of showing all the to-dos that are completed. Users will see one to-do item card on the main page and scroll horizontally like a carousel. The app is developed using Provider state management, <a href="https://blog.logrocket.com/using-sharedpreferences-in-flutter-to-store-data-locally/" target="_blank" rel="noopener">SharedPreferences</a>, and SQFlite for local storage.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-7" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutter-to-dos-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutter-to-dos-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Flutter ToDos"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutter-to-dos-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutter-to-dos-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Flutter ToDos"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutter-to-dos-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutter-to-dos-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Flutter ToDos"              /></a>
</div></figure>
</div>
<h2 id="tools-app-templates">Tools app templates</h2>
<h3>18. One Second Diary</h3>
<p><a href="https://github.com/KyleKun/one_second_diary" target="_blank" rel="noopener">One Second Diary</a> is a minimalistic video diary developed by <a href="https://github.com/KyleKun" target="_blank" rel="noopener">Caio Pedroso</a> that records one second of your day every day. Open the app and record your moment and save the video. Repeat the process the next day. After a few months or a year, just compile the whole video and share it with your friends and family.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-8" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/one-second-diary-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/one-second-diary-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="One Second Diary"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/one-second-diary-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/one-second-diary-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="One Second Diary"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/one-second-diary-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/one-second-diary-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="One Second Diary"              /></a>
</div></figure>
</div>
<h3>19. Zefyr Editor</h3>
<p><a href="https://github.com/memspace/zefyr" target="_blank" rel="noopener">Zefyr Editor</a> is a rich text editor built with simplicity and flexibility for Flutter applications. It provides a clean interface for distraction-free writing. This is a Flutter package that you can install to your Flutter application, and it will give the users the power to write just like the Medium website. This package is developed by <a href="https://github.com/memspace" target="_blank" rel="noopener">Memspace</a>.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-9" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/zefyr-editor-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/zefyr-editor-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Zefyr Editor"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/zefyr-editor-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/zefyr-editor-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Zefyr Editor"              /></a>
</div></figure>
</div>
<h3>20. <a href="https://github.com/hamaluik/timecop" target="_blank" rel="noopener">TimeCop</a></h3>
<p>If you struggle to meet your deadlines or get so engrossed in work that you have no sense of time, this application is just for you.</p>
<p>A good time-tracking app respects your privacy and gets the job done without getting too fancy. This one is open sourced by <a href="https://github.com/hamaluik" target="_blank" rel="noopener">Kenton Hamaluik</a>. Entirely offline, it keeps track of tasks with multiple parallel timers. This app has been localized in several languages.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-10" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/timecop-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/timecop-1.jpg?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="TimeCop"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/timecop-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/timecop-2.jpg?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="TimeCop"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/timecop-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/timecop-3.jpg?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="TimeCop"              /></a>
</div></figure>
</div>
<h3>21. FlutterWeather</h3>
<p><a href="https://github.com/ArizArmeidi/FlutterWeather" target="_blank" rel="noopener">FlutterWeather</a> is a simple weather app that was created using the <a href="https://openweathermap.org/" target="_blank" rel="noopener">OpenWeatherMap</a> API, which automatically obtains the user’s current location and shows hourly and seven-day weather information. Users can also search for any other destination around the globe.</p>
<p>The app is very well designed using the Provider package and is developed by <a href="https://github.com/ArizArmeidi" target="_blank" rel="noopener">Ariz Armeidi</a>.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-11" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutterweather-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutterweather-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="FlutterWeather"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutterweather-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutterweather-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="FlutterWeather"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/flutterweather-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/flutterweather-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="FlutterWeather"              /></a>
</div></figure>
</div>
<h3>22. Feather</h3>
<p><a href="https://github.com/jhomlala/feather" target="_blank" rel="noopener">Feather</a> is the one for you if you are looking for a better weather application with great UI and UX; it’s developed by <a href="https://github.com/jhomlala" target="_blank" rel="noopener">Jakub</a>.</p>
<p>Features of this app are:</p>
<ul>
<li>Shows current temperature, max and min temperature, humidity, pressure, and wind</li>
<li>Shows current sun/moon position, animated countdown until sunset/sunrise, time of sunset/sunrise</li>
<li>Weather forecast for five days (temperature, wind, rain, and pressure)</li>
<li>App background changes based on the daily cycle</li>
<li>Automatically picks user location (also error handling when location can’t be selected!)</li>
<li>Persist location and weather data in local storage</li>
<li>Works offline (user needs to download data before)</li>
<li>Automatically refresh data every 15 minutes</li>
<li>BLoC architecture and Dio</li>
</ul>
<p><img             class="aligncenter size-full wp-image-134319 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/feather.gif" alt="Feather" width="720" height="1440"  /><noscript><img               class="aligncenter size-full wp-image-134319" src="https://blog.logrocket.com/wp-content/uploads/2022/09/feather.gif" alt="Feather" width="720" height="1440"/></noscript></p>
<h2 id="media-app-templates">Media app templates</h2>
<h3>23. Grey</h3>
<p><a href="https://github.com/avirias/Grey" target="_blank" rel="noopener">Grey</a> is a Material-designed music player developed by <a href="https://github.com/avirias" target="_blank" rel="noopener">Avinash Kumar</a>. It is the first complete music player designed in Flutter. This app is created using the <strong>SQFlite</strong> database, enabling faster loading of songs at startup:</p>
<ul>
<li>Plays local songs</li>
<li>Beautiful screens</li>
<li>Search songs feature</li>
<li>Top tracks, recent songs, and randomize features</li>
<li>Album view, artist view</li>
<li>Playing queue, shuffle, and add to favorites options</li>
<li>Play/pause, next/prev</li>
<li>Themes (dark/light), custom fonts, and animations</li>
<li>Landscape mode</li>
</ul>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-12" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/grey-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/grey-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Grey"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/grey-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/grey-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Grey"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/grey-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/grey-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Grey"              /></a>
</div></figure>
</div>
<h3>24. InKino</h3>
<p>With <a href="https://github.com/roughike/inKino" target="_blank" rel="noopener">InKino</a>, <a href="https://github.com/roughike" target="_blank" rel="noopener">Iiro Krankka</a> created a multiplatform Dart app for exploring movies and showtimes at Finnkino theatres. The app leverages Redux, with 40 percent of the code shared across Flutter and the web.</p>
<p>Flutter was used to create the Android and iOS apps. AngularDart was used to create the progressive web app. Overall, this project is an exceptional example of a multiplatform Dart project.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-13" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/inkino-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/inkino-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="InKino"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/inkino-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/inkino-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="InKino"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/inkino-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/inkino-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="InKino"              /></a>
</div></figure>
</div>
<h3>25. MovieLab</h3>
<p><a href="https://github.com/ErfanRht/MovieLab" target="_blank" rel="noopener">MovieLab</a> is an open source and cross-platform mobile app for browsing movies and TV shows, including cast, production crew, personal biographies, and plot summaries. It is written in Dart using Flutter.</p>
<p>With MovieLab, you have movie and series information right at your fingertips. This app is developed by <a href="https://github.com/ErfanRht" target="_blank" rel="noopener">Erfan Rahmati</a>.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-14" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/movielab-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/movielab-1.jpg?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="MovieLab"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/movielab-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/movielab-2.jpg?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="MovieLab"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/movielab-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/movielab-3.jpg?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="MovieLab"              /></a>
</div></figure>
</div>
<h3>26. <a href="https://github.com/tsacdop/tsacdop" target="_blank" rel="noopener">Tsacdop</a></h3>
<p>You can enjoy podcasts with Tsacdop. It’s a podcast player developed with Flutter: a clean, simply beautiful, and friendly app, which is also free and open source. Some of its features are:</p>
<ul>
<li>Podcast group management</li>
<li>Playlists support</li>
<li>Sleep timer/speed setting</li>
<li>OPML file export and import</li>
<li>Auto-syncing in the background</li>
<li>Listening and subscription history record</li>
<li>Dark mode/accent color</li>
<li>Download for offline play</li>
<li>Auto-download new episodes / auto-delete outdated downloads</li>
<li>Settings backup</li>
<li>Skip silence</li>
<li>Boost volume</li>
</ul>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-15" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/tsacdop-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/tsacdop-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Tsacdop"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/tsacdop-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/tsacdop-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Tsacdop"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/tsacdop-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/tsacdop-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="Tsacdop"              /></a>
</div></figure>
</div>
<h3>27. Virlow Flutter Recorder</h3>
<p>The <a href="https://github.com/virlow-voice/virlow-flutter-recorder" target="_blank" rel="noopener">Virlow Flutter Recorder</a> is an open source Flutter application that can transcribe recorded audio with TL;DR and Short Hand Notes. It also includes a rich text editor that allows you to change the transcription and add additional notes.</p>
<p><img             class="aligncenter size-full wp-image-134322 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/virlow-flutter-recorder.gif" alt="Virlow Flutter Recorder" width="296" height="640"  /><noscript><img               class="aligncenter size-full wp-image-134322" src="https://blog.logrocket.com/wp-content/uploads/2022/09/virlow-flutter-recorder.gif" alt="Virlow Flutter Recorder" width="296" height="640"/></noscript></p>
<h3>28. Flutter Speech to Text</h3>
<p><a href="https://github.com/MarcusNg/flutter_voice" target="_blank" rel="noopener">Flutter Speech to Text</a> is similar to the above application but does not have an inbuilt text editor. You can watch the whole tutorial that is available on <a href="https://youtu.be/wDWoD1AaLu8" target="_blank" rel="noopener">YouTube</a>.</p>
<p>It is a simple one-page application you can inculcate in your app if needed. It has a nice and clean UI built by <a href="https://github.com/MarcusNg" target="_blank" rel="noopener">Marcus Ng</a>.</p>
<p><img             class="aligncenter size-full wp-image-134324 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/speech-to-text.gif" alt="Speech to Text" width="364" height="666"  /><noscript><img               class="aligncenter size-full wp-image-134324" src="https://blog.logrocket.com/wp-content/uploads/2022/09/speech-to-text.gif" alt="Speech to Text" width="364" height="666"/></noscript></p>
<h2 id="games-templates">Games templates</h2>
<h3>29. Hangman</h3>
<p><a href="https://github.com/tavasolireza/Hangman-Game-Flutter" target="_blank" rel="noopener">Hangman</a> by <a href="https://github.com/tavasolireza" target="_blank" rel="noopener">Reza Tavasoli</a> is a hangman game wholly written in Dart with the Flutter framework. The player has five lives in each turn to guess the word. Previous scores can be viewed on the High Scores page.</p>
<p><img             class="aligncenter size-full wp-image-134327 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/hangman.gif" alt="Hangman" width="600" height="1233"  /><noscript><img               class="aligncenter size-full wp-image-134327" src="https://blog.logrocket.com/wp-content/uploads/2022/09/hangman.gif" alt="Hangman" width="600" height="1233"/></noscript></p>
<h3>30. TissueBox</h3>
<p><a href="https://github.com/rnike/tissuebox" target="_blank" rel="noopener">TissueBox</a> by <a href="https://github.com/rnike" target="_blank" rel="noopener">Mike</a> is a simple game made with <a href="https://blog.logrocket.com/comparing-flutter-game-engines/" target="_blank" rel="noopener">Flame</a>. I would say it’s a stress reliever.</p>
<p>The user must pull tissues out of a box in the stipulated time. Dragging the tissues vertically gives the user more points; if the box is empty, the user must drag the box left or right to refill it. Nice and straightforward with a beautiful UI.</p>
<p><img             class="aligncenter size-full wp-image-134330 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/tissuebox.gif" alt="TissueBox" width="294" height="523"  /><noscript><img               class="aligncenter size-full wp-image-134330" src="https://blog.logrocket.com/wp-content/uploads/2022/09/tissuebox.gif" alt="TissueBox" width="294" height="523"/></noscript></p>
<h3>31. MathMatrix</h3>
<p>Learn to play simple arithmetic games to improve overall math skills. <a href="https://github.com/jaysavsani07/math-metrix" target="_blank" rel="noopener">MathMatrix</a> by <a href="https://github.com/jaysavsani07" target="_blank" rel="noopener">Jay Savsani</a> is simple to learn and suitable for all ages, from children to adults. Every level is meant to test the user’s intelligence at every turn.</p>
<p>This game involves you in various ways to increase your memory, attention, speed, reaction, focus, and logic. Each level becomes more complex and attempts to extract the best from the user.</p>
<div data-carousel-extra="{&quot;blog_id&quot;:1,&quot;permalink&quot;:&quot;http:\/\/blog.logrocket.com\/32-free-flutter-templates-mobile-apps\/&quot;}" id="gallery-16" class="gallery galleryid-134245 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/mathmatrix-3/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/mathmatrix-3.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="MathMatrix"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/mathmatrix-1/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/mathmatrix-1.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="MathMatrix"              /></a>
</div></figure><figure class="gallery-item">
<div class="gallery-icon portrait">
<a href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/attachment/mathmatrix-2/"><img width="150" height="150" src="https://blog.logrocket.com/wp-content/uploads/2022/09/mathmatrix-2.png?w=150&amp;h=150&amp;crop=1" class="attachment-thumbnail size-thumbnail jetpack-lazy-image" alt="MathMatrix"              /></a>
</div></figure>
</div>
<h3>32. ImpossibleBlocks</h3>
<p><a href="https://github.com/javipacheco/impossiblocks" target="_blank" rel="noopener">ImpossibleBlocks</a> by <a href="https://github.com/javipacheco" target="_blank" rel="noopener">Javi Pacheco</a> is a sophisticated game with simple rules created in Flutter Redux. Play this memory game to exercise your cognitive areas.</p>
<p>This free brain-training game can help you improve your memory while still having fun. It is suitable for both youngsters and adults. You’ll enjoy this free game if you enjoy a Rubik’s Cube or magic cubes.</p>
<p><img             class="aligncenter size-full wp-image-134437 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/impossibleblocks.jpg" alt="ImpossibleBlocks" width="730" height="337"    /><noscript><img               class="aligncenter size-full wp-image-134437" src="https://blog.logrocket.com/wp-content/uploads/2022/09/impossibleblocks.jpg" alt="ImpossibleBlocks" width="730" height="337"  /></noscript></p>
<p>That is the end of this great open source Flutter mobile application list. If you have a suggestion to add, do let me know. Thank you!</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-134245" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-134245" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-134245" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/32-free-flutter-templates-mobile-apps/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>5 Mantine Hooks for simplifying UI management in React - LogRocket Blog</title>
			<link>https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>5 Mantine Hooks for simplifying UI management in React - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/">5 Mantine Hooks for simplifying UI management in React - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/chinwikemaduabuchi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/11/chinwike.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/11/chinwike.jpeg?w=80&amp;h=80&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/chinwikemaduabuchi/">
Chinwike Maduabuchi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer passionate about software engineering.</span>
</div>
</div>
<h1 class="posttitle">5 Mantine Hooks for simplifying UI management in React</h1>
<p>
<span class="post-date"><time class="post-date">
September 21, 2022  </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1475</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>While developing frontend applications, certain tasks are recurring, and often inevitable. From managing form state to accessing web storage, as a frontend developer, you’re likely to keep running into these scenarios.</p>
<p>Writing the same piece of code for each case can easily become repetitive, and you’ll be better off encapsulating the logic for these tasks into small, reusable functions. Fortunately, React Hooks help solve this problem through custom Hooks!</p>
<p>A custom Hook is a function that lets you write reusable stateful logic using inbuilt React Hooks like <code>useState</code>, <code>useEffect</code>, and others. This architecture enforces good software design principles like code readability, separation of concerns, and preventing code duplication. It is one of my favorite React features to date!</p>
<p><a href="https://mantine.dev" target="_blank" rel="noopener">Mantine</a> — a React component library — has created a collection of custom Hooks to handle common state management and DOM manipulation tasks. In this article, we’ll explore five helpful hooks which I’ve winnowed out from the <a href="https://mantine.dev/hooks/use-counter/" target="_blank" rel="noopener">50+ available Mantine Hooks</a>.</p>
<p>First, let’s have a look at what Mantine is all about.</p>
<ul>
<li><a href="#what-is-mantine">What is Mantine?</a></li>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#installing-mantine-hooks-in-a-react-project">Installing Mantine Hooks in a React Project</a></li>
<li><a href="#use-disclosure-hook">use-disclosure Hook</a></li>
<li><a href="#use-clipboard-hook">use-clipboard Hook</a></li>
<li><a href="#use-local-storage-hook">use-local-storage Hook</a></li>
<li><a href="#use-input-state-hook">use-input-state Hook</a></li>
<li><a href="#use-debounced-value-hook">use-debounced-value Hook</a></li>
</ul>
<h2 id="what-is-mantine">What is Mantine?</h2>
<p><a href="https://blog.logrocket.com/build-responsive-themes-components-mantine/" target="_blank" rel="noopener">Mantine</a> is a React components library with an aim to provide great user and developer experience. Similar to popular UI frameworks like <a href="https://mui.com/" target="_blank" rel="noopener">Material UI</a>, Mantine contains fundamental features like theming, styling, and reusable components included in the core package: <code>@mantine/core</code>.</p>
<p>What I find interesting about this project is how its parts are split up into independent packages: <code>@mantine/hooks</code>, <code>@mantine/form</code>, and <code>@mantine/dates</code>, allowing you to cherry-pick the packages you want for your project without bloating it. Our focus will be on the Hooks package.</p>
<p>Some of these hooks are dependent on the Mantine library itself, i.e., requiring you to download the core package, but the ones I’ll cover do not require it.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow along, you’ll need:</p>
<ul>
<li>Familiarity with React concepts, such as state and hooks</li>
<li>Some knowledge on how <a href="https://blog.logrocket.com/create-your-own-react-hooks/" target="_blank" rel="noopener">custom Hooks work</a></li>
</ul>
<p>You can <a href="https://codesandbox.io/s/mantine-hooks-er2vrw" target="_blank" rel="noopener">see all five Mantine Hooks in action here</a>. Now let’s install Mantine.</p>
<h2 id="installing-mantine-hooks-in-a-react-project">Installing Mantine Hooks in a React project</h2>
<p>We will use CodeSandbox to bootstrap a new React project. Type in <code>react.new</code> into a new browser tab to create a starter React application:</p>
<pre class="language-javascript hljs">// App.js
import "./styles.css";
export default function App() {
  return (
    &lt;div className="App">
      &lt;h1>Hello CodeSandbox&lt;/h1>
      &lt;h2>Start editing to see some magic happen!&lt;/h2>
    &lt;/div>
  );
}
</pre>
<p>Next, install the Mantine Hooks library by searching <code>@mantine/hooks</code> in the <strong>Dependencies</strong> tab and adding it to the dependency list.</p>
<p><img             class="aligncenter size-full wp-image-132872 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/dependencies-list.jpeg" alt="Dependencies List" width="273" height="259"  /><noscript><img               class="aligncenter size-full wp-image-132872" src="https://blog.logrocket.com/wp-content/uploads/2022/09/dependencies-list.jpeg" alt="Dependencies List" width="273" height="259"/></noscript></p>
<p>If you choose to bootstrap your React app in a terminal, use the following command to download the Hooks package:</p>
<pre class="language-bash hljs">npm install @mantine/hooks
</pre>
<p>Let’s see the first Hook on the list.</p>
<h2 id="use-disclosure-hook"><code>use-disclosure</code> Hook</h2>
<p>The <code>use-disclosure</code> Hook is used to control a Boolean value as state. It returns a <code>handlers</code> property with <code>open</code>, <code>close</code>, and <code>toggle</code> methods for managing its value. This Hook can come into use when controlling the view of a side navigation; creating a toggle button; and many other instances:</p>
<pre class="language-javascript hljs">import { useDisclosure } from "@mantine/hooks";

export default function UseDisclosure() {
  const [sideNav, handlers] = useDisclosure(false);

  return (
    &lt;div>
      &lt;button onClick={() => handlers.open()}>Open&lt;/button>
      &lt;button onClick={() => handlers.close()}>Close&lt;/button>
      &lt;button onClick={() => handlers.open()}>Toggle&lt;/button>
      &lt;span>
        Side navigation is &lt;strong>{sideNav ? "opened" : "closed"}&lt;/strong>
      &lt;/span>
    &lt;/div>
  );
}
</pre>
<p><img             class="aligncenter size-full wp-image-132875 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/side-navigation.gif" alt="Side Navigation" width="599" height="99"  /><noscript><img               class="aligncenter size-full wp-image-132875" src="https://blog.logrocket.com/wp-content/uploads/2022/09/side-navigation.gif" alt="Side Navigation" width="599" height="99"/></noscript></p>
<p>Similar to <code>use-disclosure</code> is another Hook that deserves a shoutout: <code>use-toggle</code>. <code>use-toggle</code> functions like the toggle method in <code>use-disclosure</code>, but accepts two array values instead of a Boolean:</p>
<pre class="language-javascript hljs">import { useToggle } from '@mantine/hooks';

function UseToggle() {
  const [value, toggle] = useToggle(['blue', 'orange']);

  return (
    &lt;Button color={value} onClick={() => toggle()}>
      {value}
    &lt;/Button>
  );
</pre>
<h2 id="use-clipboard-hook"><code>use-clipboard</code> Hook</h2>
<p>If I had to use just one Hook from this entire library, it would be this one — I’m not impressed with how often I’ve googled “copy to clipboard JavaScript. :(”</p>
<p>The <code>use-clipboard</code> Hook interfaces with the <code>navigator.clipboard</code> property of the <code>window</code> object.</p>
<p><code>use-clipboard</code> accepts an <code>options</code> argument and returns an object with the following properties:</p>
<ul>
<li><code>copy</code>: function to copy value to clipboard</li>
<li><code>copied</code>: Boolean value that indicates <code>copy</code> was called less than time specified in <code>options.timeout</code></li>
<li><code>reset</code>: function to clear timeout and reset <code>copied</code> to false</li>
<li><code>error</code>: contains <code>Error</code> object if something goes wrong</li>
</ul>
<pre class="language-javascript hljs">import { useClipboard } from "@mantine/hooks";
import { checkIcon, clipboardIcon } from "../icons";

export default function UseClipboard() {
  const user = {
    usdtAddress: "0x2a38ed609c51bbe050bf07939d3eafe0f9e029c8"
  };
  
  const clipboard = useClipboard({ timeout: 1500 });
  
  return (
    &lt;div>
      &lt;button onClick={() => clipboard.copy(user.bitcoinAddress)}>
        {clipboard.copied ? (
          &lt;>Address copied {checkIcon}&lt;/>
        ) : (
          &lt;>Copy BTC Address {clipboardIcon}&lt;/>
        )}
      &lt;/button>
    &lt;/div>
  );
}</pre>
<p><img             class="aligncenter size-full wp-image-132877 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/copy-usdt-address.gif" alt="Copy USDT Address" width="401" height="164"  /><noscript><img               class="aligncenter size-full wp-image-132877" src="https://blog.logrocket.com/wp-content/uploads/2022/09/copy-usdt-address.gif" alt="Copy USDT Address" width="401" height="164"/></noscript></p>
<p>As you will come to notice, most Mantine Hooks are wrappers around existing browser APIs.</p>
<h2 id="use-local-storage-hook"><code>use-local-storage</code> Hook</h2>
<p>The <code>use-local-storage</code> Hook uses the <code>window.localstorage</code> interface to allow you to use local storage items as React state. This hook works similar to the <code>useState</code> hook — it returns a variable for the state and an updater function:</p>
<pre class="language-javascript hljs">import { useLocalStorage } from '@mantine/hooks'

export default function UseLocalStorage() {
  const [language, setLanguage] = useLocalStorage({
    key: 'lang',
    defaultValue: '',
  })

  return (
    &lt;div>Current language: {language}&lt;/div>
  )
}
</pre>
<p>Here, <code>language</code>‘s value is initiated from the local storage item with key <code>lang</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p><code>setLanguage</code> updates both the local storage item <code>language</code> and its state value.</p>
<p>Below is an example where <code>use-local-storage</code> is used to store a user’s preferred language type:</p>
<pre class="language-javascript hljs">import { useLocalStorage } from '@mantine/hooks'

export default function UseLocalStorage() {
  const [language, setLanguage] = useLocalStorage({
    key: 'lang',
    defaultValue: '',
  })

  const updateLanguage = (e) => {
    setLanguage(e.target.value)
  }

  return (
    &lt;div>
      &lt;h3>Select your preferred language below:&lt;/h3>
      &lt;select onChange={updateLanguage}>
        &lt;option hidden disabled selected value>
          Select a language
        &lt;/option>
        &lt;option value='english'>English&lt;/option>
        &lt;option value='spanish'>Spanish&lt;/option>
        &lt;option value='french'>French&lt;/option>
        &lt;option value='latin'>Latin&lt;/option>
      &lt;/select>
      &lt;br />
      &lt;span>Current language: {language}&lt;/span>
    &lt;/div>
  )
}
</pre>
<p>You should note that this Hook doesn’t work on iframes — like the browser displayed in CodeSandbox — for security reasons. To see it work, try this Hook out in your local dev environment.</p>
<h2 id="use-input-state-hook"><code>use-input-state</code> Hook</h2>
<p>This Hook is used for managing state of native and custom inputs:</p>
<pre class="language-javascript hljs">import { useInputState } from "@mantine/hooks";

export default function UseInputState() {
  const [firstName, setFirstName] = useInputState("");

  return (
    &lt;>
      &lt;input type="email" value={firstName} onChange={setFirstName} />
      &lt;br />
      &lt;span>Text input value: {firstName}&lt;/span>
    &lt;/>
  );
}
</pre>
<p>While not as powerful as the <a href="https://mantine.dev/form/use-form/" target="_blank" rel="noopener">useForm</a> Hook from Mantine’s form management library (<code>@mantine/form</code>), this Hook makes it easier to grab input values without having to directly deal with the event object.</p>
<h2 id="use-debounced-value-hook"><code>use-debounced-value</code> Hook</h2>
<p>This Hook is used to <a href="https://www.geeksforgeeks.org/debouncing-in-javascript/" target="_blank" rel="noopener">debounce</a> — delay firing of — changes to a value. An <a href="https://mcu-character-search.netlify.app/" target="_blank" rel="noopener">autocomplete search box</a> is a common example where this practice is applied. When making a search, for instance, the browser makes multiple requests to the backend with each character entered into the input field.</p>
<p>Accepting such a large number of requests to your server like this will probably max out your bandwidth as your users grow. Therefore, you can use debouncing to trim the number of server requests, only making a request after a specified time:</p>
<pre class="language-javascript hljs">import { useState } from "react";
import { useDebouncedValue } from "@mantine/hooks";
import { Center, Text, TextInput } from "@mantine/core";

export default function UseDebouncedValue() {
  const [value, setValue] = useState("");
  const [debounced] = useDebouncedValue(value, 200);

  return (
    &lt;Center>
      &lt;div style={{ width: "70%", marginTop: "2rem" }}>
        &lt;TextInput
          placeholder="Enter value to see debounce"
          value={value}
          style={{ flex: 1 }}
          onChange={(e) => setValue(e.currentTarget.value)}
        />
        &lt;br />
        &lt;Text>Value: {value}&lt;/Text>
        &lt;Text>Debounced value: {debounced}&lt;/Text>
      &lt;/div>
    &lt;/Center>
  );
}
</pre>
<p><img             class="aligncenter size-full wp-image-132879 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/value-field.gif" alt="Value Field" width="489" height="161"  /><noscript><img               class="aligncenter size-full wp-image-132879" src="https://blog.logrocket.com/wp-content/uploads/2022/09/value-field.gif" alt="Value Field" width="489" height="161"/></noscript></p>
<p>The <code>use-debounced-value</code> Hook is designed to work with controlled components. This means that your component renders on each state change — when a new character is entered into input.</p>
<p>If you’d prefer to not have this happen, Mantine offers an alternative Hook, <code>use-debounced-state</code>, for debouncing in uncontrolled components. View the <a href="https://mantine.dev/hooks/use-debounced-value/#differences-to-usedebouncedstate" target="_blank" rel="noopener">differences between these Hooks here</a>.</p>
<p>And that wraps up the list!</p>
<h2>Conclusion</h2>
<p>So far, we’ve been able to see the benefits of using custom Hooks in React and how component logic can be consolidated into small reusable functions. The Mantine Hooks package is another example of how influential this feature has been. Be sure to check the Mantine docs to see other interesting Hooks that missed this list.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-132855" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-132855" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-132855" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/5-mantine-hooks-simplifying-ui-management-react/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>5 useful JSON tools to improve your productivity - LogRocket Blog</title>
			<link>https://blog.logrocket.com/5-useful-json-tools-improve-productivity/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/5-useful-json-tools-improve-productivity/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>5 useful JSON tools to improve your productivity - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/">5 useful JSON tools to improve your productivity - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/hassandjirdeh/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2023/01/hassan_profile_photo.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2023/01/hassan_profile_photo.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/hassandjirdeh/">
Hassan Djirdeh <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Hassan is a senior frontend engineer who's worked at different organizations to build large production applications at scale. He's a published author and course instructor, helping thousands of students learn in-depth frontend engineering skills like React, Vue, TypeScript, and GraphQL. When he's not in front of his laptop, you can find Hassan spending time with family, at the gym, and running through the 6.</span>
</div>
</div>
<h1 class="posttitle">5 useful JSON tools to improve your productivity</h1>
<p>
<span class="post-date"><time class="post-date">
April 6, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1436</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<article class="article-post">
<p>JavaScript Object Notation (JSON) is a <a href="https://www.json.org/">lightweight data-interchange format</a> that is widely used in web applications and APIs to transmit data between servers and clients. JSON is a popular choice for data storage and exchange due to it being human-readable, platform-independent, and capable of supporting complex data structures. In this article, we’ll explore five useful JSON tools that can help you improve your productivity.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#data-visualization-json-crack">Data visualization with JSON Crack</a></li>
<li><a href="#reading-exploring-data-json-hero">Reading and exploring data with JSON Hero</a></li>
<li><a href="#format-data-json-formatter-validator">Format data with JSON Formatter &amp; Validator</a></li>
<li><a href="#convert-data-csv-konkloneio">Convert data to CSV with Konklone.io</a></li>
<li><a href="#validate-date-json-schema">Validate data with JSON Schema</a></li>
</ul>
<h2 id="data-visualization-json-crack">Data visualization with JSON Crack</h2>
<p><a href="https://jsoncrack.com/">JSON Crack</a> is a powerful tool for visualizing JSON data that allows us to quickly and easily create interactive visualizations to help us understand our data better.</p>
<p>For example, assume we had a JSON structure that looks like the following:</p>
<pre class="language-json hljs">{
  "person":{
    "name":"John",
    "age":20,
    "address":{
      "street":"123 Main Street",
      "city":"New York"
    }
  }
}
</pre>
<p>This JSON structure contains information about a person that includes their name, age, and address. We could use JSON Crack to quickly create a visualization of the data, allowing us to quickly and easily view all the information at once.</p>
<p><img             class="aligncenter size-full wp-image-165298 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/data-visualization-json-crack.jpeg" alt="Data Visualization With JSON Crack" width="730" height="338"    /><noscript><img               class="aligncenter size-full wp-image-165298" src="https://blog.logrocket.com/wp-content/uploads/2023/03/data-visualization-json-crack.jpeg" alt="Data Visualization With JSON Crack" width="730" height="338"  /></noscript></p>
<p>If we were to select a certain node in our graphical JSON tree, we can get more information about the node and its children:</p>
<p><img             class="aligncenter size-full wp-image-165300 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/selecting-node-graphical-json-tree.jpeg" alt="Selecting A Certain Node In Our Graphical JSON Tree" width="730" height="339"    /><noscript><img               class="aligncenter size-full wp-image-165300" src="https://blog.logrocket.com/wp-content/uploads/2023/03/selecting-node-graphical-json-tree.jpeg" alt="Selecting A Certain Node In Our Graphical JSON Tree" width="730" height="339"  /></noscript></p>
<p>We’re also able to use the search bar to quickly search for a node in our JSON tree by searching for certain key names or values:</p>
<p><img             class="aligncenter size-full wp-image-165302 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/searching-specific-node-json-tree-search-bar.jpeg" alt="Searching For A Specific Node In Our JSON Tree Using The Search Bar" width="730" height="339"    /><noscript><img               class="aligncenter size-full wp-image-165302" src="https://blog.logrocket.com/wp-content/uploads/2023/03/searching-specific-node-json-tree-search-bar.jpeg" alt="Searching For A Specific Node In Our JSON Tree Using The Search Bar" width="730" height="339"  /></noscript></p>
<p>JSON Crack becomes even more useful in situations where we have a large complex JSON structure. As an example, if we were to observe a JSON structure like the following:</p>
<pre class="language-json hljs">{
  "person": {
    "name": "John",
    "age": 20,
    "address": {
      "street": "123 Main Street",
      "city": "New York"
    },
    "phone_numbers": [
      {
        "type": "Home",
        "number": "555-1234"
      },
      {
        "type": "Work",
        "number": "555-5678",
        "extension": "123"
      }
    ],
    "emails": [
      "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b5dfdadddbf5d0cdd4d8c5d9d09bd6dad8">[email protected]</a>",
      "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7b111413151f141e3b1c161a121755181416">[email protected]</a>"
    ],
    "spouse": {
      "name": "Jane",
      "age": 22,
      "address": {
        "street": "456 Oak Avenue",
        "city": "New York"
      },
      "phone_numbers": [
        {
          "type": "Home",
          "number": "555-5678"
        },
        {
          "type": "Work",
          "number": "555-9101",
          "extension": "456"
        }
      ],
      "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d1bbb0bfb491b4a9b0bca1bdb4ffb2bebc">[email protected]</a>"
    }
  }
}
</pre>
<p>JSON Crack makes it easy for us to get a quick overview of the data, which can identify any potential issues or areas that need improvement:</p>
<p><img             class="aligncenter size-full wp-image-165304 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-crack-data-overview.jpeg" alt="JSON Crack Giving Us A Data Overview" width="730" height="339"    /><noscript><img               class="aligncenter size-full wp-image-165304" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-crack-data-overview.jpeg" alt="JSON Crack Giving Us A Data Overview" width="730" height="339"  /></noscript></p>
<h2 id="reading-exploring-data-json-hero">Reading and exploring data with JSON Hero</h2>
<p><a href="https://jsonhero.io/">JSON Hero</a> is another JSON viewer that allows us to explore and navigate our JSON data quickly and easily. Instead of providing a graphical visualization like JSON Crack, it allows us to see the structure of JSON in either a column, tree, or JSON layout.</p>
<p>In the column layout, we’re able to view the children nodes of our JSON structure in separate columns:</p>
<p><img             class="aligncenter size-full wp-image-165306 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/viewing-children-nodes-json-structure.jpeg" alt="Viewing The Children Nodes Of Our JSON Structure" width="730" height="390"    /><noscript><img               class="aligncenter size-full wp-image-165306" src="https://blog.logrocket.com/wp-content/uploads/2023/03/viewing-children-nodes-json-structure.jpeg" alt="Viewing The Children Nodes Of Our JSON Structure" width="730" height="390"  /></noscript></p>
<p>In the JSON layout, we’re able to see the structure of our data in standard JSON but with the capability to select certain fields to gather more information:</p>
<p><img             class="aligncenter size-full wp-image-165309 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-layout-structure-data-standard-json.jpeg" alt="Viewing The Structure Of Our Data In Standard JSON" width="730" height="438"    /><noscript><img               class="aligncenter size-full wp-image-165309" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-layout-structure-data-standard-json.jpeg" alt="Viewing The Structure Of Our Data In Standard JSON" width="730" height="438"  /></noscript></p>
<p>In the Tree layout, we can see our JSON structure displayed as a tree with nested branches used to reflect the child nodes of a parent:</p>
<p><img             class="aligncenter size-full wp-image-165311 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-structure-displayed-tree-layout.jpeg" alt="JSON Structure Displayed In A Tree Layout" width="730" height="436"    /><noscript><img               class="aligncenter size-full wp-image-165311" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-structure-displayed-tree-layout.jpeg" alt="JSON Structure Displayed In A Tree Layout" width="730" height="436"  /></noscript></p>
<p>JSON Hero also provides a powerful search capability where we’re able to search our entire JSON structure quickly by searching for key names, key paths, or values.</p>
<p><img             class="aligncenter size-full wp-image-165313 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-search-capability.png" alt="JSON Hero Search Capability" width="730" height="432"    /><noscript><img               class="aligncenter size-full wp-image-165313" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-search-capability.png" alt="JSON Hero Search Capability" width="730" height="432"  /></noscript></p>
<p>Lastly, JSON Hero also provides a very helpful content-preview capability where the application automatically infers the content of JSON string values to help show a preview. This works for date values, image URLs, colors, website URLs, and more:</p>
<p><img             class="aligncenter size-full wp-image-165318 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-content-preview-capability.png" alt="JSON Hero Content's Preview Capability" width="730" height="432"    /><noscript><img               class="aligncenter size-full wp-image-165318" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-hero-content-preview-capability.png" alt="JSON Hero Content's Preview Capability" width="730" height="432"  /></noscript></p>
<h2 id="format-data-json-formatter-validator">Format data with JSON Formatter &amp; Validator</h2>
<p><a href="https://jsonformatter.curiousconcept.com/">JSON Formatter &amp; Validator</a> is a tool that helps format JSON data in a readable and organized manner. It automatically indents and formats JSON data making it easier to read and understand.</p>
<p>Assume we had the following unformatted JSON structure:</p>
<pre class="language-json hljs">{"Person":{"Name":"John","Age":20,"Address":{"Street":"123 Main Street","City":"New York"}}}
</pre>
<p>The above JSON is valid but missing any indentation or line breaks, which make it difficult to read. JSON Formatter &amp; Validator can help quickly format and beautify the JSON data:</p>
<p><img             class="aligncenter size-full wp-image-165320 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-validator-formatting-json-data.jpeg" alt="JSON Formatter And Validator Helping Format JSON Data " width="730" height="316"    /><noscript><img               class="aligncenter size-full wp-image-165320" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-validator-formatting-json-data.jpeg" alt="JSON Formatter And Validator Helping Format JSON Data " width="730" height="316"  /></noscript></p>
<p>The JSON Formatter &amp; Validator tool can also notify us of common JSON errors like incorrect quotes, missing quotes, trailing commas, etc. If we were to provide the following invalid JSON structure:</p>
<pre class="language-json hljs">{
  'Person': {
    'Name": "John,
    "Age": 20,
    "Address": {
      "Street": "123 Main Street",
      "City": "New York",
    },
  }
}
</pre>
<p>JSON Formatter will repair some of the issues it notices but also provide us with a breakdown of other errors that we’ll need to fix on our own:</p>
<p><img             class="aligncenter size-full wp-image-165322 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-listing-errors.jpeg" alt="JSON Formatter Listing Errors" width="730" height="468"    /><noscript><img               class="aligncenter size-full wp-image-165322" src="https://blog.logrocket.com/wp-content/uploads/2023/03/json-formatter-listing-errors.jpeg" alt="JSON Formatter Listing Errors" width="730" height="468"  /></noscript></p>
<h2 id="convert-data-csv-konkloneio">Convert data to CSV with Konklone.io</h2>
<p>There exist many different tools that help convert JSON data to other formats like XML, CSV, YAML, etc. One tool that I’ve liked within this category is <a href="https://konklone.io/json/">Konklone.io</a>, built by <a href="https://konklone.com/">Eric Mill</a>, because it acts as a lightweight and simple tool to help quickly convert JSON data into CSV.</p>
<p>When pasting JSON data structured to contain an array of values like the following:</p>
<pre class="language-json hljs">{
  "people": [
    {
      "name": "John",
      "age": 20,
      "address": {
        "street": "123 Main Street",
        "city": "New York"
      }
    },
    {
      "name": "Jane",
      "age": 25,
      "address": {
        "street": "456 Elm Street",
        "city": "Los Angeles"
      }
    },
    {
      "name": "Bob",
      "age": 30,
      "address": {
        "street": "789 Oak Street",
        "city": "Chicago"
      }
    }
  ]
}
</pre>
<p>The tool helps surface a preview of the CSV data that’s been converted from JSON:</p>
<p><img             class="aligncenter size-full wp-image-165325 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/preview-csv-data-converted-from-json.jpeg" alt="A Preview Of CSV Data Converted From JSON" width="730" height="382"    /><noscript><img               class="aligncenter size-full wp-image-165325" src="https://blog.logrocket.com/wp-content/uploads/2023/03/preview-csv-data-converted-from-json.jpeg" alt="A Preview Of CSV Data Converted From JSON" width="730" height="382"  /></noscript></p>
<p>We’re then able to download the entire generated CSV for later use. One thing to keep in mind when using this tool is that because the JSON to CSV conversion is all done inside the browser, attempting to convert large JSON data into CSV may cause some issues.</p>
<h2 id="validate-data-json-schema">Validate data with JSON Schema</h2>
<p>The last item we’ll talk about today is <a href="https://json-schema.org/">JSON Schema</a>, which allows us to validate our JSON data against a schema. To understand the helpfulness of this concept, it’s important to first understand what a JSON Schema is.</p>
<p>A JSON Schema is a declarative language that describes the expected structure and content of JSON data. The Schema can include information about the data types of fields, minimum and maximum values, patterns, and other constraints. For example, let’s consider the simple JSON object example we used earlier to represent information about a person:</p>
<pre class="language-json hljs">{
  "person":{
    "name":"John",
    "age":20,
    "address":{
      "street":"123 Main Street",
      "city":"New York"
    }
  }
}
</pre>
<p>Even with this simple structure, there are many ways that this data could be represented differently. For example, the <code>"name"</code> key could be represented as <code>"person_name"</code> and the <code>"age"</code> key could be represented as <code>"person_age"</code>. Additionally, the <code>"address"</code> key could be represented as <code>"person_address"</code> but contain a single string value:</p>
<pre class="language-json hljs">{
  "person":{
    "person_name":"John",
    "person_age":20,
    "person_address": "123 Main Street, New York"
    }
  }
}
</pre>
<p>Both examples above describe the same person and are equally valid. However, they’re still structured differently. How JSON data should be structured depends entirely on how it’s meant to be used within an application. This is where JSON Schema comes in.</p>
<p>We can use JSON Schema to validate that our data adheres to a specific structure. <a href="https://github.com/ajv-validator/ajv">A</a><a href="https://github.com/ajv-validator/ajv">jv</a> is one popular validator tool for JavaScript applications that allows us to create a schema and then validate JSON against that schema. Here’s an example of using Ajv to validate one of the above JSON examples against a schema:</p>
<pre class="language-json hljs">import Ajv from "ajv"

const ajv = new Ajv()

const schema = {
  type: "object",
  properties: {
    name: {type: "string"},
    age: {type: "number", minimum: 0, maximum: 150},
    address: {
      type: "object",
      properties: {
        street: {type: "string"},
        city: {type: "string"},
      },
      required: ["street", "city"],
    },
  },
  required: ["name", "age", "address"],
  additionalProperties: false,
};

const data = {
  name: "John",
  age: 30,
  address: {
    street: "123 Main Street",
    city: "New York"
  }
}

const validate = ajv.compile(schema)
const valid = validate(data)

// if not valid, console.log the validation errors
if (!valid) console.log(validate.errors)
</pre>
<p>The schema we’ve defined above describes a JSON object with three properties: <code>name</code> (string), <code>age</code> (a number between zero to 150), and <code>address</code> (an object that contains two string properties: <code>street</code> and <code>city</code>). All properties are required and no additional properties beyond those explicitly listed in the schema are allowed.</p>
<p>Outside of validators, many other implementations and tools exist within the capability of using a JSON Schema. These include schema generators, format converters, and other utilities. The <a href="https://json-schema.org/implementations.html">Implementations</a> section of the JSON Schema website highlights a list of these other tools and implementations.</p>
<p>JSON Schema can help us avoid any potential issues down the line by providing us with a way to validate our JSON data against a pre-defined schema. This ensures that our JSON data is always structured correctly, which can help prevent any unexpected errors or discrepancies in our applications. For more additional reading, the <a href="https://json-schema.org/understanding-json-schema/index.html">Understanding JSON Schema</a> section of the JSON Schema is helpful.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As we’ve seen in this article, there are many different tools available to help us work with JSON data. From visualizing and exploring data with <a href="https://jsoncrack.com/">JSON Crack</a>, formatting it with <a href="https://jsonformatter.curiousconcept.com/">JSON Formatter &amp; Validator</a>, converting it to other formats like CSV with Konklone.io, and validating it against a schema with <a href="https://json-schema.org/">JSON Schema</a> — these tools can help make working with JSON data much easier and more efficient.</p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165294" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165294" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165294" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/5-useful-json-tools-improve-productivity/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/5-useful-json-tools-improve-productivity/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>5 ways to rapidly improve MySQL database performance - LogRocket Blog</title>
			<link>https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>5 ways to rapidly improve MySQL database performance - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/">5 ways to rapidly improve MySQL database performance - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/lukasvileikis/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/12/1Photo-Removed-Background-1.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/12/1Photo-Removed-Background-1.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/lukasvileikis/">
Lukas Vileikis <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an ethical hacker and frequent conference speaker who is known for running one of the biggest and fastest data breach search engines in the world, BreachDirectory.com.</span>
</div>
</div>
<h1 class="posttitle">5 ways to rapidly improve MySQL database performance</h1>
<p>
<span class="post-date"><time class="post-date">
December 29, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2940</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<article class="article-post">
<p>Every developer that works with MySQL understands how crucial the RDBMS is for their projects. The database management system can support all kinds of projects, from gaming forums to healthcare solutions. According to <a href="https://www.databasejournal.com/mysql/postgresql-vs-mysql-which-is-best/">research performed by DatabaseJournal</a>, it takes up almost half, 44 percent, of the database market share.</p>
<p>Improving MySQL performance is also something that every DBA struggles with at some point in their career. Worry not though, we’re here to help. In this article, we’ll walk through five ways to quickly improve your MySQL database performance. Let’s get started!</p>
<ul>
<li><a href="#mysql-applications">MySQL and your applications</a></li>
<li><a href="#improve-database-performance">Improving database performance in general</a></li>
<li><a href="#my-cnf">#1: Managing the <code>my.cnf file</code></a></li>
<li><a href="#mysql-storage-engines-schema-design">#2 and #3: Check up on MySQL storage engines and schema design</a></li>
<li><a href="#indexes-partitions">#4 and #5: Indexes and partitions</a></li>
<li><a href="#advanced-operations-tricks">Advanced operations: Tips and tricks</a></li>
</ul>
<h2 id="mysql-applications">MySQL and your applications</h2>
<p>Before attempting to improve your MySQL app performance, one of the first things to consider is the <a href="https://blog.logrocket.com/build-rest-api-node-express-mysql/">infrastructure backing your application</a>. No system has ever been improved upon without first understanding what it’s built on. For this reason, we need to take a step back and check up on the server backing MySQL.</p>
<p>We’ll first want to check up on two basic things, starting with the amount of memory installed on the server. You can observe this by issuing a <code>free</code> command. Secondly, you can issue the <code>df"</code> command to observe the amount of hard drive space on the server.</p>
<p>Keeping these things in mind, you can connect to MySQL. First, you’ll want to check whether any unnecessary queries are running by using the <code>SHOW PROCESSLIST</code> command. You should receive an output like the one below:</p>
<p><img             class="aligncenter wp-image-152979 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/running-queries-list-mysql.png" alt="Running Queries List Mysql" width="730" height="186"    /><noscript><img               class="aligncenter wp-image-152979 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/running-queries-list-mysql.png" alt="Running Queries List Mysql" width="730" height="186"  /></noscript></p>
<p>If you see any long-running queries that you don’t recognize, it’s a good idea to terminate them; a long-running query may be an obstacle to other queries. However, chances are that you won’t see any suspicious queries. Even if you do, terminating one or two slow queries won’t rapidly improve your database performance.</p>
<p>To speed up your queries, you need to gain some understanding of how queries and MySQL work in general.</p>
<h2 id="improve-database-performance">Improving database performance in general</h2>
<p>Before walking you through the specific measures that help improve MySQL database performance, you need to understand the basics of database performance.</p>
<p>Where database performance improvement is concerned, people are usually talking about improving the performance of CRUD, <code>Create</code>, <code>Read</code>, <code>Update</code>, and <code>Delete</code> queries. In MySQL, these queries span the <code>INSERT</code>, <code>SELECT</code>, <code>UPDATE</code>, and <code>DELETE</code> queries.</p>
<p>All queries within MySQL lean on the settings defined in one core file related to MySQL, <code>my.cnf</code>. All of the settings defined in <code>my.cnf</code> have a direct impact on query performance.</p>
<p>You can usually improve the <code>INSERT</code> query performance by removing indexes from the table that data is inserted to. The more indexes are on a specific table, the harder it is for <code>INSERT</code> to proceed.</p>
<p>To improve <code>SELECT</code> query performance, we typically use indexes. To improve <code>UPDATE</code> query performance, we perform updates in batches, meaning we perform many smaller updates instead of one big update.</p>
<p>To improve <code>DELETE</code> query performance, we switch the <code>DELETE</code> query to <code>TRUNCATE</code>. <code>TRUNCATE</code> deletes all rows in a table. Such a query is generally much faster than deleting rows using <code>DELETE</code> because <code>TRUNCATE</code> provides MySQL with less overhead.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The advice given above will certainly be a good starting point when trying to understand why a MySQL-based database is misbehaving in the performance realm.</p>
<p>To understand the reasons behind the assumptions given above, though, we’ll need to dive deeper. I recommend taking a backup of your database, then coming back to this blog. Now, we’ll review five ways that will help you rapidly improve your database performance.</p>
<h2 id="my-cnf">#1: Managing the <code>my.cnf</code> file</h2>
<p>When attempting to improve MySQL query performance, one of the first things to take a closer look at would be the <code>my.cnf</code> file, which holds all the necessary parameters for MySQL to function. If you’re using Linux, you can find the <code>my.cnf</code> file in one of the following directories:</p>
<ul>
<li><code>/var/lib/mysql/my.cnf</code></li>
<li><code>/etc/my.cnf</code></li>
<li><code>/etc/mysql/my.cnf</code></li>
<li><code>/usr/etc/my.cnf</code></li>
</ul>
<p>If you‘re using Windows, you can find the file in the <code>/bin/mysql/mysql *.*.*</code> directory.</p>
<p><code>mysql *.``*.*``*</code> refers to your MySQL version. Open up the file and look for the parameters surrounding InnoDB:</p>
<p><img             class="aligncenter wp-image-152981 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/my-cnf-parameters-example.png" alt="My CNF Parameters Example" width="642" height="167"    /><noscript><img               class="aligncenter wp-image-152981 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/my-cnf-parameters-example.png" alt="My CNF Parameters Example" width="642" height="167"  /></noscript></p>
<p>All of these parameters are related to one of the main storage engines within MySQL, InnoDB. You can use other storage engines, but since InnoDB is the default storage engine offered by MySQL, we suggest you go with it.</p>
<h3><code>my.cnf</code> parameters</h3>
<p>Let’s review the parameters. The <code>innodb-buffer-pool-size</code> parameter defines the size of the buffer pool, which is used to cache data related to InnoDB tables. The <code>innodb-data-file-path</code> parameter specifies the path where the <code>ibdata1</code> file is stored. <code>ibdata1</code> is the main file related to InnoDB, storing all of the necessary data.</p>
<p><code>innodb-default-row-format</code> specifies the row format within InnoDB tables. These can be either fixed or dynamic. <code>innodb-doublewrite</code> specifies whether or not the doublewrite mechanism within InnoDB is enabled.</p>
<p><code>innodb-flush-log-at-trx-commit</code> specifies how data is flushed to log files when transactions commit and finish. The <code>innodb-flush-method</code> parameter defines the method used to flush data to log files.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h3>Setting <code>my.cnf</code> parameters</h3>
<p>Remember how you figured out the amount of RAM and hard drive space available within your infrastructure? Now is the time to use those details for the best possible performance. We’ll set the parameters as follows.</p>
<p>The <code>innodb-buffer-pool-size</code> parameter should be set to 50 to 60 percent of the available RAM. The bigger it is, the more data will be cached, and therefore, inserting data will be faster.</p>
<p>Increase the size of the <code>innodb-data-file-path</code> variable so that it is able to accommodate all of the data within MySQL. We recommend setting the parameter to 5-10 GB.</p>
<p>If the parameter is not present, include an <code>innodb-file-per-table</code> parameter and set it to <code>one</code>. The <code>innodb-file-per-table</code> parameter will help MySQL understand that it needs to store all tables as separate files, thereby making the size of the buffer pool significantly smaller. The buffer pool will only hold metadata.</p>
<p>We advise leaving the <code>innodb-flush-log-at-trx-commit</code> parameter at its default value. The default value guarantees ACID compliance, but, if you want faster write performance, you can also consider changing the value to <code>0</code> or <code>2</code>. Bear in mind that ACID, the properties guaranteeing data integrity, will be traded off as a result.</p>
<p>Leave the flush method as is. The <code>O_DIRECT</code> flush method guarantees faster performance when importing data due to the Linux kernel avoiding the OS cache.</p>
<p>Performing the steps specified above will guarantee faster performance even if your server has a limited amount of RAM and storage space.</p>
<h2 id="mysql-storage-engines-schema-design">#2 and #3: Check up on MySQL storage engines and schema design</h2>
<p>In addition to fiddling around with the <code>my.cnf</code> file, we should also examine the storage engines we use and the way they are designed.If you’re using MySQL, use InnoDB. If you’re using <a href="https://www.percona.com/software/mysql-database/percona-server">Percona Server</a>, use <a href="https://www.percona.com/software/mysql-database/percona-xtradb-cluster">Percona XtraDB</a>.</p>
<h3>InnoDB parameters</h3>
<p>At the time of writing, InnoDB is the only storage engine that supports ACID properties. These properties guarantee data integrity even in the event of power outages or any similar disruptions. As mentioned previously, ACID can be exchanged for speed by setting the <code>innodb-flush-log-at-trx-commit</code> parameter to <code>0</code> or <code>2</code>.</p>
<p>InnoDB offers multiple parameters that you can use to rapidly improve query performance and other operations, including <code>innodb-buffer-pool-size</code> and <code>innodb-log-file-size</code>.</p>
<p>Set the buffer pool size to 60 percent of RAM available within your infrastructure and the log file size to approximately a quarter of the value allocated to the buffer pool. The log files are scanned when MySQL is restoring the data within InnoDB. The bigger the size, the faster the speed of the restore process.</p>
<p>Both InnoDB and XtraDB support row-level locking. In simple terms, row-level locking refers to only locking access to rows that are directly impacted by a transaction. Compared to table-level locking, it has one significant advantage; developers can continue working with rows when updating data.</p>
<p>If your use case doesn’t require such an approach, you should avoid using any other storage engine than InnoDB. MyISAM isn’t reliable, and other storage engines are to be used only in specific corner cases. For more information, <a href="https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html">refer to the MySQL documentation</a>.</p>
<p>If the data you’re working with exceeds 10 million rows, all of your tables are normalized.</p>
<h3>Indexing queries</h3>
<p>At least some of the columns within the tables that you run <code>SELECT</code> queries on are indexed. For optimal results, index either all of the columns that go after the <code>WHERE</code> clause or the first one to save space. This type of approach will improve the performance of queries that read data because indexes will let MySQL know how to find columns with specific values quickly.</p>
<h3>Data types and integers</h3>
<p>It’s important that you know your way around data types and character sets. To occupy less space on the disk, you should use <code>CHAR</code> (character) or <code>VARCHAR</code> (variable character) data types instead of <code>TEXT– CHAR</code> and <code>VARCHAR</code> data types. It’s the same with integers; consider using <code>SMALLINT</code> instead of <code>INT</code> if necessary to save hard drive space.</p>
<p>Specify the length of the data types properly. Consider specifying a size of, say, 50, instead of 255, the maximum value, when dealing with big data. Such an approach will save massive amounts of space on the disk.</p>
<p>Ensure that your tables do not store any data that’s not necessary. The less data that is stored, the less data you have to read and update.</p>
<h2 id="indexes-partitions">#4 and #5: Indexes and partitions</h2>
<p>In addition to the factors described above, indexes and partitions are also immensely important. Indexes help us to find rows with specific values quickly, whereas partitions act as tables within tables to further improve performance.</p>
<p>Both of those approaches come with a cost on the <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> queries since the data that is inserted or updated needs to be updated inside of the index or partition itself.</p>
<p>However, both of these approaches have an upside as well; they both speed up read operations. Partitions make <code>SELECT</code> queries faster because they can split tables into smaller tables beginning with a certain character, only running queries through them. On the other hand, the job of an index is to make <code>SELECT</code> queries with a <code>WHERE</code> clause faster.</p>
<h3>Best practices for indexes</h3>
<p>Both indexes and partitions have multiple different types. For the purposes of this article, we won’t discuss them all, but for indexes, keep the following in mind.</p>
<p>The most common type of indexes, B-tree indexes, are useful when used in conjunction with queries with operators containing an equality sign <code>=</code>.</p>
<p>Covering indexes cover all of the columns that are used by a specific query. For example, a covering index on the columns <code>a1</code>, <code>a2</code>, and <code>a3</code> would satisfy the following query:</p>
<pre>SELECT * FROM demo WHERE a1 = 'Demo' AND a2 = 'Demo 2' AND a3 = 'Demo 3';
</pre>
<p>Hash indexes only work in specific storage engines and specific search operators within MySQL, including <code>=</code> and <code>&lt;=></code>.</p>
<h3>Partitions in MySQL</h3>
<p>For partitions, keep in mind that they come in multiple flavors as well.</p>
<p>Partitioning by <code>RANGE</code> lets us partition values falling within a given range. This type of partitioning is particularly useful when splitting large tables by character or number.</p>
<p>Partitioning by <code>HASH</code> splits the table into multiple tables according to a number of columns. For example, <code>PARTITION BY HASH(id) PARTITIONS 8;</code> would split the table into multiple different tables at the database level with eight partitions in total.</p>
<p>All types of partitioning can be found in <a href="https://dev.mysql.com/doc/refman/8.0/en/partitioning.html">the MySQL documentation</a>. Partitioning is usually defined upon creating a table, and in many cases, it looks like the following:</p>
<pre>CREATE TABLE table_name (
[column_details]
) [partitioning_details];
Partitioning by range, for example, would look like this:
CREATE TABLE table_name (
`demo_column` VARCHAR(255) NOT NULL DEFAULT ''
) PARTITION BY RANGE (column) (
PARTITION p1 VALUES LESS THAN (100),
PARTITION p2 VALUES LESS THAN (200)
);
</pre>
<p>Other types of partitioning look very similar to the partitioning defined above. However, partitioning by <code>RANGE</code> is replaced by <code>LIST</code>, <code>HASH</code>, or other types.</p>
<p>Partitioning has another very important upside as well. It allows users to delete all of the data stored in a single partition; <code>ALTER TABLE demo TRUNCATE PARTITION partition_name</code> will do the trick.</p>
<h2 id="advanced-operations-tricks">Advanced operations: Tips and tricks</h2>
<p>Both indexing and partitioning will help immensely in improving read operations, but there are a couple of additional things that we need to keep in mind.</p>
<p><code>COUNT(*)</code> queries are only fast when the MyISAM storage engine is used. Faster <code>COUNT(*)</code> queries are the only upside of the MyISAM storage engine since it stores the row count within its metadata. No other storage engines do that.</p>
<p>For faster <code>SELECT</code> queries with wildcards, employ wildcards only at the end of the search query. Queries should look like the code below; keep in mind that there’s no wildcard sign at the start of the string:</p>
<pre>SELECT * FROM demo_table WHERE column LIKE 'string%';
</pre>
<p>Wildcards at the start of the string tell MySQL that it should search for anything <code>%</code> at the beginning, which can slow the query down.</p>
<p><code>UNIQUE</code> indexes help us to ensure that each entry inside a column is unique. If that’s not the case, MySQL will error out.</p>
<p>The <code>IGNORE</code> keyword is useful if we want to ignore errors when inserting data or performing other operations. Simply specify <code>IGNORE</code> within the statement, then proceed as usual:</p>
<pre>INSERT IGNORE INTO demo_table (c1) VALUES ('Demo');
</pre>
<p><code>LOAD DATA INFILE and SELECT … INTO OUTFILE</code> is significantly faster than issuing <code>INSERT</code> queries and backing up data in a regular fashion. Such queries avoid a lot of the overhead that exists when <code>INSERT</code> queries are being run. <a href="https://dev.mysql.com/doc/refman/8.0/en/load-data.html">Refer to the MySQL documentation</a> for more information.</p>
<p>Older versions of MySQL cannot deal with <code>FULLTEXT</code> indexes on bigger data sets when we’re searching for anything with an <code>@</code> sign. That’s a bug within MySQL, <code>BUG#104263</code>. This approach causes the query to timeout.</p>
<p>Avoid issuing <code>ALTER</code> queries on tables running big data sets. Due to how <code>ALTER</code> works internally, it forces MySQL to create a new table, then inserts the data into it, makes the necessary changes, and swaps the original table with the copy. As far as big data sets are concerned, this approach usually takes a long time, so just keep that in mind.</p>
<p>Sometimes, it’s helpful to use the <code>DEFAULT</code> keyword to set default values to many rows at once. Imagine creating a table, then inserting a billion rows into it. When the <code>DEFAULT</code> keyword is used, rows will be pre-filled with a specific keyword, thereby preventing the need for potentially problematic <code>ALTER</code> queries as described above. Define a column as follows:</p>
<pre>`column_name` VARCHAR(255) NOT NULL DEFAULT 'value';
</pre>
<p>Hopefully, the advice in this article will help you improve the performance of your MySQL databases. However, as with everything, note that there are downsides.</p>
<h2 id="thedownsidesofeachapproach">The downsides of each approach</h2>
<p>Improving MySQL performance using the methods described above may come with the following drawbacks.</p>
<p>Checking up on <code>my.cnf</code> requires some knowledge of Linux internals, and in many cases, a rather strong server. You can’t improve performance much if your RAM is limited to 256MB or if you have only 2GB of disk space in total.</p>
<p>Knowing your way around <code>my.cnf</code> and storage engines and modifying their settings usually requires deep knowledge of the MySQL space. One needs to know exactly what each parameter that is modified does, what their appropriate values are, and more.</p>
<p>Windows users have it easy since <code>my.ini</code>, a <code>my.cnf</code> equivalent, provides them with a lot of comments within itself, but Linux users usually have to define many settings themselves.</p>
<p>The main downside of data types and character sets is the fact that each character requires space on the disk, and some character sets have different requirements in the storage space. Four bytes per character or eight bytes per character certainly makes a difference if we’re dealing with large data sets, so that’s something to think about too. Refer to <a href="https://dev.mysql.com/doc/refman/8.0/en/char.html">the MySQL documentation</a> for more information.</p>
<p>Indexes and partitions usually speed up <code>SELECT</code> operations at the expense of slowing down everything else, including <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>, since all of those queries have to insert, update, or delete data in indexes and partitions as well.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we’ve discussed five ways that you can rapidly improve your MySQL database performance. Each approach has its own unique upsides and downsides and is applicable in different scenarios. However, whether or not the pros outweigh the cons is for you to decide.</p>
<p>Familiarize yourself <a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-storage-engine.html">with the documentation surrounding your storage engine of choice</a>. Use InnoDB or XtraDB as your storage engine, try your best to normalize the tables you’re working with, avoid using unnecessary sizes for your data types, and index your columns to speed up <code>SELECT</code> queries.</p>
<p>Indexes and partitions are used to speed up <code>SELECT</code> queries at the expense of slowing down <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>. Both of these approaches have multiple types and can be incredibly useful if used wisely.</p>
<p>As always, before attempting to improve your MySQL app performance using one or more of the ways described in this article, be sure to evaluate all of the options available to you, take backups before you test anything, and try all modifications on a local environment first. Make modifications wisely, and always keep in mind that a performance increase in one place most likely means a performance decrease in another place.</p>
<p>I hope you enjoyed this article. Be sure to leave a comment if you have any questions, and happy coding.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-152974" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-152974" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-152974" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/5-ways-rapidly-improve-mysql-database-performance/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A complete guide to CSS word-wrap, overflow-wrap, and word-break - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A complete guide to CSS word-wrap, overflow-wrap, and word-break - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/">A complete guide to CSS word-wrap, overflow-wrap, and word-break - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/josephmawa/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/08/1610367557179.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/08/1610367557179.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/josephmawa/">
Joseph Mawa <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A very passionate open source contributor and technical writer</span>
</div>
</div>
<h1 class="posttitle">A complete guide to CSS <code>word-wrap</code>, <code>overflow-wrap</code>, and <code>word-break</code></h1>
<p>
<span class="post-date"><time class="post-date">
February 24, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2657</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><strong><em>Editor’s note:</em></strong> <em>This complete guide to <code>word-wrap</code>, <code>overflow-wrap</code>, and <code>word-break</code> in CSS was last updated 24 February 2023 to reflect the reflect the most recent version of CSS, include interactive code examples, and include a section on how to wrap text using CSS. To learn more about the <code>overflow</code> property, check out our <a href="https://blog.logrocket.com/new-guide-css-overflow/">guide to CSS <code>overflow</code></a>.</em></p>
<p>Making a site responsive so that it displays correctly on all devices is very important in this day and age. Unfortunately, despite your best efforts to do so, you may still end up with broken layouts. Broken layouts can happen when certain words are too long to fit in their container. Content overflow can occur when you are dealing with user-generated content you have no control over, such as the comments section of a post. Therefore, you need to apply styling to prevent content from overflowing their container.</p>
<p>Content overflow is a common problem for frontend developers. On the web, overflow occurs when your content doesn’t fit entirely within its containing element. As a result, it spills outside. In CSS, you can manage content overflow mainly using the <code>overflow</code>, <code>word-wrap</code>, <code>overflow-wrap</code>, and <code>word-break</code> CSS properties. However, our focus in this article will be on the <code>word-wrap</code>, <code>overflow-wrap</code>, and <code>word-break</code> CSS properties.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#word-wrap-overflow-wrap-word-break-css">Using <code>word-wrap</code>, <code>overflow-wrap</code>, and <code>word-break</code> CSS properties</a>
<ul >
<li><a href="#content-wrapping">How does content wrapping occur in browsers?</a></li>
<li><a href="#soft-wrap-vs-forced-line">What is the difference between a soft wrap break and a forced line break?</a></li>
</ul>
</li>
<li><a href="#word-wrap-overflow-wrap-css">Understanding the <code>Word-wrap</code> and <code>overflow-wrap</code> CSS properties</a>
<ul >
<li><code><a href="#normal">Normal</a></code></li>
<li><code><a href="#anywhere">Anywhere</a></code></li>
<li><code><a href="#break-word">Break-word</a></code></li>
</ul>
</li>
<li><a href="#word-break-css-property">Implementing the <code>Word-break</code> CSS property</a>
<ul >
<li><a href="#setting-word-break-normal">Setting <code>word-break</code> to <code>Normal</code></a></li>
<li><a href="#break-all-value">The <code>Break-all</code> value</a></li>
<li><a href="#keep-all-value">Using the <code>Keep-all</code> value</a></li>
</ul>
</li>
<li><a href="#overflow-wrap-vs-word-break">What is the difference between <code>overflow-wrap</code> and <code>word-break</code>?</a></li>
<li><a href="#wrap-text-css">How to wrap text using CSS</a></li>
<li><a href="#troubleshooting-css-content-overflow-chrome-dev-tools">Troubleshooting CSS content overflow with Chrome DevTools</a></li>
</ul>
<h2 id="word-wrap-overflow-wrap-word-break-css">Using <code>word-wrap</code>, <code>overflow-wrap</code>, and <code>word-break</code> CSS properties</h2>
<p>You can use the <code>word-wrap</code>, <code>overflow-wrap</code>, or <code>word-break</code> CSS properties to wrap or break words that would otherwise overflow their container. This article is an in-depth tutorial on the <code>word-wrap</code>, <code>overflow-wrap</code>, and <code>word-break</code> CSS properties and how you can use them to prevent content overflow from ruining your nicely styled layout. Before we get started, let us understand how browsers wrap content in the next section.</p>
<h3 id="content-wrapping">How does content wrapping occur in browsers?</h3>
<p>Browsers and other user agents perform content wrapping at allowed <a href="https://blog.logrocket.com/css-breakpoints-responsive-design/">breakpoints</a>, referred to as soft wrap opportunities. A browser will wrap content at a soft wrap opportunity, if one exists, to minimize content overflow. In English and other similar writing systems, soft wrap opportunities occur by default at word boundaries in the absence of hyphenation. Because words are bound by spaces and punctuation, that is where soft wraps occur.</p>
<p>Although soft wraps occur in space characters in English texts, the situation might be different for non-English writing systems. Some languages do not use spaces to separate words, meaning that content wrapping depends on the language or writing system. The value of the <code>lang</code> attribute you specify on the <code>HTML</code> element is mostly used to determine which language system is used.</p>
<p>This article will focus mainly on the English language writing system. The default wrapping at soft wrap opportunities may not be sufficient if you are dealing with long, continuous text, such as URLs or user-generated content, which you have very little or no control over. Before we go into a detailed explanation of these CSS properties, let’s look at the differences between soft wrap break and forced line break in the section below.</p>
<h3 id="soft-wrap-vs-forced-line">What is the difference between a soft wrap break and a forced line break?</h3>
<p>Any text wrap that occurs at a soft wrap opportunity is referred to as a soft wrap break. For wrapping to occur at a soft wrap opportunity, you need to make sure you’ve enabled wrapping. For example, setting the value of <code>white-space</code> CSS property to <code>nowrap</code> will disable wrapping. Forced line breaks are caused by explicit line-breaking controls or line breaks marking the end or start of blocks of text.</p>
<h2 id="word-wrap-overflow-wrap-css">Understanding the <code>Word-wrap</code> and <code>overflow-wrap</code> CSS properties</h2>
<p>The name <code>word-wrap</code> is the legacy name for the <code>overflow-wrap</code> CSS property. <code>Word-wrap</code> was originally a non-prefixed Microsoft extension and was not part of the CSS standard, though most browsers implemented it with the name <code>word-wrap</code>. According to the draft <a href="https://www.w3.org/TR/css-text-3/#propdef-overflow-wrap">CSS3 specification</a>, browsers should treat <code>word-wrap</code> as a legacy name alias of the <code>overflow-wrap</code> property for compatibility.</p>
<p>Most recent versions of popular web browsers have implemented the <code>overflow-wrap</code> property. The draft CSS3 specification refers to the <code>overflow-wrap</code> property as:</p>
<blockquote><p>This property specifies whether the browser may break at otherwise disallowed points within a line to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.</p></blockquote>
<p>If you have a <code>white-space</code> property on an element, you need to set its value to allow wrapping for <code>overflow-wrap</code> to have an effect. Below are the values of the <code>overflow-wrap</code> property:</p>
<pre class="language-css hljs">overflow-wrap: normal;
overflow-wrap: anywhere;
overflow-wrap: break-word;
</pre>
<p>You can also use the <a href="https://blog.logrocket.com/css-inheritance-inherit-initial-unset-and-revert/">global values</a> <code>inherit</code>, <code>initial</code>, <code>revert</code>, and <code>unset</code> with <code>overflow-wrap</code>, but we won’t cover them here. In the subsections below, we will look at the values of the <code>overflow-wrap</code> CSS property outlined above to understand the behavior of this property.</p>
<h3 id="normal"><code>Normal</code></h3>
<p>Applying the value <code>normal</code> will make the browser use the default line-breaking behavior of the system. For English and other related writing systems, line breaks will therefore occur at whitespaces and hyphens, as shown below:</p>
<pre class="language-css hljs">.my-element{
    overflow-wrap: normal;
}
</pre>
<p>In the example below, there is a word in the text that is longer than its container. Because there is no soft wrap opportunity and the value of the <code>overflow-wrap</code> property is <code>normal</code>, the word overflows its container. It describes the default line-breaking behavior of the system:</p>
<p class="codepen"  data-height="398.12109375" data-default-tab="html,result" data-slug-hash="NWLpLBq" data-user="nibble0101">See the Pen <a href="https://codepen.io/nibble0101/pen/NWLpLBq"><br/>
overflow-wrap-normal</a> by Joseph Mawa (<a href="https://codepen.io/nibble0101">@nibble0101</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="anywhere"><code>Anywhere</code></h3>
<p>Using the value <code>anywhere</code> will break an otherwise unbreakable string at arbitrary points between two characters. It will not insert a hyphen character even if you apply the <code>hyphens</code> property on the same element.</p>
<p>The browser will break the word only if displaying the word on its line will cause an overflow. If the word still overflows when placed on its line, it will break the word at the point where an overflow would otherwise occur. When you use <code>anywhere</code>, the browser will consider the soft wrap opportunities introduced by the word break when calculating <code>min-content</code> intrinsic sizes:</p>
<pre class="language-css hljs">.my-element{
   overflow-wrap: anywhere;
}
</pre>
<p>Unlike in the previous section, where we used <code>overflow-wrap: normal</code>, in the example below, we are using <code>overflow-wrap: anywhere</code>. The overflowing word that is otherwise unbreakable is broken into chunks of text using <code>overflow-wrap: anywhere</code> so that it fits in its container:</p>
<p class="codepen"  data-height="398.96875" data-default-tab="html,result" data-slug-hash="eYLWRXY" data-user="nibble0101">See the Pen <a href="https://codepen.io/nibble0101/pen/eYLWRXY"><br/>
overlow-wrap-anywhere</a> by Joseph Mawa (<a href="https://codepen.io/nibble0101">@nibble0101</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Most recent versions of desktop browsers support <code>overflow-wrap:</code> <code>anywhere</code>. However, support for some mobile browsers is either lacking or unknown. The image below shows the browser support:</p>
<p><img             class="aligncenter size-full wp-image-162848 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/11/browser-compatibility-css-overflow-wrap-anywhere.png" alt="CSS Overflow-Wrap Compatibility" width="730" height="270"    /><noscript><img               class="aligncenter size-full wp-image-162848" src="https://blog.logrocket.com/wp-content/uploads/2021/11/browser-compatibility-css-overflow-wrap-anywhere.png" alt="CSS Overflow-Wrap Compatibility" width="730" height="270"  /></noscript></p>
<h3 id="break-word"><code>Break-word</code></h3>
<p>The value <code>break-word</code> is like <code>anywhere</code> in terms of functionality. If the browser can wrap the overflowing word to its line without overflowing, that is what it will do. However, if the word still overflows its container even when it is on its line, the browser will break it at the point where the overflow would otherwise occur:</p>
<pre class="language-css hljs">.my-element{
   overflow-wrap: break-word;
}
</pre>
<p>The example below shows how the browser breaks the overflowing text when you apply <code>overflow-wrap: break-word</code>:</p>
<p class="codepen"  data-height="399.484375" data-default-tab="html,result" data-slug-hash="GRXmvKx" data-user="nibble0101">See the Pen <a href="https://codepen.io/nibble0101/pen/GRXmvKx"><br/>
overflow-wrap-break-word</a> by Joseph Mawa (<a href="https://codepen.io/nibble0101">@nibble0101</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Notice that the text appears the same as in the last subsection. The difference between <code>overflow-wrap: anywhere</code> and <code>overflow-wrap: break-word</code> is in the <code>min-content</code> intrinsic sizes.</p>
<p>The difference between <code>anywhere</code> and <code>break-word</code> is apparent when calculating the <code>min-content</code> intrinsic sizes. With <code>break-word</code>, the browser doesn’t consider the soft wrap opportunities introduced by the word break when calculating <code>min-content</code> intrinsic sizes, but it does with <code>anywhere</code>. For more about <code>min-content</code> intrinsic sizes, check out our guide <a href="https://blog.logrocket.com/understanding-min-content-max-content-fit-content-css/">here</a>.</p>
<p>The value <code>break-word</code> has decent coverage among the most recent versions of desktop browsers. Unfortunately, you cannot say the same about their mobile counterpart. It is, therefore, safer to use the legacy <code>word-wrap: break-word</code> instead of the more recent <code>overflow-wrap: break-word</code>.</p>
<p>The image below shows browser support for <code>overflow-wrap: break-word</code>:</p>
<p><img             class="aligncenter size-full wp-image-162851 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/11/browser-compatibility-css-overflow-wrap.png" alt="CSS Break-Word Compatibility" width="730" height="269"    /><noscript><img               class="aligncenter size-full wp-image-162851" src="https://blog.logrocket.com/wp-content/uploads/2021/11/browser-compatibility-css-overflow-wrap.png" alt="CSS Break-Word Compatibility" width="730" height="269"  /></noscript></p>
<p>The most recent versions of desktop browsers have support, while support for some mobile browsers is unknown.</p>
<h2 id="word-break-css-property">Implementing the <code>Word-break</code> CSS property</h2>
<p><code>Word-break</code> is another CSS property you can use to specify soft wrap opportunities between characters. You can use this property to break a word at the exact spot where an overflow would occur and wrap it onto the following line.</p>
<p>The draft CSS3 specification refers to the <code>word-break</code> CSS property as:</p>
<blockquote><p>This property specifies soft wrap opportunities between letters, i.e., where it is “normal” and permissible to break lines of text. It controls what types of letters the browser can glom together to form unbreakable “words” — causing CJK characters to behave like non-CJK text or vice versa.</p></blockquote>
<p>Below are the possible values of the <code>word-break</code> CSS property. Like <code>overflow-wrap</code>, you can use the global values <code>inherit</code>, <code>initial</code>, <code>revert</code>, and <code>unset</code> with <code>word-break</code>, but we won’t cover them here:</p>
<pre class="language-css hljs">word-break: normal;
word-break: break-all;
word-break: keep-all;
</pre>
<p><code>Break-word</code> is also a value of the <code>word-break</code> CSS property, though it was removed. However, browsers still support it for legacy reasons. Specifying this property has the same effect as <code>word-break: normal</code> and <code>overflow-wrap: anywhere</code>.</p>
<p>Now that we know the <code>break-word</code> CSS property and its corresponding values, let us look at them in the subsections below.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="setting-word-break-normal">Setting <code>word-break</code> to <code>Normal</code></h3>
<p>Setting the value of the <code>word-break</code> property to <code>normal</code> will apply the default word breaking rules:</p>
<pre class="language-css hljs">.my-element{
   word-break: normal;
}
</pre>
<p>The example below illustrates what happens when you apply the styling <code>word-break: normal</code> to a block of text that contains a word longer than its container:</p>
<p class="codepen"  data-height="398.5703125" data-default-tab="html,result" data-slug-hash="abaWyOm" data-user="nibble0101">See the Pen <a href="https://codepen.io/nibble0101/pen/abaWyOm"><br/>
word-break-normal</a> by Joseph Mawa (<a href="https://codepen.io/nibble0101">@nibble0101</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>What you see is the browser’s usual word-breaking rules in effect.</p>
<h3 id="break-all-value">The <code>Break-all</code> value</h3>
<p>The value <code>break-all</code> will insert a line break at the exact point where the text would otherwise overflow for non-Chinese, non-Japanese, and non-Korean writing systems. It will not put the word on its own line, even if doing so will prevent the need to insert a line break:</p>
<pre class="language-css hljs">.my-element{
   word-break: break-all;
}
</pre>
<p>In the example below, I am applying <code>word-break: break-all</code> styling to a <code>p</code> element of width <code>240px</code> containing an overflowing text. The browser will insert a line break at the point where an overflow would occur and wrap the remaining text to the following line:</p>
<p class="codepen"  data-height="398.53125" data-default-tab="html,result" data-slug-hash="JjaNyLO" data-user="nibble0101">See the Pen <a href="https://codepen.io/nibble0101/pen/JjaNyLO"><br/>
word-break-break-all</a> by Joseph Mawa (<a href="https://codepen.io/nibble0101">@nibble0101</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Using <code>break-all</code> will break a word between two characters at the exact point where an overflow would occur in English and other related language systems. However, it won’t apply the same behavior to Chinese, Japanese, and Korean (CJK) texts.</p>
<p>It doesn’t apply the same behavior for CJK texts because CJK writing systems have their own rules for applying breakpoints. Creating a line break between two characters arbitrarily just for the sake of avoiding overflow might significantly change the overall meaning of the text. For CJK systems, the browser will apply line breaks at the point where such breaks are allowed.</p>
<h3 id="keep-all-value">Using the <code>Keep-all</code> value</h3>
<p>If you use the value <code>keep-all</code>, the browser will not apply word breaks to CJK texts, even if there is content overflow. The effect of applying <code>keep-all</code> value is the same as that of <code>normal</code> for non-CJK writing systems:</p>
<pre class="language-css hljs">.my-element{
   word-break: keep-all;
}
</pre>
<p>In the example below, applying <code>word-break: keep-all</code> will have the same effect as <code>word-break: normal</code> for a non-CJK writing system such as English:</p>
<p class="codepen"  data-height="397.0859375" data-default-tab="html,result" data-slug-hash="eYLWEKB" data-user="nibble0101">See the Pen <a href="https://codepen.io/nibble0101/pen/eYLWEKB"><br/>
word-break-keep-all</a> by Joseph Mawa (<a href="https://codepen.io/nibble0101">@nibble0101</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>The image below shows the browser support for <code>word-break: keep-all</code>:</p>
<p><img             class="aligncenter size-full wp-image-162853 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/11/keep-all-css-browsers.png" alt="CSS Keep-all Compatibility" width="730" height="269"    /><noscript><img               class="aligncenter size-full wp-image-162853" src="https://blog.logrocket.com/wp-content/uploads/2021/11/keep-all-css-browsers.png" alt="CSS Keep-all Compatibility" width="730" height="269"  /></noscript></p>
<p>This value has support in most popular desktop browsers. Unfortunately, it is not the case for mobile browsers. Now that we have looked at the <code>overflow-wrap</code> and <code>word-break</code> CSS properties, what is the difference between the two? The section below will shed light on that.</p>
<h2 id="overflow-wrap-vs-word-break">What is the difference between <code>overflow-wrap</code> and <code>word-break</code>?</h2>
<p>You can use the CSS properties <code>overflow-wrap</code> and <code>word-break</code> to manage content overflow. However, there are differences in the way the two properties handle it.</p>
<p>Using <code>overflow-wrap</code> will wrap the entire overflowing word to its line if it can fit in a single line without overflowing its container. The browser will break the word only if it cannot place it on a new line without overflowing. In most cases, the <code>overflow-wrap</code> property or its legacy name <code>word-wrap</code> might manage content overflow. Using <code>word-wrap: break-word</code> will wrap the overflowing word onto a new line and goes ahead to break it between two characters if it still overflows its container.</p>
<p><code>Word-break</code> will ruthlessly break the overflowing word between two characters even if placing it on its line will negate the need for word break. Some writing systems, like the CJK writing systems, have strict word breaking rules the browser takes into consideration when creating line breaks using <code>word-break</code>.</p>
<h2 id="wrap-text-css">How to wrap text using CSS</h2>
<p>As hinted above, if you want to wrap text or break a word overflowing the confines of its box, your best bet is the <code>overflow-wrap</code> CSS property. You can also use its legacy name, <code>word-wrap</code>. Try the <code>word-break</code> CSS property if the <code>overflow-wrap</code> property doesn’t work for you. However, be aware of the differences between <code>overflow-wrap</code> and <code>word-break</code> highlighted above.</p>
<p>Below is an illustration of the <code>overflow-wrap</code> and <code>word-wrap</code> CSS properties. You can play with the CodePen to understand their effects:</p>
<p class="codepen"  data-height="399.09375" data-default-tab="html,result" data-slug-hash="NWLjYoO" data-user="nibble0101">See the Pen <a href="https://codepen.io/nibble0101/pen/NWLjYoO"><br/>
how-to-wrap-text</a> by Joseph Mawa (<a href="https://codepen.io/nibble0101">@nibble0101</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="troubleshooting-css-content-overflow-chrome-dev-tools">Troubleshooting CSS content overflow with Chrome DevTools</h2>
<p>More often than not, you might need to fix broken layouts caused by content overflow, as complex user interfaces are now commonplace in frontend development. Modern web browsers come with tools for troubleshooting such layout issues, such as <a href="https://developer.chrome.com/docs/devtools/">Chrome DevTools</a>.</p>
<p>It provides the capability to select an element in the DOM tree so that you can view, add, and remove CSS declarations and much more. It will help you track down the offending CSS style in your layout and fix it with ease.</p>
<p>To open the Chrome DevTools, you can use the <code>F12</code> key. When open, it looks like in the image below. Selecting an <strong>element</strong> in the DOM tree will display its corresponding CSS styles. You can modify the styles and see the effect on your layout as you track down the source of the bug:</p>
<p><img             class="aligncenter size-full wp-image-162855 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/11/using-chrome-dev-tools-css.png" alt="Using Chrome DevTools With CSS" width="730" height="337"    /><noscript><img               class="aligncenter size-full wp-image-162855" src="https://blog.logrocket.com/wp-content/uploads/2021/11/using-chrome-dev-tools-css.png" alt="Using Chrome DevTools With CSS" width="730" height="337"  /></noscript></p>
<p>As already mentioned, if you have <code>white-space</code> property on an element, set its value to allow wrapping for <code>overflow-wrap: anywhere</code> or <code>overflow-wrap: break-word</code> to work.</p>
<p>Setting the value of <code>overflow-wrap</code> property to <code>anywhere</code> or <code>break-word</code> on a <code>table</code> content won’t break an overflowing word like in the examples above. The table will overflow its container and create a horizontal scroll if necessary. To get the table to fit within its container and <code>overflow-wrap</code> to work, set the value of the <code>table-layout</code> property to <code>fixed</code> and set the table width to <code>100%</code> or to some fixed value.</p>
<h2>Conclusion</h2>
<p>As pointed out in the above sections, <code>overflow-wrap</code> and <code>word-break</code> are similar in so many ways, and you can use both of them for line-breaking controls. The name <code>overflow-wrap</code> is an alias of the legacy <code>word-wrap</code> property. Therefore, you can use the two interchangeably. However, it is worth mentioning that the browser support for the newer <code>overflow-wrap</code> property is still low. You are better off using <code>word-wrap</code> instead of <code>overflow-wrap</code> if you want near-universal browser support.</p>
<p>According to the draft CSS3 specification, browsers and user agents should continue supporting <code>word-wrap</code> for legacy reasons. If you are looking to manage content overflow, <code>overflow-wrap</code> or its legacy name <code>word-wrap</code> might be sufficient. You can also use <code>word-break</code> to break a word between two characters if the word overflows its container. Just like <code>overflow-wrap</code>, you need to tread with caution when using <code>word-break</code> because of limitations in the browser support.</p>
<p>Now that you know the behavior associated with the two properties, you can decide where and when to use them. Did I miss anything? Leave a comment in the comments section. I will be happy to update this article.</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-75126" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-75126" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-75126" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-css-word-wrap-overflow-wrap-word-break/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A complete guide to React refs - LogRocket Blog</title>
			<link>https://blog.logrocket.com/complete-guide-react-refs/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/complete-guide-react-refs/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A complete guide to React refs - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/complete-guide-react-refs/">A complete guide to React refs - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/jeremiasmenichelli3/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/01/jeremias-menichelli.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/01/jeremias-menichelli.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/jeremiasmenichelli3/">
Jeremias Menichelli <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Curious mind, writer, and developer.</span>
</div>
</div>
<h1 class="posttitle">A complete guide to React refs</h1>
<p>
<span class="post-date"><time class="post-date">
February 23, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2770</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This post was updated on 23 February 2023 to add interactive code examples, update any outdated information, and include use cases for React refs. Check out our <a href="https://blog.logrocket.com/react-hooks-cheat-sheet-solutions-common-problems/">React Hooks cheat sheet</a> to learn more about React Hooks.</em></p>
<p>As with many other UI libraries, React offers a way to rethink a view as the result of a component’s state. This is a significant pivot away from how we usually build applications. When we become familiar with some of these concepts, we discover how easy it is to solve simple problems in the frontend world that used to cause us some trouble. Part of that benefit comes from creating views with the abstraction mechanisms that React and JSX expose instead of doing it through DOM spec methods.</p>
<p>Still, the React team did something clever: they provided escape hatches. They kept the library open for situations beyond the ones they were specifically designing for and situations the model may not work for. We’ll cover anti-patterns later in this article.</p>
<p>These escape hatches are refs, which allow us to access DOM properties directly. Normally, React uses state to update the data on the screen by re-rendering the component for us. But, there are certain situations where you need to deal with the DOM properties directly, and that’s where refs come in clutch.</p>
<p>An example would be auto-focusing a text box when a component renders. React doesn’t provide an easy way to do this, so we can use refs to access the DOM directly and focus the text box whenever the component renders on the screen.</p>
<p>In this article, we will investigate why React, a framework meant to abstract your code away from DOM manipulation, leaves the door open for developers to access it.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#creating-refs">Creating refs</a>
<ul >
<li><a href="#useref-vs-create-ref">Difference between <code>useRef</code> and <code>createRef</code></a></li>
</ul>
</li>
<li><a href="#using-react-refs">Using React refs</a>
<ul >
<li><a href="#focus-control">Focus control</a></li>
<li><a href="#element-contained">Detect if an element is contained</a></li>
<li><a href="#integrating-dom">Integrating with DOM-based libraries</a></li>
<li><a href="#use-useref-hook">When should you use the <code>useRef</code> Hook?</a></li>
</ul>
</li>
<li><a href="#avoid-anti-pattern">Avoiding React ref anti-patterns</a></li>
<li><a href="#using-forwardref">Using <code>forwardRef</code></a></li>
</ul>
<h2 id="creating-refs">Creating refs</h2>
<p>When working with class-based components in the past, we used <code>createRef()</code> to create a ref. However, now that React recommends <a href="https://blog.logrocket.com/what-are-react-pure-functional-components/">functional components</a> and general practice is to <a href="https://blog.logrocket.com/refactor-react-components-hooks/">follow the Hooks way</a> of doing things, we don’t need to use <code>createRef()</code>. Instead, we use <code>useRef(null)</code> to create refs in functional components.</p>
<p>As stated in the intro, refs are escape hatches for React developers, and we should try to avoid using them if possible. When we obtain a node using a <code>ref</code> and later modify some attribute or the DOM structure of it, it can enter into conflict with React’s diff and update approaches.</p>
<p>First, let’s start with a simple component and grab a node element using refs:</p>
<pre class="language-jsx hljs">import React from "react";
const ActionButton = ({ label, action }) => {
  return &lt;button onClick={action}>{label}&lt;/button>;
};
export default ActionButton;
</pre>
<p>The <code>&lt;button></code> expression here is the JSX way of calling the <code>React.createElement('button')</code> statement, which is not a representation of an HTML button element — it’s a React element.</p>
<p>You can gain access to the actual <a href="https://blog.logrocket.com/type-html-faster-react-emmet-vs-code/">HTML element</a> by creating a React reference and passing it to the element itself:</p>
<pre class="language-jsx hljs">import React, { useRef } from "react";
const ActionButton = ({ label, action }) => {
  const buttonRef = useRef(null);
  return (
    &lt;button onClick={action} ref={buttonRef}>
      {label}
    &lt;/button>
  );
};
export default ActionButton;
</pre>
<p>This way, at any time in the component’s lifecycle, we can access the actual HTML element at <code>buttonRef.current</code>. Now, we know how to access DOM nodes inside a React component. Let’s take a look at some of the situations where this may be useful.</p>
<h3 id="useref-vs-create-ref">Differences between <code>useRef</code> and <code>createRef</code></h3>
<p>The first difference between <code>useRef</code> and <code>createRef</code> is that <code>createRef</code> is typically used when creating a ref in a class component while <code>useRef</code> is used in function components. Additionally, <code>createRef</code> returns a new ref object each time it is called while <code>useRef</code> returns the same ref object on every render.</p>
<p>Another main difference is that <code>createRef</code> doesn’t accept an initial value, so the <code>current</code> property of the ref will be initially set to <code>null</code>. On the other hand, <code>useRef</code> can accept an initial value and the <code>current</code> property of the ref will be set to that value.</p>
<h2 id="using-react-refs">Using React refs</h2>
<p>One of the many concepts that React popularized among developers is the concept of <a href="https://blog.logrocket.com/solidjs-vs-react/">declarative views</a>. Before declarative views, most of us modified the DOM by calling functions that explicitly changed it. As mentioned in the introduction of this article, we are now declaring views based on a state, and — though we are still calling functions to alter this state — we are not in control of when the DOM will change or even if it should change.</p>
<p>Because of this inversion of control, we’d lose this imperative nature if it weren’t for refs. Here are a few use cases where bringing refs into your code may make sense.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="focus-control">Focus control</h3>
<p>You can achieve focus in an element programmatically by calling <code>focus()</code> on the node instance. Because the DOM exposes this as a function call, the best way to do this in React is to create a ref and manually do it when we think it’s suitable, as shown below:</p>
<pre class="language-jsx hljs">import React, { useState } from "react";
const InputModal = ({ initialValue }) => {
  const [value, setValue] = useState(initialValue);
  const onChange = (e) => {
    setValue(e.target.value);
  };
  const onSubmit = (e) => {
    e.preventDefault();
  };
  return (
    &lt;div className="modal--overlay">
      &lt;div className="modal">
        &lt;h1>Insert a new value&lt;/h1>
        &lt;form action="?" onSubmit={onSubmit}>
          &lt;input type="text" onChange={onChange} value={value} />
          &lt;button>Save new value&lt;/button>
        &lt;/form>
      &lt;/div>
    &lt;/div>
  );
};
export default InputModal;
</pre>
<p>In this modal, we allow the user to modify a value already set in the screen below. It would be a <a href="https://blog.logrocket.com/improve-react-ux-skeleton-ui/">better UX</a> if the input was on focus when the modal opens, which would enable a smooth keyboard transition between the two screens. The first thing we need to do is get a reference for the <code>input</code>:</p>
<pre class="language-jsx hljs">import React, { useRef, useState } from "react";
const InputModal = ({ initialValue }) => {
  const [value, setValue] = useState(initialValue);
  const inputRef = useRef(null);
  const onChange = (e) => {
    setValue(e.target.value);
  };
  const onSubmit = (e) => {
    e.preventDefault();
  };
  return (
    &lt;div className="modal--overlay">
      &lt;div className="modal">
        &lt;h1>Insert a new value&lt;/h1>
        &lt;form action="?" onSubmit={onSubmit}>
          &lt;input ref={inputRef} type="text" onChange={onChange} value={value} />
          &lt;button>Save new value&lt;/button>
        &lt;/form>
      &lt;/div>
    &lt;/div>
  );
};
export default InputModal;
</pre>
<p>Next, when our <code>modal</code> mounts, we imperatively call <code>focus</code> on our <code>input ref</code> within a <code>useEffect</code>:</p>
<pre class="language-jsx hljs">import React, { useEffect, useRef, useState } from "react";
const InputModal = ({ initialValue }) => {
  const [value, setValue] = useState(initialValue);
  const inputRef = useRef(null);
  useEffect(() => {
    inputRef.current.focus();
  }, [])
  const onChange = (e) => {
    setValue(e.target.value);
  };
  const onSubmit = (e) => {
    e.preventDefault();
  };
  return (
    &lt;div className="modal--overlay">
      &lt;div className="modal">
        &lt;h1>Insert a new value&lt;/h1>
        &lt;form action="?" onSubmit={onSubmit}>
          &lt;input ref={inputRef} type="text" onChange={onChange} value={value} />
          &lt;button>Save new value&lt;/button>
        &lt;/form>
      &lt;/div>
    &lt;/div>
  );
};
export default InputModal;
</pre>
<p>So, when you open the <code>modal</code>, you should see the text box focused by default:</p>
<p><img             class="aligncenter size-full wp-image-162748 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/01/opened-modal-react-useref.png" alt="Opening a Modal Focuses the Text Box" width="730" height="364"    /><noscript><img               class="aligncenter size-full wp-image-162748" src="https://blog.logrocket.com/wp-content/uploads/2022/01/opened-modal-react-useref.png" alt="Opening a Modal Focuses the Text Box" width="730" height="364"  /></noscript></p>
<p>Remember that you need to access the element through the <code>current</code> property.</p>
<p>Here’s a CodeSandbox for the example above:</p>
<p><iframe  title="adoring-haibt-v8u28p" src="https://codesandbox.io/embed/adoring-haibt-v8u28p?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<h3 id="element-contained">Detect if an element is contained</h3>
<p>Similarly, you want to know if any element dispatching an event should trigger some action on your app. For example, our <code>modal</code> component could be closed if the user clicked outside of it, like so:</p>
<pre class="language-jsx hljs">import React, { useEffect, useRef, useState } from "react";
const InputModal = ({ initialValue, onClose, onSubmit }) => {
  const [value, setValue] = useState(initialValue);
  const inputRef = useRef(null);
  const modalRef = useRef(null);
  useEffect(() => {
    inputRef.current.focus();
    document.body.addEventListener("click", onClickOutside);
    return () => document.removeEventListener("click", onClickOutside);
  }, []);
  const onClickOutside = (e) => {
    const element = e.target;
    if (modalRef.current &amp;&amp; !modalRef.current.contains(element)) {
      e.preventDefault();
      e.stopPropagation();
      onClose();
    }
  };
  const onChange = (e) => {
    setValue(e.target.value);
  };
  const onSub = (e) => {
    e.preventDefault();
    onSubmit(value);
    onClose();
  };
  return (
    &lt;div className="modal--overlay">
      &lt;div className="modal" ref={modalRef}>
        &lt;h1>Insert a new value&lt;/h1>
        &lt;form action="?" onSubmit={onSub}>
          &lt;input ref={inputRef} type="text" onChange={onChange} value={value} />
          &lt;button>Save new value&lt;/button>
        &lt;/form>
      &lt;/div>
    &lt;/div>
  );
};
export default InputModal;
</pre>
<p>Here, we check if the element <code>click</code> is outside the <code>modal</code> limits. It will work like this:</p>
<p><img             class="aligncenter size-full wp-image-162752 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/01/check-element-click-react-useref.gif" alt="Checking the Element Click in React" width="730" height="271"  /><noscript><img               class="aligncenter size-full wp-image-162752" src="https://blog.logrocket.com/wp-content/uploads/2022/01/check-element-click-react-useref.gif" alt="Checking the Element Click in React" width="730" height="271"/></noscript></p>
<p>If it is, then we are preventing further actions and calling the <code>onClose</code> callback because the <code>modal</code> component expects to be controlled by its parent. Remember to check if the DOM element’s current reference still exists, as state changes in React are asynchronous. To achieve this, we are adding a <a href="https://blog.logrocket.com/detect-click-outside-react-component-how-to/">global click listener</a> on the <code>body</code> element. It’s important to remember to clean the <code>listener</code> when the element is unmounted.</p>
<h3 id="integrating-dom">Integrating with DOM-based libraries</h3>
<p>As good as React is, <a href="https://blog.logrocket.com/top-10-react-ui-libraries-kits/">many utilities and libraries</a> outside its ecosystem have been in use on the web for years. For example, using refs allows us to combine React with a great animation library. It’s good to take advantage of their stability and resolution for some specific problems.</p>
<p>The <a href="https://blog.logrocket.com/animations-react-hooks-greensock/">GSAP library</a> is a popular choice for animation examples. To use it, we need to send a <code>DOM</code> element to any of its methods. Let’s go back to our modal and add some animations to make its appearance fancier:</p>
<pre class="language-jsx hljs">import React, { useEffect, useRef, useState } from "react";
import gsap from "gsap";
const InputModal = ({ initialValue, onClose, onSubmit }) => {
  const [value, setValue] = useState(initialValue);
  const inputRef = useRef(null);
  const modalRef = useRef(null);
  const overlayRef = useRef(null);
  const onComplete = () => {
    inputRef.current.focus();
  };
  const timeline = gsap.timeline({ paused: true, onComplete });
  useEffect(() => {
    timeline
      .from(overlayRef.current, {
        duration: 0.25,
        autoAlpha: 0,
      })
      .from(modalRef.current, {
        duration: 0.25,
        autoAlpha: 0,
        y: 25,
      });
    timeline.play();
    document.body.addEventListener("click", onClickOutside);
    return () => {
      timeline.kill();
      document.removeEventListener("click", onClickOutside);
    };
  }, []);
  const onClickOutside = (e) => {
    const element = e.target;
    if (modalRef.current &amp;&amp; !modalRef.current.contains(element)) {
      e.preventDefault();
      e.stopPropagation();
      onClose();
    }
  };
  const onChange = (e) => {
    setValue(e.target.value);
  };
  const onSub = (e) => {
    e.preventDefault();
    onSubmit(value);
    onClose();
  };
  return (
    &lt;div className="modal--overlay" ref={overlayRef}>
      &lt;div className="modal" ref={modalRef}>
        &lt;h1>Insert a new value&lt;/h1>
        &lt;form action="?" onSubmit={onSub}>
          &lt;input ref={inputRef} type="text" onChange={onChange} value={value} />
          &lt;button>Save new value&lt;/button>
        &lt;/form>
      &lt;/div>
    &lt;/div>
  );
};
export default InputModal;
</pre>
<p><img             class="aligncenter size-full wp-image-162754 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/01/animations-react.gif" alt="Adding Animations to Our React Modal" width="730" height="300"  /><noscript><img               class="aligncenter size-full wp-image-162754" src="https://blog.logrocket.com/wp-content/uploads/2022/01/animations-react.gif" alt="Adding Animations to Our React Modal" width="730" height="300"/></noscript></p>
<p>At the constructor level, we are setting up the initial animation values, which will modify the styles of our DOM references. The timeline only plays when the component mounts. When the element is unmounted, we’ll clean the DOM state and actions by terminating any ongoing animation with the <code>kill()</code> method supplied by the <code>Timeline</code> instance.</p>
<p>Now, we’ll turn our focus to the <code>input</code> after the <code>timeline</code> has been completed.</p>
<h3 id="use-useref-hook">When should you use <code>useRef</code> Hook?</h3>
<p>There are some instances where you would want to use the <code>useRef</code> Hook, including the following:</p>
<ul>
<li>Accessing DOM elements: You can use the <code>useRef</code> Hook when you need to interact with a specific DOM element in your component, such as setting the focus on an input field or measuring an element’s size</li>
<li>Storing values that don’t trigger re-renders: When you have a value that changes frequently but doesn’t trigger a re-render, you can use <code>useRef</code> to store that value. For example, if you have a timer in your component, you could use <code>useRef</code> to store the current time without triggering a re-render</li>
<li>Caching expensive computations: If you need to avoid repeating an expensive computation on every render, you can use <code>useRef</code> to store the result of that computation</li>
</ul>
<h2 id="avoid-anti-pattern">Avoiding React ref anti-patterns</h2>
<p>Once you know how refs work, it’s easy to use them where they’re not needed. There’s more than one way to achieve the same thing inside a React component, so it’s easy to fall into an <a href="https://blog.logrocket.com/product-management/strategic-roadmap-examples-antipatterns/">anti-pattern</a>. My rule when it comes to ref usage is this: only use a ref when you need to imperatively call a function for a behavior React doesn’t allow you to control.</p>
<p>A simpler way to put that is when you need to call a function, and that function has no association with a React method or artifact, use a ref. Let’s explore an anti-pattern that I’ve seen repeatedly:</p>
<pre class="language-jsx hljs">import React, { useRef } from "react";
const Form = () => {
  const [storedValue, setStoredValue] = useState("");
  const inputRef = useRef(null);
  const onSubmit = (e) => {
    e.preventDefault();
    setStoredValue(inputRef.current.value);
  };
  return (
    &lt;div className="modal">
      &lt;form action="?" onSubmit={onSubmit}>
        &lt;input ref={inputRef} type="text" />
        &lt;button>Submit&lt;/button>
      &lt;/form>
    &lt;/div>
  );
};
</pre>
<p>It’s fair to say if you want to send a <code>value</code> on <code>submit</code>, this approach will work, but the issue here is that because we know refs provide an escape hatch of the view model React offers, we can too easily go sniffing into DOM element values or properties that we can access through React’s interface. Controlling the <code>input</code> value means we can always check its value. We don’t need to use refs here to access the value of the text box. We can use the value provided by React itself:</p>
<pre class="language-jsx hljs">return (
  &lt;input
    type="text"
    onChange={e => setValue(e.target.value)}
    value={value}
  />
)
</pre>
<p>Let’s go back to our rule: only use a ref when you need to imperatively call a function for a behavior React doesn’t allow you to control. In our uncontrolled <code>input</code> we create a ref but don’t make an imperative call. Then, that function should exist, which is not satisfied as I can indeed control an input’s value.</p>
<h2 id="using-forwardref">Using <code>forwardRef</code></h2>
<p>As we’ve discussed, refs are useful for really specific actions. The examples shown are a little simpler than what we usually find in a web application codebase nowadays. Components are more complex, and we barely use plain HTML elements directly. It’s really common to include more than one node to encapsulate more logic around the view behavior. Here’s an example:</p>
<pre class="language-jsx hljs">import React from 'react'

const LabelledInput = (props) => {
  const { id, label, value, onChange } = props

  return (
    &lt;div class="labelled--input">
      &lt;label for={id}>{label}&lt;/label>
      &lt;input id={id} onChange={onChange} value={value} />
    &lt;/div>
  )
}

export default LabelledInput
</pre>
<p>The issue now is that passing a ref to this component will return its instance, a React component reference, and not the <code>input</code> element we want to focus on, like in our first example. Luckily, React provides an inbuilt solution for this called <code><a href="https://blog.logrocket.com/cleaning-up-the-dom-with-forwardref-in-react/">forwardRef</a></code>, which allows you to define internally what element the <code>ref</code> will point at:</p>
<pre class="language-jsx hljs">import React from 'react'

const LabelledInput = (props, ref) => {
  const { id, label, value, onChange } = props

  return (
    &lt;div class="labelled--input">
      &lt;label for={id}>{label}&lt;/label>
      &lt;input id={id} onChange={onChange} value={value} ref={ref}/>
    &lt;/div>
  )
}

export default React.forwardRef(LabelledInput)
</pre>
<p>See this <a href="https://codesandbox.io/s/input-modal-example-l2wst?module=%2Fsrc%2Flabelled-input.js">example in action</a>:</p>
<p><iframe  title="input-modal-example" src="https://codesandbox.io/embed/input-modal-example-l2wst?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<p>To achieve this, we’ll pass a second argument to our function and place it in the desired element. Now, when a parent component passes a <code>ref</code> value, it will obtain the <code>input</code>, which is helpful to avoid exposing the internals and properties of a component and breaking its encapsulation. The example of our form that we saw failing to achieve focus will now work as expected.</p>
<h2>Conclusion</h2>
<p>We started with a recap on the basic concepts of React and its usage, why we generally shouldn’t break the framework’s model, and why we may sometimes need to. ​​Accessing the DOM through the interface the library exposes helps to maintain the internals of React in place (remember that <code>useState</code>​ contains more logic than just triggering a re-render cycle, like batching updates and, in the future, time slicing).</p>
<p>Breaking this model with anti-patterns can render later performance improvements in the library useless, or even create bugs in your applications. Remember to only use refs when there is an implicit function call that React can’t handle through its methods. Also, make sure it doesn’t alter the internal state of the components. For more information, read the <a href="https://beta.reactjs.org/reference/react/createRef">official React documentation</a> about refs.</p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-12592" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/complete-guide-react-refs/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/complete-guide-react-refs/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-12592" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/complete-guide-react-refs/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-12592" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/complete-guide-react-refs/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/complete-guide-react-refs/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A complete guide to const assertions in TypeScript - LogRocket Blog</title>
			<link>https://blog.logrocket.com/complete-guide-const-assertions-typescript/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/complete-guide-const-assertions-typescript/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A complete guide to const assertions in TypeScript - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/complete-guide-const-assertions-typescript/">A complete guide to const assertions in TypeScript - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/paulcowan/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/08/paul-cowan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/08/paul-cowan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/paulcowan/">
Paul Cowan <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Contract software developer.</span>
</div>
</div>
<h1 class="posttitle">A complete guide to <code>const</code> assertions in TypeScript</h1>
<p>
<span class="post-date"><time class="post-date">
March 9, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1696</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><strong><em>Editor’s note</em></strong>: <em>This article was last updated on 9 March 2023 to add a section about the difference between <code>const</code> declarations and assertions.</em></p>
<p>Since their inception in Typescript 3.4, <code>const</code> assertions have remained a powerful tool for creating more precise and type-safe code. This feature was a significant addition to the language, providing a way to <a href="https://blog.logrocket.com/write-fewer-tests-by-creating-better-typescript-types/">make more specific and literal types</a> in your code.</p>
<p>With <code>const</code> assertions, developers can provide an explicit type annotation to ensure that a value is treated as a literal type, rather than being widened to a more general type.</p>
<p>This article will cover:</p>
<ul>
<li><a href="#what-are-const-assertions">What are <code>const</code> assertions?</a></li>
<li><a href="#no-type-widening-literal-types">No type widening for literal types</a></li>
<li><a href="#object-literals-get-readonly-properties">Object literals get <code>readonly</code> properties</a></li>
<li><a href="#array-literals-become-readonly-tuples">Array literals become <code>readonly</code> tuples</a></li>
<li><a href="#difference-between-const-declarations-assertions">The difference between <code>const</code> declarations and assertions</a></li>
</ul>
<h2 id="what-are-const-assertions">What are <code>const</code> assertions?</h2>
<pre class="language-typescript hljs">const x = { text: "hello" } as const;
</pre>
<p>The <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions">official docs</a> give this explanation:</p>
<blockquote><p>TypeScript 3.4 introduces a new construct for literal values called const assertions. Its syntax is a type assertion with const in place of the type name (e.g., 123 as const). When we construct new literal expressions with const assertions, we can signal to the language that:</p>
<ul>
<li>No literal types in that expression should be widened (e.g., no going from “hello” to string)</li>
<li>Object literals get <code>readonly</code> properties</li>
<li>Array literals become <code>readonly</code> tuples</li>
</ul>
</blockquote>
<p>This feels a bit dry and a little confusing. Let’s break this down one bullet point at a time.</p>
<h2 id="no-type-widening-literal-types">No type widening for literal types</h2>
<p>Individuals may need to become more familiar with type widening. It can be surprising to encounter it for the first time due to its unexpected behavior.</p>
<p>When we declare a literal variable using the keyword <code>const</code>, then the type is the literal on the right-hand side of the equals sign. For example:</p>
<pre class="language-typescript hljs">const x = 'x'; // x has the type 'x'</pre>
<p>The <code>const</code> keyword ensures that no reassignment to the variable can happen, and a strict type of only that literal is guaranteed.</p>
<p>But if we use <code>let</code> instead of <code>const</code>, then we are leaving that variable open to reassignment, and the type is widened to the literal’s type like so:</p>
<pre class="language-typescript hljs">let x = 'x'; // x has the type string;
</pre>
<p>Below are the two differing declarations:</p>
<pre class="language-typescript hljs">const x = 'x'; // has the type 'x' 
let y = 'x';   // has the type string
</pre>
<p><code>y</code> is widened to a more general type, which will allow it to be reassigned to other values of that type, and <code>x</code> can only ever have the value of <code>'x'</code>.</p>
<p>With the new <code>const</code> feature, I could do this:</p>
<pre class="language-typescript hljs">let y = 'x' as const; // y has type 'x'
</pre>
<p>I would expect to be marched off the premises during any good code review if I did the above rather than simply declaring <code>y</code> as a <code>const</code> variable, but let’s move swiftly to point number two of the bulleted list from the docs.</p>
<h2 id="object-literals-get-readonly-properties">Object literals get <code>readonly</code> properties</h2>
<p>Prior to Typescript 3.4, type widening happened across the board with object literals:</p>
<pre class="language-typescript hljs">const action = { type: 'INCREMENT', } // has type { type: string }
</pre>
<p>Even though we have declared <code>action</code> as <code>const</code>, the <code>type</code> property can still be reassigned and, as such, the property is widened to a string type. If you are familiar with Redux, then you might recognize that the <code>action</code> variable above could be used as a Redux action.</p>
<p><a href="https://blog.logrocket.com/understanding-redux-tutorial-examples/">Redux, for those who don’t know</a>, is a global immutable state store. The state is modified by sending actions to what are called reducers. Reducers are pure functions that take the current state of an application, perform an action, and return a new state..</p>
<p>In Redux, it is standard practice to create your actions from functions called <a href="https://read.reduxbook.com/markdown/part1/04-action-creators.html">action creators</a>. Action creators are simply pure functions that return Redux action object literals in conjunction with any arguments that are supplied to the function.</p>
<p>This is better illustrated with an example. An application might need a global <code>count</code> property, and in order to update this <code>count</code> property, we could dispatch actions of type <code>SET_COUNT</code> that simply set the global <code>count</code> property to a new value, which is a literal object property.</p>
<p>An action creator for this action would be a function that takes a number as an argument and returns an object with a <code>type</code> property of <code>SET_COUNT</code> and a payload property of type <code>number</code>, which would specify what the new value of <code>count</code> is:</p>
<pre class="language-typescript hljs">const setCount = (n: number) => {
  return {
    type: 'SET_COUNT',
    payload: n,
  }
}

const action = setCount(3)
// action has type
// { type: string, payload: number }
</pre>
<p>As you can see from the code shown above, the <code>type</code> property has been widened to <code>string</code> and not <code>SET_COUNT</code>. This is not very type-safe; all we can guarantee is that the <code>type</code> property is a string. Every action in Redux has a <code>type</code> property, which is a string.</p>
<p>Prior to TypeScript 3.4, we would need to declare an <code>interface</code> or <code>type</code> for each action, but it really adds to the burden of writing Redux actions and reducers:</p>
<pre class="language-typescript hljs">interface SetCount {
  type: 'SET_COUNT';
  payload: number;
}

const setCount = (n: number): SetCount => {
  return {
    type: 'SET_COUNT',
    payload: n,
  }
}

const action = setCount(3)
// action has type SetCount
</pre>
<p>The code above can be refactored by adding a <code>const</code> assertion:</p>
<pre class="language-typescript hljs">const setCount = (n: number) => {
  return &lt;const>{
    type: 'SET_COUNT',
    payload: n
  }
}

const action = setCount(3);
// action has type
//  { readonly type: "SET_COUNT"; readonly payload: number };
</pre>
<p>Some of you will have noticed that the type inferred from <code>setCount</code> has had the <code>readonly</code> modifier appended to each property, as stated in the bullet point from the docs.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>That is exactly what has happened:</p>
<pre class="language-typescript hljs">{
  readonly type: "SET_COUNT";
  readonly payload: number
};
</pre>
<p>Each literal in the action has had the <code>readonly</code> modifier added.</p>
<p>In Redux, we build up a union of allowed actions that a reducer function can take to get good type safety around the actions we are dispatching. Prior to TypeScript 3.4, we would do this:</p>
<pre class="language-typescript hljs">interface SetCount {
  type: 'SET_COUNT';
  payload: number;
}

interface ResetCount {
  type: 'RESET_COUNT';
}

const setCount = (n: number): SetCount => {
  return {
    type: 'SET_COUNT',
    payload: n,
  }
}

const resetCount = (): ResetCount => {
  return {
    type: 'RESET_COUNT',
  }
}

type CountActions = SetCount | ResetCount
</pre>
<p>We have created two interfaces, <code>RESET_COUNT</code> and <code>SET_COUNT</code>, to type the return types of the two action creators <code>resetCount</code> and <code>setCount</code>. <code>CountActions</code> is a union of these two interfaces.</p>
<p>With <code>const</code> assertions, we can remove the need for declaring all of these interfaces by using a combination of <code>const</code>, <code>ReturnType</code>, and <code>typeof</code>:</p>
<pre class="language-typescript hljs">const setCount = (n: number) => {
  return &lt;const>{
    type: 'SET_COUNT',
    payload: n
  }
}

const resetCount = () => {
  return &lt;const>{
    type: 'RESET_COUNT'
  }
}

type CountActions = ReturnType&lt;typeof setCount> | ReturnType&lt;typeof resetCount>;
</pre>
<p>We have a nice union of actions inferred from the return types of the action creator functions <code>setCount</code> and <code>resetCount</code>.</p>
<h2 id="array-literals-become-readonly-tuples">Array literals become <code>readonly</code> tuples</h2>
<p>Before TypeScript 3.4 declaring an array of literals would be widened and was open for modification. With <code>const</code>, we can lock the literals to their explicit values and also disallow modifications.</p>
<p>If we had a Redux action type for setting an array of hours, it might look something like this:</p>
<pre class="language-typescript hljs">const action = {
  type: 'SET_HOURS',
  payload: [8, 12, 5, 8],
}
//  { type: string; payload: number[]; }

action.payload.push(12) // no error
</pre>
<p>Prior to TypeScript 3.4, widening made the literal properties of the above action more generic because they were open for modification.</p>
<p>If we apply <code>const</code> to the object literal, then we tighten everything up nicely:</p>
<pre class="language-typescript hljs">const action = &lt;const>{
  type: 'SET_HOURS',
  payload: [8, 12, 5, 8]
}

// {
//  readonly type: "SET_HOURS";
//  readonly payload: readonly [8, 12, 5, 8];
// }

action.payload.push(12);  // error - Property 'push' does not exist on type 'readonly [8, 12, 5, 8]'.
</pre>
<p>What has happened here is exactly what the bullet point from the docs stated: the payload number array is indeed a <code>readonly</code> tuple of <code>[8, 12, 5, 8]</code> (but I certainly did not get this from reading the docs).</p>
<h2 id="difference-between-const-declarations-assertions">The difference between <code>const</code> declarations and assertions</h2>
<p>In TypeScript, <code>const</code> declarations and <code>const</code> assertions serve different purposes. <code>const</code> declarations create a named constant variable, while <code>const</code> assertions create literal types.</p>
<p>When you declare a variable using the <code>const</code> keyword in TypeScript, you create a named constant variable whose value cannot be reassigned.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>On the other hand, <code>const</code> assertions are used to create literal types in TypeScript. A literal type is a more specific type that represents a specific value rather than a general type that represents a range of values. By using a <code>const</code> assertion, you can specify that a value should be treated as a specific literal type rather than being inferred as a more general type.</p>
<p>For example, if you have a variable <code>x</code> with a value of 10, TypeScript will infer the type of <code>x</code> as a number by default. However, if you use a <code>const</code> assertion, like <code>y = 10 as const</code>, TypeScript will infer the type of <code>y</code> as 10, which is a more specific and literal type.</p>
<p>In the following code, we declare a constant string <code>greeting</code> using the <code>const</code> keyword. Since <code>greeting</code> is a named constant variable, we cannot reassign it to a different value later on in the code:</p>
<pre class="language-typescript hljs">const greeting = 'hello'; // const declaration
greeting = 'world'; // Error: Cannot assign to 'myString' because it is a constant.
</pre>
<p>We declare a <code>logNumber()</code> in the below code, which takes a number argument and prints it on the console:</p>
<pre class="language-typescript hljs">function logNumber(num: number) {
  console.log(num);
}

const num = 10; // const declaration
const ten = 10 as const; // const assertion

logNumber(num); // Compiles successfully, since num is of type 'number'
logNumber(ten); // Error: Argument of type '10' is not assignable to parameter of type 'number'
</pre>
<p>Next, we declare two constants, <code>num</code> and <code>ten</code>. <code>num</code> is a regular constant variable that holds a numeric value, while <code>ten</code> is declared using a <code>const</code> assertion — <code>as const</code> — which ensures that its type is a literal number <code>10</code>.</p>
<p>When we try to pass <code>ten</code> to the <code>logNumber</code> function, we get a TypeScript error. This is because <code>ten</code> has a literal type of <code>10</code>, which is not compatible with the expected type of <code>number</code>.</p>
<h2 id="conclusion">Conclusion</h2>
<p><code>const</code> assertions are a feature in TypeScript that allow developers to create variables with literal types that cannot be widened. <code>const</code> assertions also help reduce boilerplate code, making it easier to write and maintain complex applications. By using <code>const</code> assertions, developers can ensure that the correct values are used throughout the application, catching errors at compile time and avoiding runtime bugs.</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-2066" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/complete-guide-const-assertions-typescript/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/complete-guide-const-assertions-typescript/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-2066" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/complete-guide-const-assertions-typescript/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-2066" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/complete-guide-const-assertions-typescript/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/complete-guide-const-assertions-typescript/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A complete guide to declarative diagramming with D2 - LogRocket Blog</title>
			<link>https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A complete guide to declarative diagramming with D2 - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/">A complete guide to declarative diagramming with D2 - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ukejegoodness/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/ukeje-goodness.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/ukeje-goodness.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ukejegoodness/">
Ukeje Goodness <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a data analyst who writes about cryptocurrencies and decentralized ledger technologies. Find me on Twitter @Goodylili.</span>
</div>
</div>
<h1 class="posttitle">A complete guide to declarative diagramming with D2</h1>
<p>
<span class="post-date"><time class="post-date">
March 7, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1438</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<article class="article-post">
<p>Declarative diagramming creates diagrams using a declarative approach, from flowcharts to organization charts. In a declarative approach, the user specifies the relationships and logic of the diagram’s element using formal language rather than manually placing and connecting shapes on a canvas.</p>
<p>The resulting diagram is generated automatically based on the user’s input. Declarative diagramming can be particularly useful for creating complex diagrams that would be difficult to create manually or generating diagrams from data stored in a database or spreadsheet.</p>
<p>Additionally, declarative diagramming allows for greater flexibility in the design of the diagram and the ability to easily update and change the diagram as needed while saving time.</p>
<p><em>Jump ahead</em>:</p>
<ul>
<li><a href="#what-d2">What is D2?</a></li>
<li><a href="#getting-started-d2">Getting started with D2</a></li>
<li><a href="#diagramming-d2">Diagramming with D2</a></li>
<li><a href="#styling-d2-diagrams">Styling D2 diagrams</a></li>
<li><a href="#strings-comments-overrides">Going in depth: Strings, comments, and overrides</a></li>
</ul>
<h2 id="what-d2">What is D2?</h2>
<p><img             class="aligncenter size-full wp-image-162056 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/d2-header.png" alt="D2 Header Image" width="730" height="205"    /><noscript><img               class="aligncenter size-full wp-image-162056" src="https://blog.logrocket.com/wp-content/uploads/2023/03/d2-header.png" alt="D2 Header Image" width="730" height="205"  /></noscript></p>
<p><a href="https://d2-lang.com/">D2 (D2lang)</a> is a domain-specific diagram scripting language that transforms text into diagrams. D2 takes the declarative diagramming approach and generates images based on the declared code syntax (text). Rather than being geared towards designers, D2 is marketed towards engineers. Using D2, you can create diagrams that declare shapes, connections, containers, and special objects. You can also make more customizations via programming that covers strings, comments, and overrides.</p>
<p>D2 supports various diagrams, including flowcharts, state diagrams, and entity-relationship diagrams. D2 also provides a wide range of customization options, allowing users to change the appearance of diagrams to match their organization’s branding and needs or conform to specific standards.</p>
<p>You can also create custom shapes and elements with D2, making it easy to create diagrams that accurately reflect the specific needs of your projects.</p>
<p>D2 is open source, and the Terrastruct project supports it. The Terrastruct project provides a set of tools for creating and maintaining infrastructure-as-code. The D2 syntax is simple and easy to learn and is an excellent addition to other tools like Terraform, Ansible, and others.</p>
<h2 id="getting-started-d2">Getting started with D2</h2>
<p>You’ll need to have D2 installed on your computer to transform the text into diagrams. Head to <a href="https://d2lang.com/tour/install">the installations documentation page</a> to install D2 based on your computer’s resources and architecture.</p>
<p>Here’s how you can install D2 if you have the Go programming language installed on your computer.</p>
<pre class="language-go hljs">go install oss.terrastruct.com/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9cf8aedcf0fde8f9efe8">[email protected]</a>
</pre>
<p>Run this command in your installation directory to verify that D2 is running:</p>
<pre class="language-go hljs"># creates a D2 file and adds the text
echo 'x -> y' > input.d2

# runs the text as with D2 and outputs an SVG diagram
d2 -w input.d2 out.svg
</pre>
<p>The command should start a server, open your default web browser, and display this diagram:</p>
<p><img             class="aligncenter size-full wp-image-162058 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/displaying-d2-diagram.png" alt="Displaying A D2 Diagram" width="730" height="427"    /><noscript><img               class="aligncenter size-full wp-image-162058" src="https://blog.logrocket.com/wp-content/uploads/2023/03/displaying-d2-diagram.png" alt="Displaying A D2 Diagram" width="730" height="427"  /></noscript></p>
<p>You also have options to install D2 with a CURL script if you have any problems with this approach.</p>
<p>Alternatively, you can use the Terrastruct console that provides the regular GUI mode and an IDE mode to write and compile D2 code:</p>
<p><img             class="aligncenter size-full wp-image-162060 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/terrastruct-console-compile-d2-code.png" alt="The Terrastruct Console Provides A Mode To Write And Compile D2 Code" width="730" height="614"    /><noscript><img               class="aligncenter size-full wp-image-162060" src="https://blog.logrocket.com/wp-content/uploads/2023/03/terrastruct-console-compile-d2-code.png" alt="The Terrastruct Console Provides A Mode To Write And Compile D2 Code" width="730" height="614"  /></noscript></p>
<p>D2 also provides <a href="https://d2lang.com/tour/extensions">extensions and plugins</a> for popular applications. There’s the D2 <a href="https://d2lang.com/tour/vscode">VSCode extension</a> and <a href="https://d2lang.com/tour/vim">Vim</a>, <a href="https://d2lang.com/tour/obsidian">Obsidian</a>, <a href="https://d2lang.com/tour/slack">Slack</a>, and <a href="https://d2lang.com/tour/discord">Discord</a> plugins. The D2 community also has built third-party plugins and extensions for D2 support in applications like Telegram, Postgres importer, Emacs, and more.</p>
<h2 id="diagramming-d2">Diagramming with D2</h2>
<p>Declarative diagramming in D2 employs specific syntax rules you must follow to get your desired diagram.</p>
<p>D2 supports most data types. You can write a Hello World or a text as a label in D2 by specifying the text after the diagram directive:</p>
<pre class="language-go hljs">"Hello" -> "World!"
</pre>
<p>The syntax above declares a connection between two shapes, <code>Hello</code> and <code>World!</code>. The shapes are connected with a straight line from <code>Hello</code> to <code>World!</code>:</p>
<p><img             class="aligncenter size-full wp-image-162062 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/syntax-declares-connection-between-shapes.png" alt="The Syntax Declares A Connection Between Two Shapes" width="730" height="242"    /><noscript><img               class="aligncenter size-full wp-image-162062" src="https://blog.logrocket.com/wp-content/uploads/2023/03/syntax-declares-connection-between-shapes.png" alt="The Syntax Declares A Connection Between Two Shapes" width="730" height="242"  /></noscript></p>
<h3 id="working-shapes-d2">Working with shapes in D2</h3>
<p>You can declare shapes in D2 by specifying a text. The default shape in D2 is the square:</p>
<pre class="language-go hljs">this
</pre>
<p>You can use a semi-colon to declare multiple shapes in a diagram:</p>
<pre class="language-go hljs">this; that
</pre>
<p>Squares aren’t the only shape in D2; you can use the shape field of a text to create an <a href="https://d2lang.com/tour/shapes/">alternative shape</a>:</p>
<pre class="language-go hljs">Google Cloud.shape: cloud 
Myapp.shape: circle
</pre>
<p>You can also wrap shapes in another shape by enclosing the shape(s) in braces, as well as specifying an identifier for the parent shape:</p>
<pre class="language-go hljs">big square: {
  Google Cloud.shape: cloud
  Myapp.shape: circle
}
</pre>
<p><img             class="aligncenter size-full wp-image-162064 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/working-with-shapes-d2.png" alt="Working With Shapes In D2" width="730" height="930"    /><noscript><img               class="aligncenter size-full wp-image-162064" src="https://blog.logrocket.com/wp-content/uploads/2023/03/working-with-shapes-d2.png" alt="Working With Shapes In D2" width="730" height="930"  /></noscript></p>
<h3 id="connections-labels-d2">Connections and labels in D2</h3>
<p>You can connect shapes and text in D2 with a connection operator and label connections by specifying the label after a colon (:) operator.</p>
<p>D2 provides four connection operators:</p>
<ul>
<li>The forward connector <code>-></code></li>
<li>The straight line connector <code>--</code></li>
<li>The forward connector <code>&lt;-</code></li>
<li>The both sides connector <code>&lt;-></code></li>
</ul>
<p>Here’s how you can connect and label shapes in D2 using the aforementioned operators:</p>
<pre class="language-go hljs">Google Cloud.shape: cloud
Microservice1.shape: circle

#  -> connects the google cloud shape to the Microservice1 shape with a "comment" label
Google Cloud -> Microservice1: Comments

Microservice2.shape: Parallelogram
AWS.shape: hexagon

# --  creates a straight line from the AWS shape to the Microservice2 shape

AWS -- Microservice2

Digital Ocean.shape: rectangle
Microservice3.shape: oval

#  -> connects the Microservice3 shape to the Digital ocean shape.

Digital Ocean &lt;- Microservice3

Microservice4.shape: person
WebSocket.shape: callout

#  -> connects websocket and microservice4 shapes to each other with a "chat" label

WebSocket &lt;-> Microservice4: Chat
</pre>
<p><img             class="aligncenter size-full wp-image-162067 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/connecting-labeling-shapes-d2.png" alt="Connecting And Labeling Shapes In D2" width="730" height="610"    /><noscript><img               class="aligncenter size-full wp-image-162067" src="https://blog.logrocket.com/wp-content/uploads/2023/03/connecting-labeling-shapes-d2.png" alt="Connecting And Labeling Shapes In D2" width="730" height="610"  /></noscript></p>
<h2 id="styling-d2-diagrams">Styling D2 diagrams</h2>
<p>Styles and themes are the spice of diagrams. They add extra context and variety to the information being presented. D2 provides functionality for adding theses, styles, and dimensions to diagrams.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="adding-themes-d2-diagrams">Adding themes to D2 diagrams</h3>
<p>D2 supports many themes to make your diagrams look more professional. You can apply themes to specific shapes and tables.</p>
<p>You can set themes on D2 CLI by specifying a theme (theme number) with the <code>-t</code> or the <code>--theme</code> flags in your commands.</p>
<p>You can use the <code>d2</code> command to specify themes like this:</p>
<pre class="language-go hljs"># specifies the usage of theme 101
d2 -t 101 input.d2 out.svg
</pre>
<p>Here’s the output of the installation diagram with a different theme:</p>
<p><img             class="aligncenter size-full wp-image-162069 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/adding-themes-d2-diagrams.png" alt="Using D2 To Specify Themes In Diagrams" width="730" height="447"    /><noscript><img               class="aligncenter size-full wp-image-162069" src="https://blog.logrocket.com/wp-content/uploads/2023/03/adding-themes-d2-diagrams.png" alt="Using D2 To Specify Themes In Diagrams" width="730" height="447"  /></noscript></p>
<p>Alternatively, you can use the <code>D2_THEME</code> environment variable to specify themes to a diagram:</p>
<pre class="language-go hljs">D2_THEME=101 d2 input.d2 out.svg
</pre>
<h3 id="customizing-d2-diagrams">Customizing D2 diagrams</h3>
<p>You can customize the styles of shapes and diagrams with the <code>style</code> field. Most styles use CSS keywords and follow CSS conventions. Here’s a list of the style options currently available with D2:</p>
<ul>
<li>Opacity</li>
<li>Stroke</li>
<li>Fill (shape only)</li>
<li>Stroke-width</li>
<li>Stroke-dash</li>
<li>Shadow(shape only)</li>
<li>Font-size</li>
<li>Font-color</li>
<li>Bold</li>
<li>Italic</li>
<li>Underline</li>
<li>Stroke-dash</li>
<li>Border-radius (shape only)</li>
<li>3D (rectangles/squares only)</li>
<li>Multiple (shapes only)</li>
<li>Animated (connections only)</li>
</ul>
<p>Here’s how you can style your diagrams with style fields:</p>
<pre class="language-go hljs">x -> y: hi {
        # styles in the braces
  style: {
    opacity: 0.9
    stroke-dash: 3
    shadow: true
    font-size: 10
  }
}
</pre>
<p><img             class="aligncenter size-full wp-image-162072 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/styling-diagram-style-fields.png" alt="Styling Diagrams With Style Fields" width="730" height="492"    /><noscript><img               class="aligncenter size-full wp-image-162072" src="https://blog.logrocket.com/wp-content/uploads/2023/03/styling-diagram-style-fields.png" alt="Styling Diagrams With Style Fields" width="730" height="492"  /></noscript></p>
<p>Alternatively, style specific elements of your diagram with the <code>&lt;element>.style.&lt;style-option></code> syntax:</p>
<pre class="language-go hljs">x -> y: hi
x.style.opacity: 0.9
x.style.stroke-dash: 3
x.style.shadow: true
x.style.font-size: 10
x.style.3d: true
</pre>
<p><img             class="aligncenter size-full wp-image-162074 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/styling-specific-elements-diagram.png" alt="Styling Specific Elements Of Your Diagram" width="730" height="744"    /><noscript><img               class="aligncenter size-full wp-image-162074" src="https://blog.logrocket.com/wp-content/uploads/2023/03/styling-specific-elements-diagram.png" alt="Styling Specific Elements Of Your Diagram" width="730" height="744"  /></noscript></p>
<h3 id="adding-dimensions-d2-diagrams">Adding dimensions to D2 diagrams</h3>
<p>Additionally, you can specify the dimensions of your diagrams with the <code>width</code> and <code>height</code> keywords in your diagrams. You’ll need to add the quotes operator <code>""</code> to specify dimensions:</p>
<pre class="language-go hljs">print : "" {
  width: 50
  height: 50
}
</pre>
<p>Here’s the result of the dimensions declaration:</p>
<p><img             class="aligncenter size-full wp-image-162076 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/result-dimension-declaration.png" alt="Result Of Dimensions Declaration" width="730" height="245"    /><noscript><img               class="aligncenter size-full wp-image-162076" src="https://blog.logrocket.com/wp-content/uploads/2023/03/result-dimension-declaration.png" alt="Result Of Dimensions Declaration" width="730" height="245"  /></noscript></p>
<h2 id="strings-comments-overrides">Going in depth: Strings, comments, and overrides</h2>
<h3 id="strings-d2">Strings in D2</h3>
<p>D2 provides quoted and unquoted strings for flexibility; you can use both for your diagrams.</p>
<p>Unquoted strings come in handy for using alphanumeric values. D2 trims leading and trailing whitespaces, so you won’t have to worry about that:</p>
<pre class="language-go hljs">My Name: Goodness
Name -> My Name
</pre>
<p><img             class="aligncenter size-full wp-image-162078 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/strings-d2.png" alt="Strings In D2" width="521" height="291"    /><noscript><img               class="aligncenter size-full wp-image-162078" src="https://blog.logrocket.com/wp-content/uploads/2023/03/strings-d2.png" alt="Strings In D2" width="521" height="291"  /></noscript></p>
<p>Quoted strings are useful for using symbols. Single and double quotes have the same effect on D2:</p>
<pre class="language-go hljs">"$$$$" -> '?/?/'
</pre>
<p><img             class="aligncenter size-full wp-image-162080 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/quoted-strings-using-symbols.png" alt="Quoted Strings For Using Symbols" width="521" height="284"    /><noscript><img               class="aligncenter size-full wp-image-162080" src="https://blog.logrocket.com/wp-content/uploads/2023/03/quoted-strings-using-symbols.png" alt="Quoted Strings For Using Symbols" width="521" height="284"  /></noscript></p>
<h3 id="comments-d2">Comments in D2</h3>
<p>D2 uses Bash-style syntax for comments. This means that you can comment on your D2 code with the <code>#</code> symbol:</p>
<pre class="language-go hljs"># top of line comment
name -> Goodness

name -> Goodness # end of line comment
</pre>
<p>There’s no different syntax for multiline comments in D2. Simply add more single-line comments to create multi-line comments:</p>
<p><img             class="aligncenter size-full wp-image-162082 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/creating-multiline-comments-d2.png" alt="Creating Multiline Comments In D2" width="730" height="415"    /><noscript><img               class="aligncenter size-full wp-image-162082" src="https://blog.logrocket.com/wp-content/uploads/2023/03/creating-multiline-comments-d2.png" alt="Creating Multiline Comments In D2" width="730" height="415"  /></noscript></p>
<h3 id="overrides-d2">Overrides in D2</h3>
<p>When you re-declare shapes, D2 merges new declarations with the previous one. The latest explicit label takes priority.</p>
<p>Here’s an example of how overrides work in D2:</p>
<pre class="language-go hljs">name: Goodness {
  Language: English
}
name: Goodness {
  Book: Code
}

# is equivalent to this

name: Goodness {
  Language: English
  Book: Code
}
</pre>
<p>The <code>name</code> was declared twice with different data, and D2 merged both of them into the shape:</p>
<p><img             class="aligncenter size-full wp-image-162084 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/overrides-d2.png" alt="Overrides In D2" width="730" height="555"    /><noscript><img               class="aligncenter size-full wp-image-162084" src="https://blog.logrocket.com/wp-content/uploads/2023/03/overrides-d2.png" alt="Overrides In D2" width="730" height="555"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, you learned how to install and get started with D2, the declarative diagramming language. You learned how to create diagrams and style their shapes, themes, and dimensions.</p>
<p>D2 is helpful in many cases, especially in automating diagrams that can change over time. Most D2 users use the language in their documentation and ERD diagrams.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-162050" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-162050" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-162050" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/complete-guide-declarative-diagramming-d2/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A complete guide to running Rust on Arduino - LogRocket Blog</title>
			<link>https://blog.logrocket.com/complete-guide-running-rust-arduino/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/complete-guide-running-rust-arduino/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A complete guide to running Rust on Arduino - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/complete-guide-running-rust-arduino/">A complete guide to running Rust on Arduino - LogRocket Blog</a>
<div class="mainheading">
 
<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/macbobbychibuzor/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/macbobby-chibuzor.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/macbobby-chibuzor.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/macbobbychibuzor/">
MacBobby Chibuzor <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Go, Solidity, and Haskell developer interested in the cloud native world and blockchain technology. A fanatic for technical writing and open source contribution.</span>
</div>
</div>
<h1 class="posttitle">A complete guide to running Rust on Arduino</h1>
<p>
<span class="post-date"><time class="post-date">
November 17, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1575</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>Arduino is an AVR microcontroller made simpler for beginners in embedded systems. While the Arduino UNO is used in this article, it is easier to follow the procedure specified here for other boards.</p>
<p>Rust is a systems programming language that perfectly suits low level systems and communicates properly with hardware systems. It was designed to be a modern-day alternative to C++, but with more memory safety and efficiency, as well as speed.</p>
<p>This tutorial is aimed at beginner- to intermediate-level Rust or embedded systems developers looking to learn how to run Rust on a microcontroller. The prerequisites for going through this article includes:</p>
<ul>
<li>Knowledge of Rust language</li>
<li>Development environment for Rust language</li>
<li>Basic knowledge of Arduino</li>
<li>Basic usage of a Linux environment</li>
</ul>
<p><em>Jump ahead: </em></p>
<ul>
<li><a href="#rust-embedded-systems">Why Rust for embedded systems?</a></li>
<li><a href="#arduino-uno">What is the Arduino UNO?</a></li>
<li><a href="#tooling">Tooling</a>
<ul>
<li><a href="https://blog.logrocket.com/product-management/what-is-alpha-testing-definition-process-examples/">Software needs</a></li>
<li><a href="#hardware-needs">Hardware needs</a></li>
</ul>
</li>
<li><a href="#installation-setup">Installation and setup</a>
<ul>
<li><a href="#using-avrdude">Using Avrdude</a>
<ul>
<li><a href="#windows">On Windows</a></li>
<li><a href="#mac-os">On mac OS</a></li>
<li><a href="#linux">On Linux</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#new-arduino-project">Starting a new Arduino project</a>
<ul>
<li><a href="#embedded-rust-code">Understanding the embedded Rust code</a></li>
</ul>
</li>
<li><a href="#configuring-microcontroller-flashing">Configuring the microcontroller for flashing</a>
<ul>
<li><a href="#output-microcontroller">Output on the microcontroller</a></li>
</ul>
</li>
<li><a href="#other-projects">Other projects</a></li>
<li><a href="#further-support-embedded-rust-development">Further support for embedded Rust development</a></li>
</ul>
<h2 id="rust-embedded-systems">Why Rust for embedded systems?</h2>
<p>Embedded systems technology has lacked novelty for decades. The language of choice for programming lightning-fast, embedded devices has been C/C++ for a long time, but Rust provides even faster development support.</p>
<p>Rust is a great fit for embedded systems development because it is:</p>
<ul>
<li>Highly interoperable with C codebases</li>
<li>Portable and lightweight</li>
<li>A powerful concurrency model</li>
<li>Robust support for different microcontrollers</li>
<li>Memory safe, so there will be no problems due to memory</li>
</ul>
<p>If you have already programmed Arduinos in C++, it will be relatively easy to transition to doing so with Rust, once you master the basics. You can learn more about embedded Rust <a href="https://docs.rust-embedded.org/">here</a>. You can also see the available microcontroller crates <a href="https://github.com/rust-embedded/awesome-embedded-rust">here</a>.</p>
<h2 id="arduino-uno">What is the Arduino UNO?</h2>
<p>The Arduino UNO is based on the ATMega328P under the AVR microcontrollers family developed by Atmel. The Arduino can be programmed with its programming language, which is derived from C++ using the Arduino IDE editor, but since it is also an open source project, other systems-compatible programming languages can also be used to program the Arduino.</p>
<p>The normal procedure for embedded systems development with the Arduino involves the following steps:</p>
<ol>
<li>Sketching the electrical diagram of the intended circuit</li>
<li>Connecting the electrical components to match the diagram</li>
<li>Writing the program logic to control the circuit as desired</li>
<li>Connecting the microcontroller via the USB cord to the computer</li>
<li>Flashing (or uploading) the program from the computer onto the board’s Flash memory</li>
</ol>
<p>This article focuses on the third through fifth steps, but the wiring for the tutorial will be made available.</p>
<h2 id="tooling">Tooling</h2>
<p>To follow this article, you will need some software installed along with some hardware.</p>
<h3 id="software-needs">Software needs</h3>
<ul>
<li>A machine for writing, compiling and flashing the program to the board</li>
<li>Cargo installed (see <a href="https://rustup.rs">https://rustup.rs</a>)</li>
<li>Rust nightly compiler version installed</li>
</ul>
<h3 id="hardware-needs">Hardware needs</h3>
<ul>
<li>The Arduino board</li>
</ul>
<h2 id="installation-setup">Installation and setup</h2>
<h3 id="using-avrdude">Using Avrdude</h3>
<p>A Hardware Abstraction Layer (HAL) is required to run Rust on AVR microcontrollers and other common boards. To get this, you need the nightly Rust compiler that compiles Rust code to AVR on your machine. Run the command below to install it:</p>
<pre class="language-bash hljs">rustup toolchain install nightly
</pre>
<h3 id="windows">On Windows</h3>
<p>On Windows, you will need to install Scoop via Powershell using the command:</p>
<pre class="language-powershell hljs">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser # Needed to run a remote script the first time
irm get.scoop.sh | iex 
</pre>
<p>The output at the end should be:</p>
<p><img             class="aligncenter wp-image-142090 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/windows-output.png" alt="Windows output" width="700" height="214"    /><noscript><img               class="aligncenter wp-image-142090 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/windows-output.png" alt="Windows output" width="700" height="214"  /></noscript></p>
<p>Afterwards, run the following commands to install <code>avr-gcc</code> and <code>avrdude</code>:</p>
<pre class="language-powershell hljs">scoop install avr-gcc</pre>
<pre class="language-powershell hljs">scoop install avrdude</pre>
<h3 id="mac-os">On macOS</h3>
<p>On macOS, simply set up the<a href="https://github.com/osx-cross/homebrew-avr"> homebrew-avr</a> tap and run the following commands:</p>
<pre class="language-shell hljs">xcode-select --install # for the fist time
brew tap osx-cross/avr
brew install avr-binutils avr-gcc avrdude
</pre>
<h3 id="linux">On Linux</h3>
<p>If you use a Linux distribution like Ubuntu, the command is:</p>
<pre class="language-bash hljs">sudo apt install avr-libc gcc-avr pkg-config avrdude libudev-dev build-essential
</pre>
<p>There is an <a href="https://docs.rust-embedded.org/book/intro/install.html">installation guide</a> for all operating systems here, should you come across an obstacle following the guide above.</p>
<p>After either of these steps, the next step is to install the <a href="https://github.com/Rahix/avr-hal/blob/main/ravedude"> ravedude</a>tool for flashing the microcontroller board against <code>cargo</code>:</p>
<pre class="prettyprint">cargo +stable install ravedude
</pre>
<p>This tool handles everything from finding the board, flashing the board, and listening to connections. You simply have to run the <code>cargo run</code> command.</p>
<h2 id="new-arduino-project">Starting a new Arduino project with <code>avrdude</code></h2>
<p>Starting a new project is made simpler with the <code>cargo-generate</code> crate. Simply run the following commands consecutively to create a new project:</p>
<pre class="language-bash hljs">cargo install cargo-generate
cargo generate --git &lt;https://github.com/Rahix/avr-hal-template.git>
</pre>
<p>After running the command, you should see an input field to specify a name for your project. This article uses <code>rust-x-arduino</code> as the project name.</p>
<p>After inputting your preferred name, click <strong>Enter</strong>. The next log shows a list of microcontrollers available under the <code>avrdude</code> template. This article uses the Arduino UNO, a variant that is readily available to everyone.</p>
<p>Navigate into the project after the build, and open the folder as a project in your preferred code editor. The project structure should look like the image below:</p>
<p><img             class="aligncenter wp-image-142095 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/project-structure-1.png" alt="Arduino project structure " width="700" height="1054"    /><noscript><img               class="aligncenter wp-image-142095 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/project-structure-1.png" alt="Arduino project structure " width="700" height="1054"  /></noscript></p>
<p><strong>NB:</strong> If there is an error in installing the <code>libudev-sys</code> crate, you will have to include it in your <code>cargo.toml</code> file under dependencies:</p>
<pre class="language-toml hljs">[dependencies]
libudev-sys = "0.1"
</pre>
<p>The <a href="https://crates.io/crates/libudev-sys">libudev</a> Rust binding is a crate that provides declarations and linkage for the <code>libudev</code> C library. It is Linux-specific, so it is not available for Windows or OSX operating systems.</p>
<p>Alternatively, you can run the command below to install the <code>libudev-sys</code> crate:</p>
<pre class="language-bash hljs">sudo apt-get install libudev-dev
</pre>
<p>You can consult the <a href="https://github.com/dcuddeback/libudev-sys">libudev-sys repository</a> in case of further issues arising from <code>pkg-config</code>.</p>
<p>Moving on, you can build the project with the build command:</p>
<pre class="language-bash hljs">cargo build</pre>
<p>It takes a while, since it is a CPU-intensive task. Afterward, you will find a <code>.elf</code> file under <code>target/avr-atmega328p/debug/</code>. To run your own program, you can edit the <code>main.rs</code> file, which already contains an example code for a basic LED Blinking program:</p>
<pre class="language-rust hljs">#![no_std]
#![no_main]

use panic_halt as _;

#[arduino_hal::entry]
fn main() -> ! {
    let dp = arduino_hal::Peripherals::take().unwrap();
    let pins = arduino_hal::pins!(dp);

    let mut led = pins.d13.into_output();

    loop {
        led.toggle();
        arduino_hal::delay_ms(1000);
    }
}
</pre>
<h3 id="embedded-rust-code">Understanding the above embedded Rust code</h3>
<p>From the first two lines of code, it is clear that there is no standard library and no main, since it is an embedded project with no operating system.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The line <code>#[arduino_hal::entry]</code> specifies the entry point in the program. The line <code>uses panic_halt as _;</code> is used to handle panics.</p>
<p>In the main function, the Peripherals are unwrapped. In embedded Rust, Peripherals refer to the components that make sense of their surroundings and interact with humans. They include sensors, actuators, motor controllers, as well as the fundamental parts of the microcontroller like the CPU, RAM, or Flash Memory. You can learn more about Peripherals in the <a href="https://docs.rust-embedded.org/book/peripherals/index.html">embedded Rust book</a>.</p>
<p>Next, we gain access to the pins in the Arduino board in order to set the digital output for the default pin (D13) to <code>high</code>.</p>
<p>Every Arduino program contains the <code>void setup()</code> and the <code>void loop()</code>. We have just gone through the setup; the other part of the code shows the looping.</p>
<p>The <code>toggle</code> method in the loop is used to turn the LED on and off, while the <code>delay_ms</code> method is used to delay the loop by the specified milliseconds.</p>
<h2 id="configuring-microcontroller-flashing">Configuring the microcontroller for flashing</h2>
<p>When working with the Arduino microcontroller in the official Arduino IDE, you simply have to write the program in Arduino, which is C++-based, and upload the program source file to the board via the USB port.</p>
<p>With Rust, we will be following a longer but similar procedure. Start by listing the open USB ports in your machine with the Linux command:</p>
<pre class="language-bash hljs">lsusb
</pre>
<p>If you have your Arduino board plugged into your device via the USB, you should see the name of the USB connected to the Arduino board like in the image below:</p>
<p><img             class="aligncenter wp-image-142097 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/usb-arduino-board.png" alt="Name of the USB connected to the Arduino board" width="700" height="74"    /><noscript><img               class="aligncenter wp-image-142097 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/usb-arduino-board.png" alt="Name of the USB connected to the Arduino board" width="700" height="74"  /></noscript></p>
<p>Next, we will be setting the serial com port for <code>ravedude</code> with the script:</p>
<pre class="language-rust hljs">export RAVEDUDE_PORT=/dev/ttyUSB0
</pre>
<p>This tells <code>ravedude</code> which port the Arduino is connected to. Running the command below will build and flash the program into the Arduino:</p>
<pre class="language-bash hljs">cargo run
</pre>
<h3 id="output-microcontroller">Output on the microcontroller</h3>
<p>When the program is uploaded into the microcontroller, the Arduino will behave as programmed. In this case, the LED lights on the board will blink according to the time intervals specified in the program.</p>
<p id="gdcalert4"><img             class="aligncenter wp-image-142102 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/rust-arduino-uno-final-1.gif" alt="Rust Arduino uno final result" width="700" height="1245"  /><noscript><img               class="aligncenter wp-image-142102 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/rust-arduino-uno-final-1.gif" alt="Rust Arduino uno final result" width="700" height="1245"/></noscript></p>
<h2 id="other-projects">Other projects</h2>
<p>It is worth mentioning that there is <a href="https://github.com/Rahix/avr-hal/tree/main/examples">an examples directory</a> on the <code>avr-hal</code> crate/repository, where you can find example Arduino project programs to try out. For example, if you are using the Arduino UNO, you can select it, navigate to the <code>src/bin</code> directory, and find different programs compatible with the Arduino UNO board.</p>
<p>If you wish to write your own project, you have to generate the AVR-HAL template like we did in the previous section.</p>
<h2 id="further-support-embedded-rust-development">Further support for embedded Rust development</h2>
<p>The official documentation for embedded Rust development is available <a href="https://docs.rust-embedded.org/">here</a>, and the book <a href="https://docs.rust-embedded.org/book/">is here</a>. There is also a<a href="https://github.com/rust-embedded/awesome-embedded-rust"> GitHub repository</a> where all resources related to embedded Rust are stored; it can serve as a useful starting point for trying out new things. It is based off of the official <a href="https://github.com/rust-embedded">Rust on Embedded Devices Working Group</a>.</p>
<p>If you wish to go further into embedded development with Rust, you can check out an entire playlist by <a href="https://www.youtube.com/playlist?list=PLP_X41VhYn5X6Wwjnm0bRwI3n2pdaszxU">Vers Binarii</a> here.</p><div class="code-block code-block-29" >
<div class="blog-plug inline-plug rust-plug"><h2><a href="https://lp.logrocket.com/blg/rust-signup" target="_blank">LogRocket</a>: Full visibility into web frontends for Rust apps</h2> Debugging Rust applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking performance of your Rust apps, automatically surfacing errors, and tracking slow network requests and load time, <a href="https://lp.logrocket.com/blg/rust-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/rust-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/rust-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Rust app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.</p><p>Modernize how you debug your Rust apps — <a class="signup" href="https://lp.logrocket.com/blg/rust-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-31 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-31 .fadeOut {
    opacity:0 !important;
}

.code-block-31 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-142078" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/complete-guide-running-rust-arduino/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/complete-guide-running-rust-arduino/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-142078" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/complete-guide-running-rust-arduino/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-142078" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/complete-guide-running-rust-arduino/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/complete-guide-running-rust-arduino/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A complete guide to threads in Node.js - LogRocket Blog</title>
			<link>https://blog.logrocket.com/complete-guide-threads-node-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/complete-guide-threads-node-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A complete guide to threads in Node.js - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/complete-guide-threads-node-js/">A complete guide to threads in Node.js - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/maciejcieslar/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/maciejcieslar.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/maciejcieslar.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/maciejcieslar/">
Maciej Cieślar <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A JavaScript developer and a blogger at <a href="https://www.mcieslar.com/">mcieslar.com</a>.</span>
</div>
</div>
<h1 class="posttitle">A complete guide to threads in Node.js</h1>
<p>
<span class="post-date"><time class="post-date">
January 27, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2540</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was last updated on 10 February 2023. Check out this <a href="https://blog.logrocket.com/node-js-multithreading-worker-threads-why-they-matter/">guide to multithreading in Node.js</a> for more information.</em></p>
<p>Many people wonder how a single-threaded Node.js backend can compete with multithreaded backends. It may seem counterintuitive that so many huge companies pick Node as their backend, given its supposed single-threaded nature. To know why, we have to understand what we really mean when we say that Node is single-threaded.</p>
<p>JavaScript was created to be just good enough to do simple things on the web, like validate a form or, say, create a rainbow-colored mouse trail. It was <a href="https://www.youtube.com/watch?v=ztspvPYybIY">only in 2009 that Ryan Dahl</a>, creator of Node, made it possible for developers to use the language to write backend code.</p>
<p>Backend languages, which generally support multithreading, have all kinds of mechanisms for syncing values between threads and other thread-oriented features. To add support for such things to JavaScript would require changing the entire language, which wasn’t really Dahl’s goal. For plain JavaScript to support multithreading, he had to create a workaround. Let’s explore…</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#how-node-js-really-works">How Node.js really works</a>
<ul >
<li><a href="#threads-node-js">Threads in Node.js</a></li>
<li><a href="#node-js-multithreaded-singlethreaded">Is Node.js multi-threaded or single-threaded</a></li>
</ul>
</li>
<li><a href="#introducing-worker-threads">Introducing <code>worker_threads</code></a></li>
<li><a href="#two-ways-using-workers">Two ways of using workers</a>
<ul >
<li><a href="#implementing-worker-pool">Implementing the worker pool</a></li>
</ul>
</li>
<li><a href="#what-are-main-benefits-using-threads">What are the main benefits of using threads?</a></li>
</ul>
<h2 id="how-node-js-really-works">How Node.js really works</h2>
<p>Node.js follows the single-threaded event loop paradigm. To understand the complete working of Node, it’s important to understand what a thread is in Node, the event loop that comprises the node, and get the idea of the basic architecture of the node by understanding whether it is single-threaded or multi-threaded.</p>
<h3 id="threads-node-js">Threads in Node.js</h3>
<p>A thread in Node.js is a separate execution context in a single process. It is a lightweight, independent unit of processing that can run in parallel with other threads within the same process. It resides within process memory and it has an execution pointer. It has a stack of its own but a shared heap of the process.</p>
<p>Node.js uses two kinds of threads: a main thread handled by the event loop and several auxiliary threads in the worker pool. In the context of Node.js, auxiliary thread or thread is interchangeably used for worker threads.</p>
<p>In Node.js, the main thread is the initial execution thread that starts when Node.js starts. It is responsible for the execution of JavaScript code and handling incoming requests. A worker thread is a separate execution thread that runs alongside the main thread.</p>
<h3 id="node-js-multithreaded-singlethreaded">Is Node.js multithreaded or single<em>–</em>threaded?</h3>
<p>Single-threaded means that a program has only one thread of execution, which allows it to perform only one task at a given time. Meanwhile, the term “multi-threaded” implies that a program has multiple threads of execution, which allows it to perform multiple tasks concurrently.</p>
<p>Each thread operates independently and task allocation is handled by the operating system. Both approaches have their challenges. In single-threaded processes, all tasks are executed in a sequence and a blocking operation will delay the execution of other tasks. Meanwhile, in multi-threaded processes, the pain point that arises is the synchronization and coordination between multiple threads.</p>
<p>With an understanding of both of these terms, we can now answer the question.</p>
<p>Node.js is single-threaded as it has a single main event loop that processes JavaScript operations and handles all I/O. However, Node.js provides us with additional features that, if properly used, can give the advantages that multithreading has. To get a detailed understanding of what gives this ability to Node and how to deal with the challenges that come with this approach check out <a href="https://blog.logrocket.com/node-js-multithreading-worker-threads-why-they-matter/">this article</a>.</p>
<p>The main element in single-threaded Node architecture is the event loop, which makes nodes so powerful that, despite being a single-threaded runtime, it is becoming the first choice for most backend developers. We previously explained that there are two kinds of threads in a node. The main thread uses an event loop.</p>
<p>The event loop is the mechanism that takes callbacks (functions) and registers them to be executed at some point in the future. It operates in the same thread as the proper JavaScript code. When a JavaScript operation blocks the thread, the event loop is blocked as well.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The worker pool is an execution model that spawns and handles separate threads, which then synchronously perform the task and return the result to the event loop. The event loop then executes the provided callback with said result.</p>
<p>In short, it takes care of asynchronous I/O operations — primarily, interactions with the system’s disk and network. It is mainly used by modules such as <code>fs</code> (I/O-heavy) or <code>crypto</code> (CPU-heavy). Worker pool is implemented in <a href="http://docs.libuv.org/en/v1.x/">libuv</a>, which results in a slight delay whenever Node needs to communicate internally between JavaScript and C++, but this is hardly noticeable.</p>
<p>With both of these mechanisms, we are able to write code like this:</p>
<pre class="language-javascript hljs">fs.readFile(path.join(__dirname, './package.json'), (err, content) => {
 if (err) {
   return null;
 }
 console.log(content.toString());
});
</pre>
<p>The aforementioned <code>fs</code> module tells the worker pool to use one of its threads to read the contents of a file and notify the event loop when it is done. The event loop then takes the provided callback function and executes it with the contents of the file.</p>
<p>Above is an example of non-blocking code; as such, we don’t have to wait synchronously for something to happen. We tell the worker pool to read the file and call the provided function with the result. Since worker pool has its own threads, the event loop can continue executing normally while the file is being read.</p>
<p>It’s all good until there’s a need to synchronously execute some complex operation: any function that takes too long to run will block the thread. If an application has many such functions, it could significantly decrease the throughput of the server or freeze it altogether. In this case, there’s no way of delegating the work to the worker pool.</p>
<p>Fields that require complex calculations  —  such as AI, machine learning, or big data  —  couldn’t really use Node.js efficiently due to the operations blocking the main (and only) thread, making the server unresponsive. That was the case up until Node.js v10.5.0 came out, which added support for multiple threads.</p>
<h2 id="introducing-worker-threads">Introducing <code>worker_threads</code></h2>
<p>The <code>worker_threads</code> module is a package that allows us to create fully functional multi-threaded Node.js applications.</p>
<p>A thread worker is a piece of code (usually taken out of a file) spawned in a separate thread.</p>
<p>Note that the terms thread worker, worker, and thread are often used interchangeably; they all refer to the same thing.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>To start using thread workers, we have to import the <code>worker_threads</code> module. Let’s start by creating a function to help us spawn these thread workers, and then we’ll talk a little bit about their properties:</p>
<pre class="language-javascript hljs">type WorkerCallback = (err: any, result?: any) => any;
export function runWorker(path: string, cb: WorkerCallback, workerData: object | null = null) {
 const worker = new Worker(path, { workerData });
 worker.on('message', cb.bind(null, null));
 worker.on('error', cb);
 worker.on('exit', (exitCode) => {
   if (exitCode === 0) {
     return null;
   }
   return cb(new Error(`Worker has stopped with code ${exitCode}`));
 });
 return worker;
}
</pre>
<p>To create a worker, we have to create an instance of the <code>Worker</code> class. In the first argument, we provide a path to the file that contains the worker’s code; in the second, we provide an object containing a property called <code>workerData</code>. This is the data we’d like the thread to have access to when it starts running.</p>
<p>Note that whether you use JavaScript itself or something that transpiles to JavaScript (e.g., TypeScript), the path should always refer to files with either <code>.js</code> or <code>.mjs</code> extensions.</p>
<p>I would also like to point out why we used the callback approach as opposed to returning a promise that would be resolved when the <code>message</code> event is fired. This is because workers can dispatch many <code>message</code> events, not just one.</p>
<p>As you can see in the example above, the communication between threads is event-based, which means we are setting up listeners to be called once a given event is sent by the worker.</p>
<p>Here are the most common events:</p>
<pre class="language-javascript hljs">worker.on('error', (error) => {});
</pre>
<p>The <code>error</code> event is emitted whenever there’s an uncaught exception inside the worker. The worker is then terminated, and the error is available as the first argument in the provided callback:</p>
<pre class="language-javascript hljs">worker.on('exit', (exitCode) => {});
</pre>
<p><code>exit</code> is emitted whenever a worker exits. If <code>process.exit()</code> was called inside the worker, <code>exitCode</code> would be provided to the callback. If the worker was terminated with <code>worker.terminate()</code>, the code would be <code>1</code>:</p>
<pre class="language-javascript hljs">worker.on('online', () => {});
</pre>
<p><code>online</code> is emitted whenever a worker stops parsing the JavaScript code and starts the execution. It’s not used very often, but it can be informative in specific cases:</p>
<pre class="language-javascript hljs">worker.on('message', (data) => {});
</pre>
<p><code>message</code> is emitted whenever a worker sends data to the parent thread.</p>
<p>Now let’s take a look at how the data is being shared between threads.</p>
<h2 id="two-ways-using-workers">Two ways of using workers</h2>
<p>There are two ways to implement worker threads and reap the benefits that worker threads provide.</p>
<p>The first way is to spawn the worker, execute its code, and send the result to the parent. With this approach, we will have to set up a new worker from the start each time.</p>
<p>There is a lot of overhead cost that is required when creating a worker, starting the thread, and the memory overhead of creating a new worker head, and additional resources that are required to manage each thread. Although tasks can be implemented while using the first approach, it isn’t an efficient approach — especially when implementing large-scale Node based systems. To cater to the pain points that arise with this approach, there is another way that is also a standard industry practice.</p>
<p>The second way is to implement a worker pool. A worker pool solves the pain points of the first approach by creating a tool of worker threads that can be reused for multiple tasks. Instead of creating a worker thread each time, we can instead create a pool and assign the tasks to workers inside them.</p>
<p>In technical terms, a worker pool can be considered as an abstract data type that manages a pool of worker threads. Each worker thread in the pool is assigned a task and the thread runs the task in parallel to the other threads.</p>
<p>There are multiple ways of assigning tasks. The worker pool also acts as a manager by distributing tasks to the worker threads, collecting results from them, and enabling communication between those that are present in that worker pool.</p>
<p>A worker pool can be implemented by using different data structures and algorithms i.e, task queue and message passing systems. The choice of using a specific data structure depends on the requirements i.e, a number of worker threads required, the exact nature of the task, and how much communication between the threads is needed.</p>
<h3 id="implementing-worker-pool">Implementing the worker pool</h3>
<p>In Node, a worker pool can be implemented by using built-in features or by using third-party tools. The built-in <code>worker-threads</code> module in the node provides support for worker threads, which can be used to build a worker pool. There are several libraries that can also be used to complement the worker pool.</p>
<p>These libraries provide high-level API for worker threads and also provide additional support such as automating the scheduling of tasks and thread management. To give an idea of how the worker pool is implemented, here is a sample code that uses the built-in <code>worker-threads</code> feature of Node:</p>
<pre class="language-javascript hljs">const { Worker, isMainThread, parentPort } = require('worker_threads');

if (isMainThread) {
  // Main thread code
  // Create an array to store worker threads
  const workerThreads = [];
  // Create a number of worker threads and add them to the array
  for (let i = 0; i &lt; 4; i++) {
    workerThreads.push(new Worker(__filename));
  }
  // Send a message to each worker thread with a task to perform
  workerThreads.forEach((worker, index) => {
    worker.postMessage({ task: index });
  });
} else {
  // Worker thread code
  // Listen for messages from the main thread
  parentPort.on('message', message => {
    console.log(`Worker ${process.pid}: Received task ${message.task}`);
    // Perform the task
    performTask(message.task);
  });
  function performTask(task) {
    // … operations to be performed to execute the task
  }
}
</pre>
<p>There are two portions in the code.above One is for the main thread and the other is for the worker thread. Firstly, we are importing the necessary members from the module and then, if the current execution context is in the main thread, we are creating an array to store four workers. After the creation of each worker, this code sends a new message to each of the worker threads with a task to be performed.</p>
<p>In the worker thread portion, we are listening for the messages from the main thread by using the <code>on</code> method of the <code>parentPort</code> property. After receiving the message, it logs the process id with the task and passes it on to a function performing the task that will apply appropriate methods to the task.</p>
<h2 id="what-are-main-benefits-using-threads">What are the main benefits of using threads?</h2>
<p>In essence, threads are a valuable tool that can significantly impact the performance, responsiveness, and overall efficiency of a program. When utilized effectively, they can make a big difference in the outcome of a program and help it keep pace with user demands.</p>
<p>Threading in Node.js is a powerful tool for developers. It allows them to split a process into multiple, completely autonomous execution streams. If used correctly, threading can improve the quality of a program by enhancing its speed, efficiency, and responsiveness.</p>
<p>Some of the main advantages of threading are:</p>
<ol>
<li><strong>Improved performance</strong>: Instead of just running one task, threads facilitate the running of multiple programs concurrently and thus allows the faster execution of the whole program</li>
<li><strong>Responsiveness</strong>: If a task is compute-heavy, it will block or delay the execution of the rest of the operations, delaying the execution of the whole program. With threading, if a compute-heavy task is taking time and delaying the response from one thread, it won’t affect the responsiveness of the program as other threads can continue to handle user input and other tasks</li>
<li><strong>Resource sharing</strong>: In Node.js, due to process-level global scope and inter-process communication, multiple threads can share resources. Sharing of resources helps multiple threads in accessing and modifying shared data i.e, variables, thus allowing concurrent processing which results in faster execution of the program</li>
<li><strong>Ease of programming</strong>: With the introduction of threading, programmers don’t have to worry about the limitations of the single-threaded architecture of Node.js, making programming efficient and scalable</li>
<li><strong>Improved scalability</strong>: It is easy and efficient to scale threads, thus they make it easier to build high-performance and scalable Node.js applications that can handle the increased load without any difficulty</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p><code>worker_threads</code> provide a fairly easy way to add multi-threading support to our applications. By delegating heavy CPU computations to other threads, we can significantly increase our server’s throughput. With the official threads support, we can expect more developers and engineers from fields like AI, machine learning, and big data to start using Node.js.</p><div class="code-block code-block-23" >
<div class="blog-plug inline-plug node-plug"><h2>200’s only <img  src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"/></noscript> Monitor failed and slow network requests in production</h2> Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/node-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer"><img src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"/></noscript></a><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens while a user interacts with your app. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.</p> LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>. </div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-102" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/complete-guide-threads-node-js/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/complete-guide-threads-node-js/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-102" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/complete-guide-threads-node-js/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-102" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/complete-guide-threads-node-js/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/complete-guide-threads-node-js/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A deep dive into CSS individual transform properties - LogRocket Blog</title>
			<link>https://blog.logrocket.com/deep-dive-css-individual-transform-properties/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/deep-dive-css-individual-transform-properties/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A deep dive into CSS individual transform properties - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/deep-dive-css-individual-transform-properties/">A deep dive into CSS individual transform properties - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/danielyuschick/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/08/daniel-yuschick.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/08/daniel-yuschick.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/danielyuschick/">
 Daniel Yuschick <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Daniel Yuschick is a Senior UI Developer and Design Systems Lead in Helsinki, Finland. He’s most passionate about great chocolate, beautiful tattoos, and bridging design and development to create accessible, semantic, and intuitive design systems.</span>
</div>
</div>
<h1 class="posttitle">A deep dive into CSS individual transform properties</h1>
<p>
<span class="post-date"><time class="post-date">
September 9, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1551</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>There’s a chance you’ve never known CSS without its ability to transform properties. That functionality is at the core of CSS and a cornerstone of user interfaces (UI) as we know them today. However, in recent years, CSS hasn’t shied away from overhauling some of its most foundational pieces. After revolutionizing layouts with <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">flexbox</a> and <a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">grid</a> and restructuring its box model with <a href="https://www.danyuschick.com/articles/css-logical-properties-are-the-future-of-the-web-and-i18n/" target="_blank" rel="noopener">logical properties</a>, it was time to introduce its next evolution…</p>
<p>Transforms.</p>
<p>For as soft and welcoming as many subtle UI interactions may appear, creating and editing them can be anything but. This is because CSS has a single <code>transform</code> property to manage all of its different values, like <code>rotate</code>, <code>scale</code>, and <code>translate</code>.</p>
<p>When transforming a single value, a single property works well. However, when working with multiple values, it becomes a burdensome, cognitive load — a cognitive load CSS looks to resolve by introducing individual transform properties.</p>
<p>First, let’s review the current <code>transform</code> property, then discover how its functionality is improved by using the new individual transform properties. Let’s get started.</p>
<ul>
<li><a href="#challenges-transform-property">Challenges of the <code>transform</code> property</a>
<ul >
<li><a href="#use-lose">Use it or lose it</a></li>
<li><a href="#order-operations">Order of operations</a></li>
</ul>
</li>
<li><a href="#what-css-individual-transform-properties">What are CSS individual transform properties?</a></li>
<li><a href="#individual-transform-properties-considerations">Individual transform properties considerations</a>
<ul >
<li><a href="#some-properties-left-behind">Some properties left behind</a></li>
<li><a href="#transform-origin"><code>transform-origin</code></a></li>
<li><a href="#setting-values-0">Setting values to <code>0</code></a></li>
<li><a href="#will-change-property">The <code>will-change</code> property</a></li>
</ul>
</li>
<li><a href="#overall-performance">Overall performance</a></li>
<li><a href="#support-fallbacks">Support and fallbacks</a></li>
<li><a href="#resources">Resources</a></li>
</ul>
<h2 id="challenges-transform-property">Challenges of the <code>transform</code> property</h2>
<p>In order to understand the benefits of individual transform properties, let’s first look at the two key challenges they’re trying to address. Neither of them is immediately obvious when starting out.</p>
<h3 id="use-lose">Use it or lose it</h3>
<p>The following <code>transform</code> property isn’t too complicated. It will scale, translate, then rotate the element.</p>
<pre class="language-css hljs">.item {
  transform: scale(1.5) translate(0, 50%) rotate(90deg);
}
</pre>
<p>But what happens to the <code>transform</code> if we want to change the scale amount on <code>hover</code>?</p>
<p>Every <code>transform</code> function must be defined in every state or its value will be lost. In order to scale down the item on <code>hover</code> without losing its <code>translate</code> and <code>rotate</code> values, they both must be duplicated along with the updated scale value.</p>
<pre class="language-css hljs">.item:hover {
  transform: scale(0.5) translate(0, 50%) rotate(90deg);
}
</pre>
<p>For a single <code>hover</code> state, this may not be too much of a burden. But this becomes more complicated as transforms grow or when creating animations with multiple frames.</p>
<p>However, needing to duplicate every <code>transform</code> function presents another challenge.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="order-operations">Order of operations</h3>
<p>When creating transforms with more than one function, it’s important to note that the browser will apply the values in order from left to right. This means the following transforms will, visually, have different results, despite having the same value.</p>
<pre class="language-css hljs">.item:first-child {
  transform: scale(1.75) translate(0, 50%);
}

.item:last-child {
  transform: translate(0, 50%) scale(1.75);
}
</pre>
<p>After the first item scales, it will be translated relative to its new size. Meanwhile, the second item will scale after translating, resulting in an element not positioned exactly like the first.</p>
<p class="codepen"  data-height="399.828125" data-default-tab="result" data-slug-hash="YzaBMer" data-user="DanielYuschick">See the Pen <a href="https://codepen.io/DanielYuschick/pen/YzaBMer"><br/>
CSS Transforms &amp; The Importance of Ordering</a> by Daniel Yuschick (<a href="https://codepen.io/DanielYuschick">@DanielYuschick</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>As transformations grow more complex and more <code>transform</code> functions are used, the more difficult it becomes to manage the entire property. Take an animation with multiple frames as an example:</p>
<p class="codepen"  data-height="399.45703125" data-default-tab="result" data-slug-hash="BarMOMM" data-user="DanielYuschick">See the Pen <a href="https://codepen.io/DanielYuschick/pen/BarMOMM"><br/>
CSS Transform Animation</a> by Daniel Yuschick (<a href="https://codepen.io/DanielYuschick">@DanielYuschick</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>When creating an animation with multiple <code>transform</code> values, the cognitive load to manage each property in its correct order across each frame can become quite a burden.</p>
<pre class="language-css hljs">@keyframes animate {
  10%, 15% {
    transform: translateX(0);
  }
  16% {
    transform: translateX(0) scale(0.5);
  }
  18% {
    transform: translateX(0) scale(1.5);
  }
  20% {
    transform: translateX(0) scale(1);
  }
  50% {
    transform: translateX(50%) scale(1) rotate(180deg);
  }
  65% {
    transform: translateX(-50%) scale(1) rotate(180deg);
  }
}
</pre>
<p>It’s these challenges and cognitive loads that look to be removed by the introduction of CSS individual transform properties.</p>
<h2 id="what-css-individual-transform-properties">What are CSS individual transform properties?</h2>
<p>CSS has introduced three new individual transform properties: <code>rotate</code>, <code>scale</code>, and <code>translate</code>.</p>
<pre class="language-css hljs">.item {
  rotate: 180deg;
  scale: 1.5;
  translate: 50% 0;
}
</pre>
<p>These new properties work like the legacy <code>transform</code> functions but without the legacy challenges.</p>
<p>Because these new individual properties are independent of one another, there is no need to duplicate values across states. And without the need to duplicate values across states, the order becomes much easier to manage, except individual transform properties are not dependent on their order, either.</p>
<p>Where the legacy <code>transform</code> functions are applied in order from left to right, the individual transform properties are applied in a much more favorable sequence: 1. translate 2. rotate 3. scale.</p>
<p>With the key challenges of working with the <code>transform</code> property out of the way, the previous animation can be refactored into a more manageable and legible <code>@keyframes</code> block seen below:</p>
<p class="codepen"  data-height="399.70703125" data-default-tab="result" data-slug-hash="XWEOxRa" data-user="DanielYuschick">See the Pen <a href="https://codepen.io/DanielYuschick/pen/XWEOxRa"><br/>
CSS Individual Transform Properties Animation</a> by Daniel Yuschick (<a href="https://codepen.io/DanielYuschick">@DanielYuschick</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<pre class="language-css hljs">@keyframes animate {
  10%, 15% {
    scale: 1;
    translate: 0;
  }
  16% {
    scale: 0.5;
  }
  18% {
    scale: 1.5;
  }
  20% {
    rotate: 0deg;
    scale: 1;
  }
  50% {
    rotate: 180deg;
    translate: 50% 0;
  }
  65% {
    rotate: 180deg;
    translate: -50% 0;
  }
}
</pre>
<h2 id="individual-transform-property-considerations">Individual transform property considerations</h2>
<p>Individual transform properties require a few other considerations when using them that may be different than their legacy equivalents. We’ll go over them in a little more depth below.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h3 id="some-properties-left-behind">Some properties left behind</h3>
<p>While CSS has introduced the three individual properties <code>rotate</code>, <code>scale</code>, and <code>translate</code>, the remaining <code>transform</code> functions have not been given the same priority. Because of this, the individual and <code>transform</code> properties can work together.</p>
<p>You can visit MDN for a <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform" target="_blank" rel="noopener">full list of <code>transform</code> functions</a>.</p>
<h3 id="transform-origin"><code>transform-origin</code></h3>
<p>When transforming an element, it’s common to also use the <code>transform-origin</code> property. While most browsers default to transforming an element, such as rotating an image from its center point, the <code>transform-origin</code> property allows explicit control over the point from which an element is transformed.</p>
<p>Because the two properties had similar names, <code>transform</code> and <code>transform-origin</code>, the mental model was pretty clear that these two properties were related — a mental model that has been disconnected from the individual transform properties.</p>
<p>However, despite the property names no longer being aligned, the <code>rotate</code>, <code>scale</code>, and <code>translate</code> properties all function as transforms that still adhere to any <code>transform-origin</code> values as expected. This means existing transforms which utilize explicit <code>transform-origin</code> points can be refactored to use individual transform properties without any conflicts.</p>
<pre class="language-css hljs">.item {
  scale: 1.5;
  transform-origin: top right;
}
</pre>
<h3 id="setting-values-0">Setting values to <code>0</code></h3>
<p>When setting nearly any value in CSS to <code>0</code>, it’s generally acceptable to not supply any unit to the value. When the value is <code>0</code>, it doesn’t really matter if it’s <code>0px</code> or <code>0rem</code>. The same applies to the <code>transform</code> property and rotate function.</p>
<pre class="language-css hljs">.item {
  transform: rotate(90deg);
}

.item:hover {
  transform: rotate(0);
}
</pre>
<p>However, when using the individual <code>rotate</code> property, a unit or CSS keyword must be defined.</p>
<pre class="language-css hljs">.item {
  rotate: 90deg;
}

.item:hover {
  // ❌ Will not rotate without a unit
  rotate: 0;

  // ✅ Will rotate with a unit specified
  rotate: 0deg;
}
</pre>
<h3 id="will-change-property">The <code>will-change</code> property</h3>
<p>Much like <code>transform-origin</code>, the individual transform properties also work together with the <code>will-change</code> property. Although, the <a href="https://dev.opera.com/articles/css-will-change-property/" target="_blank" rel="noopener">same considerations when using </a><code>will-change</code> should still be followed, such as only applying the property if the animation or transform is already suffering from performance issues.</p>
<p>If the <code>transform</code> property isn’t causing any performance issues, the switch to individual transform properties will not change that.</p>
<h3 id="overall-performance">Overall performance</h3>
<p>The use of individual transform properties is just as efficient as the original <code>transform</code> property.</p>
<h2 id="support-fallbacks">Support and fallbacks</h2>
<p>The benefits of CSS individual transform properties are worthless if they can’t be used. Luckily, modern support for these properties is already quite good, with support in at least the latest version of all major browsers, being introduced to Chrome and Edge in v104, Safari 14.1, and Firefox 103.</p>
<p><img             class="aligncenter size-full wp-image-130094 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/css-individual-transform-properties-support.png" alt="Screenshot Of CSS Individual Transform Properties Support On Caniuse" width="730" height="126"    /><noscript><img               class="aligncenter size-full wp-image-130094" src="https://blog.logrocket.com/wp-content/uploads/2022/08/css-individual-transform-properties-support.png" alt="Screenshot Of CSS Individual Transform Properties Support On Caniuse" width="730" height="126"  /></noscript></p>
<p>Building products for only the latest versions of major browsers, though, is often a fantasy rather than the reality of web development. But since the individual transform properties can be directly mapped to the legacy <code>transform</code> values, a reliable fallback can be used for progressive enhancement.</p>
<pre class="language-css hljs">.container {
  rotate: 80deg;
  scale: 1.5;
  translate: 50% 10%;

  @supports not (scale: 1) {
    // Use transform fallback if CSS individual transform properties are not supported
    transform: translate(50%, 10%) rotate(80deg) scale(1.5);
  }
}
</pre>
<p>By using the <code>@supports</code> query with the <code>not</code> keyword, we’re able to prioritize the newer properties, only rendering the fallback in environments where it’s required. But be wary, because the <code>transform</code> property is dependent on the order of its values, fallbacks must be written with this in mind.</p>
<p>To make the process of writing fallbacks easier, an <a href="https://codepen.io/DanielYuschick/pen/NWYozPK" target="_blank" rel="noopener">SCSS Mixin for individual transform properties</a> can be used to automate the fallback <code>transform</code> property and the order of its values.</p>
<p class="codepen"  data-height="399.6171875" data-default-tab="result" data-slug-hash="NWYozPK" data-user="DanielYuschick">See the Pen <a href="https://codepen.io/DanielYuschick/pen/NWYozPK"><br/>
CSS Individual Transform Properties SCSS Mixin</a> by Daniel Yuschick (<a href="https://codepen.io/DanielYuschick">@DanielYuschick</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="conclusion">Conclusion</h2>
<p>Transformations have long been a fundamental feature of CSS. Their interactions have defined the web as we know it today. With the introduction of individual transform properties, <code>rotate</code>, <code>scale</code>, and <code>translate</code>, the boundaries of animations and transforms may be pushed further.</p>
<p>Where else may these properties be beneficial? Would you also like to see other <code>transform</code> functions, like <code>skew</code> and axis-specific functions, be moved to their own properties?</p>
<p>If nothing else, CSS individual transform properties have two key benefits:</p>
<ol>
<li>The introduction to transforms and animations may now be better for beginners</li>
<li>The ability to clean up existing transforms and animations</li>
</ol>
<p>And for these two reasons alone, individual transform properties are a welcomed shift to the CSS foundation.</p>
<h2 id="resources">Resources</h2>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/rotate" target="_blank" rel="noopener">Rotate</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/scale" target="_blank" rel="noopener">Scale</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/translate" target="_blank" rel="noopener">Translate</a> – MDN</li>
<li><a href="https://caniuse.com/?search=rotate" target="_blank" rel="noopener">Rotate</a>, <a href="https://caniuse.com/?search=scale" target="_blank" rel="noopener">Scale</a> and <a href="https://caniuse.com/?search=translate" target="_blank" rel="noopener">Translate</a> – Caniuse</li>
<li><a href="https://web.dev/css-individual-transform-properties/" target="_blank" rel="noopener">Finer-grained control over CSS transforms with individual transform properties</a> – Bramus &amp; L. David Baron</li>
<li><a href="https://webkit.org/blog/11420/css-individual-transform-properties/" target="_blank" rel="noopener">CSS individual transform properties</a> – Antoine Quint</li>
<li><a href="https://www.stefanjudis.com/blog/order-in-css-transformation-transform-functions-vs-individual-transforms/" target="_blank" rel="noopener">Order in CSS Transformations</a> – Stefan Judis</li>
<li><a href="https://codepen.io/DanielYuschick/pen/NWYozPK" target="_blank" rel="noopener">Individual transform properties SCSS Mixin</a> – CodePen</li>
<li><a href="https://codepen.io/collection/PYKbBa" target="_blank" rel="noopener">Individual transform properties Demos</a> – CodePen</li>
</ul>
<p>&amp;nbsp;</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-130070" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/deep-dive-css-individual-transform-properties/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/deep-dive-css-individual-transform-properties/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-130070" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/deep-dive-css-individual-transform-properties/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-130070" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/deep-dive-css-individual-transform-properties/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/deep-dive-css-individual-transform-properties/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A deep dive into mutations in TanStack Query - LogRocket Blog</title>
			<link>https://blog.logrocket.com/deep-dive-mutations-tanstack-query/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/deep-dive-mutations-tanstack-query/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A deep dive into mutations in TanStack Query - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/">A deep dive into mutations in TanStack Query - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/gapurkassym/">
<img alt="alt" src="https://secure.gravatar.com/avatar/67474f72e9183c322db763f64ed05ed1?s=72&amp;d=mm&amp;r=g" class="avatar avatar-72 photo imgavt jetpack-lazy-image" height="72" width="72"    /><noscript><img  alt="" src="https://secure.gravatar.com/avatar/67474f72e9183c322db763f64ed05ed1?s=72&amp;d=mm&amp;r=g"  class="avatar avatar-72 photo imgavt" height="72" width="72"  /></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/gapurkassym/">
Gapur Kassym <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a full-stack engineer and writer. I'm passionate about building excellent software that improves the lives of those around me. As a software engineer, I enjoy using my obsessive attention to detail and my unequivocal love for making things that change the world.</span>
</div>
</div>
<h1 class="posttitle">A deep dive into mutations in TanStack Query</h1>
<p>
<span class="post-date"><time class="post-date">
March 14, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1561</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<article class="article-post">
<p>Fetching and manipulating data without using a global state was something out of the ordinary. TanStack Query, formerly known as React Query, gives us this opportunity. It has two main functions, <code>useQuery</code> and <code>useMutation</code>. In this article, let’s take a look and dive into mutations in <a href="https://blog.logrocket.com/using-suspense-react-query-tutorial-examples/">TanStack Query</a>.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#intro-react-query"> Introduction to TanStack Query</a>
<ul >
<li><a href="#queries"> What are queries?</a></li>
</ul>
</li>
<li><a href="#mutations"> What are mutations?</a></li>
<li><a href="#mutation-side-effects"> Mutation side effects</a></li>
<li><a href="#invalidation-mutations"> Understanding invalidation from mutations</a></li>
<li><a href="#promises-mutations"> Looking at promises in mutations</a></li>
<li><a href="#multiple-mutations-parallel"> Implementing multiple mutations in parallel</a></li>
<li><a href="#react-query-example"> Building the TanStack Query to-do example</a></li>
</ul>
<h2 id="intro-react-query">Introduction to TanStack Query</h2>
<p><a href="https://github.com/TanStack/query">TanStack Query</a> is one of the best libraries for <a href="https://blog.logrocket.com/modern-api-data-fetching-methods-react/">fetching</a>, <a href="https://blog.logrocket.com/swr-vs-tanstack-query-react/">caching</a>, synchronizing, and updating asynchronous data in your React app. It’s super easy to use, has zero-config, and helps you solve <a href="https://blog.logrocket.com/react-query-state-management-react-native/">state management issues</a> and control your app’s data before it controls you. TanStack Query has three main concepts: queries, mutations, and query invalidation.</p>
<p>First, I want to show you a simple example of using TanStack Query to get data. Then, we’ll discuss each concept using the example code:</p>
<pre class="language-javascript hljs">import { QueryClient, QueryClientProvider, useQuery } from 'react-query';

// this creates the client
const queryClient = new QueryClient();

export default function App() {
  return (
    // make the client available everywhere
    &lt;QueryClientProvider client={queryClient}>
      &lt;Users />
    &lt;/QueryClientProvider>
  );
}

function Users() {
  // this fetches users data from the server
  const { isLoading, error, data } = useQuery('users', fetchUsers);
  // in the fetching state
  if (isLoading) {
    return &lt;span>Loading...&lt;/span>;
  }
  // in the isError state
  if (error) {
    return &lt;span>{`An error has occurred: ${error.message}`}&lt;/span>;
  }
  // in the isSuccess state and we got users data
  return (
    &lt;ul>
      {data.map(user => (
        &lt;li key={user.id}>{`${data.name} ${data.lastName}`}&lt;/li>
      ))}
    &lt;/ul>
  );
}
</pre>
<p>Above, we created a <code>QueryClient</code>. This is the start of our app, and then we made it available everywhere through the <code>QueryClientProvider</code>. <code>QueryClientProvider</code> uses <a href="https://blog.logrocket.com/react-context-api-deep-dive-examples/">React Context</a> under the hood to make <code>QueryClient</code> throughout the app. This way, it won’t re-render our app and will only provide access to the client via <code>useQueryClient</code>.</p>
<h2 id="queries">What are queries?</h2>
<p>A query is an asynchronous data source bound to a unique key. TanStack Query uses the <code><a href="https://tanstack.com/query/latest/docs/react/reference/useQuery">useQuery</a></code> Hook to get the data. In the example, our <code>useQuery</code> takes two parameters, a unique key for the query and a function that returns a <code>Promise</code>.</p>
<p>The <code>useQuery</code> returns the following:</p>
<ul>
<li><code>isLoading</code>: In the fetching state</li>
<li><code>error</code>: The query is in the <code>isError</code> state, and you can get it through the <code>error</code> property</li>
<li><code>data</code>: The query is in the <code>isSuccess</code> state, and you can get it through the <code>data</code> property</li>
</ul>
<p>What are mutations and query invalidation? Let’s discuss them in the following sections.</p>
<h2 id="mutations">What are mutations?</h2>
<p>We call these mutations when we want to create, update, or delete data on the server. So, mutations are a side effect on the server. To achieve this in TanStack Query, we will use the <code><a href="https://tanstack.com/query/latest/docs/react/reference/useMutation">useMutation</a></code> Hook, as shown below:</p>
<pre class="language-javascript hljs">function NewUser() {
  const { isLoading, isSuccess, error, mutate } = useMutation(createUser);

  if (isLoading) {
    return &lt;span>Loading...&lt;/span>;
  }

  if (error) {
    return &lt;span>{`An error has occurred: ${error.message}`}&lt;/span>;
  }

  return (
    &lt;div>
      {isSuccess &amp;&amp; &lt;span>User added successfully&lt;/span>}

      &lt;button onClick={() => mutate({ name: 'Gapur', lastName: 'Kassym' })}>
        Create User
      &lt;/button>
    &lt;/div>
  );
}
</pre>
<p>In the example above, our <code>useMutation</code> requires a single <code>createUser</code> parameter. This is the function to create a new user. The <code>useMutation</code> returns the following:</p>
<ul>
<li><code>isLoading</code>: In performing state</li>
<li><code>isSuccess</code>: If the mutation was successful</li>
<li><code>error</code>: The mutation is in the <code>isError</code> state, and you can get it through the <code>error</code> property</li>
<li><code>mutate</code>: A function you can call with variables to cause a mutation</li>
</ul>
<p><code>useQuery</code> and <code>useMutation</code> are used for queries and return <code>loading</code>, <code>error</code>, and <code>status</code> fields. They also have the same callbacks as <code>onSuccess</code>, <code>onError</code>, and <code>onSettled</code>. So, they look similar, but they have two main differences. First, <code>useQuery</code> will take care of executing the query immediately and then perform background updates if it is necessary.</p>
<p>For mutations, this will give you a function mutate that you can call whenever you want to do a mutation. And secondly, you can call the same <code>useQuery</code> call multiple times on different components and return the same cached result. <code>useMutation</code> will not store the result in the cache and will return the response of the mutation.</p>
<h2 id="mutation-side-effects">Mutation side effects</h2>
<p>If we want to directly update the data at any point in the mutation lifecycle, <code>useMutation</code> provides us with <code>callback</code> functions for side effects:</p>
<ul>
<li><code>onMutate</code>: Fires before the mutation function fires</li>
<li><code>onError</code>: Will fire if the mutation fails</li>
<li><code>onSuccess</code>: Fires when the mutation is successful</li>
<li><code>onSettled</code>: Will fire when the mutation succeeds or fails</li>
</ul>
<p>As an example, let’s say we have an article, and we’ll update the title. Then the mutation will return a new modified article, like so:</p>
<pre class="language-javascript hljs">const mutation = useMutation({
  updateArticleTitle,
  onSuccess: newArticle => {
    // update article view directly via setQueryData
    queryClient.setQueryData(['articles', id], newArticle);
  },
  onError: (error, variables, context) => {
    console.log(error);
  },
});
</pre>
<p>Above, we use <code>setQueryData</code> to update the query cache directly.</p>
<h2 id="invalidation-mutations">Understanding invalidation from mutations</h2>
<p>However, it isn’t easy to directly update the data. This is because if we need to update a list item, the position of our item can be changed. So, we need to write more code. This is where <code>invalidation</code> comes into play:</p>
<pre class="language-javascript hljs">const mutation = useMutation({
  updateArticle,
  onSuccess: () => {
    // refetch the articles list
    queryClient.invalidateQueries('articles');
  },
});
</pre>
<p>It’s really simple. We just tell TanStack Query which query you want to invalidate. Also, invalidating the entire list is safer than trying to update the list item directly.</p>
<h2 id="promises-mutations">Looking at promises in mutations</h2>
<p><code>useMutation</code> returns the <code>mutate</code> and <code>mutateAsync</code> functions. The <code>mutate</code> returns nothing and just performs a mutation. But, <code>mutateAsync</code> returns a promise with the result. You will just work as an <code>async</code> function:</p>
<pre class="language-javascript hljs">const mutation = useMutation(updateArticle);

const onSubmit = async formData => {
  try {
    await mutation.mutateAsync(formData);
  } catch (error) {
    console.log('An error has occured: ', error);
  }
};
</pre>
<p>You have full control over the mutation and must catch errors yourself. However, in practice, we will use the <code>mutate</code> function almost everywhere, except when we want to run multiple mutations at the same time and wait for them to complete.</p>
<h2 id="multiple-mutations-parallel">Implementing multiple mutations in parallel</h2>
<p>Sometimes, you need to update the list of data. How can we do this? As I said before, we can do this with the <code>mutateAsync</code> function. We will loop and run multiple mutations in parallel by calling <code>mutateAsync</code>:</p>
<pre class="language-javascript hljs">const mutation = useMutation(updateArticle);

const articlesWithMutation = articles.map(article =>
  mutation.mutateAsync(article.id, 'New Title'),
);

try {
  await Promise.all(articlesWithMutation);
} catch (error) {
  console.log('An error has occured: ', error);
}
</pre>
<p>Above, we map the <code>articles</code> array, call the <code>mutateAsync</code> mutation, and then wait for all the mutations to complete via <code>Promise.all</code>.</p>
<h2 id="react-query-example">Building the TanStack Query to-do example</h2>
<p>First, we need to create a new React project. We can do this with the following lines of code:</p>
<pre class="language-javascript hljs">npx create-react-app react-query-todo-example --template typescript
</pre>
<p>Great. Now, we can start installing dependencies. I will use <code>pnpm</code>:</p>
<pre class="language-javascript hljs">pnpm add axios react-query
</pre>
<p>Then, to work with the API, I’m going to create a simple server. You can check the API code <a href="https://github.com/Gapur/react-query-todo-example/blob/main/server/index.js">here</a>. It has three endpoints:</p>
<ul>
<li><code>/todos</code>: <code>GET</code> endpoint for fetching to-do list</li>
<li><code>/todos</code>: <code>POST</code> endpoint to create a new to-do</li>
<li><code>/todos/:id</code>: <code>DELETE</code> endpoint to delete to-do by ID</li>
</ul>
<p>I am going to use <code><a href="https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/">axios</a></code> <a href="https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/">to work with HTTP requests</a>:</p>
<pre class="language-javascript hljs">export async function fetchTodos(): Promise&lt;Todo[]> {
  try {
    const todos = await axios.get("/todos");
    return todos.data;
  } catch (e) {
    throw e;
  }
}

export async function createTodo(text: string) {
  try {
    await axios.post("/todos", { text });
  } catch (e) {
    throw e;
  }
}

export async function deleteTodo(id: string) {
  try {
    await axios.delete(`/todos/${id}`);
  } catch (e) {
    throw e;
  }
}
</pre>
<p>Next, I will do a <code><a href="https://blog.logrocket.com/understanding-api-data-fetching-methods-react-recap/">fetch</a></code> <a href="https://blog.logrocket.com/understanding-api-data-fetching-methods-react-recap/">query</a> to get all the to-dos using <code>useQuery</code>:</p>
<pre class="language-javascript hljs">export function App() {
  const queryClient = useQueryClient();
  const { status, data, error } = useQuery("todos", fetchTodos);

  const { mutate } = useMutation(deleteTodo, {
    onSuccess: () => {
      queryClient.invalidateQueries("todos");
    },
  });

  if (status === "loading") {
    return &lt;div className="loader">Loading...&lt;/div>;
  }

  if (status === "error") {
    return &lt;div className="error">{`Error: ${error}`}&lt;/div>;
  }

  return (
    &lt;div className="app">
      &lt;h1>React Query Todo Example&lt;/h1>

      &lt;NewTodo />

      &lt;TodosList todos={data} onDelete={(todoId: string) => mutate(todoId)} />
    &lt;/div>
  );
}
</pre>
<p>Last, I will implement the <code>NewTodo</code> component with <code>useMutation</code> to create a new to-do request:</p>
<pre class="language-javascript hljs">export function NewTodo() {
  const [todo, setTodo] = useState("");

  const queryClient = useQueryClient();

  const { status, error, mutate } = useMutation(createTodo, {
    onSuccess: () => {
      queryClient.invalidateQueries("todos");
      setTodo("");
    },
  });

  if (status === "error") {
    return &lt;div className="error">{`An error has occurred: ${error}`}&lt;/div>;
  }

  const isButtonDisabled = todo === "" || status === "loading";

  return (
    &lt;div className="new-todo">
      &lt;input
        type="text"
        value={todo}
        placeholder="Create a new todo"
        onChange={(e) => setTodo(e.target.value)}
      />
      &lt;button
        className="add-btn"
        disabled={isButtonDisabled}
        onClick={() => mutate(todo)}
      >
        Add
      &lt;/button>
    &lt;/div>
  );
}
</pre>
<p>And that’s it! This is the final app:</p>
<p><img             class="aligncenter size-full wp-image-161475 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/react-query-to-do-app.gif" alt="Final Example of a React Query App" width="730" height="367"  /><noscript><img               class="aligncenter size-full wp-image-161475" src="https://blog.logrocket.com/wp-content/uploads/2023/02/react-query-to-do-app.gif" alt="Final Example of a React Query App" width="730" height="367"/></noscript></p>
<h2>Conclusion</h2>
<p>In React development, I used various ways to manage data state. After using TanStack Query, I can say that it is a more powerful and easier-to-use library. <code>useMutation</code> handles all <code>update</code>, <code>create</code>, and <code>delete</code> requests. Optimistic updates are one of the key benefits of using TanStack Query mutations, so I recommend you try it.</p>
<p>Thanks for reading. I hope you found this piece useful. Happy coding!</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-161472" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-161472" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-161472" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/deep-dive-mutations-tanstack-query/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/deep-dive-mutations-tanstack-query/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to CSS object-view-box - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-css-object-view-box/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-css-object-view-box/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to CSS object-view-box - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-css-object-view-box/">A guide to CSS object-view-box - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/piyushsinha/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/09/piyush-sinha.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/09/piyush-sinha.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/piyushsinha/">
Piyush Sinha <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I specialize in JavaScript and have professional experience working with ReactJS and Web Components.</span>
</div>
</div>
<h1 class="posttitle">A guide to CSS object-view-box</h1>
<p>
<span class="post-date"><time class="post-date">
February 27, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">3 min read</span>
<span class="wordcount">966</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<article class="article-post">
<p>As a frontend developer, I often need to work with images. And sometimes it gets tricky when an image is scaled and positioned differently across the application. For example, an ecommerce website might require a larger version of an image on the product page and a zoomed-in version of the same image when displaying a list of products.</p>
<p>Before Chrome 104, my go-to solution to crop/zoom an image was to apply it as <code>background-image</code> in a div and then adjust the <code>background-position</code> and <code>background-size</code> properties. Here’s an example:</p>
<pre class="language-css hljs">&lt;div id="cropped">&lt;/div></pre>
<pre class="language-css hljs">#cropped {
  width: 500px;
  aspect-ratio: 3/2;
  background-image: url("https://images.unsplash.com/photo-1611604548018-d56bbd85d681?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2070&amp;q=80");
  background-size: 1250px;
  background-position: 66% 67%;
  background-repeat: no-repeat;
}</pre>
<p id="gdcalert1"><img             class="aligncenter size-full wp-image-160857 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/cropping-image-using-background-size-position.png" alt="Cropping An Image Using The Background-Size And Background-Position Properties" width="730" height="249"    /><noscript><img               class="aligncenter size-full wp-image-160857" src="https://blog.logrocket.com/wp-content/uploads/2023/02/cropping-image-using-background-size-position.png" alt="Cropping An Image Using The Background-Size And Background-Position Properties" width="730" height="249"  /></noscript></p>
<p>It works fine, but let’s just say this solution to crop/zoom images leaves something to be desired. It’s not exactly what you’d call tidy. Also, this won’t work with just an <code>&lt;img/></code> tag. There are other workarounds, but none of them is as simple and clean as <code>object-view-box</code>.</p>
<p>In this article, we’ll cover:</p>
<ul>
<li><a href="#what-object-view-box-property">What is the <code>object-view-box</code> property?</a>
<ul >
<li><a href="#how-use-object-view-box">How to use <code>object-view-box</code>?</a></li>
</ul>
</li>
<li><a href="#possible-distortion">Possible distortion</a></li>
<li><a href="#why-welcome-update">Why should we welcome this update?</a></li>
<li><a href="#when-use-object-view-box">When to use <code>object-view-box</code>?</a></li>
</ul>
<h2 id="what-object-view-box-property">What is the <code>object-view-box</code> property?</h2>
<p>The release of<a href="https://chromestatus.com/features#milestone%3D104"> Chrome 104</a> introduced a native approach to zoom or pan within the content of an element. The CSS <code>object-view-box</code> property makes this possible by specifying a view box over an element and enabling us to adjust the positioning and scaling to meet our specific needs.</p>
<p>In simple words, just like a camera lens can be adjusted to zoom in or out or pan across the view outside, the <code>object-view-box</code> property allows us to zoom in on specific parts of an element or pan around to display different parts of the element.</p>
<h3 id="how-use-object-view-box">How to use <code>object-view-box</code>?</h3>
<p>To specify a view box over an element, <code>object-view-box</code> the <code>inset()</code> function to control the four edges.</p>
<p><code>inset()</code> is a shorthand way to specify values for the element’s <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties, in that order. It follows the same syntax as the <a href="https://blog.logrocket.com/css-margin-vs-padding/">padding and margin properties</a>, which allows it to accept from one to four values:</p>
<ul>
<li><strong>1 value</strong>: Applies to all four edges</li>
<li><strong>2 values</strong>: The first value applies to the top and bottom edges and the second one to left and right edges</li>
<li><strong>3 values</strong>: The first value applies to the top edge, the second one to left, and right edges and the third one to the bottom edge</li>
<li><strong>4 values</strong>: Applies to the top, right, bottom, and left edges respectively</li>
</ul>
<p id="gdcalert2"><img             class="aligncenter size-full wp-image-160863 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/using-inset-function-control-four-edges-1.png" alt="Using The Inset Function To Control The Four Edges Of An Image" width="801" height="516"    /><noscript><img               class="aligncenter size-full wp-image-160863" src="https://blog.logrocket.com/wp-content/uploads/2023/02/using-inset-function-control-four-edges-1.png" alt="Using The Inset Function To Control The Four Edges Of An Image" width="801" height="516"  /></noscript></p>
<p>These values can be expressed using any valid CSS length unit, such as pixels (px), <a href="https://blog.logrocket.com/using-em-vs-rem-css/">ems (em), rems (rem)</a>, and percentages (%), among others.</p>
<p>Let’s apply this property to the same image above and try to achieve the same result:</p>
<pre class="language-css hljs">&lt;img id="cropped" src="https://images.unsplash.com/photo-1611604548018-d56bbd85d681?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2070&amp;q=80" alt="toys"></pre>
<pre class="language-css hljs">#cropped {
  width: 500px;
  object-view-box: inset(40% 20% 20% 40%);
}</pre>
<p id="gdcalert3"><img             class="aligncenter size-full wp-image-160857 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/cropping-image-using-background-size-position.png" alt="Cropping An Image Using The Background-Size And Background-Position Properties" width="730" height="249"    /><noscript><img               class="aligncenter size-full wp-image-160857" src="https://blog.logrocket.com/wp-content/uploads/2023/02/cropping-image-using-background-size-position.png" alt="Cropping An Image Using The Background-Size And Background-Position Properties" width="730" height="249"  /></noscript></p>
<h2 id="possible-distortion">Possible distortion</h2>
<p>If the cropped version of the image is a square, the image will appear distorted, i.e., stretched or squeezed:</p>
<pre class="language-css hljs">#cropped {
  aspect-ratio: 1;
  width: 500px;
  object-view-box: inset(40% 20% 20% 40%);
}</pre>
<p id="gdcalert4"><img             class="aligncenter size-full wp-image-160869 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/distorted-square-image.png" alt="A Distorted Image Appears When The Cropped Image Is A Square" width="447" height="445"    /><noscript><img               class="aligncenter size-full wp-image-160869" src="https://blog.logrocket.com/wp-content/uploads/2023/02/distorted-square-image.png" alt="A Distorted Image Appears When The Cropped Image Is A Square" width="447" height="445"  /></noscript></p>
<p>Here, we can use the help of the <code>object-fit</code> property, which defines how an element should be resized to fit its container. The property can be set with one of these values: <code>fill</code>, <code>contain</code>, <code>cover</code>, <code>none</code>, or <code>scale-down</code>.</p>
<p>For our scenario, we can use <code>cover</code>, which resizes the image to fit the <code>aspect-ratio</code> of the container and if the image’s <code>aspect-ratio</code> doesn’t match the container’s, then it will be clipped to fit:</p>
<pre class="language-css hljs">#cropped-fit-cover {
  aspect-ratio: 1;
  width: 500px;
  object-fit: cover;
  object-view-box: inset(40% 20% 20% 40%);
}</pre>
<p id="gdcalert5"><img             class="aligncenter size-full wp-image-160871 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/cropped-fit-cover.png" alt="Cropping An Image Using The Cropped-Fit-Cover Property" width="445" height="441"    /><noscript><img               class="aligncenter size-full wp-image-160871" src="https://blog.logrocket.com/wp-content/uploads/2023/02/cropped-fit-cover.png" alt="Cropping An Image Using The Cropped-Fit-Cover Property" width="445" height="441"  /></noscript></p>
<p>Isn’t this a convenient way to crop/zoom an image? It only requires one property and is easy to visualize. No additional properties or elements are needed, unlike workarounds.</p>
<h2 id="why-welcome-update">Why should we welcome this update?</h2>
<p>Using the <code>object-view-box</code> property is a native solution; the browser does the hard work, and the developers get a clean solution.</p>
<p>There are popular workarounds among devs, like using an HTML element — e.g., <code>&lt;div/></code> — and applying CSS properties to achieve a cropped image. But that’s still just a workaround, an unconventional solution to overcome the limitation of the browser.</p>
<p>With this update, the browser has worked on that limitation and offers a built-in solution.</p>
<p>There is a concern that, to make this work, you need to know the exact dimension of the original container and the new container. But isn’t that a prerequisite to crop an image? To determine how much to crop, we’ll always need that information.</p>
<p>So, how will this work when the container is resized (change in the viewport)?</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>As the <code>object-view-box</code> uses <code>inset()</code> to draw a <code>view-box</code> over an image, cropping always happens on the intrinsic size (original width and height) of the image. To make it responsive, we can use this property along with media queries and crop accordingly.</p>
<h2 id="when-use-object-view-box">When to use <code>object-view-box</code>?</h2>
<p>The ability to crop/zoom an image can come in handy in many cases:</p>
<ul>
<li>When an image needs to be scaled and positioned differently throughout an application</li>
<li>Interactive feature where users can zoom in and pan over an image, commonly found on e-commerce websites</li>
<li>In smaller viewports, images often get cropped. With this property and media queries, we can control which part of an image stays in view</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>There have been workarounds to cropping and zooming images in past, but I welcome this native and convenient solution. Also, please keep in mind that this is an experimental release, and therefore, it may not be widely supported across all browsers. Visit <a href="https://caniuse.com/mdn-css_properties_object-view-box">caniuse.com</a> for up-to-date browser support tables.</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-160853" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-css-object-view-box/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-css-object-view-box/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-160853" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-css-object-view-box/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-160853" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-css-object-view-box/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-css-object-view-box/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to CSS pseudo-elements - LogRocket Blog</title>
			<link>https://blog.logrocket.com/css-pseudo-elements-guide/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/css-pseudo-elements-guide/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to CSS pseudo-elements - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/css-pseudo-elements-guide/">A guide to CSS pseudo-elements - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/nwoselotanna/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/nwoselotanna.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/nwoselotanna.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nwoselotanna/">
Nwose Lotanna <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Web Developer and Writer</span>
</div>
</div>
<h1 class="posttitle">A guide to CSS pseudo-elements</h1>
<p>
<span class="post-date"><time class="post-date">
September 29, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2240</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This post was updated on 29 September 2022 to include a comparison of CSS pseudo-classes and pseudo-elements, and working CodePen demos of each pseudo-element.</em></p>
<p>The basic CSS selectors and their various properties are fun to work with, but learning about pseudo-classes and pseudo-elements is the next step towards becoming a CSS expert.</p>
<p>As a frontend developer, you should have a working knowledge of CSS pseudo-elements, including their functionalities and their different presentational and structural applications.</p>
<p>This article covers a detailed overview of pseudo-elements, how they differ from pseudo-classes, their different types and use cases, new additions in the latest module.</p>
<p>To jump ahead:</p>
<ul>
<li><a href="#what-are-css-pseudoelements">What are CSS pseudo-elements?</a>
<ul >
<li><a href="#pseudoelements-vs-pseudoclasses">Pseudo-elements vs. pseudo-classes</a></li>
</ul>
</li>
<li><a href="#types-of-css-pseudoelements">Types of CSS pseudo-elements</a>
<ul >
<li><a href="#before-css-pseudoelement"><code>::before</code></a></li>
<li><a href="#after-css-pseudoelement"><code>::after</code></a></li>
<li><a href="#firstletter-css-pseudoelement"><code>::first-letter</code></a></li>
<li><a href="#firstline-css-pseudoelement"><code>::first-line</code></a></li>
<li><a href="#marker-css-pseudoelement"><code>::marker</code></a></li>
<li><a href="#placeholder-css-pseudoelement"><code>::placeholder</code></a></li>
<li><a href="#selection-css-pseudoelement"><code>::selection</code></a></li>
<li><a href="#backdrop-css-pseudoelement"><code>::backdrop</code></a></li>
<li><a href="#fileselectorbutton-css-pseudoelement"><code>::file-selector-button</code></a></li>
<li><a href="#cue-css-pseudoelement"><code>::cue</code></a></li>
<li><a href="#part-css-pseudoelement"><code>::part()</code></a></li>
<li><a href="#slotted-css-pseudoelement"><code>::slotted()</code></a></li>
</ul>
</li>
<li><a href="#browser-specific-pseudoelements">Browser-specific pseudo-elements</a></li>
<li><a href="#experimental-pseudoelements">Experimental pseudo-elements</a></li>
</ul>
<h2 id="what-are-css-pseudoelements">What are CSS pseudo-elements?</h2>
<p>A <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements" target="_blank" rel="noopener">CSS pseudo-element</a> is primarily a keyword added to a <a href="https://www.w3schools.com/cssref/css_selectors.asp" target="_blank" rel="noopener">CSS selector</a> that lets you style a specific part of the selected HTML element. It acts as a sub-element and provides additional functionality to the selected entity.</p>
<p>Pseudo-elements were first introduced in 2015 with a single colon syntax. The later modules from CSS3 use a double-colon pseudo-elements syntax as shown below:</p>
<pre class="language-css hljs">/* Older way (CSS2) */
selector:pseudo-element {
  property: value;
}

/* Modern way (CSS3 onwards) */
selector::pseudo-element {
  property: value;
}
</pre>
<p>As shown above, the double-colon keywords are our pseudo-elements that also indicate their functionality by their names. We will go through each of them in the upcoming segments.</p>
<h3 id="pseudoelements-vs-pseudoclasses">Pseudo-elements vs. pseudo-classes</h3>
<p>A CSS pseudo-class is a state of the selected element when it goes through an event or series of events. You can change the element styles for a particular event with pseudo-classes.</p>
<p>In contrast, a CSS pseudo-element behaves like a sub-element itself and adds a different functionality to the selected element, based on its type.</p>
<h2 id="types-of-css-pseudoelements">Types of CSS pseudo-elements</h2>
<p>There are some browser-specific and experimental pseudo-elements that we’ll be covering in the later segments of this article. For now, here is a list of different pseudo-elements that modern browsers support:</p>
<ol>
<li><code>::before</code></li>
<li><code>::after</code></li>
<li><code>::first-letter</code></li>
<li><code>::first-line</code></li>
<li><code>::marker</code></li>
<li><code>::placeholder</code></li>
<li><code>::selection</code></li>
<li><code>::backdrop</code></li>
<li><code>::file-selector-button</code></li>
<li><code>::cue</code></li>
<li><code>::part()</code></li>
<li><code>::slotted()</code></li>
</ol>
<p>All the examples we’ll be looking at in this tutorial are available in <a href="https://codepen.io/collection/JGzmbo" target="_blank" rel="noopener">this codepen collection</a>. You may also copy-paste the code and use it in your choice of code editor.</p>
<h3 id="before-css-pseudoelement"><code>::before</code></h3>
<p>The <code>::before</code> keyword creates a pseudo-element that appears just before the content of the selected HTML element.</p>
<p>By default, it has an inline display and needs to be provided with the CSS content property to function. Take a look at the code snippet below for the <code>::before</code> pseudo-element’s syntax:</p>
<pre class="language-css hljs">.pe-before::before {
  content: "Content injected by the ::before pseudo-element.";
  display: block;
  margin-bottom: 1em;
}
</pre>
<p>The above code injects some content into each element with a <code>pe-before</code> class by making use of the <code>::before</code> pseudo-element. <a href="https://codepen.io/_rahul/pen/NWMOpVB" target="_blank" rel="noopener">See the demo here</a>. The frontend development world often refers to this type of injected content as generated content.</p>
<p>Here’s another example to demonstrate an advanced application of <code>::before</code>.</p>
<p>Let’s take a tag list as a use case where showing a tag icon or text just before the tag entity makes total sense.</p>
<p>Some alignment and spacing adjustments with flexbox properties and the <code>::before</code> pseudo-element makes it super easy to implement:</p>
<pre class="language-css hljs">.tag-list {
  display: flex;
  gap: 1em;
}

.tag-list li,
.tag-list a {
  display: block;
}

.tag-list a::before {
  content: "#";
  ...
}
</pre>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="ExLdmVP" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/ExLdmVP"><br/>
Tag list with CSS ::before </a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="after-css-pseudoelement"><code>::after</code></h3>
<p>The <code>::after</code> pseudo-element works just like <code>::before</code> except for the fact that instead of appearing before, it appears just after, the content of the selected HTML element.</p>
<p>Like <code>::before</code>, <code>::after</code> has an inline display by default and takes a content property to function. Here’s an example to demonstrate its syntax:</p>
<pre class="language-css hljs">.pe-before::after {
  content: "Content injected by the ::after pseudo-element.";
  display: block;
  margin-top: 1em;
}
</pre>
<p>Check out the code in action here:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="LYmgWwR" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/LYmgWwR"><br/>
CSS ::after pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>For an advanced implementation of the <code>::after</code> pseudo-element, consider constructing a “breadcrumb” navigation with forward-slashes between items.</p>
<p>Here’s an easy way to achieve that with <code>::after</code> and some alignment adjustments:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="vYjVxoZ" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/vYjVxoZ"><br/>
Breadcrumb navigation with CSS ::after </a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="firstletter-css-pseudoelement"><code>::first-letter</code></h3>
<p>Automatically targeting the first letter of a given text block can help create rich typographical enhancements like drop caps.</p>
<p>Doing so may sound tricky, but the <code>::first-letter</code> pseudo-element in CSS makes it relatively simple. It represents the first letter of the first line of a block element and only works if the first child of the targeted element is a text block.</p>
<p>Here’s how easy it is to target the first letter of all the paragraph tags and make them appear a bit bolder in weight:</p>
<pre class="language-css hljs">p::first-letter {
  font-weight: 700;
}
</pre>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="rNvQBrx" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/rNvQBrx"><br/>
CSS ::first-letter pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Most magazine-based blog layouts implement the <code>::first-letter</code> pseudo-element to highlight the first letter of the first paragraph of an article. It is popularly known as the drop cap effect:</p>
<pre class="language-css hljs">main p:first-child::first-letter {
  text-transform: uppercase;
  font-weight: 700;
  font-size: 3em;
  line-height: 1;
  float: left;
  margin: 0 0.5rem 0.1rem 0;
}
</pre>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="qBYQWym" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/qBYQWym"><br/>
Drop-cap effect with CSS ::first-letter</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>It is crucial to realize that the first letter of an element with <code>::first-letter</code> can sometimes be tricky to spot. For example, if a text contains a punctuation mark at the beginning, the pseudo-element will logically select the mark instead of the actual first letter.</p>
<p>Another example could be a <a href="https://en.wikipedia.org/wiki/Digraph_(orthography)" target="_blank" rel="noopener">digraph</a> or a <a href="https://en.wikipedia.org/wiki/Trigraph_(orthography)" target="_blank" rel="noopener">trigraph</a>, where you would want to select all two or three letters. The <code>::first-letter</code> pseudo-element, in this case, could select only the first one.</p>
<p>Also, keep an eye on using <code>::before</code> with <code>::first-letter</code>. The <code>::before</code> pseudo-element acts as the first child of a given element. This will cause <code>::first-letter</code> to prefer the generated content added by it over actual content at the time of selection.</p>
<h3 id="firstline-css-pseudoelement"><code>::first-line</code></h3>
<p>With <code>::first-line</code>, we can easily select the first line of text in a block element. This pseudo-element considers the width and font size of the element, along with the width of the document to determine the selection:</p>
<pre class="language-css hljs">p::first-line {
  font-weight: 700;
}
</pre>
<p>The code above will make the first line of every paragraph element bolder in weight. See a quick demo of the same here:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="gOzBWWK" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/gOzBWWK"><br/>
CSS ::first-line pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Let’s take it a step further by changing the case for the first line of an article. This can be done by pairing <code>::first-line</code> with the <code>:first-child</code> pseudo-class:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="bGMmWWO" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/bGMmWWO"><br/>
Highlighting the first line with CSS ::first-line</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="marker-css-pseudoelement"><code>::marker</code></h3>
<p>This pseudo-element enables us to select and modify the bullet icon and number in the marker box of a list item. It works with anything with a <code>list-item</code> display. <code>&lt;li></code> and <code>&lt;summary></code> elements are some of its general applications:</p>
<pre class="language-css hljs">li::marker {
  content: "♥";
}
</pre>
<p>See the demo here:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="vYjQRZV" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/vYjQRZV"><br/>
CSS ::marker pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>As you can see above, the <code>::marker</code> pseudo-element made the <code>::before</code> pseudo-element unnecessary. It would be great if it allowed adding spacing between the marker and the text in the future.</p>
<p>Adding custom markers to an unordered list is a cakewalk. Let’s do something similar with disclosable summaries as well:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="Jjveyje" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/Jjveyje"><br/>
Styling the detail disclosure elements with CSS ::marker</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="placeholder-css-pseudoelement"><code>::placeholder</code></h3>
<p>As the name suggests, the <code>::placeholder</code> pseudo-element allows you to style the placeholder of form input elements. Most browsers, by default, have light gray colored placeholders. Here’s how we can modify them using the CSS code below:</p>
<pre class="language-css hljs">input::placeholder {
  color: blue;
}
</pre>
<p>In the demonstration below, I tried to make the color of the placeholder text look related to the background of the field. <a href="https://blog.logrocket.com/hsl-hsla-vs-rgb-rgba-css/." target="_blank" rel="noopener">CSS HSL color function</a> is handy for such cases; you can keep the hue constant and generate different shades and tints by only modifying lightness and saturation:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="LYmXPMz" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/LYmXPMz"><br/>
CSS ::placeholder pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="selection-css-pseudoelement"><code>::selection</code></h3>
<p>Generally, when you select text on a web page, the selection is highlighted in blue. The <code>::selection</code> pseudo-element enables you to customize the styles for this highlighting:</p>
<pre class="language-css hljs">::selection {
  background-color: #ccc;
  color: #888;
}
</pre>
<p>You may hook it to the body or the root element to apply the changes to every element. The demonstration below shows its implementation with two different elements:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="dyeQyZg" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/dyeQyZg"><br/>
CSS ::placeholder pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="backdrop-css-pseudoelement"><code>::backdrop</code></h3>
<p>The <code>::backdrop</code> CSS pseudo-element represents a viewport-sized box rendered immediately beneath any element being presented in full-screen mode.</p>
<p>Let’s understand this with an example where we change the backdrop of a video from black to blue. Check out this <a href="https://codepen.io/_rahul/pen/wvjQeyv" target="_blank" rel="noopener">CodePen example</a> and play the video in full-screen mode:</p>
<pre class="language-css hljs">video::backdrop {
  background-color: blue;
}
</pre>
<p>It works for the dialog elements as well, which, when initiated, get a customizable backdrop color. Click the “show the dialog” button in the demo below to see it in action:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="gOzQREO" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/gOzQREO"><br/>
CSS ::backdrop in action with &lt;dialog></a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="fileselectorbutton-css-pseudoelement"><code>::file-selector-button</code></h3>
<p>The HTML file input element displays a button that seems impossible to style with CSS. To your surprise, the <code>::file-selector-button</code> pseudo-element actually lets you customize that button, and here’s a working demonstration of that:</p>
<pre class="language-css hljs">input[type="file"]::file-selector-button {
  background-color: blue;
  color: white;
  ...
}
</pre>
<p>You might not like specifying the input type when adding styles to this pseudo-element. I’d recommend you always mention the type to keep things readable for others. See how neat the file input looks with some additions using <code>::file-input-button</code>:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="rNvQGBg" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/rNvQGBg"><br/>
Styling the File Upload Input in CSS</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="cue-css-pseudoelement"><code>::cue</code></h3>
<p>The <code>::cue</code> CSS pseudo-element selects the WebVTT cues within a media element, usually videos. In simpler words, it allows you to style captions, subtitles, and other possible media cues using VTT tracks:</p>
<pre class="language-css hljs">&lt;style>
  video::cue {
    color: pink;
    background-color: black;
  }
&lt;/style>
&lt;video controls
       src="./path/to/video.file">
    &lt;track default
           kind="captions"
           srclang="en"
           src="./path/to/vtt.file">
&lt;/video>

</pre>
<div>To avoid CORS issues, ensure that the video and VTT files are coming from the same domain. Here is what the <code>::cue</code> powered VTT captions look like:</div>
<div/>
<div><img             class="aligncenter size-full wp-image-137454 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/cue-pseudo-element.png" alt="Cue Powered VTT Captions" width="730" height="730"    /><noscript><img               class="aligncenter size-full wp-image-137454" src="https://blog.logrocket.com/wp-content/uploads/2022/09/cue-pseudo-element.png" alt="Cue Powered VTT Captions" width="730" height="730"  /></noscript></div>
<pre class="language-css hljs"/>
<h3 id="part-css-pseudoelement"><code>::part()</code></h3>
<p>Due to its element encapsulation nature, the <a href="https://www.w3.org/TR/shadow-dom/" target="_blank" rel="noopener">shadow DOM</a> stays isolated from the rest of the page. Therefore, not all styles reach the components attached to the regular DOM from the shadow DOM.</p>
<p>The <code>::part()</code> pseudo-element, a new addition to CSS pseudo-elements, makes it possible to style the shadow DOM to a certain extent:</p>
<pre class="language-css hljs">&lt;template id="my-widget">
    &lt;div part="widget">
      &lt;p>...&lt;/p>
    &lt;/div>
&lt;/template>
</pre>
<p>Assigning a “part” plays an important role here and will help us later to alter the above component using the <code>::part()</code> pseudo-element.</p>
<p>The code block below shows how it acts like a function and takes the <code>part</code> as an argument:</p>
<pre class="language-css hljs">my-widget::part(widget) {
  ...
}
</pre>
<p>Here’s a small implementation of everything we discussed about <code>::part()</code>:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="gOzQGgo" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/gOzQGgo"><br/>
CSS ::part() pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="slotted-css-pseudoelement"><code>::slotted()</code></h3>
<p>The slots in the shadow DOM are placeholders that hold the content between your custom web component tags. One limitation with slots is that you can’t style them from within the shadow DOM tree.</p>
<p>The introduction of the slotted pseudo-element counters that issue by taking slot elements as arguments to add styles. Here is a simple implementation of <code>::slotted</code> using the same example as above:</p>
<pre class="language-css hljs">&lt;template id="my-widget">
  &lt;style>
    div ::slotted(span) {
      color: red;
    }

    section ::slotted(span) {
      color: green;
    }
  &lt;/style>
  &lt;div>
    &lt;slot name="div">This is a div slot&lt;/slot>
  &lt;/div>
  &lt;section>
    &lt;slot name="section">This is a section slot&lt;/slot>
  &lt;/section>
&lt;/template>
</pre>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="OJZaxer" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/OJZaxer"><br/>
CSS ::slotted() pseudo-element</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="browser-specific-pseudoelements">Browser-specific pseudo-elements</h2>
<p>It’s impractical to use a browser-specific pseudo-element in production, because it will only add to the inconsistencies if no other alternatives are available for other browsers.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Some popular ones from such pseudo-elements are <code>::-moz-appearance</code>, <code>::-webkit-appearance</code>, and <code>::-webkit-search-cancel-button</code>. The appearance pseudo-elements are used to control the native appearance of UI controls based on the operating system’s theme.</p>
<p>Web developers have been using the <code>::webkit-search-cancel-button</code> for years to hide that ugly blue-colored “cancel” search control from HTML search inputs on WebKit-based browsers:</p>
<p class="codepen"  data-height="300" data-default-tab="html,result" data-slug-hash="WNJYXBG" data-user="_rahul">See the Pen <a href="https://codepen.io/_rahul/pen/WNJYXBG"><br/>
Hiding the webkit search cancel button with CSS</a> by Rahul (<a href="https://codepen.io/_rahul">@_rahul</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="experimental-pseudoelements">Experimental pseudo-elements</h2>
<p>Currently, some CSS4 pseudo-elements are still in experimental mode, meaning they are still undergoing development and won’t work as expected in any browser.</p>
<p>There are mainly four pseudo-elements that fall into this category:</p>
<ul>
<li><code>::target-text</code>: If the browser supports scroll-to-text fragments, the <code>::target-text</code> CSS pseudo-element will allow us to highlight the scroll targets</li>
<li><code>::spelling-error</code>: It will represent text segments flagged as grammatically incorrect by the user agent</li>
<li><code>::grammar-error</code>: It will represent text segments flagged as incorrectly spelled by the user agent</li>
<li><code>::cue-region</code>: Different from <code>::cue</code>, it will be used to style the whole cue region instead of just the cue text</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>In the contents above, we learned about CSS pseudo-elements and their different applications. We also introduced some experimental and browser-specific pseudo-elements, and why it is currently not practical to use them in production.</p>
<p>Even though pseudo-elements add a lot of functionalities that you would be adding with JavaScript otherwise, avoiding their aggressive use will keep your layouts lighter and glitch-free.</p>
<p>I hope you added a bit more to your CSS knowledge with this tutorial. Let me know your thoughts in the comments.</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-3092" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/css-pseudo-elements-guide/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/css-pseudo-elements-guide/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-3092" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/css-pseudo-elements-guide/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-3092" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/css-pseudo-elements-guide/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/css-pseudo-elements-guide/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to JavaScript bitwise operators - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-javascript-bitwise-operators/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-javascript-bitwise-operators/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to JavaScript bitwise operators - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-javascript-bitwise-operators/">A guide to JavaScript bitwise operators - LogRocket Blog</a>
<div class="mainheading">

 <div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/gladchinda/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/gladchinda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/gladchinda.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/gladchinda/">
Glad Chinda <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Full-stack web developer learning new hacks one day at a time. Web technology enthusiast. Hacking stuffs @theflutterwave.</span>
</div>
</div>
<h1 class="posttitle">A guide to JavaScript bitwise operators</h1>
<p>
<span class="post-date"><time class="post-date">
April 13, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
<span class="wordcount">4315</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<article class="article-post">
 <p><em><strong>Editor’s note:</strong> This article was last updated by <a href="https://blog.logrocket.com/author/ibiyemiadewakun/">Ibiyemi Adewakun</a> on 13 April 2023. Want to read up on some other JavaScript operators? Check out our posts on <a href="https://blog.logrocket.com/optional-chaining-and-nullish-coalescing-in-javascript/">optional chaining and nullish coalescing in JavaScript</a> and the <a href="https://blog.logrocket.com/investigating-javascript-pipe-operator-proposal/">JavaScript pipe operator proposal</a>.</em></p>
<p>JavaScript provides several kinds of operators, making it possible to carry out basic operations on simple values such as arithmetic operations, assignment operations, logical operations, bitwise operations, etc.</p>
<p>We often see JavaScript code that contains a mix of assignment operators, arithmetic operators, and logical operators. However, we don’t get to see bitwise operators in use that much.</p>
<p>In this tutorial, we will take a look at all the JavaScript bitwise operators and try to understand how they are evaluated. We will also look at a few interesting applications for bitwise operators in writing simple JavaScript programs. This will require us to take a little peek at how JavaScript bitwise operators represent their operands as signed 32-bit integers.</p>
<p><em>Jump ahead</em>:</p>
<ul>
<li><a href="#bitwise-not"><code>~</code> — Bitwise NOT</a></li>
<li><a href="#bitwise-and"><code>&amp;</code> — Bitwise AND</a></li>
<li><a href="#bitwise-or"><code>|</code> — Bitwise OR</a></li>
<li><a href="#bitwise-xor"><code>^</code> — Bitwise XOR</a></li>
<li><a href="#left-shift"><code>&lt;&lt;</code> — Left shift</a></li>
<li><a href="#sign-propagating-right-shift"><code>>></code> — Sign-propagating right shift</a></li>
<li><a href="#zero-fill-right-shift"><code>>>></code> — Zero-fill right shift</a></li>
<li><a href="#config-flags">Config flags</a></li>
</ul>
<h2 id="bitwise-not">Bitwise NOT (<code>~</code>)</h2>
<p>The <code>~</code> operator is a unary operator, meaning it takes only one operand. The <code>~</code> operator performs a NOT operation on every bit of its operand. The result of a NOT operation is called a complement. The complement of an integer is formed by inverting every bit of the integer.</p>
<p>For a given integer — say, <code>170</code> — the complement can be computed using the <code>~</code> operator as follows:</p>
<pre class="language-javascript hljs">// 170 => 00000000000000000000000010101010
// --------------------------------------
//  ~ 00000000000000000000000010101010
// --------------------------------------
//  = 11111111111111111111111101010101
// --------------------------------------
//  = -171 (decimal)

console.log(~170); // -171
</pre>
<p>JavaScript bitwise operators convert their operands to 32-bit signed integers in two’s complement format. Hence, when the <code>~</code> operator is used on an integer, the resulting value is the two’s complement of the integer. The two’s complement of an integer <code>A</code> is given by <code>-(A + 1)</code>:</p>
<pre class="language-javascript hljs">~170 => -(170 + 1) => -171
</pre>
<p>Here are a few points to note about the 32-bit signed integers used by JavaScript bitwise operators:</p>
<ul>
<li>The most significant (leftmost) bit is called the sign bit. The sign bit is always <code>0</code> for positive integers, and <code>1</code> for negative integers</li>
<li>The remaining 31 bits besides the sign bit are used to represent the integer. Therefore, the maximum 32-bit integer that can be represented is <code>(2^31 - 1)</code>, which is <code>2147483647</code>, while the minimum integer is <code>-(2^31)</code>, which is <code>-2147483648</code></li>
<li>For integers that fall outside the 32-bit signed integer range, the most significant bits are discarded until the integer falls within range</li>
</ul>
<p>Here are the 32-bit sequence representations of some important numbers:</p>
<pre class="language-javascript hljs">           0 => 00000000000000000000000000000000
          -1 => 11111111111111111111111111111111
  2147483647 => 01111111111111111111111111111111
 -2147483648 => 10000000000000000000000000000000
</pre>
<p>From the above representations, it is evident that:</p>
<pre class="language-javascript hljs">          ~0 => -1
         ~-1 => 0
 ~2147483647 => -2147483648
~-2147483648 => 2147483647
</pre>
<h3 id="when-would-use-bitwise-not-operator">When would you use the bitwise NOT operator?</h3>
<p>One of the most common use cases for the bitwise NOT operator is in combination with the found index. Let’s take a look at how it is used.</p>
<h4 id="found-index">Found index</h4>
<p>Most built-in objects in JavaScript, such as arrays and strings, have some useful methods that can be used to check for the presence of an item in the array or a substring within the string. Here are some of those methods:</p>
<ul>
<li><code>Array.indexOf()</code></li>
<li><code>Array.lastIndexOf()</code></li>
<li><code>Array.findIndex()</code></li>
<li><code>String.indexOf()</code></li>
<li><code>String.lastIndexOf()</code></li>
<li><code>String.search()</code></li>
</ul>
<p>These methods all return the zero-based index of the item or substring, if it is found. Otherwise, they return <code>-1</code>. For example:</p>
<pre class="language-javascript hljs">const numbers = [1, 3, 5, 7, 9];

console.log(numbers.indexOf(5)); // 2
console.log(numbers.indexOf(8)); // -1
</pre>
<p>In the snippet above, we see that when an item is not found, we get <code>-1</code> in return. But it is easier to confirm if this item is missing or exists using a Boolean true or false and this is where the bitwise NOT operator helps.</p>
<p>Remember that the complement of <code>-1</code> is <code>0</code> (zero), and in JavaScript, a zero-value when made Boolean is false. This means we can check for the complement of our found index and convert it to a Boolean.</p>
<p>Here is what that will look like:</p>
<pre class="language-javascript hljs">function foundIndex (index) {
  return Boolean(~index);
}
</pre>
<p>In the above code snippet, the <code>~</code> operator, when used on <code>-1</code>, evaluates to <code>0</code>, which is a falsy value. Hence, using <code>Boolean()</code> to cast a falsy value will return <code>false</code>. For every other index value, <code>true</code> is returned because in JavaScript any non-zero value (even negative numbers) is truthy. So the previous code snippet can be modified as follows:</p>
<pre class="language-javascript hljs">const numbers = [1, 3, 5, 7, 9];

console.log(foundIndex(numbers.indexOf(5))); // true
console.log(foundIndex(numbers.indexOf(8))); // false
</pre>
<h2 id="bitwise-and">Bitwise AND (<code>&amp;</code>)</h2>
<p>The <code>&amp;</code> operator performs an AND operation on each pair of corresponding bits of its operands. The <code>&amp;</code> operator returns <code>1</code> only if both bits are 1; otherwise, it returns <code>0</code>. Thus, the result of an AND operation is the equivalent of multiplying each pair of corresponding bits.</p>
<p>For a pair of bits, here are the possible values of an AND operation:</p>
<pre class="language-javascript hljs">(0 &amp; 0) === 0     // 0 x 0 = 0
(0 &amp; 1) === 0     // 0 x 1 = 0
(1 &amp; 0) === 0     // 1 x 0 = 0
(1 &amp; 1) === 1     // 1 x 1 = 1
</pre>
<h3 id="when-use-bitwise-and-operator">When would you use the bitwise AND operator?</h3>
<h4 id="turning-off-bits">Turning off bits</h4>
<p>The <code>&amp;</code> operator is commonly used in bit masking applications to ensure that certain bits are turned off for a given sequence of bits. This is based on the fact that for any bit <code>A</code>:</p>
<ul>
<li><code>(A &amp; 0 = 0)</code> – the bit is always turned off by a corresponding <code>0</code> bit</li>
<li><code>(A &amp; 1 = A)</code> – the bit remains unchanged when paired with a corresponding <code>1</code> bit</li>
</ul>
<p>For example, say we have an 8-bit integer, and we want to ensure that the first four bits are turned off (set to <code>0</code>). The <code>&amp;</code> operator can be used to achieve this as follows:</p>
<ul>
<li>First, create a bit mask whose effect will be to turn off the first 4 bits of an 8-bit integer. That bit mask will be <code>0b11110000</code>. Note that the first 4 bits of the bit mask are set to <code>0</code>, while every other bit is set to <code>1</code></li>
<li>Next, perform an <code>&amp;</code> operation using the 8-bit integer and the created bit mask:
<pre class="language-javascript hljs">const mask = 0b11110000;// 222 => 11011110// (222 &amp; mask)
// ------------
// 11011110
// &amp; 11110000
// ------------
// = 11010000
// ------------
// = 208 (decimal)console.log(222 &amp; mask); // 208
</pre>
</li>
</ul>
<h4 id="checking-set-bits">Checking for set bits</h4>
<p>The <code>&amp;</code> operator has some other useful bit masking applications. One such application is in determining whether one or more bits are set for a given sequence of bits. For example, say we want to check if the fifth bit is set for a given decimal number. Here is how we can use the <code>&amp;</code> operator to do that:</p>
<ul>
<li>First, create a bit mask that will be used to check whether the target bits (fifth bit, in this case) are set to 1. Every bit on the bit mask is set to 0 except the bits at the target positions, which are set to 1. The binary number literal can be used to easily achieve this:
<pre class="language-javascript hljs">const mask = 0b10000;</pre>
</li>
<li>Next, perform an <code>&amp;</code> operation using the decimal number and the bit mask as operands, and compare the result with the bit mask. If all the target bits are set for the decimal number, the result of the <code>&amp;</code> operation will be equal to the bit mask. Note that the <code>0</code> bits in the bit mask will effectively turn off the corresponding bits in the decimal number, because <code>A &amp; 0 = 0:</code>
<pre class="language-javascript hljs">// 34 => 100010
// (34 &amp; mask) => (100010 &amp; 010000) = 000000
console.log((34 &amp; mask) === mask); // false// 50 => 110010
// (50 &amp; mask) => (110010 &amp; 010000) = 010000
console.log((50 &amp; mask) === mask); // true</pre>
</li>
</ul>
<h4 id="even-odd">Even or odd</h4>
<p>The use of the <code>&amp;</code> operator in checking for set bits for a decimal number can be extended to check whether a given decimal number is even or odd. To achieve this, <code>1</code> is used as the bit mask (to determine whether the first bit or rightmost bit is set). For integers, the least significant bit (first bit or rightmost bit) can be used to determine whether the number is even or odd. If the least significant bit is turned on (set to <code>1</code>), the number is odd; otherwise, the number is even:</p>
<pre class="language-javascript hljs">function isOdd (int) {
  return (int &amp; 1) === 1;
}

function isEven (int) {
  return (int &amp; 1) === 0;
}

console.log(isOdd(34)); // false
console.log(isOdd(-63)); // true
console.log(isEven(-12)); // true
console.log(isEven(199)); // false
</pre>
<h3 id="useful-identities">Useful identities</h3>
<p>Before proceeding to the next operator, here are some useful identities for bitwise AND <code>&amp;</code> operations (for any signed 32-bit integer <code>A</code>):</p>
<pre class="language-javascript hljs">(A &amp; 0) === 0
(A &amp; ~A) === 0
(A &amp; A) === A
(A &amp; -1) === A
</pre>
<h2 id="bitwise-or">Bitwise OR (<code>|</code>)</h2>
<p>The <code>|</code> operator performs an OR operation on each pair of corresponding bits of its operands. The <code>|</code> operator returns <code>0</code> only if both bits are 0; otherwise, it returns <code>1</code>.</p>
<p>For a pair of bits, here are the possible values of an OR operation:</p>
<pre class="language-javascript hljs">(0 | 0) === 0
(0 | 1) === 1
(1 | 0) === 1
(1 | 1) === 1
</pre>
<h3 id="when-would-use-bitwise-or-operator">When would you use the bitwise OR operator?</h3>
<h4 id="turning-bits">Turning on bits</h4>
<p>In bit masking applications, the <code>|</code> operator can be used to ensure that certain bits in a sequence of bits are turned on (set to <code>1</code>). This is based on the fact that for any given bit <code>A</code>:</p>
<ul>
<li><code>(A | 0 = A)</code> — The bit remains unchanged when paired with a corresponding <code>0</code> bit</li>
<li><code>(A | 1 = 1)</code> — The bit is always turned on by a corresponding <code>1</code> bit</li>
</ul>
<p>For example, say we have an 8-bit integer and we want to ensure that all the even-position bits (second, fourth, sixth, eighth) are turned on (set to <code>1</code>). The <code>|</code> operator can be used to achieve this as follows:</p>
<ul>
<li>First, create a bit mask whose effect will be to turn on every even-positioned bit of an 8-bit integer. That bit mask will be <code>0b10101010</code>. Note that the even-positioned bits of the bit mask are set to <code>1</code>, while every other bit is set to <code>0</code></li>
<li>Next, perform an <code>|</code> operation using the 8-bit integer and the created bit mask:
<pre class="language-javascript hljs">const mask = 0b10101010;// 208 => 11010000// (208 | mask)
// ------------
// 11010000
// | 10101010
// ------------
// = 11111010
// ------------
// = 250 (decimal)console.log(208 | mask); // 250</pre>
</li>
</ul>
<h3 id="useful-identities">Useful identities</h3>
<p>Before proceeding to the next operator, here are some useful identities for bitwise OR <code>|</code> operations (for any signed 32-bit integer <code>A</code>):</p>
<pre class="language-javascript hljs">(A | 0) === A
(A | ~A) === -1
(A | A) === A
(A | -1) === -1
</pre>
<h2 id="bitwise-xor">Bitwise XOR (<code>^</code>)</h2>
<p>The <code>^</code> operator performs an XOR (exclusive-OR) operation on each pair of corresponding bits of its operands. The <code>^</code> operator returns <code>0</code> if both bits are the same (either 0 or 1); otherwise, it returns <code>1</code>.<br/>
For a pair of bits, here are the possible values of an XOR operation:</p>
<pre class="language-javascript hljs">(0 ^ 0) === 0
(0 ^ 1) === 1
(1 ^ 0) === 1
(1 ^ 1) === 0
</pre>
<h3 id="when-would-use-bitwise-xor-operator">When would you use the bitwise XOR operator?</h3>
<h4 id="toggling-bits">Toggling bits</h4>
<p>In bit masking applications, the <code>^</code> operator is commonly used for toggling or flipping certain bits in a sequence of bits. This is based on the fact that for any given bit <code>A</code>:</p>
<ul>
<li>The bit remains unchanged when paired with a corresponding <code>0</code> bit, e.g., <code>(A ^ 0 = A)</code></li>
<li>The bit is always toggled when paired with a corresponding <code>1</code> bit:<br/>
<code>(A ^ 1 = 1)</code> — if <code>A</code> is <code>0</code><br/>
<code>(A ^ 1 = 0)</code> — if <code>A</code> is <code>1</code></li>
</ul>
<p>For example, say we have an 8-bit integer and we want to ensure that every bit is toggled except the least significant (first) and most significant (eighth) bits. The <code>^</code> operator can be used to achieve this as follows:</p>
<ul>
<li>First, create a bit mask whose effect will be to toggle every bit of an 8-bit integer except the least significant and most significant bits. That bit mask will be <code>0b01111110</code>. Note that the bits to be toggled are set to <code>1</code>, while every other bit is set to <code>0</code></li>
<li>Next, perform an <code>^</code> operation using the 8-bit integer and the created bit mask:
<pre class="language-javascript hljs">const mask = 0b01111110;// 208 => 11010000// (208 ^ mask)
// ------------
// 11010000
// ^ 01111110
// ------------
// = 10101110
// ------------
// = 174 (decimal)console.log(208 ^ mask); // 174</pre>
</li>
</ul>
<h3 id="useful-identities">Useful identities</h3>
<p>Before proceeding to the next operator, here are some useful identities for bitwise XOR <code>^</code> operations (for any signed 32-bit integer <code>A</code>):</p>
<pre class="language-javascript hljs">(A ^ 0) === A
(A ^ ~A) === -1
(A ^ A) === 0
(A ^ -1) === ~A
</pre>
<p>From the identities listed above, it is evident that an XOR operation on <code>A</code> and <code>-1</code> is equivalent to a NOT operation on <code>A</code>. This means the <code>foundIndex()</code> function from before can also be written like:</p>
<pre class="language-javascript hljs">function foundIndex(index) {
  return Boolean(index ^ -1);
}
</pre>
<h2 id="left-shift">Left shift (<code>&lt;&lt;</code>)</h2>
<p>The left shift (<code>&lt;&lt;</code>) operator takes two operands. The first operand is an integer, while the second operand is the number of bits of the first operand to be shifted to the left. Zero (<code>0</code>) bits are shifted in from the right, while the excess bits that have been shifted off to the left are discarded.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>For example, consider the integer <code>170</code>. Let’s say we want to shift three bits to the left. We can use the <code>&lt;&lt;</code> operator as follows:</p>
<pre class="language-javascript hljs">// 170 => 00000000000000000000000010101010

// 170 &lt;&lt; 3
// --------------------------------------------
//    (000)00000000000000000000010101010(***)
// --------------------------------------------
//  = (***)00000000000000000000010101010(000)
// --------------------------------------------
//  = 00000000000000000000010101010000
// --------------------------------------------
//  = 1360 (decimal)

console.log(170 &lt;&lt; 3); // 1360
</pre>
<p>The left shift bitwise operator (<code>&lt;&lt;</code>) can be defined using the following JavaScript expressions:</p>
<pre class="language-javascript hljs">(A &lt;&lt; B) => A * (2 ** B) => A * Math.pow(2, B)
</pre>
<p>Hence, looking back at the previous example:</p>
<pre class="language-javascript hljs">(170 &lt;&lt; 3) => 170 * (2 ** 3) => 170 * 8 => 1360
</pre>
<h3 id="when-use-left-shift-operator">When would you use the left shift operator?</h3>
<h4 id="color-conversion-rgb-hex">Color conversion: RGB to hex</h4>
<p>One very useful application of the left shift (<code>&lt;&lt;</code>) operator is converting colors from an RGB representation to a hexadecimal representation.</p>
<p>The color value for each component of an RGB color is between <code>0 - 255</code>. Simply put, each color value can be represented perfectly by 8 bits:</p>
<pre class="language-javascript hljs">  0 => 0b00000000 (binary) => 0x00 (hexadecimal)
255 => 0b11111111 (binary) => 0xff (hexadecimal)
</pre>
<p>Thus, the color itself can be perfectly represented by 24 bits (8 bits each for red, green, and blue components). The first 8 bits starting from the right will represent the blue component, the next 8 bits will represent the green component, and the 8 bits after that will represent the red component:</p>
<pre class="language-javascript hljs">(binary) => 11111111 00100011 00010100

   (red) => 11111111 => ff => 255
 (green) => 00100011 => 23 => 35
  (blue) => 00010100 => 14 => 20

   (hex) => ff2314
</pre>
<p>Now that we understand how to represent the color as a 24-bit sequence, let’s see how we can compose the 24 bits of the color from the values of the color’s individual components. Let’s say we have a color represented by <code>rgb(255, 35, 20)</code>. Here is how we can compose the bits:</p>
<pre class="language-javascript hljs">  (red) => 255 => 00000000 00000000 00000000 11111111
(green) =>  35 => 00000000 00000000 00000000 00100011
 (blue) =>  20 => 00000000 00000000 00000000 00010100

// Rearrange the component bits and pad with zeroes as necessary
// Use the left shift operator

  (red &lt;&lt; 16) => 00000000 11111111 00000000 00000000
 (green &lt;&lt; 8) => 00000000 00000000 00100011 00000000
       (blue) => 00000000 00000000 00000000 00010100

// Combine the component bits together using the OR (|) operator
// ( red &lt;&lt; 16 | green &lt;&lt; 8 | blue )

      00000000 11111111 00000000 00000000
    | 00000000 00000000 00100011 00000000
    | 00000000 00000000 00000000 00010100
// -----------------------------------------
      00000000 11111111 00100011 00010100
// -----------------------------------------
</pre>
<p>Now that the procedure is pretty clear, here is a simple function that takes the RGB values of a color as an input array and returns the corresponding hexadecimal representation of the color based on the above procedure:</p>
<pre class="language-javascript hljs">function rgbToHex ([red = 0, green = 0, blue = 0] = []) {
  return `#${(red &lt;&lt; 16 | green &lt;&lt; 8 | blue).toString(16)}`;
}
</pre>
<p>With our function snippet that implements the left shift operator, we can create a simple page that shows how <a href="https://blog.logrocket.com/how-to-manipulate-css-colors-with-javascript-fb547113a1b8/">colors can be converted from RGB to Hex codes</a> and sets two rectangles’ colors using both codes. The full HTML code for this is <a href="https://github.com/ibywaks/simple-color-converter">available here</a>:</p>
<p><img             class="aligncenter size-full wp-image-168621 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/08/code-color-converter.gif" alt="Code Color Converter" width="685" height="749"  /><noscript><img               class="aligncenter size-full wp-image-168621" src="http://blog.logrocket.com/wp-content/uploads/2019/08/code-color-converter.gif" alt="Code Color Converter" width="685" height="749"/></noscript></p>
<h2 id="sign-propagating-right-shift">Sign-propagating right shift</h2>
<p>The sign-propagating right shift (<code>>></code>) operator takes two operands. The first operand is an integer, while the second operand is the number of bits of the first operand to be shifted to the right.</p>
<p>The excess bits that have been shifted off to the right are discarded, whereas copies of the sign bit (leftmost bit) are shifted in from the left. As a result, the sign of the integer is always preserved, hence the name sign-propagating right shift.</p>
<p>For example, consider the integers <code>170</code> and <code>-170</code>. Let’s say we want to shift three bits to the right. We can use the <code>>></code> operator as follows:</p>
<pre class="language-javascript hljs">//  170 => 00000000000000000000000010101010
// -170 => 11111111111111111111111101010110

// 170 >> 3
// --------------------------------------------
//    (***)00000000000000000000000010101(010)
// --------------------------------------------
//  = (000)00000000000000000000000010101(***)
// --------------------------------------------
//  = 00000000000000000000000000010101
// --------------------------------------------
//  = 21 (decimal)

// -170 >> 3
// --------------------------------------------
//    (***)11111111111111111111111101010(110)
// --------------------------------------------
//  = (111)11111111111111111111111101010(***)
// --------------------------------------------
//  = 11111111111111111111111111101010
// --------------------------------------------
//  = -22 (decimal)

console.log(170 >> 3); // 21
console.log(-170 >> 3); // -22
</pre>
<p>The sign-propagating right shift bitwise operator (<code>>></code>) can be described by the following JavaScript expressions:</p>
<pre class="language-javascript hljs">(A >> B) => Math.floor(A / (2 ** B)) => Math.floor(A / Math.pow(2, B))
</pre>
<p>Thus, looking back at the previous example:</p>
<pre class="language-javascript hljs">(170 >> 3) => Math.floor(170 / (2 ** 3)) => Math.floor(170 / 8) => 21
(-170 >> 3) => Math.floor(-170 / (2 ** 3)) => Math.floor(-170 / 8) => -22
</pre>
<h3 id="use-cases-sign-propogating-right-shift-operator">Use cases for the Sign-Propagating Right Shift operator</h3>
<h4 id="color-extraction">Color extraction</h4>
<p>One very good application of the right shift (<code>>></code>) operator is extracting RGB color values from a color. When the color is represented in RGB, it is very easy to distinguish between the red, green, and blue color component values. However, it will take a bit more effort for a color represented as hexadecimal.</p>
<p>In the previous section, we saw the procedure for composing the bits of a color from the bits of its individual components (red, green, and blue). If we work through that procedure backwards, we will be able to extract the values of the individual components of the color. Let’s give that a shot.</p>
<p>Let’s say we have a color represented by the hexadecimal notation <code>#ff2314</code>. Here is the signed 32-bit representation of the color:</p>
<pre class="language-javascript hljs">(color) => ff2314 (hexadecimal) => 11111111 00100011 00010100 (binary)

// 32-bit representation of color
00000000 11111111 00100011 00010100
</pre>
<p>To get the individual components, we will right-shift the color bits by multiples of 8 as necessary until we get the target component bits as the first 8 bits from the right. Since the most significant bit of the 32 bits for the color is <code>0</code>, we can safely use the sign-propagating right shift (<code>>></code>) operator for this:</p>
<pre class="language-javascript hljs">color => 00000000 11111111 00100011 00010100

// Right shift the color bits by multiples of 8
// Until the target component bits are the first 8 bits from the right

  red => color >> 16
      => 00000000 11111111 00100011 00010100 >> 16
      => 00000000 00000000 00000000 11111111

green => color >> 8
      => 00000000 11111111 00100011 00010100 >> 8
      => 00000000 00000000 11111111 00100011

 blue => color >> 0 => color
      => 00000000 11111111 00100011 00010100
</pre>
<p>Now that we have the target component bits as the first 8 bits from the right, we need a way to mask out every other bits except the first 8 bits. That brings us back to the AND (<code>&amp;</code>) operator. Remember that the <code>&amp;</code> operator can be used to ensure that certain bits are turned off.</p>
<p>Let’s start by creating the required bit mask. That would look like this:</p>
<pre class="language-javascript hljs">mask => 00000000 00000000 00000000 11111111
     => 0b11111111 (binary)
     => 0xff (hexadecimal)
</pre>
<p>With the bit mask ready, we can carry out an AND (<code>&amp;</code>) operation on each of the results from the previous right-shifting operations using the bit mask to extract the target component bits:</p>
<pre class="language-javascript hljs">  red => color >> 16 &amp; 0xff
      =>   00000000 00000000 00000000 11111111
      => &amp; 00000000 00000000 00000000 11111111
      => = 00000000 00000000 00000000 11111111
      =>   255 (decimal)

green => color >> 8 &amp; 0xff
      =>   00000000 00000000 11111111 00100011
      => &amp; 00000000 00000000 00000000 11111111
      => = 00000000 00000000 00000000 00100011
      =>   35 (decimal)

 blue => color &amp; 0xff
      =>   00000000 11111111 00100011 00010100
      => &amp; 00000000 00000000 00000000 11111111
      => = 00000000 00000000 00000000 00010100
      =>   20 (decimal)
</pre>
<p>Based on the above procedure, here is a simple function that takes a hex color string (with six hexadecimal digits) as input and returns the corresponding array of RGB color component values:</p>
<pre class="language-javascript hljs">function hexToRgb (hex) {
  hex = hex.replace(/^#?([0-9a-f]{6})$/i, '$1');
  hex = Number(`0x${hex}`);

  return [
    hex >> 16 &amp; 0xff, // red
    hex >> 8 &amp; 0xff,  // green
    hex &amp; 0xff        // blue
  ];
}
</pre>
<p>With this function, we can create an HTML page to illustrate how colors can be converted from Hex codes to RGB and sets two rectangle colors using each codes. The HTML code for this is <a href="https://github.com/ibywaks/simple-color-converter">available here</a>:</p>
<p><img             class="aligncenter size-full wp-image-168622 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/08/convert-hex-color-code-rgb.gif" alt="Convert HEX Color Code To RGB" width="672" height="749"  /><noscript><img               class="aligncenter size-full wp-image-168622" src="http://blog.logrocket.com/wp-content/uploads/2019/08/convert-hex-color-code-rgb.gif" alt="Convert HEX Color Code To RGB" width="672" height="749"/></noscript></p>
<h2 id="zero-fill-right-shift">Zero-fill right shift (<code>>>></code>)</h2>
<p>The zero-fill right shift (<code>>>></code>) operator behaves pretty much like the sign-propagating right shift (<code>>></code>) operator. However, the key difference is in the bits that are shifted in from the left.</p>
<p>As the name implies, <code>0</code> bits are always shifted in from the left. As a result, the <code>>>></code> operator always returns an unsigned 32-bit integer because the sign bit of the resulting integer is always <code>0</code>. For positive integers, both <code>>></code> and <code>>>></code> will always return the same result.</p>
<p>For example, consider the integers <code>170</code> and <code>-170</code>. Let’s say we want to shift three bits to the right. We can use the <code>>>></code> operator as follows:</p>
<pre class="language-javascript hljs">//  170 => 00000000000000000000000010101010
// -170 => 11111111111111111111111101010110

// 170 >>> 3
// --------------------------------------------
//    (***)00000000000000000000000010101(010)
// --------------------------------------------
//  = (000)00000000000000000000000010101(***)
// --------------------------------------------
//  = 00000000000000000000000000010101
// --------------------------------------------
//  = 21 (decimal)

// -170 >>> 3
// --------------------------------------------
//    (***)11111111111111111111111101010(110)
// --------------------------------------------
//  = (000)11111111111111111111111101010(***)
// --------------------------------------------
//  = 00011111111111111111111111101010
// --------------------------------------------
//  = 536870890 (decimal)

console.log(170 >>> 3); // 21
console.log(-170 >>> 3); // 536870890
</pre>
<h2 id="config-flags">Config flags</h2>
<p>Before we wrap up this tutorial, let’s consider another common application of bitwise operators and bit masking: config flags.</p>
<p>Let’s say we have a function that accepts a couple of Boolean options that can be used to control how the function runs or the kind of value it returns. One possible way to create this function is by passing all the options as arguments to the function, probably with some default values, like so:</p>
<pre class="language-javascript hljs">function doSomething (optA = true, optB = true, optC = false, optD = true, ...) {
  // something happens here...
}
</pre>
<p>Surely, this isn’t so convenient. Here are two cases in which this approach starts getting quite problematic:</p>
<ul>
<li>Imagine that we have more than 10 Boolean options. We just can’t define our function with that many parameters</li>
<li>Imagine that we just want to specify a different value for the fifth and ninth options and leave the others with their default values. We will need to call the function, passing the default values as arguments for all the other options while passing the desired values for the fifth and ninth options</li>
</ul>
<p>One way to solve the issues with the previous approach would be to use an object for the config options, like so:</p>
<pre class="language-javascript hljs">const defaultOptions = {
  optA: true,
  optB: true,
  optC: false,
  optD: true,
  ...
};

function doSomething (options = defaultOptions) {
  // something happens here...
}
</pre>
<p>This approach is very elegant, and you’ve most likely seen it used, or even used it yourself at some point or another. With this approach, however, the <code>options</code> argument will always be an object, which can be considered overkill for just configuration options.</p>
<p>If all the options take Boolean values, we could use an integer instead of an object to represent the options. In this case, certain bits of the integer will be mapped to designated options. If a bit is turned on (set to <code>1</code>), the designated option’s value is <code>true</code>; otherwise, it is <code>false</code>.</p>
<p>We can demonstrate this approach using a simple example. Let’s say we have a function that normalizes the items of an array list containing numbers and returns the normalized array. The returned array can be controlled by three options, namely:</p>
<ul>
<li><strong>Fraction:</strong> divides each item of the array by the maximum item in the array</li>
<li><strong>Unique:</strong> removes duplicate items from the array</li>
<li><strong>Sorted:</strong> sorts the items of the array from lowest to highest</li>
</ul>
<p>We can use an integer with three bits to represent these options, each bit being mapped to an option. The following code snippet shows the option flags:</p>
<pre class="language-javascript hljs">const LIST_FRACTION = 0x1; // (001)
const LIST_UNIQUE = 0x2;   // (010)
const LIST_SORTED = 0x4;   // (100)
</pre>
<p>To activate one or more options, the <code>|</code> operator can be used to combine the corresponding flags as necessary. For example, we can create a flag that activates all the options, as follows:</p>
<pre class="language-javascript hljs">const LIST_ALL = LIST_FRACTION | LIST_UNIQUE | LIST_SORTED; // (111)
</pre>
<p>Again, let’s say we want only the <strong>fraction</strong> and <strong>sorted</strong> options to be activated by default. We could use the <code>|</code> operator again, as follows:</p>
<pre class="language-javascript hljs">const LIST_DEFAULT = LIST_FRACTION | LIST_SORTED; // (101)
</pre>
<p>While this doesn’t look bad with just three options, it tends to become quite messy when there are so many options, and a lot of them are required to be activated by default. In such a scenario, a better approach will be to deactivate the unwanted options using the <code>^</code> operator:</p>
<pre class="language-javascript hljs">const LIST_DEFAULT = LIST_ALL ^ LIST_UNIQUE; // (101)
</pre>
<p>Here, we have the <code>LIST_ALL</code> flag that activates all the options. We then use the <code>^</code> operator to deactivate the unique option, leaving other options activated as required.</p>
<p>Now that we have the option flags ready, we can go ahead and define the <code>normalizeList()</code> function:</p>
<pre class="language-javascript hljs">function normalizeList (list, flag = LIST_DEFAULT) {
  if (flag &amp; LIST_FRACTION) {
    const max = Math.max(...list);
    list = list.map(value => Number((value / max).toFixed(2)));
  }
  if (flag &amp; LIST_UNIQUE) {
    list = [...new Set(list)];
  }
  if (flag &amp; LIST_SORTED) {
    list = list.sort((a, b) => a - b);
  }
  return list;
}
</pre>
<p>To check if an option is activated, we use the <code>&amp;</code> operator to check if the corresponding bit of the option is turned on (set to <code>1</code>). The <code>&amp;</code> operation is carried out with the <code>flag</code> argument passed to the function and the corresponding flag for the option, as demonstrated in the following code snippet:</p>
<pre class="language-javascript hljs">// Checking if the unique option is activated
// (flag &amp; LIST_UNIQUE) === LIST_UNIQUE (activated)
// (flag &amp; LIST_UNIQUE) === 0 (deactivated)

flag &amp; LIST_UNIQUE
</pre>
<h2 id="summary">Summary</h2>
<p>Here is a recap of the JavaScript Bitwise operators we covered in this article, their symbols, and what each of them does.</p>
<div>
<table class="table-top-header" data-ace-table-col-widths="175;120;248">
<tbody>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Operator</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><strong>Symbol</strong></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><strong>Description</strong></div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise NOT</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>~</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes one operand</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It returns the complement of the given operand, e.g., ~-1 is 0</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise AND</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>&amp;</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands and operates on a pair of bits</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It is the equivalent of multiplying two bits, e.g., <code>1 x 0</code> is equal to <code>(1 &amp; 0)</code></li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It will only return 1 when both bits in the pair are 1, otherwise it returns 0</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul>
<li >
<ul class="listtype-bullet listindent1 list-bullet1">
<li>e.g.,<code>(1 &amp; 1) === 1</code> and <code>(1 &amp; 0) === 0</code></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise OR</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>|</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands and operates on a pair of bits</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It returns 1 if at least one of the bits in the pair is 1; otherwise it returns 0</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul>
<li >
<ul class="listtype-bullet listindent1 list-bullet1">
<li>e.g., <code>(1 | 0) === 1</code> and <code>(0 | 0) === 0</code></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Bitwise XOR</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>^</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands and operates on a pair of bits</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It returns 0 if both bits are the same; otherwise it returns 1</li>
</ul>
</div>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz81zz86zr286jz65zz122zz65zspgz90zfiz78zg9z76zz67zz81zz79zqdgz85z75z74zz122z line-list-type-bullet ace-ltr" dir="auto">
<ul>
<li >
<ul class="listtype-bullet listindent1 list-bullet1">
<li>e.g., <code>(0 ^ 0) === 0</code>, <code>(1 ^ 1) === 0</code>, and <code>(1 ^ 0) === 1</code></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto"><b>Left Shift</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>&lt;&lt;</code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands. The first operand is an integer and the second operand represents the number of bits to shift left.</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>When this operator is used, bits are shifted in from the right and excess bits on the left are discarded</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz81zz86zr286jz65zz122zz65zspgz90zfiz78zg9z76zz67zz81zz79zqdgz85z75z74zz122z ace-ltr" dir="auto"><b>Sign-Propagating Right Shift</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>>></code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>It takes two operands. The first operand is an integer and the second operand represents the number of bits to shift right</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>When this operator is used, the sign bit(i.e.,leftmost bit) of the first operand are shifted in from the left and excess bits on the right are discarded</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>With this operator, the sign of the integer operand is always preserved</li>
</ul>
</div>
</td>
</tr>
<tr>
<td>
<div class="ace-line gutter-author-d-1gg9uz65z1iz85zgdz68zmqkz84zo2qowz81zz86zr286jz65zz122zz65zspgz90zfiz78zg9z76zz67zz81zz79zqdgz85z75z74zz122z ace-ltr" dir="auto"><b>Zero-Fill Right Shift</b></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 ace-ltr" dir="auto" ><code>>>></code></div>
</td>
<td>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>This behaves similar to the sign-propagating right shift operator  (<code>>>></code>) except that zero bits are always shifted in from the left</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>This operator always returns an unsigned integer</li>
</ul>
</div>
<div class="ace-line gutter-author-d-iz88z86z86za0dz67zz78zz78zz74zz68zjz80zz71z9iz90z956ocz81zhz67z6uaz79znhjvr0mz87zz89zz81zsz69zvcz77zz76zz74zz88z3 line-list-type-bullet ace-ltr" dir="auto">
<ul class="listtype-bullet listindent1 list-bullet1">
<li>For positive integers, <code>>></code> and <code>>>></code> will always return the same result</li>
</ul>
</div>
</td>
</tr>
</tbody>
</table>
</div>
<h2>Conclusion</h2>
<p>JavaScript bitwise operators, though sparingly used, have interesting use cases, as we’ve seen in this article. I strongly hope that the insights you’ve gotten in the course of reading this article will find expression in your day-to-day coding from now on. Happy coding!</p><div class="code-block code-block-27" >
<div class="blog-plug inline-plug vanilla-javascript-cta"><h2><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Debug JavaScript errors more easily by understanding the context</h2>
<p>Debugging code is always a tedious task. But the more you understand your errors the easier it is to fix them.</p>
<p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> allows you to understand these errors in new and unique ways. Our frontend monitoring solution tracks user engagement with your JavaScript frontends to give you the ability to find out exactly what the user did that led to an error.</p>
<a href="https://lp.logrocket.com/blg/javascript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2020/06/reproduce-javascript-errors.gif" alt="LogRocket Dashboard Free Trial Banner"/></noscript></a>
<p >LogRocket records console logs, page load times, stacktraces, slow network requests/responses with headers + bodies, browser metadata, and custom logs. Understanding the impact of your JavaScript code will never be easier!</p>
<a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-29 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-29 .fadeOut {
    opacity:0 !important;
}

.code-block-29 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-4261" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-4261" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-4261" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-javascript-bitwise-operators/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-javascript-bitwise-operators/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to R8 and code shrinking in Android - LogRocket Blog</title>
			<link>https://blog.logrocket.com/r8-code-shrinking-android-guide/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/r8-code-shrinking-android-guide/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to R8 and code shrinking in Android - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/r8-code-shrinking-android-guide/">A guide to R8 and code shrinking in Android - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/anvithbhat/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/anvith-bhat.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/anvith-bhat.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/anvithbhat/">
Anvith Bhat <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm passionate about creating stuff around Android. Be wary, observations may be interlaced with humor.</span>
</div>
</div>
<h1 class="posttitle">A guide to R8 and code shrinking in Android</h1>
<p>
<span class="post-date"><time class="post-date">
January 18, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1896</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<article class="article-post">
<p>Code shrinking is an approach that allows us to generate smaller APKs by removing unused code or refactoring existing code, resulting in a smaller footprint. In addition to shrinking, obfuscating is another tactic that allows us to guard our Android apps against reverse engineering.</p>
<p>Using both of these strategies will ensure that your app is faster to download and more difficult to modify by others.</p>
<p>In this post, we’ll cover:</p>
<ul>
<li><a href="#r8-vs-proguard">R8 vs. Proguard</a></li>
<li><a href="#stages-r8">Stages in R8</a></li>
<li><a href="#configuring-code-shrinking">Configuring code shrinking</a></li>
<li><a href="#understanding-proguard-rule-schema">Understanding the Proguard rule schema</a></li>
<li><a href="#writing-your-own-r8-rules">Writing your own R8 rules</a></li>
<li><a href="#resource-shrinking">Resource shrinking</a></li>
<li><a href="#debugging-r8-errors">Debugging R8 errors</a></li>
<li><a href="#aggressive-shrinking-options">Aggressive shrinking options</a></li>
</ul>
<h2 id="r8-vs-proguard">R8 vs. Proguard</h2>
<p>In the early versions of Android, code shrinking and optimization were delegated to a tool called <a href="https://www.guardsquare.com/proguard">Proguard</a>. However, since Android Gradle Plugin (AGP) v 3.4.0, Android has used the <a href="https://android-developers.googleblog.com/2018/11/r8-new-code-shrinker-from-google-is.html">R8 compiler</a>.</p>
<p>While both tools help with code compaction, R8 has richer functionality than code shrinking. For starters, R8 has limited support for Kotlin, whereas Proguard was built for Java toolchains. R8 achieves better inlining and outlining (extracting common code into a function) than Proguard, whereas the latter is better at propagating constant arguments.</p>
<p>Speaking of the actual code compaction process, R8 performs better by achieving 10 percent compaction, as opposed to 8.5 percent for Proguard.</p>
<h2 id="stages-r8">Stages in R8</h2>
<p>The R8 compiler does various things to reduce the size of your final APK. Some of these include:</p>
<ul>
<li><strong>Desugaring</strong>: This allows us to use Java 8 and above API features without worrying about support, the R8 compiler handles back-porting newer features used in your code to older java APIs.</li>
<li><strong>Code shrinking</strong>: This is the stage where R8 removes unused code from your app, including unused code in library dependencies</li>
<li><strong>Resource shrinking</strong>: Once it’s done shrinking code, R8 identifies resources that are unused and eliminates unused strings, drawables, etc.</li>
<li><strong>Obfuscation:</strong> At this stage, R8 ensures your classes and their fields are renamed and possibly repackaged as well in order to protect it from reverse engineering. This process generates a mapping file, which can be used to reobtain the actual entity names if needed</li>
<li><strong>Optimizing code</strong>: During code optimization, R8 looks to reduce your app footprint and/or improve efficiency further, by removing branches of your code that are not reachable (as opposed to classes/files). It uses advanced optimization rules, like inlining a method at the call site when it was only called from one place
<ul>
<li>Other techniques include vertical class merging, where, if an interface has only one implementation, it merges both of them under a single class</li>
</ul>
</li>
</ul>
<p>Once all of the above steps are completed, R8 converts the bytecode into dexcode by a process called dexing. Earlier, this was a part of D8 compiler, but has now been integrated into the R8 compiler.</p>
<p>Now that we know a bit about the R8 compiler, let’s see how code shrinking actually works.</p>
<h2 id="configuringcodeshrinking">Configuring code shrinking</h2>
<p>In Android, we can configure code shrinking by setting the <code>minifyEnabled</code> flag as <code>true</code> in your <code>build.gradle</code> file. Optionally, you may also enable <code>shrinkResources</code>to remove unneeded resources.</p>
<pre class="language-kotlin hljs">buildTypes{
        release{
            minifyEnabled true
            shrinkResources true
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt                           '), 'proguard-rules.pro'
        }
}
</pre>
<p>Code shrinking starts by examining what are called entry points. Entry points are declared in a config file and made available via the <code>proguardFiles</code> parameter in the <code>build.gradle</code>.</p>
<p>Once R8 has a set of entry points, it begins searching for all classes and entities that are reachable from these entry points. It proceeds to build a list of such tokens. Any token that isn’t reachable is stripped from the final output.</p>
<p>This process is generally not foolproof because:</p>
<ul>
<li>Some of our code may use reflection to lookup classes, which makes it difficult for the compiler to know whether a particular class is used or not</li>
<li>Your app may call a method from the native side via JNI. Since R8 is designed to work with Kotlin/Java code rather than native, we need to direct it to keep these classes</li>
</ul>
<p>Many of these entry points are defined in the <code>proguard-android-optimize.txt</code> file made available via the AGP plugin. Here’s a partial snapshot of what it looks like:</p>
<p><img             class="aligncenter size-full wp-image-154620 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/entry-points-defined-agp.png" alt="The entry points are defined in the proguard-android-optimize file" width="730" height="242"    /><noscript><img               class="aligncenter size-full wp-image-154620" src="https://blog.logrocket.com/wp-content/uploads/2023/01/entry-points-defined-agp.png" alt="The entry points are defined in the proguard-android-optimize file" width="730" height="242"  /></noscript></p>
<p>Let’s go over what the two rules above mean:</p>
<ol>
<li>Retains all functions that getters and setters present in classes that extend the <code>View</code>, thus retaining the <code>View</code> classes as well</li>
<li>Retain all functions of Activities that match the signature of receiving a single <code>View</code> parameter, namely click listeners used in the XML, which are looked up reflectively</li>
</ol>
<p>Next, let’s get to know the schema that powers R8.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h2 id="understanding-proguard-rule-schema">Understanding the Proguard rule schema</h2>
<p>Though we’ll be discussing these as Proguard rules, they are the same rules that configure R8 as well. Let’s take deeper dive into how to write them.</p>
<p>A typical R8 or Proguard rule consists of three sections:</p>
<ol>
<li><strong>A keep option:</strong> A keep option defines “whom” to retain for, as follows:
<ul>
<li><code>keep</code> ensures we retain the target that matches the rule</li>
<li><code>keepclass</code> ensures we retain the class that matches the rule</li>
<li><code>keepclasswithmembers</code> retains classes whose members match the rule</li>
<li>Similarly, we have <code>keepclassmembers</code> to retain only the members of a class</li>
</ul>
</li>
<li><strong>A token type</strong>: This denotes the type of target entity of our rule, i.e., <code>class</code>, <code>enum</code> or <code>interface</code></li>
<li><strong>Wild cards</strong>: These allow us to define different formats to match different tokens, as follows:
<ul>
<li><strong><code>?</code></strong>: Matches a single character in a name. So, for a rule like<br/>
<code>keep class T???Provider</code>, we must ensure we retain both the <code>TaskProvider</code> and <code>TrapProvider</code> classes</li>
<li><strong><code>*</code></strong>: Matches any part of a name excluding the package separator. This ensures a rule like <code>keep class com.demo.*Provider extends ActionProvider</code> matches <code>com.demo.TaskProvider</code>, but doesn’t match <code>com.demo.internal.StorageProvider</code></li>
<li><strong><code>**</code></strong>: Matches any part of a name including the package separator. In the above example, it would even match the <code>StorageProvider</code> class</li>
<li><strong><code>&lt;n></code></strong>: Allows us to match dynamic elements within our rule. For example, if we wish to have classes that fit the following template:
<pre class="language-kotlin hljs">class TaskProvider { 
   fun getTaskKey():  String
}

class StorageProvider { 
   fun getStorageKey(): String
}
</pre>
<p>we can write:</p>
<pre class="language-kotlin hljs">-keepclasseswithmembers class *Provider {
   public java.lang.String get&lt;1>Key();
}
</pre>
</li>
</ul>
</li>
</ol>
<p>This is because our first wildcard matcher, <code>*</code>, matches <code>Task</code> and <code>Storage</code>, which we can reuse to define the dynamic parts of our function’s name.</p>
<h2 id="writing-your-own-r8-rules">Writing your own R8 rules</h2>
<p>The R8 or Proguard rules shipped via AGP are generally sufficient, however, a need may arise to write your own rules. While writing R8 rules, we should strive to avoid including more than what’s needed in our keep rules to ensure that we can compress most of our code. Also, all classes we specify need to be fully qualified, i.e., they must include the package name.</p>
<p>Typically, enums used in XML files are the culprits stripped away by R8. But we can define our own rule to keep them, as follows:</p>
<pre class="language-kotlin hljs">-keep enum com.demo.main.MediaType{ *; }
</pre>
<blockquote><p>Note: The <code>{*;}</code> in the braces implies that we intend to preserve all members of the class/enum.</p></blockquote>
<p>Another rule is to preserve class constructors; here’s how you’d do it using the keyword <code>init</code>:</p>
<pre class="language-kotlin hljs">-keep public class * extends android.view.View {
    public &lt;init>(android.content.Context);
}
</pre>
<p>Occasionally, there may be entities included in your app that are reflectively looked up via their fully qualified name within jars. You’d want to preserve only the names and prevent R8 from obfuscating or renaming the class. You can retain names by using the <code>keepnames</code> qualifier:</p>
<pre class="language-kotlin hljs">-keepnames class com.ext.library.ServiceProvider
</pre>
<p>Another way to retain classes is to annotate them with the <code>@Keep</code> annotation. These classes are retained via the <a href="https://github.com/androidx/androidx/blob/androidx-main/annotation/annotation/src/jvmMain/resources/META-INF/proguard/androidx-annotations.pro"><code>androidx.annotation</code> library</a> Proguard rule. However, you can only use this on source code you control; additionally, this is a more generic solution and will result in the inclusion of members that aren’t used.</p>
<h2 id="resource-shrinking">Resource shrinking</h2>
<p>Resource shrinking is typically done after code shrinking, but instead of using Proguard rules, we can specify resource retention using a <code>keep.xml</code> in our <code>res/raw</code> folder. We generally do not need this unless we are looking for resources via <a href="https://developer.android.com/reference/android/content/res/Resources#getIdentifier(java.lang.String,%20java.lang.String,%20java.lang.String)"><code>Resources.getIdentifier()</code></a>.</p>
<p>In such cases, the resource shrinker behaves conservatively. Below is an example:</p>
<pre class="language-kotlin hljs">val name = String.format("ic_%1d", angle + 1)
val res = resources.getIdentifier(name, "drawable", packageName)
</pre>
<p>The shrinker uses pattern matching and retains all assets, starting with <code>ic_</code>. We can also retain some assets explicitly in our <code>keep.xml</code>, as follows:</p>
<pre class="language-xml hljs">&lt;?xml version="1.0" encoding="utf-8"?>
&lt;resources xmlns:tools="http://schemas.android.com/tools"
    tools:keep="@drawable/ic_sport*, @drawable/ic_banner_option, @layout/item_header"
    tools:discard="@drawable/wip" />
</pre>
<blockquote><p>Note: The <code>discard</code> option ensures the <code>wip</code> is removed from the final build if unused.</p></blockquote>
<h2 id="debugging-r8-errors">Debugging R8 errors</h2>
<p>Occasionally while using R8, you’ll end up with a missing resource error in the form of <code>ClassNotFoundException</code> or <code>FieldNotFoundException</code>. However, since the trace is obfuscated, we’ll need to use a tool called retrace.</p>
<p>Retrace is usually present on the following path: <code>Android/sdk/tools/proguard/bin</code>. You may optionally use the GUI-based route by using the <a href="http://proguardgui.sh">proguardgui.sh command</a>, as shown below:</p>
<p><img             class="aligncenter size-full wp-image-154622 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/proguardgui-sh-command.png" alt="Using the Proguard GUI shell command" width="730" height="428"    /><noscript><img               class="aligncenter size-full wp-image-154622" src="https://blog.logrocket.com/wp-content/uploads/2023/01/proguardgui-sh-command.png" alt="Using the Proguard GUI shell command" width="730" height="428"  /></noscript></p>
<p>Once you’ve figured out which class or member is causing this issue, you can easily fix this by including a specific keep rule for it:</p>
<pre class="language-kotlin hljs">-keep class com.demo.activities.MainActivity
</pre>
<p>R8 generally strips meta properties like line numbers and source file names. We can retain this information by using <code>keepattributes</code>, as shown in the below rule:</p>
<pre class="language-kotlin hljs">-keepattributes SourceFile, LineNumberTable
</pre>
<p>You can find the complete list of attributes <a href="https://www.guardsquare.com/manual/configuration/attributes">here</a>.</p>
<p>Occasionally, you may see that a member that was supposed to be removed from the final APK has not actually been removed. We can figure out why by using <code>whyareyoukeeping</code>:</p>
<pre class="language-kotlin hljs">-whyareyoukeeping class com.android.AndroidApplication
</pre>
<p>This will print the below output:</p>
<pre class="language-kotlin hljs">com.android.AndroidApplication
|- is referenced in keep rule:
|  /Users/anvith/Development/Android/project-demo/app/build/intermediates/aapt_proguard_file/release/aapt_rules.txt:3:1
</pre>
<p>Another useful tool while debugging is to list all the unused classes. This can be done using <code>printusage</code>, as follows:</p>
<pre class="language-kotlin hljs">-printusage
</pre>
<blockquote><p>A quick note about R8 rules: The most broad rules take precedence. So, if <code>libraryA</code> ships with a rule to include one method of a class, and `libraryB` is shipped with a rule to include all members, <code>libraryB</code>’s rule takes precedence.</p></blockquote>
<p>Lastly, if you wish to see classes matched by your rules, you may use the following command to observe the matched results:</p>
<pre class="language-kotlin hljs">-printseeds
</pre>
<h2 id="aggressive-shrinking-options">Aggressive shrinking options</h2>
<p>We can instruct R8 to be more aggressive by letting it run in non-compat mode and declaring the following property in the <code>gradle.properties</code> file:</p>
<pre class="language-kotlin hljs">android.enableR8.fullMode=true</pre>
<p>This flag results in some of the more rigorous optimizations, like:</p>
<ul>
<li>Avoid retaining the default constructor unless specified explicitly</li>
<li>Attributes (like <code>Signature</code>, <code>Annotations</code>, etc.) are only retained for matching classes, even if we specify the generic <code>keepattributes</code> for all entities</li>
</ul>
<p>Similar to the code shrinking option, there is an aggressive resource shrink mode that can be added to the <code>keep.xml</code>:</p>
<pre class="language-xml hljs">&lt;?xml version="1.0" encoding="utf-8"?>
&lt;resources xmlns:tools="http://schemas.android.com/tools"
    tools:shrinkMode="strict" />
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we learned about R8 and how to configure rules for it. In the process, we also covered various debugging options to address the perils of aggressive shrinking.</p>
<p>I hope you’ve found the information in this article useful for addressing your code shrinking concerns and are ready to leverage the R8 toolchain!</p><div class="code-block code-block-32" >
<div class="blog-plug inline-plug kotlin-plug"><h2><a href="https://lp.logrocket.com/blg/kotlin-signup">LogRocket</a>: Instantly recreate issues in your Android apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is an Android monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your Android apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your Android apps — <a class="signup" href="hhttps://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-154618" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/r8-code-shrinking-android-guide/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/r8-code-shrinking-android-guide/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-154618" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/r8-code-shrinking-android-guide/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-154618" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/r8-code-shrinking-android-guide/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/r8-code-shrinking-android-guide/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to React design patterns - LogRocket Blog</title>
			<link>https://blog.logrocket.com/react-design-patterns/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/react-design-patterns/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to React design patterns - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/react-design-patterns/">A guide to React design patterns - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/lawrenceoputa/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/08/lawrenceo.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/08/lawrenceo.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/lawrenceoputa/">
Lawrence Eagles <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Senior full-stack developer, writer, and instructor.</span>
</div>
</div>
<h1 class="posttitle">A guide to React design patterns</h1>
<p>
<span class="post-date"><time class="post-date">
December 7, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">3048</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><strong><em>Editor’s note:</em></strong> <em>This React components guide was last updated on 21 December 2022 to add information about the render props pattern and state reducer pattern. Check out</em> <a href="https://blog.logrocket.com/underrated-react-hooks-youre-missing-out-on/"><em>this article</em></a> <em>for more information on React Hooks.</em></p>
<p>Design patterns are solution templates for common software development problems. In React, they are proven methods to solve common problems experienced by React developers.</p>
<p>As the React API evolves, new patterns emerge, and developers often favor them over older patterns. In this article, we will learn about some useful React design patterns in 2022.</p>
<p>Here’s what we’ll cover:</p>
<ul>
<li><a href="#react-components-design-patterns">React components design patterns</a>
<ul>
<li><a href="#higher-order-component-pattern">The higher-order component pattern</a></li>
<li><a href="#render-props-pattern">Render props component pattern</a></li>
<li><a href="#state-reducer-pattern">State reducer pattern</a></li>
<li><a href="#provider-pattern">The provider pattern</a></li>
<li><a href="#compound-components-pattern">The compound components pattern</a></li>
<li><a href="#presentational-container-component-patterns">The presentational and container component patterns</a></li>
<li><a href="#hooks-pattern">The Hooks pattern</a></li>
</ul>
</li>
</ul>
<p>Let’s get started.</p>
<h2 id="react-components-design-patterns">React components design patterns</h2>
<p>In this section, we will look at the top React component design patterns. This list includes some of the most popular React design patterns that are efficient for cross-cutting concerns, global data sharing (without prop drilling), the separation of concerns such as complex stateful logic from other component parts, and more.</p>
<h3 id="higher-order-component-pattern">The higher-order component pattern</h3>
<p>The higher-order component, or HOC pattern, is an advanced React pattern used for reusing component logic across our application. The HOC pattern is useful for <a href="https://reactjs.org/docs/higher-order-components.html#use-hocs-for-cross-cutting-concerns">cross-cutting concerns</a> — features that require the sharing of component logic across our application. Examples of these features are authorization, logging, and data retrieval.</p>
<p>HOCs are not part of the core React API, but they arise from the compositional nature of React functional components, which are JavaScript functions.</p>
<p>A high-order component is akin to a JavaScript higher-order function; they are pure functions with zero side effects. And like higher-order functions in JavaScript, HOCs act like a decorator function.</p>
<p>In React, a higher-order component is structured as seen below:</p>
<pre class="language-javascript hljs">import React, {Component} from 'react';

const higherOrderComponent = (DecoratedComponent) => {
  class HOC extends Component {
    render() {
      return &lt;DecoratedComponent />;
    }
  }
  return HOC;
};
</pre>
<h3 id="render-props-pattern">Render props pattern</h3>
<p>In the previous section, we saw how the <code>HOC</code> can make rousing props and shared logic in a convenient way. In this section, we’ll explore yet another way to make React components reusable across our application by implementing the <a href="https://reactjs.org/docs/render-props.html">Render props pattern</a>.</p>
<p>Imagine that we have a <code>Paragraph</code> component that renders anything we pass to it. The component’s primary purpose would be to render the value we pass to it. We can use the code below to achieve this:</p>
<pre class="language-javascript hljs">&lt;Paragraph render={() => &lt;p>This is a rendered prop.&lt;/p>}>
</pre>
<p>To get the value of the <code>render</code> prop, we can invoke it like this:</p>
<pre class="language-javascript hljs">const Paragraph = props => props.render()
</pre>
<p>Ideally, this means that <code>Paragraph</code> is a component that receives a <code>render</code> prop and returns a <code>JSX</code> component. Looks simple right?</p>
<p>Now let’s take a look at a more relatable scenario. Imagine that we had a <code>TextInput</code> whose value we want to share with two components. We can use Render props to handle it.</p>
<p>Wait, isn’t the state of the <code>TextInput</code> supposed to be in the parent component?</p>
<p>Yes, you’re right, but in larger applications, it’s often difficult to perform state lifting:</p>
<pre class="language-javascript hljs">import { useState } from "react";
const TextInput = (props) => {
  const [value, setValue] = useState("");
  return (
    &lt;>
      &lt;input
        type="text"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        placeholder="Type text..."
      />
      {props.children(value)}
    &lt;/>
  );
};
export default TextInput;
</pre>
<p>The input component, like every other React component, has the children prop, so here we’re leveraging it to allow for both components to access its value. We can create the two-component like this:</p>
<pre class="language-javascript hljs">const Comp1 = ({ value }) => &lt;p>{value}&lt;/p>;
const Comp2 = ({ value }) => &lt;p>{value}&lt;/p>;
</pre>
<p>Then use them like this:</p>
<pre class="language-javascript hljs"> &lt;TextInput>
          {(value) => (
            &lt;>
              &lt;Comp1 value={value} />
              &lt;Comp2 value={value} />
            &lt;/>
          )}
        &lt;/TextInput>
</pre>
<p>Going forward, <code>Comp1</code> and <code>Comp2</code> will maintain the same value as whatever the value of <code>TextInput</code> is.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="state-reducer-pattern">State reducer pattern</h3>
<p>The state reducer pattern has gotten really popular since the release of <code>react hooks</code>. It has grown to be a tradition for various codebases in production, especially because of its abstraction of Redux workflow using the <code>useReducer</code> hook.</p>
<p>In this section, we’ll explore how to use the state reducer pattern to build reusable React applications. The simplest way to demolish the use of a state reducer pattern is to create a custom helper hook. In the section, we’ll create a <code>useToggle</code> hook for toggling component states in our application.</p>
<p>To begin, let’s create a type for our reducer:</p>
<pre class="language-javascript hljs">const toggleActionTypes = {
  toggle: "TOGGLE",
};
</pre>
<p>Create the <code>toggleReducer</code>:</p>
<pre class="language-javascript hljs">const toggleReducer = (state, action) => {
  switch (action.type) {
    case toggleActionTypes.toggle:
      return { on: !state.on };
    default:
      throw new Error(`Undefined type: ${action.type}`);
  }
};
</pre>
<p>Then, create the hook (<code>useToggle</code>):</p>
<pre class="language-javascript hljs">const useToggle = ({ reducer = toggleReducer } = {}) => {
  const [{ on }, dispatch] = useReducer(reducer, { on: false });
  const toggle = () => dispatch({ type: toggleActionTypes.toggle });
  return [on, toggle];
};
</pre>
<p>We can then use it in a component like below:</p>
<pre class="language-javascript hljs">const Toggle = () => {
  const [on, toggle] = useToggle({
    reducer(currentState, action) {
      const updates = toggleReducer(currentState, action);
      return updates;
    },
  });
  return (
    &lt;div>
      &lt;button onClick={toggle}>{on ? "Off" : "On"}&lt;/button>
    &lt;/div>
  );
};
export default Toggle;
</pre>
<p>Clicking on the button will toggle it’s on and off state. We’ve successfully made it easy for users to hook into every update that occurs in our <code>useToggle</code> reducer.</p>
<h3 id="provider-pattern">The provider pattern</h3>
<p>The provider pattern in React is used to share global data across multiple components in the React component tree.</p>
<p>The provider pattern involves a <code>Provider</code> component that holds global data and shares this data down the component tree in the application using a <code>Consumer</code> component or a custom Hook.</p>
<p>The provider pattern is not unique to React; libraries like <a href="https://react-redux.js.org/">React Redux</a> and MobX implement the provider pattern, too.</p>
<p>The code below shows the setup of the provider pattern for React Redux:</p>
<pre class="language-javascript hljs">import React from 'react'
import ReactDOM from 'react-dom'

import { Provider } from 'react-redux'
import store from './store'

import App from './App'

const rootElement = document.getElementById('root')
ReactDOM.render(
  &lt;Provider store={store}>
    &lt;App />
  &lt;/Provider>,
  rootElement
)
</pre>
<p>In React, the provider pattern is implemented in the React context API.</p>
<p>By default, React supports a unilateral downward flow of data from a parent component to its children. Consequently, to pass data to a child component located deep in the component tree, we will have to explicitly pass props through each level of the component tree — this process is called prop drilling.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>The React context API uses the provider pattern to solve this problem. Thus it enables us to share data across the React components tree without prop drilling.</p>
<p>To use the Context API, we first need to create a <code>context</code> object using <code>React.createContext</code>. The <code>context</code> object comes with a <code>Provider</code> component that accepts a value: the global data. The <code>context</code> object also has a <code>Consumer</code> component that subscribes to the <code>Provider</code> component for context changes. The <code>Consumer</code> component then provides the latest context value props to children.</p>
<p>Below demonstrates a typical use case of the React context API:</p>
<pre class="language-javascript hljs">import { createContext } from "react";
const LanguageContext = createContext({});
function GreetUser() {
  return (
    &lt;LanguageContext.Consumer>
      {({ lang }) => (
        &lt;p>Hello, Kindly select your language. Default is {lang}&lt;/p>
      )}
    &lt;/LanguageContext.Consumer>
  );
}
export default function App() {
  return (
    &lt;LanguageContext.Provider value={{ lang: "EN-US" }}>
      &lt;h1>Welcome&lt;/h1>
      &lt;GreetUser />
    &lt;/LanguageContext.Provider>
  );
}
</pre>
<p>The React Context API is used in implementing features such as the current authenticated user, theme, or preferred language where global data is shared across a tree of components.</p>
<p><em>N.B.,</em> <em>React also provides a more direct API — the</em> <a href="https://reactjs.org/docs/hooks-reference.html#usecontext"><code>useContext</code></a> <em>Hook</em> <em>— for subscribing to the current context value instead of using the</em> <code>Consumer</code> <em>component.</em></p>
<h3 id="compound-components-pattern">The compound components pattern</h3>
<p>Compound components is an advanced React container pattern that provides a simple and efficient way for multiple components to share states and handle logic — working together.</p>
<p>The compound components pattern provides an expressive and flexible API for communication between a parent component and its children. Also, the compound components pattern enables a parent component to interact and share state with its children implicitly, which makes it suitable for building declarative UI.</p>
<p>Two good examples are the <code>select</code> and <code>options</code> HTML elements. Both <code>select</code> and <code>options</code> HTML elements work in tandem to provide a dropdown form field.</p>
<p>Consider the code below:</p>
<pre class="language-javascript hljs">&lt;select>
  &lt;option value="javaScript">JavaScript&lt;/option>
  &lt;option value="python">Python&lt;/option>
  &lt;option value="java">Java&lt;/option>
&lt;/select>
</pre>
<p>In the code above, the <code>select</code> element manages and shares its state implicitly with the <code>options</code> elements. Consequently, although there is no explicit state declaration, the <code>select</code> element knows what option the user selects.</p>
<p>The compound component pattern is useful in building complex React components such as a switch, tab switcher, accordion, dropdowns, tag list, etc. It can be implemented either by using the <code>context API</code> or the <a href="https://blog.logrocket.com/using-react-cloneelement-function/"><code>React.cloneElement</code></a> API.</p>
<p>In this section, we will learn more about the compound components pattern by building an accordion. We will implement our compound components pattern with the <code>context API</code>. Simply follow the steps below:</p>
<p>First, scaffold a new React app:</p>
<pre class="language-bash hljs">yarn create react-app Accordion

cd Accordion

yarn start
</pre>
<p>Then, install dependencies:</p>
<pre class="language-bash hljs">yarn add styled-components
</pre>
<p>Next, add dummy data:</p>
<p>In the <code>src</code> directory, create a <code>data</code> folder and add the code below:</p>
<pre class="language-javascript hljs">const faqData = [

{

id: 1,

header: "What is LogRocket?",

body:

"Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."

},

{

id: 2,

header: "LogRocket pricing?",

body:

"Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."

},

{

id: 3,

header: "Where can I Find the Doc?",

body:

"Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."

},

{

id: 4,

header: "How do I cancel my subscription?",

body:

"Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."

},

{

id: 5,

header: "What are LogRocket features?",

body:

"Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."

}

];

export default faqData;
</pre>
<p>Then, create components and add styles: In the <code>src</code> directory, create a <code>components</code> folder, an <code>Accordion.js</code> file, and an <code>Accordion.styles.js</code> file. Now we will create our styles using style-components. Add the following code to the <code>Accordion.styles.js</code> file:</p>
<pre class="language-javascript hljs">import styled from "styled-components";

export const Container = styled.div
display: flex;
background: #6867ac;
border-bottom: 8px solid #ffbcd1;
font-family: "Inter", sans-serif;
; export const Wrapper = styled.div
margin-bottom: 40px;
; export const Inner = styled.div
display: flex;
padding: 70px 45px;
flex-direction: column;
max-width: 815px;
margin: auto;
; export const Title = styled.h1
font-size: 33px;
line-height: 1.1;
margin-top: 0;
margin-bottom: 8px;
color: white;
text-align: center;
; export const Item = styled.div
color: white;
margin: auto;
margin-bottom: 10px;
max-width: 728px;
width: 100%;
&amp;:first-of-type {
margin-top: 3em;
}
&amp;:last-of-type {
margin-bottom: 0;
}
; export const Header = styled.div
display: flex;
flex-direction: space-between;
cursor: pointer;
border: 1px solid #ce7bb0;
border-radius: 8px;
box-shadow: #ce7bb0;
margin-bottom: 1px;
font-size: 22px;
font-weight: normal;
background: #ce7bb0;
padding: 0.8em 1.2em 0.8em 1.2em;
user-select: none;
align-items: center;
; export const Body = styled.div
font-size: 18px;
font-weight: normal;
line-height: normal;
background: #ce7bb0;
margin: 0.5rem;
border-radius: 8px;
box-shadow: #ce7bb0;
white-space: pre-wrap;
user-select: none;
overflow: hidden;
&amp;.open {
max-height: 0;
overflow: hidden;
}
span {
display: block;
padding: 0.8em 2.2em 0.8em 1.2em;
}
;
</pre>
<p>Next, add the following code to the <code>Accordion.js</code> file:</p>
<pre class="language-javascript hljs">import React, { useState, useContext, createContext } from "react";
import { Container, Inner, Item, Body, Wrapper, Title, Header
} from "./Accordion.styles";

const ToggleContext = createContext();
export default function Accordion({ children, ...restProps }) {
  return (
    &lt;Container {...restProps}>
      &lt;Inner>{children}&lt;/Inner>
    &lt;/Container>
  );
}

Accordion.Title = function AccordionTitle({ children, ...restProps }) {
  return &lt;Title {...restProps}>{children}&lt;/Title>;
};

Accordion.Wrapper = function AccordionWrapper({ children, ...restProps }) {
  return &lt;Wrapper {...restProps}>{children}&lt;/Wrapper>;
};

Accordion.Item = function AccordionItem({ children, ...restProps }) {
  const [toggleShow, setToggleShow] = useState(true);
  const toggleIsShown = (isShown) => setToggleShow(!isShown);
  return (
    &lt;ToggleContext.Provider value={{ toggleShow, toggleIsShown }}>
      &lt;Item {...restProps}>{children}&lt;/Item>
    &lt;/ToggleContext.Provider>
  );
};

Accordion.ItemHeader = function AccordionHeader({ children, ...restProps }) {
  const { toggleShow, toggleIsShown } = useContext(ToggleContext);
  return (
    &lt;Header onClick={() => toggleIsShown(toggleShow)} {...restProps}>
      {children}
    &lt;/Header>
  );
};

Accordion.Body = function AccordionBody({ children, ...restProps }) {
  const { toggleShow } = useContext(ToggleContext);
  return (
    &lt;Body className={toggleShow ? "open" : ""} {...restProps}>
      &lt;span>{children}&lt;/span>
    &lt;/Body>
  );
};
</pre>
<p>In the code above, the <code>ToggleContext</code> context object holds our <code>toggleShow</code> state and provides this state to all <code>Accordion</code> <code>children</code> via the <code>ToggleContext.Provider</code>.</p>
<p>Also, we created and attached new components to the <code>Accordion</code> component by using the <a href="https://reactjs.org/docs/jsx-in-depth.html#using-dot-notation-for-jsx-type">JSX dot notation</a>.</p>
<p>Finally, update the <code>App.js</code> with the following code:</p>
<pre class="language-javascript hljs">import React from "react";
import Accordion from "./components/Accordion";
import faqData from "./data";
export default function App() {
  return (
    &lt;Accordion>
      &lt;Accordion.Title>LogRocket FAQ&lt;/Accordion.Title>
      &lt;Accordion.Wrapper>
        {faqData.map((item) => (
          &lt;Accordion.Item key={item.id}
            &lt;Accordion.ItemHeader>{item.header}&lt;/Accordion.ItemHeader>
            &lt;Accordion.Body>{item.body}&lt;/Accordion.Body>
          &lt;/Accordion.Item>
        ))}
      &lt;/Accordion.Wrapper>
    &lt;/Accordion>
  );
}
</pre>
<p>You can <a href="https://codesandbox.io/embed/xenodochial-lovelace-i9fcw?fontsize=14&amp;hidenavigation=1&amp;theme=dark">see the accordion in action here</a>.</p>
<h3 id="presentational-container-component-patterns">The presentational and container component patterns</h3>
<p>These terms were originally coined by <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Dan Abramov</a>. However, he does not promote these ideas anymore.</p>
<p>Both the presentational and container patterns are useful because they help us separate concerns e.g., complex stateful logic, from other aspects of a component.</p>
<p>However, because React Hooks enable us to separate concerns without any arbitrary division, the Hooks pattern is recommended instead of the presentational and container component pattern. But depending on your use case, the presentational and container patterns may still come in handy.</p>
<p>These patterns aim to separate concerns and structure our codes in a way that is easy to understand.</p>
<p>The presentational components are stateless functional components that are only concerned with rendering data to the view. And they have no dependencies on the other parts of the application.</p>
<p>In some cases where they need to hold a state related to the view, they can be implemented with React class components.</p>
<p>An example of a presentational component is a component that renders a list:</p>
<pre class="language-javascript hljs">const usersList = ({users}) => {
  return (
  &lt;ul>
      {users.map((user) => (
      &lt;li key={user.id}>
          {user.username}
      &lt;/li>
      ))}
  &lt;/ul>
  );
};
</pre>
<p>Container components are useful class components that keep track of their internal state and life cycle. They also contain presentational components and data-fetching logic.</p>
<p>An example of a container component is shown below:</p>
<pre class="language-javascript hljs">class Users extends React.Component {
  state = {
    users: []
  };

  componentDidMount() {
    this.fetchUsers();
  }

  render() {
    return (); // ... jsx code with presentation component
  }
}
</pre>
<h3 id="hooks-pattern">The Hooks pattern</h3>
<p>The React Hooks APIs were introduced to React 16.8 and have revolutionized how we build React components.</p>
<p>The React Hooks API gives React functional components a simple and direct way to access common React features such as props, state, context, refs, and lifecycle.</p>
<p>The result of this is that functional components do not have to be dumb components anymore as they can use state, hook into a <a href="https://reactjs.org/docs/react-component.html#the-component-lifecycle">component lifecycle</a>, perform side effects, and more from a functional component. These features were originally only supported by class components.</p>
<p>Although patterns such as the presentational and container component patterns enable us to separate concerns, containers often result in “giant components”: components with a huge logic split across several lifecycle methods. And giant components can be hard to read and maintain.</p>
<p>Also, because containers are classes, they are not easily composed. And when working with containers, we are also faced with other class-related problems such as autobinding and working the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"><code>this</code></a>.</p>
<p>By supercharging functional components with the ability to track internal state, access component lifecycle, and other class-related features, the Hooks patterns solve the class-related problems mentioned above. As pure JavaScript functions, React functional components are composable and eliminate the hassle of working with <code>this</code> keyword.</p>
<p>Consider the code below:</p>
<pre class="language-javascript hljs">import React, { Component } from "react";
class Profile extends Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      user: {}
    };
  }
  componentDidMount() {
    this.subscribeToOnlineStatus(this.props.id);
    this.updateProfile(this.props.id);
  }
  componentDidUpdate(prevProps) {
    // compariation hell.
    if (prevProps.id !== this.props.id) {
      this.updateProfile(this.props.id);
    }
  }
  componentWillUnmount() {
    this.unSubscribeToOnlineStatus(this.props.id);
  }
  subscribeToOnlineStatus() {
    // subscribe logic
  }
  unSubscribeToOnlineStatus() {
    // unscubscribe logic
  }
  fetchUser(id) {
    // fetch users logic here
  }
  async updateProfile(id) {
    this.setState({ loading: true });
    // fetch users data
    await this.fetchUser(id);
    this.setState({ loading: false });
  }
  render() {
     // ... some jsx
  }
}
export default Profile;
</pre>
<p>From the container above, we can point out three challenges:</p>
<ul>
<li>Working with the constructor and calling <code>super()</code> before we can set state. Although this has been solved with the introduction of <a href="https://github.com/tc39/proposal-class-fields">class fields</a> in JavaScript, Hooks still provide a simpler API</li>
<li>Working with <code>this</code></li>
<li>Repeating related logic across lifecycle methods</li>
</ul>
<p>Hooks solves these problems by providing a cleaner and leaner API. Now we can refactor our <code>Profile</code> component as seen below:</p>
<pre class="language-javascript hljs">import React, { useState, useEffect } from "react";
function Profile({ id }) {
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState({});

  // Similar to componentDidMount and componentDidUpdate:
  useEffect(() => {
    updateProfile(id);
    subscribeToOnlineStatus(id);
    return () => {
      unSubscribeToOnlineStatus(id);
    };
  }, [id]);

  const subscribeToOnlineStatus = () => {
    // subscribe logic
  };

  const unSubscribeToOnlineStatus = () => {
    // unsubscribe logic
  };

  const fetchUser = (id) => {
    // fetch user logic here
  };

  const updateProfile = async (id) => {
    setLoading(true);
    // fetch user data
    await fetchUser(id);
    setLoading(false);
  };

  return; // ... jsx logic
}
export default Profile;
</pre>
<p>In advanced cases, the Hooks pattern promotes code reusability by enabling us to create custom reusable hooks. And you can learn more about this in our <a href="https://blog.logrocket.com/advanced-react-hooks-creating-custom-reusable-hooks/">previous article</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we learned about some useful design patterns in 2022. Design patterns are great because they enable us to leverage the expertise of all the developers who created and reviewed these patterns.</p>
<p>Consequently, they can cut development time because we are proving solution schemes and improving software quality in the process.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-94893" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/react-design-patterns/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/react-design-patterns/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-94893" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/react-design-patterns/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-94893" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/react-design-patterns/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/react-design-patterns/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to Vitest automated testing with Vue components - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to Vitest automated testing with Vue components - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/">A guide to Vitest automated testing with Vue components - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/popoolatemitope/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/popoolatemitope/">
Popoola Temitope <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and technical writer. I love learning about new technology and am always ready to share ideas with others.</span>
</div>
</div>
<h1 class="posttitle">A guide to Vitest automated testing with Vue components</h1>
<p>
 <span class="post-date"><time class="post-date">
November 15, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1710</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>When developing Vue applications, we use one or more components to ensure that our code is easy to read and maintain. Verifying whether a component is executing as expected without error is essential where application functionality and performance matter.</p>
<p>With Vue component testing, we can test our individual components to verify that they work correctly and that asynchronous operations are properly triggered. Component testing catches issues relating to components’ props, events, styles, classes, lifecycle hooks, and more.</p>
<p>There are many automated testing frameworks we can use for testing Vue components, such as Vitest, Jest, Cypress, etc., but the Vue team recommends using Vitest for testing Vue applications because of its unique features. Vitest is created and maintained by Vue and Vite team members.</p>
<p>In this tutorial, we’ll explore the Vitest framework, how to configure it, and how to use it for testing Vue components. We’ll also cover how to use snapshots and code coverage.</p>
<p>As a prerequisite for this tutorial, I’ll assume you have Node.js installed on your computer and are familiar with <a href="https://vuejs.org/">Vue</a>.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-is-vitest">What is Vitest?</a></li>
<li><a href="#vitest-features">Vitest features</a></li>
<li><a href="#creating-vue-project">Creating a Vue project</a></li>
<li><a href="#vitest-installation-configuration">Vitest installation and configuration</a></li>
<li><a href="#installing-test-utils-happy-dom">Installing Test Utils and happy-dom</a></li>
<li><a href="#creating-vue-component">Creating a Vue component</a></li>
<li><a href="#testing-vue-components-props">Testing Vue components and props</a></li>
<li><a href="#snapshot-test-cases">Using snapshot test cases</a></li>
<li><a href="#mocking-http-requests">Mocking HTTP requests</a></li>
<li><a href="#testing-click-events">Testing click events</a></li>
<li><a href="#coverage-testing-vitest">Coverage testing with Vitest</a></li>
</ul>
<h2 id="what-is-vitest">What is Vitest?</h2>
<p><a href="https://vitest.dev/">Vitest</a> is a super fast testing framework that requires little configuration. Because Vitest and Vite use the same configuration file, it is simple to integrate Vitest into a Vue application.</p>
<p>According to the <a href="https://vitest.dev/guide/why.html">Vitest team</a>, “Vitest aims to position itself as the Test Runner of Choice for Vite projects, and as a solid alternative even for projects not using Vite.”</p>
<h2 id="vitest-features">Vitest features</h2>
<p>Vitest is compatible with the <a href="https://jestjs.io/">Jest API</a>. If you are already familiar with Jest, you will know how to work with Vitest. Apart from the similarities Vitest shares with the Jest API, let’s look at some of the features that make it a better testing framework:</p>
<ul>
<li>Vitest shares the same configuration file as Vite, and test configuration is done inside the <code>vite.config.js</code> file to ensure that the test environment is similar to the building environment</li>
<li>Vitest is compatible with most Jest APIs and libraries, making it easy to migrate from Jest to Vitest</li>
<li>Vitest supports HMR, which allows new changes to be reflected on the server whenever the test files are modified</li>
</ul>
<h2 id="creating-vue-project">Creating a Vue project</h2>
<p>To understand how to run automated component testing in Vue, let’s set up a Vue program with the following commands:</p>
<pre class="language-bash hljs">npm create <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3d4b5449587d515c49584e49">[email protected]</a> vue-app -- --template vue
cd vue-app
npm install
</pre>
<p>Once the project installation is complete, run the command below to start the application:<br/>
npm run dev</p>
<p>Open <code>http://127.0.0.1:5173/</code> the browser. You should see the app running successfully.</p>
<h2 id="vitest-installation-configuration">Vitest installation and configuration</h2>
<p>Now, let’s install Vitest with the command below:</p>
<pre class="language-bash hljs">npm install -D vitest
</pre>
<p>After the installation, we need to add Vitest to the <code>package.json</code> file. In the <code>package.json</code> file, add the test script as follows:</p>
<pre class="language-JSON hljs">// ...
"scripts": {
  // ...
   "test": "vitest"
 },
// ...
</pre>
<p>Next, open the <code>vitest.config.js</code> file and add the following code to it:</p>
<pre class="language-javascript hljs">import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vitejs.dev/config/
export default defineConfig({
 plugins: [vue()],
 test:{
   globals:true,
 }
})
</pre>
<p>Setting the <code>globals</code> property to <code>true</code> will allow the Vitest APIs to be accessible within the test files without importing them.</p>
<h2 id="installing-test-utils-happy-dom">Installing Test Utils and happy-dom</h2>
<p><a href="https://v1.test-utils.vuejs.org/">Test Utils</a> is a Vue testing library that provides methods for mounting and interacting with Vue components. Install Test tils with the command below:</p>
<pre class="language-bash hljs">npm install --save-dev @vue/test-utils
</pre>
<p>In our component testing, we should be able to mock the DOM API. Vitest currently supports both <code><a href="https://github.com/capricorn86/happy-dom">happy-dom</a></code> and <code><a href="https://github.com/jsdom/jsdom">jsdom</a></code>. In this tutorial, we’ll make use of <code>happy-dom</code>. Run the command below to install <code>happy-dom</code>:</p>
<pre class="language-bash hljs">npm install happy-dom
</pre>
<p>After the installation, add <code>–dom</code> to the test script in the <code>package.json</code> file:</p>
<pre class="language-json hljs">// …
"scripts": {
   // …
   "test": "vitest --dom" 
 },
// …
</pre>
<p>Also, we need to add <code>happ``y``-dom</code> to the <code>vite.config.js</code> file to make it globally available in our test files:</p>
<pre class="language-json hljs">// …
 test:{
   // …
   environment: 'happy-dom',
 }
// …
</pre>
<h2 id="creating-vue-component">Creating a Vue component</h2>
<p>Let’s create a simple component called <code>GuessAge.vue</code> that enables users to enter their name and guess the age of the user based on the name entered using the <code><a href="https://agify.io/">Agify.io</a></code> API.</p>
<p>Inside the <code>src/components</code> folder, create <code>GuessAge.vue</code> file and add the following code:</p>
<pre class="language-javascript hljs">&lt;template>
  &lt;h1>{{ title }}&lt;/h1>
  &lt;div class="card">
   &lt;div  >
   &lt;br>
    &lt;span>Firstmame: {{firstname}}&lt;/span> &lt;br>
    &lt;span>Age: {{age}}&lt;/span> &lt;br>

    &lt;/div>&lt;br>&lt;br>
     &lt;label> Enter Firstname &lt;/label>&lt;br>
     &lt;input type="text" v-model="search"  placeholder=" Name ..."> &lt;br> &lt;br>
    &lt;button type="button" @click="getAge">Guess Age&lt;/button>
    &lt;br> &lt;br> &lt;br>
    &lt;input type="radio" value="pop"> &lt;label>Save my data&lt;/label>
  &lt;/div>
&lt;/template>
&lt;script setup>
import { ref } from 'vue'
defineProps({
  title: String
})
&lt;/script>
&lt;script>
export default {
    data() {
        return {
            search:"",
            firstname:"",
            age:"",
        }
    },
    computed: {
       getAge() {
        fetch('https://api.agify.io/?name='+ this.search)
        .then(response => response.json())
        .then(data => {
            this.age = data.age
            this.firstname = data.name
            this.search=""
        })
        }
    }
}
&lt;/script>
</pre>
<h2 id="testing-vue-components-props">Testing Vue components and props</h2>
<p>We need to create a test file for our component. As a naming convention, the test file name has to start with the component name and end with <code>.spec.js</code> or <code>.test.js</code>. Each component should have a test file when testing multiple components.</p>
<p>Now, inside the <code>components</code> folder, create a test file called <code>GuessAge.spec.js</code>. The file will contain a simple test script for our <code>GuessAge</code> component.</p>
<p>Let’s test the <code>GuessAge</code> component to see if it receives the correct props when mounting. We can test the value of the title prop at mount time by adding the following code to the <code>GuessAge.spec.js</code> file:</p>
<pre class="language-javascript hljs">import {mount} from "@vue/test-utils";
import GuessAge from "../components/GuessAge.vue";
// import { expect, test } from "vitest";
test("mount component",async()=>{
   expect(GuessAge).toBeTruthy();

   const wrapper = mount(GuessAge,{
       props:{
          title:"Guess User Age App",
       },
   });
   expect(wrapper.text()).toContain("Guess User Age App");
})
</pre>
<p>We import <code>mount</code> from <code>@vue/test-utils</code>, which allows us to wrap our component into a special object called <code>Wrapper</code>, which gives us various test options.</p>
<p>You should <code>import { expect, test } from "vitest";</code> if you set the value of globals to <code>false</code> in the Vite configuration file.</p>
<p>Run the command below to test the component in watch mode:</p>
<pre class="language-bash hljs">npm run test
</pre>
<p><img             class="aligncenter wp-image-141724 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/running-command-watch-mode.png" alt="Running command on watch mode " width="730" height="511"    /><noscript><img               class="aligncenter wp-image-141724 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/running-command-watch-mode.png" alt="Running command on watch mode " width="730" height="511"  /></noscript></p>
<h2 id="snapshot-test-cases">Using snapshot test cases</h2>
<p>A <a href="https://vitest.dev/guide/snapshot.html">s</a><a href="https://vitest.dev/guide/snapshot.html">napshot</a> is used to keep track of changes in the UI. A typical snapshot test case renders a UI component, takes a snapshot, and compares it to a reference snapshot file alongside the test. It compares the current state of your UI to the established snapshots. The test will fail if the current state does not match the established state.</p>
<p>To run a snapshot test and keep track of changes in your UI, add the code below to the test file (<code>GuessAge.spec.js</code>).</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<pre class="language-javascript hljs">test('snapshot UI testing', () => {
   const wrapper = mount(GuessAge,{});
   expect(wrapper.text()).toMatchSnapshot()
  })
</pre>
<p>Since Vitest supports hot module reloading, you do not have to run the test command each time the test file is modified. Here’s what you should see in your terminal:</p>
<p><img             class="aligncenter wp-image-141730 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/testing-click-events.png" alt="Testing click events" width="730" height="511"    /><noscript><img               class="aligncenter wp-image-141730 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/testing-click-events.png" alt="Testing click events" width="730" height="511"  /></noscript></p>
<h2 id="mocking-http-requests">Mocking HTTP requests</h2>
<p>When testing Vue components with HTTP requests, we first need to mock the network request; otherwise, the test will fail.</p>
<p>Mocking with <a href="https://mswjs.io/">Mock Service Worker</a> <a href="https://mswjs.io/">(MSW)</a> makes it easy to test HTTP requests by intercepting the requests made by your tests without changing any of the application code.</p>
<p>Install MSW using the command below:</p>
<pre class="language-bash hljs">npm install msw --save-dev
</pre>
<p>We must import the following two dependencies inside our test file(<code>GuessAge.spec.js</code>) to use MSW.</p>
<pre class="language-javascript hljs">import { setupServer } from 'msw/node'
import { rest } from 'msw'
</pre>
<p>Let’s create an instance of the mock server that would intercept the HTTP requests by adding the following code to our test file(<code>GuessAge.spec.js</code>).</p>
<pre class="language-javascript hljs">export const restHandlers = [
   rest.get('https://api.agify.io/', (req, res, ctx) => {
      return res(ctx.status(200), ctx.json([
         {
            age: 55,
            name: "tope"
         }
      ]))
   }),
]
const server = setupServer(...restHandlers)
// Start server before all tests
beforeAll(() => server.listen({ onUnhandledRequest: 'error' }))
//  Close server after all tests
afterAll(() => server.close())
// Reset handlers after each test `important for test isolation`
afterEach(() => server.resetHandlers())
</pre>
<h2 id="testing-click-events">Testing click events</h2>
<p>Let’s verify that when we click on the <strong>Guess Age</strong> button, the input tag is empty after fetching the user age.</p>
<pre class="language-javascript hljs">test("Button clicked", async () => {
   expect(GuessAge).toBeTruthy();

   const wrapper = mount(GuessAge, {
      props: {
         title: "Guess User Age App",
      },
   });
   const ac = await wrapper.get("button").trigger("click")
   expect(wrapper.vm.search).toEqual("")
})
</pre>
<p>Here’s what you should see in the terminal:</p>
<p><img  src="https://paper-attachments.dropboxusercontent.com/s_27407D65DFDBA397FEAEFA2FCE1F0E9665E2B9AB7EA9E282DA4E1984EB427A01_1666737633750_Screen+Shot+2022-10-25+at+11.40.26+PM.png" alt="alt"   class=" jetpack-lazy-image"/><noscript><img   src="https://paper-attachments.dropboxusercontent.com/s_27407D65DFDBA397FEAEFA2FCE1F0E9665E2B9AB7EA9E282DA4E1984EB427A01_1666737633750_Screen+Shot+2022-10-25+at+11.40.26+PM.png" alt=""/></noscript></p>
<h2 id="coverage-testing-vitest">Coverage testing with Vitest</h2>
<p>To report and analyze code performance to ascertain how effective and well-written your code is, Vitest supports native code <a href="https://vitest.dev/guide/coverage.html">coverage</a> via c8 and Istanbul.</p>
<p>To configure and run coverage testing, we need to add coverage to the <code>vite.configure.js</code> file as follows:</p>
<pre class="language-javascript hljs">export default defineConfig({
  plugins: [vue()],
  test:{
    globals:true,
    coverage: {
      provider: 'istanbul'
    },
    environment: 'happy-dom',
  }
})
</pre>
<p>Also, we need to add coverage to the <code>package.json</code> file, add the coverage to the script as follows:</p>
<pre class="language-json hljs">// ...
"scripts": {
  // ...
   "coverage": "vitest run --coverage"
 },
// ...
</pre>
<p>Now that we have configured the coverage testing, the next thing is to install Istanbul using the command below.</p>
<pre class="language-bash hljs">npm i -D @vitest/coverage-istanbul
</pre>
<p>The test files are run when the command below is executed, and Vitest will display the coverage report matrix on the terminal.</p>
<pre class="language-bash hljs">npm run coverage 
</pre>
<p><img  src="https://paper-attachments.dropboxusercontent.com/s_27407D65DFDBA397FEAEFA2FCE1F0E9665E2B9AB7EA9E282DA4E1984EB427A01_1666739148831_Screen+Shot+2022-10-26+at+12.05.30+AM.png" alt="alt"   class=" jetpack-lazy-image"/><noscript><img   src="https://paper-attachments.dropboxusercontent.com/s_27407D65DFDBA397FEAEFA2FCE1F0E9665E2B9AB7EA9E282DA4E1984EB427A01_1666739148831_Screen+Shot+2022-10-26+at+12.05.30+AM.png" alt=""/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>We have successfully written our automated tests for our Vue components using Vitest.</p>
<p>With automated testing, we can quickly and confidently prevent regressions in our Vue applications and ensure that we are pushing error-free code to production.</p>
<p>This tutorial taught us how to configure and use Vitest to test Vue components. You can learn more about Vitest and how to migrate from Jest to Vitest in their <a href="https://vitest.dev/guide/">official docs</a>.</p><div class="code-block code-block-20" >
<div class="blog-plug inline-plug vue-inline"><h2>Experience your Vue apps exactly how a user does</h2> Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, <a href="https://lp.logrocket.com/blg/vue-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. </p><p>The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.</p><p>Modernize how you debug your Vue apps - <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-8 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-8 .fadeOut {
    opacity:0 !important;
}

.code-block-8 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-141720" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-141720" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-141720" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to Vuex ORM - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-vuex-orm/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-vuex-orm/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to Vuex ORM - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-vuex-orm/">A guide to Vuex ORM - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/popoolatemitope/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/12/unnamed.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/popoolatemitope/">
Popoola Temitope <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and technical writer. I love learning about new technology and am always ready to share ideas with others.</span>
</div>
</div>
<h1 class="posttitle">A guide to Vuex ORM</h1>
<p>
<span class="post-date"><time class="post-date">
February 6, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1590</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<article class="article-post">
<p>In Vue, we manage states using libraries like Vuex, Redux, and Pinia, which serve as a central store for component states. However, these libraries are single-tree state management systems that are difficult to use for the relational data structure. Thankfully, with the <a href="https://vuex-orm.org">Vuex ORM</a>, it is possible for developers to handle the state as a database while still keeping it in a normalized form.</p>
<p>For example, in a component, we could have a state called <code>user</code>, which would contain the user’s full name, age, gender, and email address. Because this data is well structured, we can easily perform basic CRUD, create, read, update, and delete operations.</p>
<p>In this tutorial, we’ll explore the features of Vuex ORM, demonstrating how to use them to perform basic CRUD operations on our Vue application states. We’ll also learn how to use Vuex ORM lifecycle hooks. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul >
<li><a href="#what-is-vuex-orm">What is Vuex ORM?</a></li>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#how-vuex-orm-is-useful">How is Vuex ORM useful?</a></li>
<li><a href="#creating-vue-project">Creating a Vue project</a></li>
<li><a href="#vuex-orm-installation">Installing Vuex ORM</a></li>
<li><a href="#creating-book-model">Creating a simple Vuex ORM model</a></li>
<li><a href="#database-registration">Database registration</a></li>
<li><a href="#creating-vue-component">Creating a Vue component</a></li>
<li><a href="#crud-operations">CRUD operations</a>
<ul >
<li><a href="#inserting-data">Inserting data</a></li>
</ul>
</li>
<li><a href="#retrieving-data">Retrieving data</a>
<ul >
<li><a href="#retrieving-all-data">Retrieving all data</a></li>
<li><a href="#retrieving-data-using-id">Retrieving data using ID</a></li>
</ul>
</li>
<li><a href="#deleting-data">Deleting data</a></li>
<li><a href="#vuex-orm-lifecycle-hooks">Vuex ORM lifecycle hooks</a>
<ul >
<li><a href="#select-lifecycle-hooks">Select lifecycle hooks</a></li>
<li><a href="#mutation-lifecycle-hook">Mutation lifecycle hook</a></li>
</ul>
</li>
</ul>
<h2 id="what-is-vuex-orm">What is Vuex ORM?</h2>
<p>Vuex ORM is a Vuex state management pattern and library for Vue applications. Vuex ORM enables object-relational mapping (ORM) in Vue applications, allowing developers to work with models and manage their relationships more efficiently.</p>
<p>ORM offers a simple method to interact with the Vue application’s data as an object rather than as raw data. Therefore, you can write code that is simpler to understand and easier to maintain.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow along with this tutorial, you’ll need the following:</p>
<ol>
<li><a href="https://nodejs.org/en/">Node</a><a href="https://nodejs.org/en/">.js</a> installed on your machine</li>
<li>A <a href="https://blog.logrocket.com/definitive-guide-vue-3-components/">basic understanding of how to create a Vue app</a></li>
<li>Basic knowledge of Vuex</li>
</ol>
<h2 id="how-vuex-orm-is-useful">How is Vuex ORM useful?</h2>
<p>Application performance and maintenance is important, especially when working on large-scale projects. Let’s explore some benefits of using Vuex ORM over plain-state storage.</p>
<p>Vuex ORM makes it <a href="https://blog.logrocket.com/managing-multiple-store-modules-vuex/">easy to work with data in Vuex stores</a>. By providing an ORM layer that allows developers to define data models and work with the application’s data as objects, Vuex ORM reduces the need for boilerplate and repetitive code.</p>
<p>Vuex ORM makes data manipulation easier by introducing data query features for filtering, updating, and deleting data from the database. Therefore, Vuex ORM is suitable for large data applications.</p>
<p>Vuex ORM is a useful tool for managing application state. It helps to improve the application’s performance and scalability by providing an efficient and organized way to work with Vuex store data.</p>
<h2 id="creating-vue-project">Creating a Vue project</h2>
<p>Before we get started, let’s create a simple Vue project with the following commands:</p>
<pre class="language-javascript hljs">npm create <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="24524d504164484550415750">[email protected]</a> vue-app --template vue
cd vue-app
npm install
</pre>
<h2 id="vuex-orm-installation">Installing Vuex ORM</h2>
<p>Install Vuex ORM in your Vue application using the command below:</p>
<pre class="language-javascript hljs"># using npm
npm install vue vuex @vuex-orm/core --save
</pre>
<h2 id="creating-book-model">Creating a simple Vuex ORM model</h2>
<p>We can use Vuex ORM’s model to define the fields and relationships of our database entities. To better understand Vuex ORM’s model, we’ll create a simple book model.</p>
<p>From the application root directory, navigate to the <code>src</code> folder and create a <code>store/models</code> folder. Inside the <code>models</code> folder, create a <code>book.js</code> file and add the following code:</p>
<pre class="language-javascript hljs">// src/store/models/book.js
import { Model } from "@vuex-orm/core";

export default class Book extends Model {
 static entity = "books";

 static fields() {
   return {
    bookTitle: this.string(""),
     bookCover: this.string("https://github.com/popoolatopzy/upload/raw/main/cover1.jpeg"),
     bookPrice: this.string("1000"),
   };
 }
}
</pre>
<h2 id="database-registration">Database registration</h2>
<p>To access the model, we must first create a Vuex ORM database and then register it with Vuex using the Vuex ORM <code>install</code> method. From your project’s root directory, open <code>main.js</code> and replace it with the following code:</p>
<pre class="language-javascript hljs">import { createApp } from "vue";
import Vuex from "vuex";
import App from "./App.vue";
import VuexORM from "@vuex-orm/core";
import Book from "./store/models/Book";

const database = new VuexORM.Database();
database.register(Book);

const store = new Vuex.Store({
 plugins: [VuexORM.install(database)],
});

createApp(App).use(store).mount("#app");
</pre>
<h2 id="creating-vue-component">Creating a Vue component</h2>
<p>Let’s create a component called <code>favourite.vue</code> that enables users to enter details about their favorite book and store them in the Vuex ORM database. Inside the <code>src/components</code> folder, create the <code>favourite.vue</code> file and add the following code:</p>
<pre class="language-javascript hljs">&lt;script>
import Book from "../store/models/book";

export default {
 data() {
   return {
     form: {
       title: "",
       url: "",
       price: "",
     },
   };
 },
 methods: {

 },
};
&lt;/script>
&lt;template>
 &lt;div>
   &lt;link
     href="https://cdn.jsdelivr.net/npm/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2a4845455e595e584b5a6a1f041b0419">[email protected]</a>/dist/css/bootstrap.min.css"
     rel="stylesheet"
   />
   &lt;center>
     &lt;div
       
     >
       &lt;label for="">Book Title&lt;/label>
       &lt;input v-model="form.title" />
       &lt;label for="">Book Cover URL&lt;/label>
       &lt;input v-model="form.url" />
       &lt;label for="">Book Price&lt;/label>
       &lt;input v-model="form.price" />&lt;br />&lt;br />
       &lt;button @click="addItem" class="btn-primary" >
         Add favorite book
       &lt;/button>
     &lt;/div>
   &lt;/center>
 &lt;/div>
&lt;/template>
</pre>
<p>Add the component above to <code>app.vue</code> and run the application. We should see the component displayed on the page, as shown below:</p>
<p><img             class="aligncenter wp-image-157474 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/book-component-added-app-vue.png" alt="Book Component Added App Vue" width="730" height="207"    /><noscript><img               class="aligncenter wp-image-157474 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/01/book-component-added-app-vue.png" alt="Book Component Added App Vue" width="730" height="207"  /></noscript></p>
<h2 id="crud-operations">CRUD operations</h2>
<p>Now that we’ve created the book model and registered it as a Vuex ORM database, let’s explore how we can perform basic CRUD operations on the database.</p>
<h3 id="inserting-data">Inserting data</h3>
<p>We can use the Vuex ORM <code>insert()</code> method to add new records to the Vuex store. We’ll pass the data we want to add to the Vuex store as an object along with the <code>INSERT</code> method. The code below will add the user’s favorite book to the database:</p>
<pre class="language-javascript hljs"> // src/components/favourite.vue
// . . .
methods: {
   addItem() {
     const favourite = [
       {
         bookTitle: this.form.title,
         bookCover: this.form.url,
         bookPrice: this.form.price,
       },
     ];
     Book.insert({ data: favourite });
   },
 },
// . . .
</pre>
<h2 id="retrieving-data">Retrieving data</h2>
<p>There are various methods of retrieving data from the Vuex store; let’s review some methods for filtering data from the Vuex store.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="retrieving-all-data">Retrieving all data</h3>
<p>The <a href="https://vuex-orm.org/guide/data/retrieving.html#get-all-data">Vuex ORM <code>all()</code></a> method retrieves all records from the database. We can use it inside the Vue method as follows:</p>
<pre class="language-javascript hljs">// get all books
const books = Book.all();
</pre>
<h3 id="retrieving-data-using-id">Retrieving data using ID</h3>
<p>We can use the <a href="https://vuex-orm.org/guide/data/retrieving.html#get-single-data">Vuex ORM <code>find()</code> </a>method to get the value of a single record from the database. We can get the value of a record with an ID of <code>3</code> from the database using the code below:</p>
<pre class="language-javascript hljs">// get Book with the id of 3
const book = Book.find(3);
</pre>
<p>Now that we know how to retrieve data from the Vuex ORM database, we can fetch all the books from the database by adding the following code to the <code>favourite.vue</code> script:</p>
<pre class="language-javascript hljs">&lt;script>
import Book from "../store/models/book";

export default {
 computed: {
   books: () => Book.all(),
 },
 data() {
   return {
     form: {
       title: "",
       url: "",
       price: "",
     },
   };
 },


// . . .
};
&lt;/script>
</pre>
<p>Next, let’s display all the books from the database to the user by adding the following code to the <code>favourite.vue</code> template:</p>
<p>&amp;nbsp;</p>
<p>&amp;nbsp;</p>
<p>[code]</p>
<p>&amp;nbsp;</p>
<p>&amp;nbsp;</p>
<div>
<div>
<div >
<p >Refresh the application, and you should see the following output:</p>
<p><img             class="aligncenter wp-image-157520 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/display-books-favorite-vue-file.png" alt="Display Books Favorite Vue File" width="730" height="456"    /><noscript><img               class="aligncenter wp-image-157520 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/01/display-books-favorite-vue-file.png" alt="Display Books Favorite Vue File" width="730" height="456"  /></noscript></p>
<h2 id="deleting-data" >Deleting data</h2>
<p >To delete a record from the Vuex ORM database, we’ll use the <a href="https://vuex-orm.org/guide/data/deleting.html#deleting-models-with-composite-primary-key"><code>delete()</code>method</a>. The primary ID of the target record is passed into the method as an augment. We can add delete functionality by updating the <code>favourite.vue</code> with the following code:</p>
<pre class="language-javascript hljs"> // . . .
methods: {
   addItem() {
     const posts = [
       {
         bookTitle: this.form.title,
         bookCover: this.form.url,
         bookPrice: this.form.price,
       },
     ];

     Book.insert({ data: posts });
     // console.log(this.form.title);
   },
   deleteItem(itemID) {
     Book.delete(itemID);
     console.log(itemID);
   },
 },
};
&lt;/script>
</pre>
<p >Once we save the code above and refresh our browser, we should have the following result:</p>
<p><img             class="aligncenter wp-image-157523 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vue-delete-book-favorite-component-final.gif" alt="Vue Delete Book Favorite Component Final" width="730" height="403"  /><noscript><img               class="aligncenter wp-image-157523 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vue-delete-book-favorite-component-final.gif" alt="Vue Delete Book Favorite Component Final" width="730" height="403"/></noscript></p>
<h2 id="vuex-orm-lifecycle-hooks" >Vuex ORM lifecycle hooks</h2>
<p >We can use Vuex ORM lifecycle hooks to perform automatic actions whenever a specific record is saved, changed, or retrieved from the Vuex ORM database. The Vuex ORM lifecycle is divided into two categories, select lifecycle hooks and mutation lifecycle hooks.</p>
<h3 id="select-lifecycle-hooks" >Select lifecycle hooks</h3>
<p ><a href="https://vuex-orm.org/guide/digging-deeper/lifecycle-hooks.html#mutation-lifecycle-hook">Select lifecycle hooks</a> are triggered when we retrieve data from the Vuex store. A few examples of select hooks include <code>beforeSelect</code>, <code>afterWhere</code>, <code>afterOrderBy</code>, and <code>afterLimit</code>. In our book model, we can filter records using <code>beforeSelect</code> to return books with prices above 130:</p>
</div>
</div>
<div>
<div >
<pre class="language-javascript hljs">// src/models/book.js
import { Model } from "@vuex-orm/core";

export default class Book extends Model {
 static entity = "books";

 static fields() {
   return {
     bookTitle: this.string(""),
     bookCover: this.string("https://github.com/popoolatopzy/upload/raw/main/cover1.jpeg"),
     bookPrice: this.string("1000"),
   };
 }
 static beforeSelect(books) {
   return books.filter((book) => book.bookPrice >= "130");
 }
}
</pre>
<h3 id="mutation-lifecycle-hook" >Mutation lifecycle hooks</h3>
<p ><a href="https://vuex-orm.org/guide/digging-deeper/lifecycle-hooks.html#mutation-lifecycle-hook">Mutation lifecycle hooks</a> are triggered when we alter data in the Vuex store. Mutation lifecycle hooks include <code>beforeCreate</code>, <code>afterCreate</code>, <code>beforeUpdate</code>, <code>afterUpdate</code>, <code>beforeDelete</code>, and <code>afterDelete</code>:</p>
<pre class="language-javascript hljs">// src/models/book.js
    import { Model } from "@vuex-orm/core";

export default class Book extends Model {
 static entity = "books";

 static fields() {
   // . . .
 }
 static beforeSelect(books) {
   return books.filter((book) => book.bookPrice >= "130");
 }
 static beforeCreate(model) {
   model.published = true;
 }
}
</pre>
<h2 >Conclusion</h2>
<p ><a href="https://blog.logrocket.com/comparing-redux-vs-vuex/">Vuex ORM is a powerful Vuex plugin</a> that allows developers to easily manage and manipulate data in Vue applications. Vuex ORM offers a simple interface for interacting with the Vuex store as a database, making it easy to store, retrieve, and update data within a Vue application.</p>
<p >In this tutorial, we learned how to configure and use the Vuex ORM database in a Vue application. For more information, be sure to check out <a href="https://vuex-orm.org/">the official docs</a>. I hope you enjoyed this tutorial, and be sure to leave a comment if you have any questions. Happy coding!</p><div class="code-block code-block-20" >
<div class="blog-plug inline-plug vue-inline"><h2>Experience your Vue apps exactly how a user does</h2> Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, <a href="https://lp.logrocket.com/blg/vue-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. </p><p>The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.</p><p>Modernize how you debug your Vue apps - <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-8 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-8 .fadeOut {
    opacity:0 !important;
}

.code-block-8 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
</div>
</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-157443" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-vuex-orm/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-vuex-orm/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-157443" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-vuex-orm/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-157443" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-vuex-orm/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-vuex-orm/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to adding SSR to an existing Vue 3 app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/adding-ssr-existing-vue-3-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/adding-ssr-existing-vue-3-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to adding SSR to an existing Vue 3 app - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/adding-ssr-existing-vue-3-app/">A guide to adding SSR to an existing Vue 3 app - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/davidomotayo/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/davidomotayo/">
David Omotayo <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and indie game enthusiast.</span>
</div>
</div>
<h1 class="posttitle">A guide to adding SSR to an existing Vue 3 app</h1>
<p>
<span class="post-date"><time class="post-date">
March 3, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">14 min read</span>
<span class="wordcount">4183</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<article class="article-post">
<p>When discussing server-side rendering (SSR), frameworks like Next.js, Remix, SvelteKit, and Nuxt.js often come to mind as they offer inbuilt SSR functionality. However, it is important to recognize that client-side rendering frameworks, such as React and Vue.js, also require SSR in order to create optimized and SEO-friendly applications.</p>
<p>Integrating SSR into an existing application can be a difficult task, which may explain why this is not a more widely discussed topic. In this article, we’ll look at the pros and cons of server-side rendering and explore the process of incorporating it into a preexisting Vue 3 application using <a href="https://vitejs.dev">Vite</a>, Vue’s default bundler.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#what-ssr">What is SSR?</a></li>
<li><a href="#why-add-ssr-vue-3-app">Why add SSR to your Vue 3 app?</a></li>
<li><a href="#considerations-tradeoffs">Considerations and tradeoffs</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="#folder-structure">Folder structure</a></li>
<li><a href="#setting-up-client-files">Setting up the client files</a>
<ul >
<li><a href="#main-js"><code>main.js</code></a></li>
<li><a href="#router-js"><code>router.js</code></a></li>
<li><a href="#index-html"><code>index.html</code></a></li>
</ul>
</li>
<li><a href="#configuring-package-json-file">Configuring the <code>package.json</code> file</a></li>
<li><a href="#setting-up-server-express-js">Setting up the server with Express.js</a></li>
<li><a href="#configuring-entry-files">Configuring the entry files</a>
<ul >
<li><a href="#entry-server-js"><code>entry-server.js</code></a></li>
<li><a href="#entry-client-js"><code>entry-client.js</code></a></li>
</ul>
</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow along with the examples in this article, it is recommended you have the following:</p>
<ul>
<li>A foundational understanding of Vue 3</li>
<li>Working knowledge of Express.js</li>
<li>Node.js installed on your machine</li>
</ul>
<h2 id="what-ssr">What is SSR?</h2>
<p>Server-side rendering, or SSR, refers to the process of generating and delivering fully rendered pages on the server rather than in the client’s browser. This approach is used for client-side JavaScript applications, allowing for faster loading times and better search engine optimization.</p>
<p>The rise of SSR can be attributed to the increasing popularity of single-page applications (SPAs). SPAs are a web development architecture that provides an alternative to traditional, multi-page applications. They enable the creation of client-side applications that can dynamically update parts of the user interface without requiring a full page reload, thanks to the use of asynchronous javascript. SSR is a solution that aims to enhance the performance and SEO of these types of applications.</p>
<p>Today, many single-page applications are constructed using popular UI frameworks like React, Vue.js, and Angular. These SPAs are composed of a single HTML page that retrieves data from the server asynchronously. This allows for real-time updates to be visible to the user without needing a full page refresh.</p>
<p>SPA architecture is an ambitious attempt to create web applications similar to native mobile and desktop applications. However, because the browser has to generate all aspects of the app, including the user interface, data, and functionality, at once during the initial load, SPAs tend to be slower. This is because an SPA’s HTML page includes an empty root element that is populated by the browser after it downloads and processes the JavaScript bundle containing all other elements on the page. This approach is known as client-side rendering (CSR).</p>
<p>Here’s an example of what the SPA’s HTML page looks like:</p>
<pre class="language-html hljs">&lt;!DOCTYPE html>
&lt;html lang="en">
  &lt;head>
    &lt;meta charset="UTF-8">
    &lt;link rel="icon" href="/favicon.ico">
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0">
    &lt;title>Vite App&lt;/title>
  &lt;/head>
  &lt;body>
    &lt;div id="app">&lt;/div>
    &lt;script type="module" src="/src/main.js">&lt;/script>
  &lt;/body>
&lt;/html>
</pre>
<p>Because the browser must download and execute the entire application before any content is displayed, initial page load times are often slow. This results in a poor user experience as users may see a blank screen or loading spinner for an extended period. Additionally, slow page loading can negatively impact the website’s SEO performance.</p>
<p>In contrast, SSR generates the static HTML markup on the server, allowing the browser to receive a fully rendered page during the initial load. This is achieved using a backend runtime such as Node.js to execute JavaScript code and construct the user interface.</p>
<p>Here’s an example showing how an HTML file can receive content from a server-side rendered page:</p>
<pre class="language-html hljs">&lt;!DOCTYPE html>
&lt;html lang="en">
  &lt;head>
    &lt;meta charset="UTF-8" />
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />
    &lt;title>Vite App&lt;/title>
</pre>
<p>The HTML content within the <code>app</code> element is generated on the server and then sent to the client on initial load.</p>
<p>As previously mentioned, the Vue framework enables the creation of client-side applications, which by default, renders components that generate and manipulate the DOM in the browser. It is also possible to render the same components on the server, transmit them directly to the browser, and subsequently hydrate the static markup into a fully interactive app on the client side.</p>
<p>We’ll explore how to accomplish this later in this article.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h2 id="why-add-ssr-vue-3-app">Why add SSR to your Vue 3 app?</h2>
<p>There are several reasons why you might choose to incorporate server-side rendering into an existing Vue.js 3 application:</p>
<ul>
<li><strong>Improved performance</strong>: SSR can significantly improve the initial load time of an application by generating the static HTML markup on the server, thereby allowing the browser to receive a fully rendered page during the initial load</li>
<li><strong>Enhanced</strong> <strong>SEO</strong>: Search engines have a hard time indexing JavaScript-heavy applications. With SSR, the initial render of the page is done on the server, and search engines can easily read the HTML</li>
<li><strong>Improved accessibility</strong>: SSR can make web apps more accessible for users with slow internet connections or those using assistive technologies</li>
<li><strong>Better user experience</strong>: Server-side rendering can ensure that users who have JavaScript disabled or blocked in their browser still see the same content and layout as users with JavaScript enabled</li>
<li><strong>Backend integration</strong>: SSR allows for easy integration with backend systems and services</li>
</ul>
<h2 id="considerations-tradeoffs">Considerations and tradeoffs</h2>
<p>If you’re creating a new Vue.js 3 application and server-side rendering is of high importance, you can use a modern JavaScript meta-framework such as Nuxt.js, which provides inbuilt server-side rendering. Another option is to use the <a href="http://​​https://github.com/vitejs/vite-plugin-vue/tree/main/playground/ssr-vue">official SSR setup</a> <a href="http://​​https://github.com/vitejs/vite-plugin-vue/tree/main/playground/ssr-vue">provided by</a> <a href="http://​​https://github.com/vitejs/vite-plugin-vue/tree/main/playground/ssr-vue">the Vue core team</a>.</p>
<p>However, if you have an existing Vue application and migrating to Nuxt.js is not an option, it’s worth noting that adding SSR to your app may come with additional complexity and development effort. It is important to evaluate the tradeoffs of adding SSR before embarking on that path. Here are some considerations:</p>
<ul>
<li><strong>Maintenance</strong>: An SSR application may require more maintenance than a traditional client-side rendered application</li>
<li><strong>Performance</strong>: Server-side rendering can improve the initial load time, but it can also introduce additional latency and complexity to the application. SSR may also increase the codebase’s complexity and require additional server resources</li>
<li><strong>Browser compatibility</strong>: Some older browsers may not support certain features or technologies used in an SSR implementation, which may require additional testing and compatibility workarounds</li>
<li><strong>Security</strong>: SSR may introduce additional security concerns. It requires the application to run on the server, which can be vulnerable to different types of cyber attacks</li>
<li><strong>State management</strong>: SSR requires a different approach to state management compared to a traditional SPA; implementation can be challenging and require additional effort</li>
</ul>
<h2 id="getting-started">Getting started</h2>
<p>For this tutorial, I will assume that you already have an existing Vue.js application set up. Therefore, we will start by installing the necessary dependencies required for the tutorial.</p>
<p>If you do not have a project set up and wish to follow along with the examples in this article, you can bootstrap a Vue 3 project using the following command:</p>
<pre class="language-bash hljs">npm init <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5a2c2f3f1a363b2e3f292e">[email protected]</a>
</pre>
<p>The Vue CLI installs most of the necessary dependencies (e.g., vue-router, Pinia, and vue-jsx) for a Vue project by default, so you’ll only need to install Express to begin.</p>
<p>To do this, open your machine’s terminal, cd to your project folder, and run the following command:</p>
<pre class="language-bash hljs">npm i express
</pre>
<h2 id="folder-structure">Folder structure</h2>
<p>To integrate SSR into our application, we’ll need to perform the following steps:</p>
<ul>
<li>Adjust the build script within <code>package.json</code> to produce a client and SSR build and generate preload directives</li>
<li>Create a server using <code>express</code></li>
<li>Develop an entry point for both the server and the client</li>
</ul>
<p>This will require making changes to the file structure and adding new files to the project. A typical SSR application has the following directory structure:</p>
<pre class="language-json hljs">- index.html
- server.js 
- src/
 - main.js    
 - entry-client.js 
 - entry-server.js  
</pre>
<p>As you may have observed, this is the standard folder structure of a Vue project template, with the exception of a few additional files such as <code>server.js</code> , <code>entry-client.js</code> , and <code>entry-server.js</code>.</p>
<p>These files will be used to establish the SSR functionality in the application. The <code>server.js</code> file will act as the primary server for the app. The <code>entry-server.js</code> file will contain the render function responsible for generating content from the server. While the <code>entry-client.js</code> file will be responsible for rendering the app using the SSR API and will also handle the hydration process of the application.</p>
<p>Add these files to your project directory if they are not already present. The placement of the files isn’t essential but it’s advisable to place the <code>server.js</code> file in the root directory, and the entry files, <code>entry-server.js</code> and <code>entry-client.js</code>, within the <code>src</code> directory:</p>
<p><img             class="aligncenter wp-image-160975 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/src-directory-file-structure-vue-3-app.png" alt="Src Directory File Structure Vue 3 App" width="229" height="422"    /><noscript><img               class="aligncenter wp-image-160975 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/src-directory-file-structure-vue-3-app.png" alt="Src Directory File Structure Vue 3 App" width="229" height="422"  /></noscript></p>
<h2 id="setting-up-client-files">Setting up the client files</h2>
<p>Before setting up the server-side files, we’ll need to establish the client-side files such as the <code>router.js</code> , <code>main.js</code>, and <code>index.html</code> files.</p>
<h3 id="main-js"><code>main.js</code></h3>
<p>The <code>main.js</code> file usually contains a function for utilizing the application, and its content typically appears similar to the sample code shown below:</p>
<pre class="language-javascript hljs">import { createApp } from "vue";
import { createPinia } from "pinia";
import App from "./App.vue";
import router from "./router";
import "./assets/main.css";
const app = createApp(App);
app.use(createPinia());
app.use(router);
app.mount("#app");
</pre>
<p>However, in the context of this application, we will be using the <code>createSSRApp</code> and <code>createRouter</code> functions to create an SSR version of the application and establish a router instance.</p>
<p>Open the <code>main.js</code> file and replace the above code with the following:</p>
<pre class="language-javascript hljs">//main.js
import { createPinia } from "pinia";
import { createSSRApp } from "vue";
import App from "./App.vue";
import { createRouter } from "./router";

export function createApp() {
 const app = createSSRApp(App);
 const pinia = createPinia();
 app.use(pinia);
 const router = createRouter();
 app.use(router);
 return { app, router };
}
</pre>
<h3 id="router-js"><code>router.js</code></h3>
<p>To configure the router for our server-side rendered Vue application, we simply need to utilize the <code>createMemoryHistory()</code> function for the history on the server side, and <code>createWebHistory()</code> on the client side. We’ll also need to create routes for the pages within our app and register them using the <code>createRouter</code> function:</p>
<pre class="language-javascript hljs">//router.js

import {
  createMemoryHistory,
  createRouter as _createRouter,
  createWebHistory,
} from "vue-router";

const routes = [
  {
    path: "/",
    component: () => import("../pages/Home.vue"),
  },
  {
    path: "/welcome",
    component: () => import("../pages/Welcome.vue"),
  },
];

export const createRouter = () =>
  _createRouter({
    history: import.meta.env.SSR
      ? createMemoryHistory("/")
      : createWebHistory("/"),
    routes,
  });
</pre>
<p>Here, we’re creating routes for the <code>home</code> and <code>welcome</code> pages files within a <code>pages</code> folder.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h3 id="index-html"><code>index.html</code></h3>
<p>All that needs to be done within the <code>index.html</code> file is to replace the default entry target, <code>main.js</code>, with the client entry file:</p>
<pre class="language-html hljs">//index.html

&lt;!DOCTYPE html>
&lt;html lang="en">
  &lt;head>
    &lt;meta charset="UTF-8" />
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />
    &lt;title>Vite App&lt;/title>
    &lt;!--preload-links-->
  &lt;/head>
  &lt;body>
    &lt;div id="app">&lt;!--app-html-->&lt;/div>
    &lt;script type="module" src="/src/entry-client.js">&lt;/script>
  &lt;/body>
&lt;/html>
</pre>
<p><em><strong>N.B., the <code>entry-client.js</code> is yet to be created, we’ll learn how to do that a little later in this article</strong></em></p>
<h2 id="configuring-package-json-file">Configuring the <code>package.json</code> file</h2>
<p>We’ll need to make the necessary adjustments in the <code>package.json</code> file to enable the SSR functionality we plan to implement in the project. Specifically, we’ll customize the scripts in the <code>package.json</code> file to include options for building a server-side rendered version as well as a client-side rendered version for production and generating preload directives.</p>
<p>To do this, open the <code>package.json</code> file and replace the existing scripts with the following:</p>
<pre class="language-json hljs">//package.json

"scripts": {
    "dev": "node server",
    "build": "npm run build:client &amp;&amp; npm run build:server",
    "build:noExternal": "npm run build:client &amp;&amp; npm run build:server:noExternal",
    "build:client": "vite build --ssrManifest --outDir dist/client",
    "build:server": "vite build --ssr src/entry-server.js --outDir dist/server",
    "build:server:noExternal": "vite build --config vite.config.noexternal.js --ssr src/entry-server.js --outDir dist/server",
    "generate": "vite build --ssrManifest --outDir dist/static &amp;&amp; npm run build:server &amp;&amp; node prerender",
    "serve": "NODE_ENV=production node server",
    "debug": "node --inspect-brk server"
  },
</pre>
<p>You may also want to add a <code>"type": "module"</code> property to the <code>package.json</code> file to prevent Node from throwing a “Cannot use import statement outside a module” error:</p>
<pre class="language-json hljs">"type": "module",
</pre>
<h2 id="setting-up-server-express-js">Setting up the server with Express.js</h2>
<p>The Node.js server will handle the rendering of the app by converting it into a string, injecting the string into the <code>index.html</code> file, and replacing the placeholder within the <code>app</code> div with the rendered content. We will go into more detail on this process in the following sections.</p>
<p>For now, open the <code>server.js</code> file and import the following packages:</p>
<pre class="language-javascript hljs">import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";
import express from "express";
</pre>
<p>In this step, we’re utilizing <code>express</code> to create the server, the <code>path</code> to handle file paths, the <code>fileUrlToPath</code> to convert file URLs to file paths, and the <code>fs</code> package to read the <code>index.html</code> file.</p>
<p>Next, add the following code below the previous imports:</p>
<pre class="language-javascript hljs">const isTest = process.env.VITEST;

export async function createServer(
  root = process.cwd(),
  isProd = process.env.NODE_ENV === "production",
  hmrPort
) {
  const __dirname = path.dirname(fileURLToPath(import.meta.url));
  const resolve = (p) => path.resolve(__dirname, p);

  const indexProd = isProd
    ? fs.readFileSync(resolve("dist/client/index.html"), "utf-8")
    : "";

  const manifest = isProd
    ? JSON.parse(
        fs.readFileSync(resolve("dist/client/ssr-manifest.json"), "utf-8")
      )
    : {};

  const app = express();

  /**
   * @type {import('vite').ViteDevServer}
   */
  let vite;
  if (!isProd) {
    vite = await (
      await import("vite")
    ).createServer({
      base: "/",
      root,
      logLevel: isTest ? "error" : "info",
      server: {
        middlewareMode: true,
        watch: {
          usePolling: true,
          interval: 100,
        },
        hmr: {
          port: hmrPort,
        },
      },
      appType: "custom",
    });
    app.use(vite.middlewares);
  } else {
    app.use((await import("compression")).default());
    app.use(
      "/",
      (await import("serve-static")).default(resolve("dist/client"), {
        index: false,
      })
    );
  }

  app.use("*", async (req, res) => {
    try {
      const url = req.originalUrl;

      let template, render;
      if (!isProd) {
        template = fs.readFileSync(resolve("index.html"), "utf-8");
        template = await vite.transformIndexHtml(url, template);
        render = (await vite.ssrLoadModule("/src/entry-server.js")).render;
      } else {
        template = indexProd;
        render = (await import("./dist/server/entry-server.js")).render;
      }

      const [appHtml, preloadLinks] = await render(url, manifest);

      const html = template
        .replace(`&lt;!--preload-links-->`, preloadLinks)
        .replace(`&lt;!--app-html-->`, appHtml);

      res.status(200).set({ "Content-Type": "text/html" }).end(html);
    } catch (e) {
      vite &amp;&amp; vite.ssrFixStacktrace(e);
      console.log(e.stack);
      res.status(500).end(e.stack);
    }
  });

  return { app, vite };
}

if (!isTest) {
  createServer().then(({ app }) =>
    app.listen(6173, () => {
      console.log("http://localhost:6173");
    })
  );
}
</pre>
<p>Here, we’re configuring the Vite server by reading the <code>index.html</code> file, utilizing the render function from the <code>entry-server.js</code> file, passing in the initial URL, in this case, the homepage, and finally, replacing the <code>&lt;!--app-html--></code> placeholder with the rendered content.</p>
<p>The <code>createServer</code> function is responsible for the entirety of the server’s logic. The initial portions of the function are used to separate Vite from the production environment and utilize it in middleware mode, giving us complete control over the main server:</p>
<pre class="language-javascript hljs">let vite;
  if (!isProd) {
    vite = await (
      await import("vite")
    ).createServer({
      base: "/",
      root,
      logLevel: isTest ? "error" : "info",
      server: {
        middlewareMode: true,
        watch: {
          usePolling: true,
          interval: 100,
        },
        hmr: {
          port: hmrPort,
        },
      },
      appType: "custom",
    });
    // use vite's connect instance as middleware
    app.use(vite.middlewares);
  } else {
    app.use((await import("compression")).default());
    app.use(
      "/",
      (await import("serve-static")).default(resolve("dist/client"), {
        index: false,
      })
    );
  }
</pre>
<p>Here, the <code>if</code> statement checks if the app is not in production mode before executing the code block within it. This block of code creates a <code>ViteDevServer</code> instance in middleware mode and configures the app type as <code>custom</code>, disables Vite’s inbuilt serving logic, and allows the server to take over handling the requests.</p>
<p>Another significant portion of the server is the implementation of the <code>*</code> handler, which is responsible for serving server-rendered HTML. This is achieved by reading the <code>index.html</code> file, calling the render function from the <code>entry-server.js</code> file, passing in the current URL, and then replacing the <code>&lt;!--app-html--></code> placeholder with the rendered content. This ensures that the server can serve the app as a fully-rendered HTML string rather than just the client-side JavaScript bundle:</p>
<pre class="language-javascript hljs">app.use("*", async (req, res) => {
    try {
      const url = req.originalUrl;

      let template, render;
      if (!isProd) {
        template = fs.readFileSync(resolve("index.html"), "utf-8");
        template = await vite.transformIndexHtml(url, template);
        render = (await vite.ssrLoadModule("/src/entry-server.js")).render;
      } else {
        template = indexProd;
        render = (await import("./dist/server/entry-server.js")).render;
      }

      const [appHtml, preloadLinks] = await render(url, manifest);

      const html = template
        .replace(`&lt;!--preload-links-->`, preloadLinks)
        .replace(`&lt;!--app-html-->`, appHtml);

      res.status(200).set({ "Content-Type": "text/html" }).end(html);
    } catch (e) {
      vite &amp;&amp; vite.ssrFixStacktrace(e);
      console.log(e.stack);
      res.status(500).end(e.stack);
    }
  });

  return { app, vite };
}
</pre>
<p>What the <code>else</code> block does is simple. It assigns the production <code>index.html</code> file to the template variable and imports the <code>entry-server.js</code> file in the production environment, assigning it to the <code>render</code> variable. This will be used to render the server-side version of the app and inject it into the <code>index.html</code> file in place of the placeholder.</p>
<p>Note that the <code>dist/client/</code> path referenced in the code leads to the asset links in the client build. Therefore, files not within the conditional blocks are served from <code>dist/client/</code>.</p>
<p>Beyond the conditional block, we’re passing the root path (<code>url</code>) and <code>manifest</code> to the <code>render</code> function and destructuring the <code>appHtml</code> and <code>preloadLinks</code> from it:</p>
<pre class="language-javascript hljs">const [appHtml, preloadLinks] = await render(url, manifest);
</pre>
<p>The <code>manifest.json</code> file, generated using the <code>--ssrManifest</code> flag we added to the <code>build:client</code> script in the <code>package.json</code> file earlier, will be used by the <code>render</code> function to identify the available client-side assets.</p>
<p>Finally, the rendered HTML and preload links are injected into the placeholders within the <code>index.html</code> file:</p>
<pre class="language-javascript hljs"> const html = template
 .replace(`&lt;!--preload-links-->`, preloadLinks)
 .replace(`&lt;!--app-html-->`, appHtml);

 res.status(200).set({ "Content-Type": "text/html" }).end(html);
</pre>
<p>Now that the server is set up; we can proceed to create and populate the <code>entry-client.js</code> and <code>entry-server.js</code> files before building and serving our app.</p>
<h2 id="configuring-entry-files">Configuring the entry files</h2>
<p>The <code>entry-client.js</code>, and <code>entry-server.js</code> files are used to set up the SSR functionality in our application. The <code>entry-server.js</code> file contains the logic for creating an instance of the Vue app for SSR using the <code>createSSRApp</code> API and rendering the app to a string using the <code>renderToString</code> API. The resulting string is then sent to the browser to be hydrated and rendered on the client side. The <code>entry-client.js</code> file is responsible for initializing the application’s hydration process and creating the app’s client-side instance using the SSR API.</p>
<h3 id="entry-server-js"><code>entry-server.js</code></h3>
<p>In the <code>entry-server.js</code> file, we need to create a render function that initializes a Vue instance, configures necessary middleware, such as the router and store, and takes in a URL path as an argument. The function should then export this instance for use by the server to render the app to a string for server-side rendering.</p>
<p>To begin, navigate to the <code>entry-server.js</code> file within the <code>src</code> folder and add the following code:</p>
<pre class="language-javascript hljs">//server.js

import { basename } from "node:path";
import { renderToString } from "vue/server-renderer";
import { createApp } from "./main";

export async function render(url, manifest) {
  const { app, router } = createApp();

  await router.push(url);
  await router.isReady();

  const ctx = {};
  const html = await renderToString(app, ctx);

  const preloadLinks = renderPreloadLinks(ctx.modules, manifest);
  return [html, preloadLinks];
}

function renderPreloadLinks(modules, manifest) {
  let links = "";
  const seen = new Set();
  modules.forEach((id) => {
    const files = manifest[id];
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file);
          const filename = basename(file);
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile);
              seen.add(depFile);
            }
          }
          links += renderPreloadLink(file);
        }
      });
    }
  });
  return links;
}

function renderPreloadLink(file) {
  if (file.endsWith(".js")) {
    return `&lt;link rel="modulepreload" crossorigin href="${file}">`;
  } else if (file.endsWith(".css")) {
    return `&lt;link rel="stylesheet" href="${file}">`;
  } else if (file.endsWith(".woff")) {
    return ` &lt;link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`;
  } else if (file.endsWith(".woff2")) {
    return ` &lt;link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`;
  } else if (file.endsWith(".gif")) {
    return ` &lt;link rel="preload" href="${file}" as="image" type="image/gif">`;
  } else if (file.endsWith(".jpg") || file.endsWith(".jpeg")) {
    return ` &lt;link rel="preload" href="${file}" as="image" type="image/jpeg">`;
  } else if (file.endsWith(".png")) {
    return ` &lt;link rel="preload" href="${file}" as="image" type="image/png">`;
  } else {
    return "";
  }
}
</pre>
<p>Here we use the <code>render</code> function to create a context object that automatically associates the component module IDs used in the context of Vue SSR and renders the requested page. The function also employs the <code>renderToString()</code> method to return a promise that resolves the rendered HTML of the application.</p>
<p>The <code>renderPreloadLinks</code> and <code>renderPreloadLink</code> functions are used for rendering resources such as CSS, fonts, and JavaScript files on the client side. The former function takes in the module and manifest parameters as arguments within the <code>render</code> function and is exported along with the app’s static markup to be utilized within the <code>server.js</code> file:</p>
<pre class="language-javascript hljs">function renderPreloadLinks(modules, manifest) {
  let links = "";
  const seen = new Set();
  modules.forEach((id) => {
    const files = manifest[id];
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file);
          const filename = basename(file);
          if (manifest[filename]) {
            for (const depFile of manifest[filename]) {
              links += renderPreloadLink(depFile);
              seen.add(depFile);
            }
          }
          links += renderPreloadLink(file);
        }
      });
    }
  });
  return links;
}
</pre>
<p>It’s important to note that the <code>manifest</code> file is generated from the client build and contains mappings of module IDs to their corresponding chunk and asset files. We must run the <code>build</code> command and generate a client build for the server and entry files to access the file.</p>
<p>To do this, open your terminal in the current working directory and run the following command:</p>
<pre class="language-bash hljs">npm run build
</pre>
<p><img             class="aligncenter wp-image-160979 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/configuring-entry-js-files-vue-3-app.png" alt="Configuring Entry.js Files Vue 3 App" width="525" height="211"    /><noscript><img               class="aligncenter wp-image-160979 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/configuring-entry-js-files-vue-3-app.png" alt="Configuring Entry.js Files Vue 3 App" width="525" height="211"  /></noscript></p>
<p>This will construct your app and generate a dist folder containing a <code>manifest.json</code> file in the root directory:</p>
<p><img             class="aligncenter wp-image-160981 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/constructing-app-generating-dist-folder-manifest-json-file.png" alt="Constructing App Generating Dist Folder Manifest JSON File" width="236" height="225"  /><noscript><img               class="aligncenter wp-image-160981 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/constructing-app-generating-dist-folder-manifest-json-file.png" alt="Constructing App Generating Dist Folder Manifest JSON File" width="236" height="225"/></noscript></p>
<p>At this stage, we can start the app by running the <code>npm run serve</code> command in the terminal, allowing us to view our app’s content:</p>
<p><img             class="alignnone size-medium wp-image-160984 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/vue-3-app-content-300x178.png" alt="Vue 3 App Content" width="300" height="178"  /><noscript><img               class="alignnone size-medium wp-image-160984" src="https://blog.logrocket.com/wp-content/uploads/2023/02/vue-3-app-content-300x178.png" alt="Vue 3 App Content" width="300" height="178"/></noscript></p>
<p>In this example, we have incorporated navigation that routes to the <code>home</code> and <code>welcome</code> pages we previously created, as well as a button that increments a count state when clicked:</p>
<pre class="language-html hljs">//App.vue

&lt;template>
  &lt;div>
    &lt;router-link to="/">Home&lt;/router-link> |
    &lt;router-link to="/welcome">Welcome&lt;/router-link>
    &lt;router-view />
  &lt;/div>
&lt;/template>
</pre>
<p>If you attempt to interact with the app, you’ll notice that it is not functional and the app being served is static:</p>
<p><img             class="aligncenter wp-image-160986 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/attempting-interact-static-vue-3-app.gif" alt="Attempting Interact Static Vue 3 App" width="545" height="280"  /><noscript><img               class="aligncenter wp-image-160986 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/attempting-interact-static-vue-3-app.gif" alt="Attempting Interact Static Vue 3 App" width="545" height="280"/></noscript></p>
<p>This is because the <code>entry-client.js</code> file still needs to be set up and the app needs to be hydrated.</p>
<h3 id="entry-client-js"><code>entry-client.js</code></h3>
<p>Hydration, In this context, is a process of taking an already-rendered HTML page and turning it into a fully interactive application on the client side. This is accomplished by injecting JavaScript codes and other assets into the page. This “hydrates” the static HTML elements by binding them to the corresponding Vue.js components and re-activating event listeners and other dynamic functionality.</p>
<p>The <code>entry-client.js</code> file is responsible for this process; it exports a function that creates a new Vue instance, configures the router and other client-specific options, and attaches the app to the DOM.</p>
<p>The <code>entry-client.js</code> file is the only entry file required on the client side, so we do not need the <code>main.j``s</code> file, which was the previous entry file. However, since SSR functionality is being added to an existing project, the <code>main.js</code> file may contain other functions; therefore, we are composing the <code>createApp()</code> function within it.</p>
<p>Within the <code>entry-client.js</code> file, we need to import the <code>createApp</code> function from the <code>main.js</code> file, destructure the app and router methods, and verify if the router is ready before attaching the app to ensure the hydration matches:</p>
<pre class="language-javascript hljs">import { createApp } from "./main";

const { app, router } = createApp();

router.isReady().then(() => {
  app.mount("#app");

  console.log("hydrated");
});
</pre>
<p>With that, we have successfully integrated server-side rendering into an existing Vue 3 application. Now, if you save your progress and go back to the browser, the app should properly load its assets:</p>
<p><img             class="aligncenter wp-image-161001 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/vue-3-app-server-side-rendering.gif" alt="Vue 3 App Server Side Rendering" width="720" height="329"  /><noscript><img               class="aligncenter wp-image-161001 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/vue-3-app-server-side-rendering.gif" alt="Vue 3 App Server Side Rendering" width="720" height="329"/></noscript></p>
<p>To confirm that the content is being rendered from the server, you can check the browser’s developer tools by navigating to the <code>Network</code> tab. Once there, you should see the content on the page when you click on the URL and navigate to the response tab, as shown below:</p>
<p><img             class="aligncenter wp-image-160991 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/02/checking-browser-dev-tools-confirm-sever-rendering.gif" alt="Checking Browser Dev Tools Confirm Server Rendering" width="720" height="383"  /><noscript><img               class="aligncenter wp-image-160991 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/02/checking-browser-dev-tools-confirm-sever-rendering.gif" alt="Checking Browser Dev Tools Confirm Server Rendering" width="720" height="383"/></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we discussed the concept of server-side rendering, its advantages and disadvantages, and demonstrated how to incorporate SSR into a preexisting Vue 3 project. The process we used involved creating a primary server for the application and adding new entry files for both the server side and the client side.</p><div class="code-block code-block-20" >
<div class="blog-plug inline-plug vue-inline"><h2>Experience your Vue apps exactly how a user does</h2> Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, <a href="https://lp.logrocket.com/blg/vue-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. </p><p>The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.</p><p>Modernize how you debug your Vue apps - <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-8 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-8 .fadeOut {
    opacity:0 !important;
}

.code-block-8 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-160973" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/adding-ssr-existing-vue-3-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/adding-ssr-existing-vue-3-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-160973" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/adding-ssr-existing-vue-3-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-160973" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/adding-ssr-existing-vue-3-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/adding-ssr-existing-vue-3-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to adding gradients with Tailwind CSS - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-adding-gradients-tailwind-css/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-adding-gradients-tailwind-css/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to adding gradients with Tailwind CSS - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-adding-gradients-tailwind-css/">A guide to adding gradients with Tailwind CSS - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rishipurwar/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/07/rishi-purwar.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/07/rishi-purwar.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rishipurwar/">
Rishi Purwar <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an enthusiastic full-stack Web developer from India who has been building side projects for quite some time now. You can check out all my projects at <a href="https://github.com/rishipurwar1">github.com/rishipurwar1</a> to learn more about what I do!</span>
</div>
</div>
<h1 class="posttitle">A guide to adding gradients with Tailwind CSS</h1>
<p>
<span class="post-date"><time class="post-date">
February 28, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">18 min read</span>
<span class="wordcount">5271</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was updated on 28 February 2023 to include additional Tailwind CSS gradient examples.</em></p>
<p>Are you looking for an in-depth guide on how to add gradients with Tailwind CSS? Maybe you want to create a beautiful text gradient for the hero section of your website or add an attractive border gradient for your site’s cards.</p>
<p>You’re in luck! I’ve recently been playing around with gradients in Tailwind CSS and thought it would be fun to write up a guide on how to add them.</p>
<p>In this blog, we’ll be using Tailwind CSS to create beautiful background, text, border, underline, and progress bar gradients. We’ll also walk through how to animate gradients in Tailwind CSS. Let’s get started!</p>
<ul>
<li><a href="#introduction-tailwind-css-gradients">Introduction to Tailwind CSS gradients</a>
<ul >
<li><a href="#controlling-direction-gradients">Controlling the direction of the gradient</a></li>
</ul>
</li>
<li><a href="#how-add-linear-background-gradients-tailwind-css">How to add linear background gradients in Tailwind CSS</a></li>
<li><a href="#customizing-tailwind-css-gradients-more-than-two-color-stops">Customizing Tailwind CSS gradients with more than two color stops</a></li>
<li><a href="#adding-radial-background-gradients">Adding radial background gradients</a></li>
<li><a href="#adding-conical-background-gradient">Adding a conic background gradient</a></li>
<li><a href="#adding-text-gradients">Adding text gradients</a></li>
<li><a href="#how-add-border-gradients-tailwind-css">How to add border gradients in Tailwind CSS</a>
<ul >
<li><a href="#button-border-gradient">Button border gradient</a></li>
<li><a href="#input-border-gradient">Input border gradient</a></li>
<li><a href="#card-border-gradient">Card border gradient</a></li>
</ul>
</li>
<li><a href="#adding-gradient-underline">Adding a gradient underline</a></li>
<li><a href="#building-gradient-progress-bar">Building a gradient progress bar</a></li>
<li><a href="#how-animate-gradients-tailwind-css">How to animate gradients in Tailwind CSS</a>
<ul >
<li><a href="#button-gradient-background-animation">Button gradient background animation</a></li>
<li><a href="#input-border-gradient-animation">Input border gradient animation</a></li>
<li><a href="#glowing-button-gradient-animation">Glowing button gradient animation</a></li>
<li><a href="#gradient-underline-animation">Gradient underline animation</a></li>
</ul>
</li>
</ul>
<h2 id="introduction-tailwind-css-gradients">Introduction to Tailwind CSS gradients</h2>
<p>Gradients are a great way to <a href="https://blog.logrocket.com/applying-dynamic-styles-tailwind-css/">inject some extra vibrancy into your websites</a>. But they’re not just for backgrounds anymore — we can add gradients to any element, including text, borders, cards, inputs, and so on!</p>
<p>Before diving into Tailwind CSS gradients and coding some pretty cool stuff, we need to understand the basics of Tailwind CSS gradients and how they work.</p>
<h2 id="controlling-direction-gradients">Controlling the direction of the gradient</h2>
<p>To create a basic gradient in Tailwind CSS, we need to use these three Tailwind CSS classes:</p>
<ol>
<li><code>bg-gradient-to-{direction}</code></li>
<li><code>from-{color}</code></li>
<li><code>to-{color}</code></li>
</ol>
<p>Let’s discuss the first one. <code>bg-gradient-to-{direction}</code> defines the direction of the gradient. The <code>direction</code> can either be horizontal, vertical, or diagonal.</p>
<p>The horizontal linear gradient has two classes:</p>
<ol>
<li><code>bg-gradient-to-r:</code>defines a horizontal linear gradient (HLG) from left to right</li>
<li><code>bg-gradient-to-l: defines an HLG from right to left</code></li>
</ol>
<p>The vertical linear gradient also has two classes:</p>
<ol>
<li><code>bg-gradient-to-t:</code> defines a vertical linear gradient (VLG) from bottom to top</li>
<li><code>bg-gradient-to-b:</code> defines a VLG from top to bottom</li>
</ol>
<p>Lastly, the diagonal gradient has four classes:</p>
<ol>
<li><code>bg-gradient-to-tr:</code> defines a diagonal linear gradient (DLG) from bottom left to top right</li>
<li><code>bg-gradient-to-tl:</code> defines a DLG from bottom right to top left</li>
<li><code>bg-gradient-to-br:</code> defines a DLG from top left to bottom right</li>
<li><code>bg-gradient-to-bl:</code> defines a DLG from top right to bottom left</li>
</ol>
<p>Next, we have <code>from-{color}</code>. This defines the starting color of the gradient. We can use any Tailwind CSS <code>color</code> class as the starting color for a gradient, such as <code>from-purple-500</code>. Finally, we have <code>to-{color}</code>. This defines the ending color of the gradient. We can use any Tailwind CSS <code>color</code> class as the ending color for a gradient, like <code>to-purple-800</code>.</p>
<h2 id="how-add-linear-background-gradients-tailwind-css">How to add linear background gradients in Tailwind CSS</h2>
<p>We’ve learned about the basic Tailwind CSS gradient classes. Now, let’s use that knowledge to create a linear background gradient. To start, we’ll need a <code>div</code> container. Let’s create that first and give it some height:</p>
<pre class="language-html hljs">&lt;div class="h-72">&lt;/div>
</pre>
<p>The next thing we need to do is add a background gradient. Let’s add a simple linear gradient by specifying the <code>from-{color}</code> and <code>to-{color}</code> Tailwind CSS classes.</p>
<p>In this example, we’ll create a linear gradient from <code>from-purple-600</code> to <code>to-blue-600</code>. Let’s go ahead and add these classes:</p>
<pre class="language-html hljs">&lt;div class="h-72 from-purple-600 to-blue-600">&lt;/div>
</pre>
<p>Next, we need to specify a direction using the <code>bg-gradient-to-{direction}</code>class. This tells Tailwind CSS which direction it should flow in.</p>
<p>In this example, we want it to flow from left to right so we’ll add the <code>bg-gradient-to-r</code> class:</p>
<pre class="language-html hljs">&lt;div class="h-72 bg-gradient-to-r from-purple-600 to-blue-600">&lt;/div>
</pre>
<p>You should see a linear background gradient in the demo below:</p>
<p class="codepen"  data-height="399.046875" data-default-tab="result" data-slug-hash="PoRWzgm" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/pen/PoRWzgm"><br/>
Background Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Let’s try to change the direction of the gradient from left to right to top to bottom. To change the direction, we need to replace the <code>bg-gradient-to-r</code> class with the <code>bg-gradient-to-b</code> class:</p>
<pre class="language-html hljs">&lt;div class="h-72 bg-gradient-to-b from-purple-600 to-blue-600">&lt;/div>
</pre>
<p>You can see that the gradient is now flowing from top to bottom instead of left to right:</p>
<p class="codepen"  data-height="399.5625" data-default-tab="result" data-slug-hash="wvmgrOa" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/pen/wvmgrOa"><br/>
Background Gradient: top-to-bottom</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Quick tip: if we want to create a faded gradient effect, we don’t need to add a <code>to-{color}</code> class. We only need to use the <code>bg-gradient-to-{direction}</code> and <code>from-{color}</code> classes to create a faded gradient effect in Tailwind CSS.</p>
<h2 id="customizing-tailwind-css-gradients-more-than-two-color-stops">Customizing Tailwind CSS gradients with more than two color stops</h2>
<p>In this section, we’ll look at how we can create gradients in Tailwind CSS with more than two color stops. This allows us to make more colorful and vibrant gradients.</p>
<p>So far, we’ve been using only two color stops: <code>from-{color}</code> and <code>to-{color}</code>. Now, to add a third color stop in our gradient, we’ll use the <code>via-{color}</code> class along with the <code>from-{color}</code> and <code>to-{color}</code> classes to add a middle color.</p>
<p>Let’s do this using our previous example. Your code should look like this:</p>
<pre class="language-html hljs">&lt;div class="h-72 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600">&lt;/div>
</pre>
<p>You can see the background gradient with three color stops in action in this demo:</p>
<p class="codepen"  data-height="399.6015625" data-default-tab="result" data-slug-hash="NWYdwqr" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/pen/NWYdwqr"><br/>
Background Gradient: More than Two color stops</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="adding-radial-background-gradients">Adding radial background gradients</h2>
<p>Next, we’ll learn how to add radial background gradients in Tailwind CSS. As you already know, Tailwind CSS doesn’t provide direct classes to create a radial gradient. We need to do some configuration to add support for it instead. Let’s get started!</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The first thing we need to do is add support for the radial gradient. We do this by extending the theme property by adding the following code in our <code>tailwind.config.js</code> file:</p>
<pre class="language-javascript hljs">module.exports = {
  content: ["./src/**/*.{js,jsx}"],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
      }
    }
  }
}
/pre></pre>
<p>We are now ready to start creating our first radial background gradient!</p>
<p>First, copy and paste the final code from the last section:</p>
<pre class="language-html">&lt;div class="h-72 bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600">&lt;/div>
</pre>
<p>To create a radial background gradient, we need to replace <code>bg-gradient-to-r</code> with the <code>bg-gradient-radial</code> class to add a radial background gradient:</p>
<pre class="language-html">&lt;div class="h-72 bg-gradient-radial from-purple-600 via-pink-600 to-blue-600">&lt;/div>
</pre>
<p>You can see the radial background gradient with three color stops in the image below:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/background-gradient-three-color-stops.png" alt="Background Gradient With Three Color Stops" width="730" height="187"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/08/background-gradient-three-color-stops.png" alt="Background Gradient With Three Color Stops" width="730" height="187"/></noscript></p>
<p>If you’d rather not modify your Tailwind CSS configuration file to incorporate a radial background gradient, you can utilize <a href="https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values">Tailwind’s square bracket notation</a> to create a radial background gradient class dynamically with any desired value.</p>
<p>You can achieve this by using the syntax <code>bg-[radial-gradient()]</code>. Simply replace the existing <code>bg-gradient-radial</code> class with <code>bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))]</code>.</p>
<p>The <code>ellipse_at_center</code> parameter in the above syntax indicates that the gradient should have an ellipse shape with the center of the gradient at the center of the element, while <code>var(--tw-gradient-stops)</code> specifies the color stops of the gradient provided by Tailwind CSS. With this approach, you can quickly create a radial background gradient without modifying your configuration file:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="NWLwpKj" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/NWLwpKj"><br/>
Radial Gradient Using Square Notation</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>You can also modify the direction of the gradient by replacing the <code>ellipse_at_center</code> value with any of the possible directional values:</p>
<ul>
<li><code>ellipse_at_center</code>: specifies that the gradient should have an ellipse shape with the center of the gradient at the center of the element</li>
<li><code>ellipse_at_top</code>: specifies that the gradient should have an ellipse shape with the center of the gradient at the top of the element</li>
<li><code>ellipse_at_bottom</code>: specifies that the gradient should have an ellipse shape with the center of the gradient at the bottom center of the element</li>
<li><code>ellipse_at_left</code>: specifies that the gradient should have an ellipse shape with the center of the gradient at the left center of the element</li>
<li><code>ellipse_at_right</code>: specifies that the gradient should have an ellipse shape with the center of the gradient at the right center of the element</li>
<li><code>circle_at_center</code>: specifies a circular gradient shape with the center of the gradient at the center of the element</li>
<li><code>circle_at_top</code>: specifies a circular gradient shape with the center of the gradient at the top center of the element</li>
<li><code>circle_at_bottom</code>: specifies a circular gradient shape with the center of the gradient at the bottom center of the element</li>
<li><code>circle_at_left</code>: specifies a circular gradient shape with the center of the gradient at the left center of the element</li>
<li><code>circle_at_right</code>: specifies a circular gradient shape with the center of the gradient at the right center of the element</li>
</ul>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="MWqOmxy" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/EMWqOmxy"><br/>
Modify Direction of Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>In addition to the directional values mentioned above, there are many other possible directional values that you can use, such as <code>ellipse_at_bottom_right</code>, <code>ellipse_at_bottom_left</code>, and many more.</p>
<p>By experimenting with different directional values, you can create unique radial gradients that suit your specific design needs.</p>
<h2 id="adding-conical-background-gradient">Adding a conic background gradient</h2>
<p>Now, let’s see how to create a conic background gradient using Tailwind CSS. Conic (or cone-shaped) gradients are a type of CSS gradient that rotates around a center point.</p>
<p>To add a conic gradient to the background in TailwindCSS, we’ll need to use Tailwind’s square bracket notation to generate a conic background gradient class on the fly with any arbitrary value like this <code>bg-[conic-gradient(#9233ea,#db2777,#2564eb)]</code>. The <code>conic-gradient()</code> function allows us to customize the gradient stops and colors.</p>
<p>Here’s an example of how to create a basic conic gradient using Tailwind CSS:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="VwGzOOq" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/VwGzOOq"><br/>
Basic Conic Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><br/>
It’s important to note that if the arbitrary value includes a space, an underscore (_) should be used instead. During the build-time process, Tailwind will automatically transform the underscore into a space.</p>
<p>If you prefer to use the predefined Tailwind CSS gradient color stops instead of specifying the color stops directly within the <code>conic-gradient()</code> function, you can achieve this by passing the <code>--tw-gradient-stops</code> CSS variable provided by Tailwind CSS to the <code>conic-gradient()</code> function.<br/>
You can see this in action in the CodePen below:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="abayeyO" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/abayeyO"><br/>
Gradient Color Stops</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><br/>
If you want to specify the direction of the conic gradient, you can do so by passing the direction value to the <code>conic-gradient</code> function like this:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="xxaXMEg" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/xxaXMEg"><br/>
Specify Direction of Conic Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p><br/>
This code will create a conic gradient that starts at the top center of the element and transitions from purple to blue via pink.</p>
<p>To change the direction of the gradient, simply replace the <code>at_top</code> value with one of the following directional values:</p>
<ul>
<li><code>at_top</code>: starts the gradient from the top center of the element</li>
<li><code>at_top_right</code>: starts the gradient from the top right corner of the element</li>
<li><code>at_right</code>: starts the gradient from the center right of the element</li>
<li><code>at_bottom_right</code>: starts the gradient from the bottom right corner of the element</li>
<li><code>at_bottom</code>: starts the gradient from the bottom center of the element</li>
<li><code>at_bottom_left</code>: starts the gradient from the bottom left corner of the element</li>
<li><code>at_left</code>: starts the gradient from the center left of the element</li>
<li><code>at_top_left</code>: starts the gradient from the top left corner of the element</li>
</ul>
<p>This CodePen shows examples of the directional values listed above:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="dyqzxwR" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/dyqzxwR"><br/>
Gradient Directional Values</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="adding-text-gradients">Adding text gradients</h2>
<p>Text gradients are a great way to add extra vibrancy to your text. In this section, we’ll learn how to add text gradients in Tailwind CSS.</p>
<p>To start, we’ll need an <code>h1</code> tag. Let’s create that first and give it some basic styling:</p>
<pre class="language-html hljs">&lt;h1 class="text-5xl p-4 text-center font-bold">A Guide to Adding Gradients with Tailwind CSS&lt;/h1>
</pre>
<p>Next, let’s add a background gradient to our text. We’ll use a simple linear gradient by specifying the color stops. We’ll use the same color stops as our last example, <code>from-purple-600 via-pink-600 to-blue-600</code>.</p>
<p>Now, we need to specify the direction of the gradient using the <code>bg-gradient-to-r</code> class. Go ahead and add these classes.</p>
<pre class="language-html hljs">&lt;h1 class="text-5xl p-4 text-center font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600">A Guide to Adding Gradients with Tailwind CSS&lt;/h1>
</pre>
<p>You should see something like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/text-gradient-example.png" alt="Text Gradient Example" width="730" height="40"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/08/text-gradient-example.png" alt="Text Gradient Example" width="730" height="40"/></noscript></p>
<p>As we can see, the background gradient is applied as a background to our text instead of the text gradient. So how do we make it work?</p>
<p>To get our desired effect, we need to use the <code>bg-clip-text</code> Tailwind CSS class that allows us to clip the background of an element. In our case, we want to clip the background of the <code>h1</code> tag to match the shape of the text. Go ahead and add that class:</p>
<pre class="language-html hljs">&lt;h1 class="text-5xl p-4 text-center font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text">A Guide to Adding Gradients with Tailwind CSS&lt;/h1>
</pre>
<p><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/text-gradient-example-white-background.png" alt="Text Gradient Example With White Background"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2022/08/text-gradient-example-white-background.png" alt="Text Gradient Example With White Background"/></noscript></p>
<p>Here, we clipped the element’s background but can’t see the text gradient. That’s because the black text color is overlapping with the background gradient. To hide that, we need to use the <code>text-transparent</code> class to make the color of the text transparent. Go ahead and add that class:</p>
<pre class="language-html hljs">&lt;h1 class="text-5xl p-4 text-center font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent">A Guide to Adding Gradients with Tailwind CSS&lt;/h1>
</pre>
<p>Great! You can see the text gradient in action in this demo:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="YzaNENm" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/YzaNENm"><br/>
Gradient Directional Values</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="how-add-border-gradients-tailwind-css">How to add border gradients in Tailwind CSS</h2>
<p>In this section, we’ll look at how we can add border gradients in Tailwind CSS to a button and input element. We’ll also see how we can add gradient borders around a card component.</p>
<h3 id="button-border-gradient">Button border gradient</h3>
<p>First, let’s see how we can add a border gradient to a button element. Let’s create a button with a basic Tailwind CSS styling:</p>
<pre class="language-html hljs">&lt;button class="m-4 rounded-full">
  &lt;span class="block text-black px-4 py-2 font-semibold rounded-full">Follow Me&lt;/span>
&lt;/button>
</pre>
<p>Next, add a gradient background to the button using the background gradient classes we saw in the previous sections:</p>
<pre class="language-html hljs">&lt;button class="m-4 rounded-full bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;span class="block text-black px-4 py-2 font-semibold rounded-full">Follow Me&lt;/span>
&lt;/button>
</pre>
<p>The button should look like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/follow-me-button.png" alt="Follow Me Button" width="730" height="75"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/08/follow-me-button.png" alt="Follow Me Button" width="730" height="75"/></noscript></p>
<p>Now, we need to add a <code>bg-white</code> class to the span tag to hide the button gradient background. We also need to add some padding to the button element to create a border around the <code>span</code> tag. Go ahead and add those classes:</p>
<pre class="language-html hljs">&lt;button class="m-4 p-1 rounded-full bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;span class="block text-black px-4 py-2 font-semibold rounded-full bg-white">Follow Me&lt;/span>
&lt;/button>
</pre>
<p>You can see the button with a gradient border in this demo:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="BarWaeW" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/BarWaeW"><br/>
Button with GRadient Border</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="input-border-gradient">Input border gradient</h3>
<p>Next, we’ll look at how we can add a gradient border around an <code>input</code> tag. This can be a little tricky.</p>
<p>First, let’s create an input with basic styling:</p>
<pre class="language-html hljs">&lt;div class="m-4 rounded-full max-w-sm">
  &lt;label for="name" class="sr-only">Name&lt;/label>
  &lt;input class="p-3 w-full rounded-full focus:outline-none" type="text" id="name" placeholder="Enter Your Name">
&lt;/div>
</pre>
<p>Using the background gradient classes, let’s add a background gradient to the <code>div</code> tag:</p>
<pre class="language-html hljs">&lt;div class="m-4 rounded-full max-w-sm bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;label for="name" class="sr-only">Name&lt;/label>
  &lt;input class="p-3 w-full rounded-full focus:outline-none" type="text" id="name" placeholder="Enter Your Name">
&lt;/div>
</pre>
<p>You should see something like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/enter-name-input-tag.png" alt="Enter Name Input Tag" width="730" height="82"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/08/enter-name-input-tag.png" alt="Enter Name Input Tag" width="730" height="82"/></noscript></p>
<p>Right now, we aren’t able to see any gradient background. This is because the <code>input</code> background overlaps the <code>div</code>’s background gradient.</p>
<p>To make the gradient border visible, we need to add some padding to the <code>div</code>element to create a border around the <code>input</code> tag. Go ahead and add <code>p-1</code> class:</p>
<pre class="language-html hljs">>&lt;div class="m-4 p-1 rounded-full max-w-sm bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;label for="name" class="sr-only">Name&lt;/label>
  &lt;input class="p-3 w-full rounded-full focus:outline-none" type="text" id="name" placeholder="Enter Your Name">
&lt;/div>
</pre>
<p>🤩 Magic! We can now see a gradient border around the <code>input</code> tag!</p>
<p>So what precisely did we do?</p>
<p>We added some space inside the <code>div</code> using the <code>p-1</code> class. This made <code>div</code>’s background gradient visible only on the space that appears as a border around the <code>input</code> tag.</p>
<p>You can see the input element with a gradient border in the demo below:</p>
<p class="codepen"  data-height="399.49609375" data-default-tab="result" data-slug-hash="PoRpQmy" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/pen/PoRpQmy"><br/>
Tailwind CSS Input with Border Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="card-border-gradient">Card border gradient</h3>
<p>Now, let’s see how we can add a border gradient around a card component. Adding a gradient border around a card component is similar to what we saw in the previous section, so let’s first create a card component with basic styling. Just copy and paste the following HTML into your HTML file:</p>
<pre class="language-html hljs">&lt;article class="mx-auto my-4 max-w-sm rounded-xl">
  &lt;div class="p-5 rounded-lg">
    &lt;h4 class="text-2xl font-bold">Take your Web Dev skills to the next level!&lt;/h4>
    &lt;a class="hover:underline text-gray-600" href="https://coding-space.vercel.app" target="_blank" title="codingspace">Visit CodingSpace↗&lt;/a>
  &lt;/a>
&lt;/article>
</pre>
<p>This will create a card component with basic Tailwind CSS styling that looks something like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/webdev-skills-plain.png" alt="Webdev Skills Plain Card Component" width="730" height="139"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/09/webdev-skills-plain.png" alt="Webdev Skills Plain Card Component" width="730" height="139"/></noscript></p>
<p>Let’s add a gradient background to this card by adding gradient classes to the <code>article</code> tag. Go ahead and add those classes:</p>
<pre class="language-html">&lt;article class="mx-auto my-4 max-w-sm rounded-xl bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;div class="p-5 rounded-lg">
    &lt;h4 class="text-2xl font-bold">Take your Web Dev skills to the next level!&lt;/h4>
    &lt;a class="hover:underline text-gray-600" href="https://coding-space.vercel.app" target="_blank" title="codingspace">Visit CodingSpace↗&lt;/a>
  &lt;/a>
&lt;/article>
</pre>
<p>Now, the card component should look like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/webdev-skills-gradient-background.png" alt="Webdev Skills With Gradient Background Over Entire Text" width="730" height="139"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/09/webdev-skills-gradient-background.png" alt="Webdev Skills With Gradient Background Over Entire Text" width="730" height="139"/></noscript></p>
<p>Can you guess what the next step should be?🤔</p>
<p>We’ll make the <code>div</code>’s background white to hide the gradient background behind it. We’ll also add padding to the <code>article</code> tag using the <code>p-1.5</code> class to create a border around the <code>div</code> element.</p>
<p>Let’s add those classes to create a gradient border around the card component:</p>
<pre class="language-html hljs">&lt;article class="p-1.5 mx-auto my-4 max-w-sm rounded-xl bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;div class="bg-white p-5 rounded-lg">
    &lt;h4 class="text-2xl font-bold">Take your Web Dev skills to the next level!&lt;/h4>
    &lt;a class="hover:underline text-gray-600" href="https://coding-space.vercel.app" target="_blank" title="codingspace">Visit CodingSpace↗&lt;/a>  &lt;/a>
&lt;/article>
</pre>
<p>Now, the card component should look like this:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="mdxmPQG" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/mdxmPQG"><br/>
Gradient Card Component</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="adding-gradient-underline">Adding a gradient underline</h2>
<p>Now, let’s learn how to add a gradient underline to some text in Tailwind CSS. First, let’s create an <code>h1</code> tag with basic styling:</p>
<pre class="language-html hljs">&lt;h1 class="text-3xl font-bold m-4">Level Up your Web Dev Skills, visit &lt;a href="https://coding-space.vercel.app" target="_blank">CodingSpace&lt;/a>&lt;/h1>
</pre>
<p>We should see something like this:</p>
<p><img  src="https://blog.logrocket.com/wp-content/uploads/2022/09/gradient-underline-plain.png" alt="Gradient Underline Plain"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2022/09/gradient-underline-plain.png" alt="Gradient Underline Plain"/></noscript></p>
<p>Now, let’s add a gradient background to the <code>anchor</code> tag. Add the Tailwind CSS background gradient classes like this:</p>
<pre class="language-html hljs">&lt;h1 class="text-3xl font-bold m-4">Level Up your Web Dev Skills, visit &lt;a href="https://coding-space.vercel.app" target="_blank" class="bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">CodingSpace&lt;/a>&lt;/h1>
</pre>
<p>You should see something like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/gradient-underline-background-one-word.png" alt="Gradient Underline Background On One Word" width="730" height="79"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/09/gradient-underline-background-one-word.png" alt="Gradient Underline Background On One Word" width="730" height="79"/></noscript></p>
<p>Let’s give width and height to the background gradient. We’re going to use an arbitrary <code>background-size</code> value like <code>bg-[length:100%_6px]</code> to give a width of <code>100%</code> and height of <code>6px</code>. If you’re unfamiliar with arbitrary values, you can refer to the Tailwind CSS <a href="https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values">documentation</a> to learn more about them.</p>
<p>We also need to add the <code>bg-no-repeat</code> class to prevent the gradient background from repeating:</p>
<pre class="language-html hljs">&lt;h1 class="text-3xl font-bold m-4">Level Up your Web Dev Skills, visit &lt;a href="https://coding-space.vercel.app" target="_blank" class="bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500 bg-[length:100%_6px] bg-no-repeat">CodingSpace&lt;/a>&lt;/h1>
</pre>
<p>Now, you should see something like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/gradient-underline-top.png" alt="Gradient Background With Underline On Top" width="730" height="79"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/09/gradient-underline-top.png" alt="Gradient Background With Underline On Top" width="730" height="79"/></noscript></p>
<p>The last thing we need to do is change the position of this background to the bottom using the <code>bg-bottom</code> class:</p>
<pre class="language-html hljs">&lt;h1 class="text-3xl font-bold m-4">Level Up your Web Dev Skills, visit &lt;a href="https://coding-space.vercel.app" target="_blank" class="bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500 bg-[length:100%_6px] bg-no-repeat bg-bottom">CodingSpace&lt;/a>&lt;/h1>
</pre>
<p>You can now see the gradient underline under the text!</p>
<p class="codepen"  data-height="400.05078125" data-default-tab="result" data-slug-hash="jOzmXgv" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/pen/jOzmXgv"><br/>
Tailwind CSS Underline Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="building-gradient-progress-bar">Building a gradient progress bar</h2>
<p>Now, let’s see how to build a gradient progress bar using Tailwind CSS. To begin, we’ll start by creating a div element with some basic styling applied:</p>
<pre class="language-html hljs">&lt;div class="w-full rounded-full h-2.5 bg-gray-200 mt-8">&lt;/div>
</pre>
<p>Next, we’ll put a second <code>div</code> element inside the first one, to which we’ll apply a background gradient and specify the width of the inner div (e.g., <code>50%</code>) to indicate the progress.</p>
<p>You can see the gradient progress bar in the CodePen demo below:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="ExewMao" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/ExewMao"><br/>
Gradient Progress Bar</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h2 id="how-animate-gradients-tailwind-css">How to animate gradients in Tailwind CSS</h2>
<p><a href="https://blog.logrocket.com/creating-custom-animations-tailwind-css/">Animating in Tailwind CSS can add fun and meaningful interactions</a> to your projects! In this section, we’ll learn how to animate gradients in Tailwind CSS on hover and focus states to create beautiful animation effects. Essentially, we’ll animate the components we’ve already created in this article so far.</p>
<h3 id="button-gradient-background-animation">Button gradient background animation</h3>
<p>First, we’ll see how to animate the background of the button component we’ve already built. Copy and paste the final code from the button border gradient section:</p>
<pre class="language-html hljs">&lt;button class="m-4 p-1 rounded-full bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;span class="block text-black px-4 py-2 font-semibold rounded-full bg-white">Follow Me&lt;/span>
&lt;/button>
</pre>
<p>To add a gradient background on <code>hover</code> state, we need to use the Tailwind CSS <code>hover:</code> pseudo-class. On <code>hover</code> state, we’ll make the background of the <code>span</code> element transparent using the <code>bg-transparent</code> class. We also need to add the <code>transition-colors</code> class to make the transition smooth. Go ahead and those classes:</p>
<pre class="language-html hljs">&lt;button class="m-4 p-1 rounded-full from-rose-400 via-fuchsia-500 to-indigo-500 bg-gradient-to-r">
  &lt;span class="block text-black px-4 py-2 font-semibold rounded-full bg-white hover:bg-transparent hover:text-white transition">Follow Me&lt;/span>
&lt;/button>
</pre>
<p>Now that we’ve added all these classes, you can see the background gradient animation in action in this demo:</p>
<p class="codepen"  data-height="399.89453125" data-default-tab="result" data-slug-hash="JjLJEOp" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/pen/JjLJEOp"><br/>
Animated Tailwind CSS Gradient Background Button</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="input-border-gradient-animation">Input border gradient animation</h3>
<p>We’ll now see how to animate the border of an input component. Copy and paste the final code from the input border gradient section:</p>
<pre class="language-html hljs">&lt;div class="m-4 p-1 rounded-full max-w-sm bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;label for="name" class="sr-only">Name&lt;/label>
  &lt;input class="p-3 w-full rounded-full focus:outline-none" type="text" id="name" placeholder="Enter Your Name">
&lt;/div>
</pre>
<p>We’ll add a gradient border around an input on the hover and focus state, and when the input is in a normal state, we’ll use a solid color to create a default border.</p>
<p>Let’s use the <code>hover:</code> and <code>focus-within:</code> classes. I’ll first briefly explain the <code>focus-within</code> pseudo-class in case you ‘re not familiar with this pseudo-class.</p>
<p>We use the <code>focus-within</code> pseudo-class to style the element when it (or one of its child elements) is in a focus state. In our case, we want to add a gradient border when the <code>div</code> has a hover state or our input (child) has a hover or focus state. Let’s add the <code>hover:</code> and <code>focus-within:</code> pseudo-classes:</p>
<pre class="language-html hljs">&lt;div class="m-4 p-1 rounded-full max-w-sm hover:bg-gradient-to-r focus-within:bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;label for="name" class="sr-only">Name&lt;/label>
  &lt;input class="p-3 w-full rounded-full focus:outline-none" type="text" id="name" placeholder="Enter Your Name">
&lt;/div>
</pre>
<p>We can see the border gradient animation now that we’ve added <code>hover:</code> and <code>focus-within:</code>!<br/>
Now, let’s add a normal border to this input. To do that, add these classes <code>border border-fuchsia-500</code> to the <code>input</code> element:</p>
<pre class="language-html hljs">&lt;div class="m-4 p-1 rounded-full max-w-sm hover:bg-gradient-to-r focus-within:bg-gradient-to-r focus from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;label for="name" class="sr-only">Name&lt;/label>
  &lt;input class="p-3 w-full rounded-full border border-fuchsia-500 focus:outline-none" type="text" id="name" placeholder="Enter Your Name">
&lt;/div>
</pre>
<p>You should see something like this:</p>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/enter-name-button-two.png" alt="Enter Name Button Two" width="730" height="82"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/08/enter-name-button-two.png" alt="Enter Name Button Two" width="730" height="82"/></noscript></p>
<p>Uh oh, there is a problem. This default border remains even when <code>input</code> or <code>div</code>is in a hover or focus state. To hide that, we need to add a <code>border-transparent</code> class to make it invisible on the hover or focus state. Go ahead and add the highlighted classes:</p>
<pre class="language-html hljs">&lt;div class="m-4 p-1 rounded-full max-w-sm hover:bg-gradient-to-r focus-within:bg-gradient-to-r focus from-rose-400 via-fuchsia-500 to-indigo-500">
  &lt;label for="name" class="sr-only">Name&lt;/label>
  &lt;input class="p-3 w-full rounded-full border border-fuchsia-500 focus:outline-none focus:border-transparent hover:border-transparent" type="text" id="name" placeholder="Enter Your Name">
&lt;/div>
</pre>
<p>You can see the final border gradient animation in action in this demo:</p>
<p class="codepen"  data-height="399.7890625" data-default-tab="result" data-slug-hash="abYwKze" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/pen/abYwKze"><br/>
Tailwind CSS Input with Animated Border Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="glowing-button-gradient-animation">Glowing button gradient animation</h3>
<p>Now, let’s learn how to use Tailwind CSS to build a glowing button that transitions smoothly on <code>hover</code>.</p>
<p>To begin, we start with a basic HTML structure. We’ll create a <code>div</code> with a black background that covers the entire screen and centers our content using the flexbox utility classes.</p>
<pre class="language-html hljs">&lt;div class="flex h-screen items-center justify-center bg-black">
  // content goes here
&lt;/div>
</pre>
<p>Inside this <code>div</code>, we’ll create another <code>div</code> that acts as the container for our <code>button</code> and the background element, <code>bg</code>, that will give the button its glowing effect:</p>
<pre class="language-html hljs">&lt;div class="flex h-screen items-center justify-center bg-black">
  &lt;div class="relative">
    // content goes here
  &lt;/div>
&lt;/div>
</pre>
<p>This inner <code>div</code> has the relative position class, which will be used to position the gradient background absolutely.</p>
<p>Next, create the button element inside the inner <code>div</code>, like this:</p>
<pre class="language-html hljs">&lt;div class="flex h-screen items-center justify-center bg-black">
  &lt;div class="relative">
    &lt;button class="relative rounded-lg bg-black px-7 py-4 text-white">Follow me on LogRocket&lt;/button>
  &lt;/div>
&lt;/div>
</pre>
<p>To create the glowing effect, we’ll create another <code>div</code> just above the <code>button</code> tag and use the <code>bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500</code> classes to specify a gradient.</p>
<p>We’ll also use the <code>opacity-75</code> class to set the initial opacity of the gradient to <code>75%</code>:</p>
<pre class="language-html hljs">&lt;div class="flex h-screen items-center justify-center bg-black">
  &lt;div class="relative">
    &lt;div class="absolute -inset-1 rounded-lg bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500 opacity-75">&lt;/div>
    &lt;button class="relative rounded-lg bg-black px-7 py-4 text-white">Follow me on LogRocket&lt;/button>
  &lt;/div>
&lt;/div>
</pre>
<p>As you can see, we also used the <code>absolute</code> and <code>-inset-1</code> classes to position the gradient background <code>div</code> which will help create the glowing effect around the <code>button</code>.</p>
<p>You should see something like this in the browser:</p>
<p><img             class="aligncenter wp-image-163131 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/glowing-button-gradient-animation-example.png" alt="Glowing Button Gradient Animation Example" width="720" height="184"    /><noscript><img               class="aligncenter wp-image-163131 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/glowing-button-gradient-animation-example.png" alt="Glowing Button Gradient Animation Example" width="720" height="184"  /></noscript></p>
<p>Finally, we’ll use the <code>blur</code> class to add a blur effect to the gradient:</p>
<pre class="language-html hljs">&lt;div class="flex h-screen items-center justify-center bg-black">
  &lt;div class="relative">
    &lt;div class="absolute -inset-1 rounded-lg bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500 opacity-75 blur">&lt;/div>
    &lt;button class="relative rounded-lg bg-black px-7 py-4 text-white">Follow me on LogRocket&lt;/button>
  &lt;/div>
&lt;/div>
</pre>
<p>You should see something like this:</p>
<p><img             class="aligncenter wp-image-163133 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/glowing-button-gradient-animation-blur-example.png" alt="Glowing Button Gradient Animation Blur Example" width="720" height="184"    /><noscript><img               class="aligncenter wp-image-163133 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/glowing-button-gradient-animation-blur-example.png" alt="Glowing Button Gradient Animation Blur Example" width="720" height="184"  /></noscript></p>
<p>To make the <code>button</code> glow on hover, we’ll use the <code>group-hover</code> pseudo-class to modify the gradient background’s opacity from <code>75%</code> to <code>100%</code>. We’ll set the transition duration to 500ms for a smooth transition effect. Additionally, adding a <code>group</code> class to the relatively positioned div is necessary for the <code>group-hover</code> pseudo-class to take effect.</p>
<p>You can see the glowing button demo in the CodePen below:</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="xxaXeOo" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/xxaXeOo"><br/>
Glowing Button Gradient</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<h3 id="gradient-underline-animation">Gradient underline animation</h3>
<p>Now, let’s see how to add a gradient underline animation in Tailwind CSS. First, let’s quickly copy and paste the final code from the gradient underline section:</p>
<pre class="language-html hljs">&lt;h1 class="text-3xl font-bold m-4">Level Up your Web Dev Skills, visit &lt;a href="https://coding-space.vercel.app" target="_blank" class="bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500 bg-no-repeat bg-bottom bg-[length:100%_6px]">CodingSpace&lt;/a>&lt;/h1>
</pre>
<p>We’ll animate the underline so that its height will increase from bottom to top. It’ll cover the height of the text when we hover over it.</p>
<p>The key here is that we need to change an underline gradient height on hover. We now have a fixed height of <code>6px</code>, and, to animate it, need to change its height to <code>100%</code> on the hover state.</p>
<p>To get this effect, let’s add the <code>bg-[length:100%_100%]</code> class to an <code>anchor</code> tag on the hover state. We also need to add the <code>transition-[background-size]</code>class to make the transition smooth. Go ahead and add these classes:</p>
<pre class="language-html hljs">&lt;h1 class="text-3xl font-bold m-4">Level Up your Web Dev Skills, visit &lt;a href="https://coding-space.vercel.app" target="_blank" class="bg-gradient-to-r from-rose-400 via-fuchsia-500 to-indigo-500 bg-no-repeat bg-bottom bg-[length:100%_6px] hover:bg-[length:100%_100%] transition-[background-size]">CodingSpace&lt;/a>&lt;/h1>
</pre>
<p>You can see the final underline gradient animation in the demo below.</p>
<p class="codepen"  data-height="300" data-default-tab="css,result" data-slug-hash="eYMRgLR" data-user="rishi111">See the Pen <a href="https://codepen.io/rishi111/embed/eYMRgLR"><br/>
Underline Gradient Animation</a> by Rishi Purwar (<a href="https://codepen.io/rishi111">@rishi111</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>And with that, this tutorial is now complete! I hope you’ve learned a lot about how Tailwind CSS can be used to create a variety of gradient combinations.</p>
<h2 id="conclusion">Conclusion</h2>
<p>To conclude, Tailwind CSS makes adding beautiful gradients to your websites easy and is a great tool to have in your developer’s belt!</p>
<p>I hope that you enjoyed this tutorial on how to add gradients with Tailwind CSS. But why stop there? I encourage you to play around with gradients in Tailwind CSS and create your own gradient custom snippets and share them with the rest of us in the comments below!</p>
<p>As always, if you have questions or comments, feel free to leave them below. I’ll get back to you as soon as I can. Thanks for reading!🙏</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-129276" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-adding-gradients-tailwind-css/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-adding-gradients-tailwind-css/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-129276" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-adding-gradients-tailwind-css/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-129276" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-adding-gradients-tailwind-css/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-adding-gradients-tailwind-css/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to automated testing in Vue with Cypress - LogRocket Blog</title>
			<link>https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to automated testing in Vue with Cypress - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/">A guide to automated testing in Vue with Cypress - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/paulakinyemi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/05/profile.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/05/profile.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/paulakinyemi/">
Paul Akinyemi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a fullstack web developer and technical writer with experience in JavaScript and Python. I love bringing pretty and complex user interfaces to life with clean and efficient code.</span>
 </div>
</div>
<h1 class="posttitle">A guide to automated testing in Vue with Cypress</h1>
<p>
<span class="post-date"><time class="post-date">
October 18, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1904</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>Testing is an absolute essential for any codebase, helping you catch hard-to-find bugs before your users do and serving as documentation of how your code should work. As your project grows and becomes more complex, having thorough documentation along with a bug-free codebase becomes increasingly important for both the UX and the security of your application.</p>
<p>If you’re using Vue, Cypress is <a href="https://blog.logrocket.com/how-to-write-end-to-end-tests-cypress-nodejs/">one of the best tools available for testing your application</a>. In this article, we’ll learn how to test individual Vue components with Cypress.</p>
<p>To follow along with this tutorial, you’ll need:</p>
<ul>
<li>A text editor</li>
<li>Node.js installed locally</li>
<li>Working knowledge of HTML, CSS, JavaScript, Vue, and Cypress</li>
</ul>
<p>Keep in mind that this tutorial uses <a href="https://blog.logrocket.com/provide-inject-vue-js-3-composition-api/">Vue 3 and the Composition API</a>.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#component-tests-vs-e2e-tests">Component tests vs. E2E tests</a></li>
<li><a href="#why-cypress">Why Cypress?</a></li>
<li><a href="#testing-vue-components-cypress">Testing Vue components with Cypress</a>
<ul >
<li><a href="#project-setup">Project setup</a></li>
<li><a href="#building-component">Building the component</a></li>
<li><a href="#writing-the-tests">Writing the tests</a>
<ul >
<li><a href="#testing-modal-render">Testing that the modal renders</a></li>
<li><a href="#testing-prop">Testing the prop</a></li>
<li><a href="#testing-emitted-events">Testing emitted events</a></li>
<li><a href="#testing-slots">Testing slots</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="component-tests-vs-e2e-tests">Component tests vs. E2E tests</h2>
<p>The goal of an end-to-end (E2E) test is to experience your entire application in the same way that an end user would, ensuring that it works as intended. While a component test uses the same general idea, it focuses on testing each component of your frontend as an independent piece without considering how well the component works together with everything else. Therefore, even if all of your component tests pass, it doesn’t guarantee that your app is working correctly as a whole.</p>
<p>So, why bother with component testing? Component tests are quicker to write, requiring much less setup and infrastructure. If you’re building a library, component tests are invaluable because it’s much more sensible to test each component individually. When testing an application, it’s easier to fix issues within a component that might’ve been hard to pinpoint in an E2E test due to the component’s smaller scope. Ideally, your project should have a mix of both component and E2E tests.</p>
<h2 id="why-cypress">Why Cypress?</h2>
<p>The Vue docs <a href="https://vuejs.org/guide/scaling-up/testing.html#component-testing">recommend Cypress for testing components</a> whose behavior depends on rendering styles. In addition, Cypress is free, open source, and easy to set up and install. Cypress tests are easy to read and write, and it has very <a href="https://docs.cypress.io/">thorough documentation</a>.</p>
<h2 id="testing-vue-components-cypress">Testing Vue components with Cypress</h2>
<p>First, we’ll learn how to add Cypress to our Vue project, and then we’ll write tests for our Cypress components. In this tutorial, we’ll test a simple modal that looks like the image below:</p>
<p><img             class="aligncenter wp-image-137767 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/testing-simple-vue-modal-cypress.png" alt="Testing Simple Vue Modal Cypress" width="730" height="313"    /><noscript><img               class="aligncenter wp-image-137767 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/10/testing-simple-vue-modal-cypress.png" alt="Testing Simple Vue Modal Cypress" width="730" height="313"  /></noscript></p>
<h3 id="project-setup">Project setup</h3>
<p>First, open up your terminal and navigate to the directory where you want your project to live. Next, run the following command in your terminal to <a href="https://blog.logrocket.com/vite-3-vs-create-react-app-comparison-migration-guide/">create an application with Vue and Vite</a>:</p>
<pre class="language-bash hljs">npm init <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e5939080a5898491809691">[email protected]</a>
</pre>
<p>The command will prompt you to answer a series of questions; answer them with the configuration shown below:</p>
<p><img             class="aligncenter wp-image-137770 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/vue-cypress-project-configuration.png" alt="Vue Cypress Project Configuration" width="619" height="188"    /><noscript><img               class="aligncenter wp-image-137770 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/10/vue-cypress-project-configuration.png" alt="Vue Cypress Project Configuration" width="619" height="188"  /></noscript></p>
<p>Now, you should have a new directory called <code>first-component-test</code>. Run the following commands:</p>
<pre class="language-bash hljs">cd first-component-test
npm install
npm run dev
</pre>
<p>The code above will switch directories for you, install the necessary dependencies, and then start a development server for your application. Now, the <code>first-component-test</code> directory should have the following structure:</p>
<p><img             class="aligncenter wp-image-137783 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/first-component-test-folder-structure.png" alt="First Component Test Folder Structure" width="303" height="551"    /><noscript><img               class="aligncenter wp-image-137783 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/10/first-component-test-folder-structure.png" alt="First Component Test Folder Structure" width="303" height="551"  /></noscript></p>
<p>Let’s remove some unnecessary files from this project. Go into <code>cypress/support/component.js</code> and remove the following line:</p>
<pre class="language-javascript hljs">import '@/assets/main.css'
</pre>
<p>Delete the <code>src/assets</code> and <code>src/components/icons</code> folders. Delete all the <code>.vue</code> files inside <code>src/components</code>, and, in their place, create a file in <code>src/components</code> called <code>Modal.vue</code>.</p>
<p>Replace the contents of <code>src/App.vue</code> with the following code:</p>
<pre class="language-javascript hljs">&lt;script setup>
import Modal from "./components/Modal.vue"
&lt;/script>

&lt;template>
  &lt;Modal />
&lt;/template>
</pre>
<p>Finally, remove the following line from <code>src/main.js</code>:</p>
<pre class="language-javascript hljs">import './assets/main.css'
</pre>
<p>With that, you’re good to go!</p>
<h3 id="building-component">Building the component</h3>
<p>Since the focus of this tutorial is testing, and this modal is a simple component, we won’t spend much time on the code for it. Add the following code into <code>src/components/Modal.vue</code>:</p>
<pre class="language-javascript hljs">&lt;template>
  &lt;button
      @click="open = true; $emit('modalOpened')"
      data-cy="open-button"
  >
      Open Modal
  &lt;/button>

  &lt;Teleport to="body">
    &lt;div v-show="open" class="modal" data-cy="modal-body">
      &lt;div class="content"
           data-cy="modal-content"
           :
      >
        &lt;div data-cy="default-slot">
          &lt;slot>
            &lt;p>Hello from the modal!&lt;/p>
          &lt;/slot>
        &lt;/div>
        &lt;div data-cy="extra-slot">
          &lt;slot name="extra">&lt;/slot>
        &lt;/div>
        &lt;button @click="open = false; $emit('modalClosed')" data-cy="close-modal">Close&lt;/button>
      &lt;/div>
    &lt;/div>
  &lt;/Teleport>
&lt;/template>
&lt;script setup>
import {ref} from "vue";
const open = ref(false);
const props  = defineProps({
  color: String
})
const contentColor = props.color ? props.color : "white"
defineEmits(['modalOpened', 'modalClosed'])
&lt;/script>
&lt;style scoped>
.modal {
  position: fixed;
  height: 100%;
  top: 0;
  left: 0;
  right: 0;
  background-color: rgba(0,0,0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
}
.modal > .content {
  width: fit-content;
  padding: 2rem;
}
&lt;/style>
</pre>
<p>The code above contains the template for the button that opens the modal and the modal body itself, a close button, and a couple of slots. It also contains the logic that controls opening and closing the modal, logic that lets the modal accept a prop called <code>color</code>, logic to emit events when the modal opens and closes, and a small amount of styling.</p>
<h3 id="writing-the-tests">Writing the tests</h3>
<p>Next, you’ll write a set of tests to check that the modal works correctly. Start by creating a new file in your <code>src/components/__tests__</code> folder called <code>modal.cy.js</code>. Then, add the following code into <code>modal.cy.js</code>:</p>
<pre class="language-javascript hljs">import Modal from "../Modal.vue"

describe("Modal component tests", () => {
    const modalBodySelector = '[data-cy="modal-body"]'
    const modalContentSelector = '[data-cy="modal-content"]'
    const openButtonSelector = '[data-cy="open-button"]'
    const closeButtonSelector = '[data-cy="close-modal"]'
})
</pre>
<p>The code above imports your <code>Modal</code> component and creates selectors that target portions of the modal’s template.</p>
<h4 id="testing-modal-renders">Testing that the modal renders</h4>
<p>The first test we’ll write checks that the modal opens and closes and that its structure is intact. Write the following code inside the <code>describe</code> block after the last <code>const</code> statement:</p>
<pre class="language-javascript hljs">it ("opens and closes correctly", () => {
        cy.mount(Modal)
        cy.get(modalBodySelector).should("not.be.visible")
        cy.get(openButtonSelector).should("have.text", " Open Modal ").click()
        cy.get(modalBodySelector).should("be.visible")
        cy.get(modalContentSelector)
            .should("be.visible")
            .should("have.css", "background-color", "rgb(255, 255, 255)")
        cy.get(closeButtonSelector).click()
        cy.get(modalBodySelector).should("not.be.visible")
})
</pre>
<p>The test begins by mounting the <code>Modal</code> component, creating it, and attaching it the DOM with the <code>cy.mount</code> <span >command, </span><span >a custom command that Cypress added </span><span >while it was setting up to allow you to mount individual components.</span></p>
<p>The rest of the test is standard Cypress. It ensures that the body of the modal isn’t visible and that the open button exists and has the correct text. Next, it clicks the open button and ensures that the modal body is visible and that its content has the correct background color, white. It then clicks the close button and checks that the modal body is invisible once again.</p>
<p>Now, you can run your test. Open a new terminal window and run the following command to start the Cypress test runner:</p>
<pre class="language-bash hljs">npm run test:unit
</pre>
<p>In the dialog, choose whichever browser you prefer, then click on <code>modal.cy.js</code> to run your test. You should see it pass like in the following image:</p>
<p><img             class="aligncenter wp-image-137781 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/selecr-browser-run-cypress-test.png" alt="Select Browser Run Cypress Test" width="730" height="318"    /><noscript><img               class="aligncenter wp-image-137781 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/10/selecr-browser-run-cypress-test.png" alt="Select Browser Run Cypress Test" width="730" height="318"  /></noscript></p>
<p>Now that Cypress is open, the test will rerun whenever you make changes to <code>modal.cy.js</code>.</p>
<h4 id="testing-prop">Testing the prop</h4>
<p>Next, we’ll write a test to check that when the <code>color</code> prop passes a value to the modal, the modal’s background color matches the value. Add the following code after the previous <code>it</code> block:</p>
<pre class="language-javascript hljs"> it ("changes color in response to props", () => {
        cy.mount(Modal, { props: {color: 'red'} })
        cy.get(openButtonSelector).click()
        cy.get(modalContentSelector)
            .should("be.visible")
            .and("have.css", "background-color", "rgb(255, 0, 0)")
})
</pre>
<p>Just like in the first test, the first step is to mount the component. But here, we’re doing something new. We’re passing <code>cy.mount</code> an <code>options</code> object with a property called <code>props</code>. The <code>props</code> property allows you to pass props to your mounted component. In this test, we’re passing in the prop called <code>color</code> with a value of <code>red</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>After mounting, the test opens the modal, then checks that the background color is the same as the prop you passed in. If you open Cypress again, you should see that the new test is passing, and the modal’s background is now red:</p>
<p><img             class="aligncenter wp-image-137776 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/test-modal-background-color.png" alt="Test Modal Background Color" width="730" height="200"    /><noscript><img               class="aligncenter wp-image-137776 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/10/test-modal-background-color.png" alt="Test Modal Background Color" width="730" height="200"  /></noscript></p>
<h4 id="testing-emitted-events">Testing emitted events</h4>
<p>Now, we’ll write a test to make sure that the modal emits events when it opens and closes. Add the following code after the last <code>it</code> block:</p>
<pre class="language-javascript hljs">it ("fires the right event when the modal opens", () => {
        const openSpy = cy.spy().as('openSpy')
        cy.mount(Modal, { props: {onModalOpened: openSpy} })
        cy.get(openButtonSelector).click()
        cy.get('@openSpy').should("have.been.called")
})

it ("fires the right event when the modal closes", () => {
        const closeSpy = cy.spy().as('closeSpy')
        cy.mount(Modal, { props: {onModalClosed: closeSpy} })
        cy.get(openButtonSelector).click()
        cy.get(closeButtonSelector).click()
        cy.get('@closeSpy').should("have.been.called")
})
</pre>
<p>The first test kicks things off by creating a Cypress spy, which is a function wrapper that allows you to track when the function it wraps is called, then aliasing it as <code>openSpy</code>. You’re aliasing the spy so that Cypress can use its alias for debugging purposes.</p>
<p>After creating a spy, the test mounts <code>Modal</code> and assigns <code>openSpy</code> to the <code>modalOpened</code> event. Therefore, whenever <code>modalOpened</code> fires, <code>openSpy</code> will be called. It then opens the modal and asserts that <code>openSpy</code> was actually called. The second test follows a similar process with a spy aliased as <code>closeSpy</code> and the <code>modalClosed</code> event.</p>
<h4 id="testing-slots">Testing slots</h4>
<p>We’ll write one final test to ensure that the slots of your modal work as they should. Add the following code after the last <code>it</code> block:</p>
<pre class="language-javascript hljs">it ("renders the correct content when given slots", () => {
        const slots = {
            default: () => 'Some default content',
            extra: () => 'Some extra text',
        }
        cy.mount(Modal, { slots })
        cy.get(openButtonSelector).click()
        cy.get("[data-cy='default-slot']")
            .should('not.have.text', 'Hello from the modal!')
            .and('have.text', 'Some default content')
        cy.get("[data-cy='extra-slot']")
            .and('have.text', 'Some extra text',)
})
</pre>
<p>The test begins by creating a <code>slots</code> object with two properties, <code>default</code> and <code>extra</code>. The value of each property is a function that returns a text value, and the names of the properties correspond to the names of the slots you’re testing.</p>
<p>Next, the test mounts <code>Modal</code> and passes <code>cy.mount</code> an <code>options</code> object, just like before. However, this time, instead of having a <code>props</code> property, you’re passing your <code>slots</code> as the value of the <code>slots</code> property. Next, the test opens the modal, checks that the modal doesn’t have the default text, and makes sure that it has the text you passed in with the slots.</p>
<p>If you open Cypress, you should now see that the modal has the correct text content:</p>
<p><img             class="aligncenter wp-image-137774 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/cypress-modal-correct-text-content.png" alt="Cypress Modal Correct Text Content" width="730" height="211"    /><noscript><img               class="aligncenter wp-image-137774 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/10/cypress-modal-correct-text-content.png" alt="Cypress Modal Correct Text Content" width="730" height="211"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we learned how component testing differs from E2E testing, why you should use Cypress for component testing, and the basics of how to test your Vue components with Cypress. If you’d like to explore more about testing Vue components in Cypress, check out <a href="https://docs.cypress.io/guides/component-testing/quickstart-vue">the docs</a>. Thanks for reading, and happy testing!</p><div class="code-block code-block-20" >
<div class="blog-plug inline-plug vue-inline"><h2>Experience your Vue apps exactly how a user does</h2> Debugging Vue.js applications can be difficult, especially when there are dozens, if not hundreds of mutations during a user session. If you’re interested in monitoring and tracking Vue mutations for all of your users in production, <a href="https://lp.logrocket.com/blg/vue-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/00591d0-687474703a2f2f692e696d6775722e636f6d2f6a3049327856572e706e67.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens in your Vue apps including network requests, JavaScript errors, performance problems, and much more. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. </p><p>The LogRocket Vuex plugin logs Vuex mutations to the LogRocket console, giving you context around what led to an error, and what state the application was in when an issue occurred.</p><p>Modernize how you debug your Vue apps - <a class="signup" href="https://lp.logrocket.com/blg/vue-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-8 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-8 .fadeOut {
    opacity:0 !important;
}

.code-block-8 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-137725" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-137725" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-137725" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/a-guide-to-automated-testing-in-vue-with-cypress/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to better state management with Preact Signals - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-better-state-managment-preact-signals/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-better-state-managment-preact-signals/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to better state management with Preact Signals - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-better-state-managment-preact-signals/">A guide to better state management with Preact Signals - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/nefejames/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nefejames/">
Nefe James <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nefe is a frontend developer who enjoys learning new things and sharing his knowledge with others.</span>
</div>
</div>
<h1 class="posttitle">A guide to better state management with Preact Signals</h1>
<p>
<span class="post-date"><time class="post-date">
December 16, 2022 </time></span>
 <span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2156</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<article class="article-post">
<p>Preact is a small, <a href="https://preactjs.com/">lightweight alternative to React</a> with the same modern API. As part of its latest updates, Preact<a href="https://preactjs.com/blog/introducing-signals/"> recently released Signals</a>, a performant state management library with a set of reactive primitives for managing the application state.</p>
<p>Signals automatically updates the state when the value changes, comes with no dependency arrays, and updates the DOM directly — making it lightning fast. The Preact team claims this makes Signals a better way to manage state.</p>
<p>In this article, we will learn how Signals works, its benefits, features, and more.</p>
<p><em>Jump ahead: </em></p>
<ul>
<li><a href="#what-signals">What is Signals?</a></li>
<li><a href="#motivation-behind-signals">The motivation behind Signals</a></li>
<li><a href="#signals-different">What makes Signals different?</a></li>
<li><a href="#benefits-managing-state-signals">The benefits of managing state with Signals</a></li>
<li><a href="#managing-react-app-state-signals">Managing React app state with Signals</a></li>
<li><a href="#deriving-state-using-computed-signal">Deriving state using computed signal</a>
<ul >
<li><a href="#setting-home-component">Setting up the <code>Home</code> component</a></li>
</ul>
</li>
<li><a href="#preact-signals-vs-solidjs-signals">Preact Signals vs. SolidJS Signals</a></li>
</ul>
<h2 id="what-signals">What is Signals?</h2>
<p>Signals is a library written in<a href="https://blog.logrocket.com/tag/vanilla-javascript/"> pure JavaScript</a>, which means we can use it in<a href="https://blog.logrocket.com/tag/vue/"> Vue.js</a>,<a href="https://logrocket.com/for/angular"> Angular</a>,<a href="https://blog.logrocket.com/tag/svelte/"> Svelte</a>, and any application with a JavaScript file. While it can be used in any JavaScript file, the Preact team also developed packages for<a href="https://github.com/preactjs/signals"> Preact</a> and<a href="https://github.com/preactjs/signals/blob/main/packages/react/README.md#react-integration"> React</a>. Signals was built by drawing inspiration from<a href="https://blog.logrocket.com/whats-new-solidjs-v1-3/"> Solid</a> and Vue.</p>
<p>According to the <a href="https://preactjs.com/guide/v10/signals/">docs</a>, at its core, a signal is an object with a <code>.value</code> property that holds some value. Accessing a signal’s value property from within a component automatically updates that component when the value of that signal changes. We will understand this more and see how it works later in the article.</p>
<p>At the time of writing, there are currently three versions of Preact Signals packages:</p>
<ul>
<li><a href="https://github.com/preactjs/signals">@preact/signals-core</a> v1.2.2: For the shared core functionality</li>
<li><a href="https://github.com/preactjs/signals/tree/main/packages/preact#preact-integration">@preact/signals</a> v1.1.2: For the Preact bindings</li>
<li><a href="https://github.com/preactjs/signals/blob/main/packages/react/README.md#react-integration">@preact/signals-react</a> v1.2.1: For the React bindings</li>
</ul>
<h2 id="motivation-behind-signals">The motivation behind Signals</h2>
<p>The Signals team comprises developers with years of experience building software applications for startups and large-scale businesses. Over time, they’ve discovered a recurring problem with managing the application state.</p>
<p>To understand the problem Signals aims to solve, let’s consider a real-world scenario. Say a parent component holds some state has two children components, and one of the children has to access that state:</p>
<pre class="language-javascript hljs">import { useState } from "react";

export default function App() {
  const [count, setCount] = useState(0);
  function addToCount() {
    setCount((count) => count + 1);
  }
  return (
    &lt;div className="App">
      &lt;Parent count={count} addToCount={addToCount} />
    &lt;/div>
  );
}

function Parent({ count, addToCount }) {
  return (
    &lt;div>
      &lt;ChildOne />
      &lt;ChildTwo count={count} addToCount={addToCount} />
    &lt;/div>
  );
}

function ChildOne() {
  return &lt;p>A Dummy Counter App&lt;/p>;
}

function ChildTwo({ count, addToCount }) {
  return (
    &lt;div>
      &lt;span>{count}&lt;/span>
      &lt;div>
        &lt;button onClick={addToCount}>+&lt;/button>
      &lt;/div>
    &lt;/div>
  );
}</pre>
<p>In the code snippet below, the <code>Parent</code> acts as a container that passes the <code>count</code> state to <code>ChildTwo</code>, while <code>ChildOne</code> is a stateless component. The problem lies in what happens when we click the button to <strong>update the state</strong>.</p>
<p><code>Parent</code>, <code>ChildOne</code>, and <code>ChildTwo</code> all re-render, even though <code>ChildTwo</code> is the only component directly using the state. While we can address this problem of unnecessary re-renders using methods such as <a href="https://blog.logrocket.com/react-re-reselect-better-memoization-cache-management/"><code>memoization</code></a>, the Preact team aims to eliminate this issue altogether with Signals.</p>
<p>We can address this performance issue of unnecessary re-renders by switching to Signals:</p>
<pre class="language-javascript hljs">import { signal } from "@preact/signals-react"; //importing signal

export default function App() {
  const count = signal(0); //creating the signal

  function addToCount() {
    return (count.value = count.value + 1); //updating the count
  }
  
  return (
    &lt;div className="App">
      &lt;Parent count={count} addToCount={addToCount} />
    &lt;/div>
  );
}

function Parent({ count, addToCount }) {
  return (
    &lt;div>
      &lt;ChildOne />
      &lt;ChildTwo count={count} addToCount={addToCount} />
    &lt;/div>
  );
}

function ChildOne() {
  return &lt;p>A Dummy Counter App&lt;/p>;
}

function ChildTwo({ count, addToCount }) {
  return (
    &lt;div>
      &lt;span>{count.value}&lt;/span> //accessing the count value
      &lt;div>
        &lt;button onClick={addToCount}>+&lt;/button>
      &lt;/div>
    &lt;/div>
  );
}</pre>
<p>The application has become more performant by changing only four lines of code. How does Signals achieve this? How does it prevent unnecessary re-rendering and ensure optimal performance when reacting to state updates?</p>
<p>This is possible because a signal is an object that contains a value. Unlike the <code>useState</code> scenario that passes the state directly through the component tree, Signals only passes the object, which acts as a reference to the value. This ensures that only the components that access the <code>.value</code> of the <code>signal</code> object render when the state changes.</p>
<p>Signals track when their value is accessed and updated. Accessing a signal’s <code>.value</code> property from within a component automatically re-renders the component when that signal’s value changes. As a result, a signal can be updated without re-rendering the components it was passed through because those components see the signal and not its value.</p>
<h2 id="signals-different">What makes Signals different?</h2>
<p>Signals was built with performance in mind, and the following features and behaviors make it distinct. The team behind Signals <a href="https://preactjs.com/blog/introducing-signals/#:~:text=To%20achieve%20this%20level%20of%20performance%2C%20signals%20were%20built%20on%20these%20key%20principles%3A">describes it as follows</a>:</p>
<ul>
<li>Lazy by default: Only signals that are currently used somewhere are observed and updated — disconnected signals don’t affect performance</li>
<li>Optimal updates: If a signal’s value hasn’t changed, components and effects that use that signal’s value won’t be updated, even if the signal’s dependencies have changed</li>
<li>Optimal dependency tracking: The framework tracks which signals everything depends on for you — no dependency arrays like with Hooks</li>
<li>Direct access: Accessing a signal’s value in a component automatically subscribes to updates without the need for selectors or Hooks</li>
</ul>
<h2 id="benefits-managing-state-signals">The benefits of managing state with Signals</h2>
<p>The first benefit of managing state with Signals is that Signals does not re-render a whole component or application when state changes. Instead, it updates the part of the application attached to the state value being tracked. This ensures that applications remain performant while ensuring reactivity in response to user actions. According to<a href="https://preactjs.com/guide/v10/signals/"> the documentation</a>, what makes Signals unique and great is that:</p>
<blockquote><p>State changes automatically update components and UI in the most efficient way possible. Automatic state binding and dependency tracking allows Signals to provide excellent ergonomics and productivity while eliminating the most common state management footguns.</p></blockquote>
<p>Second, we can declare global Signals and import them into <code>children</code> components throughout the application. It simplifies the complexities around state management by providing a simple and intuitive plug-and-play API that is easy to use.</p>
<p>Lastly, we don’t have to set up a dependencies array like React’s <a href="https://blog.logrocket.com/guide-to-react-useeffect-hook/"><code>useEffect</code></a> Hook. Signals will automatically detect dependencies and call effects when dependencies change.</p>
<h2 id="managing-react-app-state-signals">Managing React app state with Signals</h2>
<p>Let’s implement our knowledge of Signals and use it to manage the state of a simple counter application.</p>
<p>First, start by setting up a fresh React app with <code>npx create-react-app signals-react-app</code>. Then, install the React package using <code>npm install @preact/signals-react</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Copy the code below into your <code>App.js</code> file to set up the counter application:</p>
<pre class="language-javascript hljs">import { signal } from "@preact/signals-react";

const count = signal(0);

function increaseCount() {
  return (count.value = count.value + 1);
}
function reduceCount() {
  return (count.value = count.value - 1);
}

export default function App() {
  return (
    &lt;div className="App">
      &lt;span>{count}&lt;/span>
      &lt;div>
        &lt;button onClick={reduceCount}>-&lt;/button>
        &lt;button onClick={increaseCount}>+&lt;/button>
      &lt;/div>
    &lt;/div>
  );
}</pre>
<p>In the code above, we accessed the <code>signal</code> object from the <code>@preact/signals-react</code> package and used that to set up a <code>count</code> state. The value we passed to the signal is now accessible from its <code>.value</code> property.</p>
<p>Second, we set up two functions, <code>increaseCount</code> and <code>reduceCount</code>, which increase and reduce the value of the count, respectively. And we passed the functions to the buttons’ <code>onClick</code> handler.</p>
<p>This is a basic implementation of Signals, but it does a good job of showing us how it works.</p>
<h2 id="deriving-state-using-computed-signal">Deriving state using computed signals</h2>
<p>Besides the <code>signal</code> object, Signals also has a <code>computed</code> function that we can use to set up derived states. With <code>computed</code>, we can create a new signal from the other signals’ values. The returned computed signal is read-only and is automatically updated when any signal that depends on it changes.</p>
<p>Let’s set up a dummy user authentication application to see how <code>computed</code> works. Here are some pictures of what we will build:</p>
<p><img             class="aligncenter size-full wp-image-145108 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/signals-state-management.png" alt="Signals Examples for State Management" width="730" height="487"    /><noscript><img               class="aligncenter size-full wp-image-145108" src="https://blog.logrocket.com/wp-content/uploads/2022/12/signals-state-management.png" alt="Signals Examples for State Management" width="730" height="487"  /></noscript></p>
<p>We will start by creating an <code>AuthSignal.js</code> file containing the state and authentication logic. Copy and paste the following code into the file:</p>
<pre class="language-javascript hljs">import { signal, computed } from "@preact/signals-react";

export const user = signal(null); //the default state

//derived state based on whether a user exists
export const isLoggedIn = computed(() => {
  return !!user.value;
});</pre>
<p>In the code above, we imported <code>signal</code> and <code>computed</code> from <code>@preact/signals-react</code>. We also set up a <code>user</code> signal with a default value of <code>null</code>, meaning there is no logged in user at first.</p>
<p>We also used the <code>user</code> signal to derive the value of <code>isLoggedIn</code>. If a user exists, <code>isLoggedIn</code> will be <code>true</code>. Then, we exported <code>user</code> and <code>isLoggedIn</code> for use in other parts of the application.</p>
<p>The <code>Header</code> component consists of the logged in user’s name and two buttons: one for logging in and the other for logging out.</p>
<p>To set it up, copy and paste the code below:</p>
<pre class="language-javascript hljs">import { user } from "../AuthSignals";

const dummyUserData = {
  name: "John Doe",
  email: "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b1dbded9dff1d5ded49fd2dedc">[email protected]</a>"
};
export default function Header() {
  return (
    &lt;header>
      &lt;h1>A cool header&lt;/h1>
      &lt;ul>
        {user.value &amp;&amp; &lt;li>{user.value.name}&lt;/li>}
        {!user.value ? (
          &lt;li>
            &lt;button onClick={() => { user.value = dummyUserData }}>
              Login
            &lt;/button>
          &lt;/li>
        ) : (
          &lt;li>
            &lt;button onClick={() => { user.value = null }}>
              Logout
            &lt;/button>
          &lt;/li>
        )}
      &lt;/ul>
    &lt;/header>
  );
}</pre>
<p>Let’s break it down and look at what we did:</p>
<ul>
<li>Imported the <code>user</code> signal from <code>AuthSignals</code></li>
<li>Defined a <code>dummyUserData</code> containing some random user details</li>
<li>Conditionally rendered the user’s name if there is a logged in user</li>
<li>Conditionally rendered the login and logout button based on the state of the <code>user</code> signal’s value</li>
<li>When the <strong>login button</strong> is clicked, we populate the <code>user</code> signal with the <code>dummyUserData</code></li>
<li>When the <strong>logout button</strong> is clicked, we set the <code>user</code> signal to <code>null</code></li>
</ul>
<h3 id="setting-home-component">Setting up the <code>Home</code> component</h3>
<p>The <code>Home</code> component displays a simple message notifying us if we are logged in or not. Let’s set it up:</p>
<pre class="language-javascript hljs">import { isLoggedIn } from "../AuthSignals";
export default function Home() {
  return (
    &lt;div>
      &lt;span>
        {isLoggedIn.value ? "You are logged in" : "You are not logged in"}
      &lt;/span>
    &lt;/div>
  );
}</pre>
<p>Remember, <code>isLoggedIn</code> is a derived state with a <code>Boolean</code> value that changes based on the value of <code>user</code> signal. We conditionally render a message base on the value of <code>isLoggedIn</code>.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>Finally, we bring the components together in the <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import Header from "./components/Header";
import Home from "./components/Home";
export default function App() {
  return (
    &lt;div>
      &lt;div className="App">
        &lt;Header />
        &lt;Home />
      &lt;/div>
    &lt;/div>
  );
}</pre>
<p>With that, we have learned more about <code>computed</code> and used it to create a dummy user authentication system.</p>
<h2 id="preact-signals-vs-solidjs-signals">Preact Signals vs. SolidJS Signals</h2>
<p>Like Preact,<a href="https://www.solidjs.com/"> Solid</a> also comes with its own state management solution called<a href="https://www.solidjs.com/tutorial/introduction_signals"> Signals</a>. As we saw earlier, Solid is one of the frameworks from which the Preact team drew inspiration.</p>
<p>Solid provides a <code>createSignal</code> function that is similar to React’s <code>useState</code> Hook:</p>
<pre class="language-javascript hljs">import { createSignal } from "solid-js";

const [count, setCount] = createSignal(0);

function Counter() {
  const increment = () => setCount(count() + 1);

  return (
  &lt;button type="button" onClick={increment}>
    {count()}
  &lt;/button>);
}</pre>
<p>It will take the initial state as a parameter and return two items we can access by array destructuring. The first item in the array is the <code>getter</code> and the second item is the state’s <code>setter</code>.</p>
<p>Note, like Preact Signals, we don’t need to keep <code>createSignal</code> inside the component function. Similar to Preact Signals’ <code>computed</code> function, Solid also provides a way to create derived signals:</p>
<pre class="language-javascript hljs">const doubleCount = () => count() * 2;

return (
  &lt;button type="button" onClick={increment}>
    {count()}
    &lt;div>Count: {doubleCount()}&lt;/div>;
  &lt;/button>);</pre>
<p>Although the two-state management packages share some similarities, there are some differences between the two.</p>
<p>First, Preact and Solid’s Signals have different APIs, where Solid’s implementation is similar to React’s <code>useState</code>. Solid’s method for creating derived signals is different from Preact’s. And unlike Preact, Solid’s Signals can only be used in Solid applications.</p>
<h2>Conclusion</h2>
<p>Preact Signals is a fresh and welcoming solution to the problems related to state management issues. It is still relatively new, but it appears to have a promising future because of its minimalistic and simple architecture.</p>
<p>While you may not be immediately sold on using it for large-scale projects, consider trying it out in personal and practice ones. You may fall in love with it. Grab the code for the demo applications we built through the <a href="https://codesandbox.io/s/preact-signals-counter-app-fz6hix">counter app</a> and <a href="https://codesandbox.io/s/preact-signals-auth-demo-fpidmp">user auth system</a>.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-145093" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-better-state-managment-preact-signals/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-better-state-managment-preact-signals/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-145093" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-better-state-managment-preact-signals/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-145093" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-better-state-managment-preact-signals/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-better-state-managment-preact-signals/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to choosing the right React state management solution - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to choosing the right React state management solution - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/">A guide to choosing the right React state management solution - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ivakop/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/iva.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/iva.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ivakop/">
Iva Kop <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a self-taught software developer passionate about frontend development and architecture.</span>
</div>
</div>
<h1 class="posttitle">A guide to choosing the right React state management solution</h1>
<p>
 <span class="post-date"><time class="post-date">
September 9, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">13 min read</span>
<span class="wordcount">3880</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was updated 23 September 2022 to add information on why we need state management in React, add other state management tools previously not included in the article, such as Jotai, MobX, and Zustand, and add information on which state management tool is the best for React.</em></p>
<p>State management is a fundamental challenge every developer faces when building a React app — and it is not a trivial one. There are many valid ways to manage state in React, and each one solves a salient set of problems.</p>
<p>As developers, it is important not only to be aware of the different approaches, tools, and patterns, but to also understand their use cases and trade-offs.</p>
<p>A helpful way to think about state management is in terms of the problems we solve in our projects. In this article, we’ll cover common use cases for managing state in React and learn when you should consider using each solution. We’ll accomplish this by building a simple counter app.</p>
<ul>
<li><a href="#why-need-state-management-react">Why do I need state management in React?</a></li>
<li><a href="#local-component-state-react">Local component state in React</a></li>
<li><a href="#component-props-react">Component props in React</a></li>
<li><a href="#routing-react">Routing in React</a></li>
<li><a href="#using-reacts-context-api-usereducer">Using React’s Context API with <code>useReducer</code></a></li>
<li><a href="#using-redux-state-management">Using Redux for state management</a></li>
<li><a href="#atomic-state-recoil">Atomic state with Recoil</a></li>
<li><a href="#state-machines-xstate">State machines with XState</a></li>
<li><a href="#primitive-flexible-state-management-jotai">Primitive and flexible state management with Jotai</a></li>
<li><a href="#simple-scalable-state-management-mobx">Simple, scalable state management with MobX</a></li>
<li><a href="#using-zustand-state-management">Using Zustand for state management</a></li>
<li><a href="#data-fetching-react-query">Data fetching with React Query</a></li>
<li><a href="#which-state-management-best">Which state management tool is the best for React?</a></li>
</ul>
<h2 id="why-need-state-management-react">Why do I need state management in React?</h2>
<p>First, let’s discuss the importance of state management. State in React is a JavaScript object that can change the behavior of a component as a result of a user’s action. States can also be thought of as a component’s memory.</p>
<p>React apps are built with components that manage their own state. This works OK for small apps, but as the app grows in complexity, dealing with shared states between components gets increasingly complex and problematic.</p>
<p>Here’s a simple example of how a successful transaction within a fintech application might influence several other components:</p>
<ul>
<li>The new transaction will change the displaying available balance on the homepage</li>
<li>The new transaction will now show up as the most recent one in the user’s total transaction history</li>
</ul>
<p>This is why state management is essential when developing a scalable React application. In the long run, if state is not managed correctly, the app will undoubtedly encounter issues. Constantly troubleshooting and rebuilding an app like this might become tedious.</p>
<h2 id="local-component-state-react">Local component state in React</h2>
<p>The simplest way to implement the counter is to use local component state with the <code>useState</code> Hook.</p>
<pre class="language-javascript hljs">import { useState } from 'react'

const Counter = () => {
    const [count, setCount] = useState(0)

    const increaseCount = () => {
        setCount(count + 1)
    }

    const decreaseCount = () => {
        if (count > 0) {
            setCount(count - 1)
        }
    }
    return (
        &lt;div>
            &lt;h1>{count}&lt;/h1>
            &lt;button onClick={decreaseCount}>-&lt;/button>
            &lt;button onClick={increaseCount}>+&lt;/button>
        &lt;/div>
    )
}

export default Counter
</pre>
<p>So we are done, right? Article over? Not quite.</p>
<p>If this was a real project, it is likely that in the future, we would need more buttons and headers elsewhere in our app. And it is a good idea to make sure they all look and behave consistently, which is why we should probably turn them into reusable React components.</p>
<h2 id="component-props-react">Component props in React</h2>
<p>Turning our <code>Button</code> and <code>Header</code> into separate components reveals a new challenge. We need some way to communicate between them and the main <code>Counter</code> component.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
 <div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>This is where component props come into play. For our <code>Header</code> component, we add a <code>text</code> prop. For our <code>Button</code>, we need both a <code>label</code> prop and an <code>onClick</code> callback. Our code now looks like this:</p>
<pre class="language-javascript hljs">import { useState } from 'react'

const Header = ({ text }) => &lt;h1>{text}&lt;/h1>

const Button = ({ label, onClick }) => (
    &lt;button onClick={onClick}>{label}&lt;/button>
)

const Counter = () => {
    const [count, setCount] = useState(0)

    const increaseCount = () => {
        setCount(count + 1)
    }

    const decreaseCount = () => {
        if (count > 0) {
            setCount(count - 1)
        }
    }
    return (
        &lt;div>
            &lt;Header text={count} />
            &lt;Button onClick={decreaseCount} label="-" />
            &lt;Button onClick={increaseCount} label="+" />
        &lt;/div>
    )
}

export default Counter
</pre>
<p>This looks great! But imagine the following scenario: what if we need to only display the count on our home route and have a separate route <code>/controls</code> where we display both the count and the control buttons? How should we go about this?</p>
<h2 id="routing-react">Routing in React</h2>
<p>Given that we are building a single page application, there is now a second piece of state we need to handle — the route we are on. Let’s see how this can be done with <a href="https://reactrouter.com" target="_blank" rel="noopener">React Router</a>, for example.</p>
<pre class="language-javascript hljs">import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import { useState } from 'react'

const Header = ({ text }) => &lt;h1>{text}&lt;/h1>

const Button = ({ label, onClick }) => (
    &lt;button onClick={onClick}>{label}&lt;/button>
)

const Home = ({ count }) => {
    return &lt;Header text={count} />
}

const Controls = ({ count, decreaseCount, increaseCount }) => {
    return (
        &lt;>
            &lt;Header text={count} />
            &lt;Button onClick={decreaseCount} label="-" />
            &lt;Button onClick={increaseCount} label="+" />
        &lt;/>
    )
}

const App = () => {
    const [count, setCount] = useState(0)
    const increaseCount = () => {
        setCount(count + 1)
    }
    const decreaseCount = () => {
        if (count > 0) {
            setCount(count - 1)
        }
    }

    return (
        &lt;Router>
            &lt;nav>
                &lt;Link to="/">Home&lt;/Link>
                &lt;Link to="/controls">Controls&lt;/Link>
            &lt;/nav>
            &lt;Switch>
                &lt;Route path="/controls">
                    &lt;Controls
                        increaseCount={increaseCount}
                        decreaseCount={decreaseCount}
                        count={count}
                    />
                &lt;/Route>
                &lt;Route path="/">
                    &lt;Home count={count} />
                &lt;/Route>
            &lt;/Switch>
        &lt;/Router>
    )
}

export default App
</pre>
<p>Nice! We now have our separate routes and everything works as expected. However, you may notice a problem. We are keeping our count state in <code>App</code> and using props to pass it down the component tree. But it appears that we pass down the same prop over and over again until we reach the component that needs to use it. Of course, as our app grows, it will only get worse. This is known as prop drilling.</p>
<p>Let’s fix it!</p>
<h2 id="using-reacts-context-api-usereducer">Using React’s Context API with <code>useReducer</code></h2>
<p>Wouldn’t it be great if there is a way for our components to access the <code>count</code> state without having to receive it via a props? A combination of the React Context API and the <code>useReducer</code> Hook does just that:</p>
<pre class="language-javascript hljs">import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import { createContext, useContext, useReducer } from 'react'

const initialState = 0

const reducer = (state, action) => {
    switch (action.type) {
        case 'INCREMENT':
            return state + 1
        case 'DECREMENT':
            return state - 1 >= 0 ? state - 1 : 0
        default:
            return state
    }
}

const CountContext = createContext(null)

const useCount = () => {
    const value = useContext(CountContext)
    if (value === null) throw new Error('CountProvider missing')
    return value
}

const CountProvider = ({ children }) => (
    &lt;CountContext.Provider value={useReducer(reducer, initialState)}>
        {children}
    &lt;/CountContext.Provider>
)

const Header = ({ text }) => &lt;h1>{text}&lt;/h1>

const Button = ({ label, onClick }) => (
    &lt;button onClick={onClick}>{label}&lt;/button>
)

const Home = () => {
    const [state] = useCount()
    return &lt;Header text={state} />
}

const Controls = () => {
    const [state, dispatch] = useCount()
    return (
        &lt;>
            &lt;Header text={state} />
            &lt;Button onClick={() => dispatch({ type: 'DECREMENT' })} label="-" />
            &lt;Button onClick={() => dispatch({ type: 'INCREMENT' })} label="+" />
        &lt;/>
    )
}

const App = () => {
    return (
        &lt;CountProvider>
            &lt;Router>
                &lt;nav>
                    &lt;Link to="/">Home&lt;/Link>
                    &lt;Link to="/controls">Controls&lt;/Link>
                &lt;/nav>
                &lt;Switch>
                    &lt;Route path="/controls">
                        &lt;Controls />
                    &lt;/Route>
                    &lt;Route path="/">
                        &lt;Home />
                    &lt;/Route>
                &lt;/Switch>
            &lt;/Router>
        &lt;/CountProvider>
    )
}

export default App
</pre>
<p>Awesome! We have solved the problem of prop drilling. We get additional points for having made our code more declarative by creating a descriptive reducer.</p>
<p>We are happy with our implementation, and, for many use cases, it is really all we need. But wouldn’t it be great if we could persist the count so it does not get reset to 0 every time we refresh the page? And to have a log of the application state? What about crash reports?</p>
<p>It would be very helpful to know the exact state that our app was in when it crashed, as well as how to take advantage of amazing dev tools while we are at it. Well, we can do exactly just that using Redux!</p>
<h2 id="using-redux-state-management">Using Redux for state management</h2>
<p>We can do all of the above and much more by using <a href="https://redux.js.org/" target="_blank" rel="noopener">Redux</a> to manage the state of our app. The tool has a strong community behind it and a <a href="https://redux.js.org/introduction/ecosystem" target="_blank" rel="noopener">rich ecosystem</a> that can be leveraged with ease.</p>
<p>Let’s set up our counter with <a href="https://redux-toolkit.js.org/" target="_blank" rel="noopener">Redux Toolkit</a>.</p>
<pre class="language-javascript hljs">import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import { configureStore, createSlice } from '@reduxjs/toolkit'
import { useSelector, useDispatch, Provider } from 'react-redux'

const counterSlice = createSlice({
    name: 'counter',
    initialState: {
        value: 0,
    },
    reducers: {
        increment: state => {
            state.value += 1
        },
        decrement: state => {
            if (state.value > 0) {
                state.value -= 1
            }
        },
    },
})

const store = configureStore({
    reducer: { counter: counterSlice.reducer },
})

const { increment, decrement } = counterSlice.actions

const Header = ({ text }) => &lt;h1>{text}&lt;/h1>

const Button = ({ label, onClick }) => (
    &lt;button onClick={onClick}>{label}&lt;/button>
)

const Home = () => {
    const count = useSelector(state => state.counter.value)
    return &lt;Header text={count} />
}

const Controls = () => {
    const count = useSelector(state => state.counter.value)
    const dispatch = useDispatch()
    return (
        &lt;>
            &lt;Header text={count} />
            &lt;Button onClick={() => dispatch(decrement())} label="-" />
            &lt;Button onClick={() => dispatch(increment())} label="+" />
        &lt;/>
    )
}

const App = () => {
    return (
        &lt;Provider store={store}>
            &lt;Router>
                &lt;nav>
                    &lt;Link to="/">Home&lt;/Link>
                    &lt;Link to="/controls">Controls&lt;/Link>
                &lt;/nav>
                &lt;Switch>
                    &lt;Route path="/controls">
                        &lt;Controls />
                    &lt;/Route>
                    &lt;Route path="/">
                        &lt;Home />
                    &lt;/Route>
                &lt;/Switch>
            &lt;/Router>
        &lt;/Provider>
    )
}
export default App
</pre>
<p>This looks really neat! Our state is now stored in the global Redux store and managed with pure functions (Redux Toolkit uses <a href="https://github.com/immerjs/immer" target="_blank" rel="noopener">Immer</a> under the hood to guarantee immutability). We can already take advantage of the awesome <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en" target="_blank" rel="noopener">Redux DevTools</a>.</p>
<p>But what about things like handling side-effects, or making the state persistent, or implementing logging and/or crash reporting? This is where the Redux ecosystem we mentioned earlier comes into play.</p>
<p>There are multiple options to handle side-effects, including <a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a> and <a href="https://redux-saga.js.org/" target="_blank" rel="noopener">redux-saga</a>. Libraries like <a href="https://github.com/rt2zz/redux-persist" target="_blank" rel="noopener">redux-persist</a> are great for saving the data from the redux store in local or session storage to make it persistent.</p>
<p>In short, Redux is great! It’s used widely in the React world and for a good reason.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>But what if we prefer a more decentralized approach to state management? Maybe we are worried about performance or have frequent data updates in different branches of the React tree, so we want to avoid unnecessary re-renders while keeping everything in sync.</p>
<p>Or, maybe we need a good way to derive data from our state and compute if efficiently and robustly on the client. And what if we want to achieve all of this without sacrificing the ability to have app-wide state observation? Enter Recoil.</p>
<h2 id="atomic-state-recoil">Atomic state with Recoil</h2>
<p>It’s a bit of a stretch to suggest that we are able to hit the limits of React Context or Redux with a simple counter app. For a better atomic state management use case, check out <a href="https://www.youtube.com/watch?v=_ISAA_Jt9kI&amp;t=39s" target="_blank" rel="noopener">Dave McCabe’s awesome video</a> on <a href="https://recoiljs.org/" target="_blank" rel="noopener">Recoil</a>.</p>
<p>Nevertheless, thinking of state in terms of atoms does help expand our vocabulary of what state management could look like. Also, the Recoil API is fun to play with, so let’s reimplement our counter with it.</p>
<pre class="language-javascript hljs">import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import { atom, useRecoilState, RecoilRoot } from 'recoil'

const countState = atom({
    key: 'count',
    default: 0,
})

const Header = ({ text }) => &lt;h1>{text}&lt;/h1>

const Button = ({ label, onClick }) => (
    &lt;button onClick={onClick}>{label}&lt;/button>
)

const Home = () => {
    const [count] = useRecoilState(countState)
    return &lt;Header text={count} />
}

const Controls = () => {
    const [count, setCount] = useRecoilState(countState)
    const increaseCount = () => {
        setCount(count + 1)
    }
    const decreaseCount = () => {
        if (count > 0) {
            setCount(count - 1)
        }
    }
    return (
        &lt;>
            &lt;Header text={count} />
            &lt;Button onClick={decreaseCount} label="-" />
            &lt;Button onClick={increaseCount} label="+" />
        &lt;/>
    )
}

const App = () => {
    return (
        &lt;RecoilRoot>
            &lt;Router>
                &lt;div className="App">
                    &lt;nav>
                        &lt;Link to="/">Home&lt;/Link>
                        &lt;Link to="/controls">Controls&lt;/Link>
                    &lt;/nav>
                    &lt;Switch>
                        &lt;Route path="/controls">
                            &lt;Controls />
                        &lt;/Route>
                        &lt;Route path="/">
                            &lt;Home />
                        &lt;/Route>
                    &lt;/Switch>
                &lt;/div>
            &lt;/Router>
        &lt;/RecoilRoot>
    )
}

export default App
</pre>
<p>Using Recoil feels very much like using React itself. A peek back at our initial examples reveals how similar the two are. Recoil also has its very own set of <a href="https://recoiljs.org/docs/guides/dev-tools/" target="_blank" rel="noopener">dev tools</a>. An important consideration to keep in mind is that this library is still experimental and subject to change. Use it with caution.</p>
<p>Okay, we can have a Recoil counter. But state management preferences depend on our priorities. What if the app is built by a team and it is really important that the developer, the designer, the project manager, and everyone else speak the same language when it comes to user interfaces?</p>
<p>What if, in addition, this language could be directly expressed with highly declarative code in our app? And what if we could guarantee that we never reach impossible states, thereby eliminating a whole class of bugs? Guess what? We can.</p>
<h2 id="state-machines-xstate">State machines with XState</h2>
<p>All of the above can be achieved with the help of state charts and state machines. State charts help visualize all the possible states of our app and define what is possible. They are easy to understand, share, and discuss within the entire team.</p>
<p>Here is our counter as a state chart:</p>
<p><img             class="aligncenter wp-image-53627 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/06/counter-state-chart.png" alt="Counter Is Allowed To Increase, It Is Not Possible For Counter To Decrease " width="474" height="342"    /><noscript><img               class="aligncenter wp-image-53627 size-full" src="https://blog.logrocket.com/wp-content/uploads/2021/06/counter-state-chart.png" alt="Counter Is Allowed To Increase, It Is Not Possible For Counter To Decrease " width="474" height="342"  /></noscript></p>
<p>Although this is a trivial implementation, we can already see one cool advantage of using state machines. Initially, it is not possible to decrement the counter, as its initial value is 0. This logic is declared right our state machine and visible on the chart, where with other approaches we explored, it was harder, generally speaking, to find the right place for it.</p>
<p>Here is our state machine in practice:</p>
<pre class="language-javascript hljs">>import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import { useMachine } from '@xstate/react'
import { createMachine, assign } from 'xstate'

export const counterMachine = createMachine({
    initial: 'active',
    context: { count: 0 },
    states: {
        active: {
            on: {
                INCREMENT: {
                    actions: assign({ count: ctx => ctx.count + 1 }),
                },
                DECREMENT: {
                    cond: ctx => ctx.count > 0,
                    actions: assign({
                        count: ctx => ctx.count - 1,
                    }),
                },
            },
        },
    },
})

const Header = ({ text }) => &lt;h1>{text}&lt;/h1>

const Button = ({ label, onClick }) => (
    &lt;button onClick={onClick}>{label}&lt;/button>
)

const Home = () => {
    const [state] = useMachine(counterMachine)
    return &lt;Header text={state.context.count} />
}

const Controls = () => {
    const [state, send] = useMachine(counterMachine)
    return (
        &lt;>
            &lt;Header text={state.context.count} />
            &lt;Button onClick={() => send('DECREMENT')} label="-" />
            &lt;Button onClick={() => send('INCREMENT')} label="+" />
        &lt;/>
    )
}

const App = () => {
    return (
        &lt;Router>
            &lt;nav>
                &lt;Link to="/">Home&lt;/Link>
                &lt;Link to="/controls">Controls&lt;/Link>
            &lt;/nav>
            &lt;Switch>
                &lt;Route path="/controls">
                    &lt;Controls />
                &lt;/Route>
                &lt;Route path="/">
                    &lt;Home />
                &lt;/Route>
            &lt;/Switch>
        &lt;/Router>
    )
}

export default App
</pre>
<p>Wow, this is really great! However, we are only <a href="https://blog.logrocket.com/using-state-machines-with-xstate-and-react/" target="_blank" rel="noopener">barely scratching the surface of state machines here</a>. To find out more about them, check out the docs for <a href="https://xstate.js.org/docs/" target="_blank" rel="noopener">XState</a>.</p>
<p>Alright, last scenario! What happens if our simple frontend counter app has a backend? What if we need to communicate with a server in order to get or modify the count? What if, in addition, we want to handle data-fetching-related challenges like asynchronicity, loading states, caching, and re-fetching?</p>
<h2 id="primitive-flexible-state-management-jotai">Primitive and flexible state management with Jotai</h2>
<p>We’ve already covered the atomic model in the Recoil section, and Jotai follows a similar approach to this. J<a href="https://blog.logrocket.com/jotai-vs-recoil-what-are-the-differences/" target="_blank" rel="noopener">otai is even inspired by the Recoil atomic model</a>, so this should be a walk in the park for us. Let’s reimplement our counter app, but with Jotai this time.</p>
<pre class="language-javascript hljs">import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import { atom, useAtom } from 'jotai'

// Create your atoms and derivatives
const countState = atom(0)

const Header = ({ text }) => {text}

const Button = ({ label, onClick }) => {label}

const Home = () => {
    const [count] = useAtom(countState)
    return 
}

const Controls = () => {
    const [count, setCount] = useAtom(countState)

    const increaseCount = () => {
        setCount(count + 1)
    }

    const decreaseCount = () => {
        if (count > 0) {
            setCount(count - 1)
        }
    }
    return (
        &lt;>        
    )
}

const App = () => {
    return (
                        Home
                        Controls            

    )
}

export default App
</pre>
<p>We can see how fairly similar Jotai is to Recoil. Using Jotai also feels like using React’s <code>useState</code>.</p>
<p>With Jotai, state can be created by combining atoms, and renders are optimized according to atom dependency. This eliminates the requirement for the memoization technique and overcomes the extra rerender issue of React context.</p>
<h2 id="simple-scalable-state-management-mobx">Simple, scalable state management with MobX</h2>
<p>MobX is highly influenced by the principals of object-oriented programming and reactive programming. It allows you to identify specific pieces of data as “observable,” then wraps those up and tracks any changes made to that data, updating any other code that is observing the data.</p>
<p>It’s fairly easy to rewrite the state management for our counter app using MobX, so let’s do that:</p>
<pre class="language-javascript hljs"> import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
 import { observable, action } from 'mobx';

const appState = observable({
  count: 0,
  incCounter: action("decrease", function () {
    appState.count += 1;
  })
  decCounter:action("increase", function() {
    appState.count -= 1;
  })
})

const Header = ({ text }) => {text}

const Button = ({ label, onClick }) => {label}

const Home = () => {
    const count = appState.count
    return 
}

const Controls = () => {
    const count = appState.count

    const increaseCount = appState.incCounter 

    const decreaseCount = () => {
        if (count > 0) {
            appState.decCounter
        }
    }
    return (
        &lt;>        
    )
}

const App = () => {
    return (
                        Home
                        Controls            

    )
}

export default App
</pre>
<h2 id="using-zustand-state-management">Using Zustand for state management</h2>
<p><a href="https://blog.logrocket.com/managing-react-state-zustand/" target="_blank" rel="noopener">Zustand is a state management library that is both powerful and compact</a>. Its API is built around hooks, making it simple to comprehend and use. Zustand addresses common issues such as the <a href="https://react-redux.js.org/api/hooks#stale-props-and-zombie-children" target="_blank" rel="noopener">zombie child problem</a>, <a href="https://github.com/bvaughn/rfcs/blob/useMutableSource/text/0000-use-mutable-source.md" target="_blank" rel="noopener">React concurrency</a>, and <a href="https://github.com/facebook/react/issues/13332" target="_blank" rel="noopener">context loss</a> between mixed renderers.</p>
<p>Let’s set up our counter app using Zustand:</p>
<pre class="language-javascript hljs"> import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import create from "zustand";

const useStore= create((set) => ({
  count: 0;
  increment: ()=> set((state) => ({ count: state.count + 1})),
  decrement: ()=> set((state) => ({ count: state.count - 1}))
}))

const Header = ({ text }) => {text}

const Button = ({ label, onClick }) => {label}

const Home = () => {
    const count = useStore((state) => state.count)
    return 
}

const Controls = () => {
    const count = useStore((state) => state.count)

    const increaseCount = useStore((state) => state.increment)    }

    const decreaseCount = () => {
        if (count > 0) {
            useStore(useStore(state) => state.decrement)
        }
    }
    return (
        &lt;>        
    )
}

const App = () => {
    return (
                        Home
                        Controls            

    )
}

export default App
</pre>
<p>Zustand is simple to use and set up; all you need to do is create a store (your store is a hook! ), as seen in the example above. A store can contain anything, including functions, objects, and primitives. We can now use our hook across our application.</p>
<p>Both Zustand and Redux are based on an immutable state model, thus, if you understand Redux, you should be able to understand Zustand.</p>
<h2 id="data-fetching-react-query">Data fetching with React Query</h2>
<p>The final React state management tool I want to highlight is <a href="https://react-query.tanstack.com/" target="_blank" rel="noopener">React Query</a>. It is specifically designed to make data fetching easy and to solve the problems outlined above (and more). Let’s see it in action.</p>
<pre class="language-javascript hljs">import { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'
import { ReactQueryDevtools } from 'react-query/devtools'
import axios from 'axios'
import {
    useQuery,
    useMutation,
    QueryClient,
    QueryClientProvider,
} from 'react-query'

const useCount = () => {
    return useQuery('count', async () => {
        const { data } = await axios.get('https://our-counter-api.com/count')
        return data
    })
}

const useIncreaseCount = () => {
    return useMutation(() =>
        axios.post('https://our-counter-api.com/increase', {
            onSuccess: () => {
                queryClient.invalidateQueries('count')
            },
        }),
    )
}

const useDecreaseCount = () => {
    return useMutation(
        () => axios.post('https://our-counter-api.com/descrease'),
        {
            onSuccess: () => {
                queryClient.invalidateQueries('count')
            },
        },
    )
}
const Header = ({ text }) => &lt;h1>{text}&lt;/h1>

const Button = ({ label, onClick }) => (
    &lt;button onClick={onClick}>{label}&lt;/button>
)

const Home = () => {
    const { status, data, error } = useCount()
    return status === 'loading' ? (
        'Loading...'
    ) : status === 'error' ? (
        &lt;span>Error: {error.message}&lt;/span>
    ) : (
        &lt;Header text={data} />
    )
}

const Controls = () => {
    const { status, data, error } = useCount()
    const increaseCount = useIncreaseCount()
    const decreaseCount = useDecreaseCount()

    return status === 'loading' ? (
        'Loading...'
    ) : status === 'error' ? (
        &lt;span>Error: {error.message}&lt;/span>
    ) : (
        &lt;>
            &lt;Header text={data} />
            &lt;Button onClick={() => decreaseCount.mutate()} label="-" />
            &lt;Button onClick={() => increaseCount.mutate()} label="+" />
        &lt;/>
    )
}
const queryClient = new QueryClient()

const App = () => {
    return (
        &lt;QueryClientProvider client={queryClient}>
            &lt;Router>
                &lt;ReactQueryDevtools />
                &lt;nav>
                    &lt;Link to="/">Home&lt;/Link>
                    &lt;Link to="/controls">Controls&lt;/Link>
                &lt;/nav>
                &lt;Switch>
                    &lt;Route path="/controls">
                        &lt;Controls />
                    &lt;/Route>
                    &lt;Route path="/">
                        &lt;Home />
                    &lt;/Route>
                &lt;/Switch>
            &lt;/Router>
        &lt;/QueryClientProvider>
    )
}

export default App
</pre>
<p>The above is a fairly naive implementation with plenty of room for improvement. What is important to note is the ease with which we can make server calls, cache them, and invalidate the cache when needed. In addition, with React Query the task of managing loading and error states in the component becomes much simpler.</p>
<p>It is a great tool that can be used with any backend. <a href="https://blog.logrocket.com/making-graphql-requests-easy-with-react-typescript-and-react-query/" target="_blank" rel="noopener">If you want to know how to set it up with GraphQL, check out my article about it</a>.</p>
<h2 id="which-state-management-best">Which state management tool is the best for React?</h2>
<p>All of the state management libraries discussed above try to solve the same problem, with each offering a unique method for handling shared data across an entire application.</p>
<p>Finding the best state management library is dependent on both the project you’re working on and your own personal preference. Some libraries might be an overkill for cases where React’s <code>useState</code> is perfect for the job.</p>
<p>Redux has inarguably been a longtime community favorite, and it can be found in many older React codebases. As a result of this, having a thorough understanding of Redux is really beneficial in general.</p>
<p>In general, learning Redux and Recoil is a good route to proceed. Recoil handles the problem of state management effectively with a very low learning curve, and a thorough understanding of Redux would substantially cut the time it would take to maintain an older React codebase.</p>
<h2 id="conclusion">Conclusion</h2>
<p>State management in React is an extensive topic. The list of approaches, patterns, and libraries, discussed in this article is neither comprehensive nor definitive. The goal is rather to illustrate the thought process behind solving a specific problem in a particular way.</p>
<p>In the end, what state management in React comes down to is being aware of the different options, understanding their benefits and trade-offs, and ultimately, going with the solution that fits our use case the best.</p>
<p>Happy coding! ✨</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-53597" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-53597" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-53597" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-choosing-right-react-state-management-solution/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to cookies in Next.js - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-cookies-next-js/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-cookies-next-js/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to cookies in Next.js - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-cookies-next-js/">A guide to cookies in Next.js - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
 <div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/georgeyvb/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/07/new.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/07/new.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/georgeyvb/">
Georgey V B <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a self-taught web developer from India. I enjoy learning about new web technologies and working on projects. I hope that my work will assist other developers who are experiencing the same difficulties that I am.</span>
</div>
</div>
<h1 class="posttitle">A guide to cookies in Next.js</h1>
<p>
<span class="post-date"><time class="post-date">
April 4, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1555</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<article class="article-post">
<p>Cookies are data blobs that our browsers unknowingly contain. While some are fervent invaders of privacy, others attempt to improve the browsing experience by keeping track of your browsing habits, preferences, and more. Cookies are useful in situations like <a href="https://blog.logrocket.com/authentication-svelte-using-cookies/">authentication</a>, <a href="https://blog.logrocket.com/ui-ux-best-practices-cookie-notifications/">improving the</a> <a href="https://blog.logrocket.com/ui-ux-best-practices-cookie-notifications/">UX</a>, <a href="https://blog.logrocket.com/javascript-developer-guide-browser-cookies/">quicker response times</a>, and the list goes on.</p>
<p>In this article, we’ll explore two packages that will allow us to achieve setting cookies in a <a href="https://blog.logrocket.com/tag/nextjs/">Next.js</a> application and implement them into an actual use case. To follow along, head over to this <a href="https://github.com/GeoBrodas/cookies-with-nextjs">GitHub</a> <a href="https://github.com/GeoBrodas/cookies-with-nextjs">repository</a>. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#next-js-cookies">Cookies: Boon or ban?</a></li>
<li><a href="#working-with-react-cookies-next-js">Working with react-cookies in Next.js</a>
<ul >
<li><a href="#binding-function-button">Binding a function to a <code>button</code></a></li>
</ul>
</li>
<li><a href="#using-cookies-next-package-next-js">Using the cookies-next package in Next.js</a>
<ul >
<li><a href="#implementing-api-routes">Implementing API routes</a></li>
<li><a href="#accessing-api-routes-frontend">Accessing API routes from the frontend</a></li>
</ul>
</li>
</ul>
<h2 id="next-js-cookies">Cookies: Boon or ban?</h2>
<p>Cookies are little text files that websites place on users’ computers. Cookies have generated discussion in recent years and have both benefits and drawbacks. Cookies can remember user preferences and settings, which can improve your session and personalization of surfing for users. The ability of cookies to trace users’ online behavior, however, presents <a href="https://blog.logrocket.com/data-tracking-react-walker-js/">privacy issues</a>. As a result, several websites have standards requiring them to display their biscuit usage and provide users with the option to opt-out.</p>
<p>Furthermore, a few browsers give users the choice to remove or delete cookies, which may assist in guarding their privacy. Cookies can be helpful for users and websites, but it’s important to abide by the rules and be aware of any privacy dangers. Users are becoming more cautious and switching to different browsers to help them track cookies and disable adverts. It is ultimately up to users and website administrators to use cookies wisely because they can be beneficial and adverse.</p>
<h2 id="working-with-react-cookies-next-js">Working with react-cookies in Next.js</h2>
<p>The first package we will explore is <a href="https://github.com/reactivestack/cookies">react-cookies</a>. This package aims to help you load and save cookies within your React application. Let’s create a simple application that keeps track of registered users.</p>
<p>If you haven’t already, launch a Next.js application by typing the following command:</p>
<pre class="language-bash hljs">npx create-next-app --ts
</pre>
<p>With that done, install react-cookie with the following code:</p>
<pre class="language-bash hljs">npm install react-cookie
</pre>
<p>To start using the Hooks, add the <code>CookiesProvider</code> component in the <code>_app.tsx</code> file, like so:</p>
<pre class="language-jsx hljs">import type { AppProps } from 'next/app';
import { CookiesProvider } from 'react-cookie';

function MyApp({ Component, pageProps }: AppProps) {
  return (
    &lt;CookiesProvider>
      &lt;Component {...pageProps} />
    &lt;/CookiesProvider>
  );
}

export default MyApp;
</pre>
<p>With this done, the Hooks are now available from any part of your application. Start using it by importing the <code>useCookies</code> Hook, as shown below:</p>
<pre class="language-bash hljs">import { useCookies } from 'react-cookie';
</pre>
<p>We can now fetch, add, and remove cookies from the application. Let’s start off by adding a <a href="https://blog.logrocket.com/useeffect-hook-complete-guide/"><code>useEffect</code> Hook</a> to fetch all cookies on load:</p>
<pre class="language-jsx hljs">import { useCookies } from 'react-cookie';

const [cookies, setCookie, removeCookie] = useCookies(['user']);
const Home: NextPage = () => {
  useEffect(() => {
    console.log('Cookies: ', cookies);
  }, [cookies]);

  return (
  &lt;div>...&lt;/div>
)}
</pre>
<p>For now, you shouldn’t be able to see any cookies. So, let’s create a function to set cookies using the <code>setCookie()</code> function:</p>
<pre class="language-jsx hljs">import { useRouter } from 'next/router'

//...inside the defualt function
const router = useRouter();

const setCookieHandler = () => {
  setCookie('new-user', true, {
    path: '/',
  });

  router.replace("/");
};
</pre>
<p>The <code>setCookie()</code> function takes in three arguments: the key, the key-value, and some configuration choices. These choices include, <code>MaxAge</code>, <code>Path</code>, <code>Domain</code>, <code>expires</code>, etc. The <code>path</code> option was used in this case to allow the program to access the cookie from any location.</p>
<p>As you can see, we also used the <code>useRouter()</code> Hook to reload our page using the <code>replace()</code> method to avoid adding a URL entry into the history stack. It will just look like the page re-rendered!</p>
<p>As we move forward, remember that this tutorial is focused only on demonstrating the capabilities of the specific packages. Therefore, we will assume that you understand concepts like authentication flow. To learn more about authentication in Next.js, refer to this <a href="https://blog.logrocket.com/using-supertokens-authentication-next-js/">guide</a>. You can also <a href="https://blog.logrocket.com/build-web3-authentication-flow-react-ether-js-ceramic/">review authentication flows in this article</a>.</p>
<h3 id="binding-function-button">Binding a function to a <code>button</code></h3>
<p>Next up, let’s bind this function to a <code>button</code>. Input the following code:</p>
<pre class="language-jsx hljs">{!cookies['user'] &amp;&amp; (
  &lt;button onClick={setCookieHandler} className={styles.button}>
    Complete new user registration!
  &lt;/button>
)}
</pre>
<p>In this case, the <code>button</code> will only render if the cookie exists. Go ahead and run the development server to see this in action. You can see this cookie visually using the dev tools by triggering <code>Control+Shift+J</code> and then selecting the <strong>Application</strong> section, as shown below:</p>
<p><img             class="aligncenter size-full wp-image-165818 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies.gif" alt="Getting Started With Next.js and Cookies" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-165818" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies.gif" alt="Getting Started With Next.js and Cookies" width="730" height="411"/></noscript></p>
<p>With that done, let’s remove the cookie to allow the user to sign out. First, write another function:</p>
<pre class="language-jsx hljs">const removeCookieHandler = () => {
  removeCookie('new-user');

  router.replace("/");
};
</pre>
<p>Now, bind it to another <code>button</code> that will only render if the cookie is available. What does that mean? The cookie will be available if the user is registered. Here’s what that will look like:</p>
<pre class="language-jsx hljs">{cookies['new-user'] &amp;&amp; (
  &lt;button onClick={removeCookieHandler} className={styles.resetbutton}>
    Reset new user registration
  &lt;/button>
)}
</pre>
<p><img             class="aligncenter size-full wp-image-165840 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-two.gif" alt="Getting Started With Next.js and Cookies Part Two" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-165840" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-two.gif" alt="Getting Started With Next.js and Cookies Part Two" width="730" height="411"/></noscript></p>
<p>With that done, let’s explore the second package, cookies-next.</p>
<h2 id="using-cookies-next-package-next-js">Using the cookies-next package in Next.js</h2>
<p>Moving forward, we will look at how to use the <a href="https://github.com/andreizanik/cookies-next">cookies-next</a> package. This package fits more with the Next.js ecosystem because it can be used anywhere on the client side, on the server side through <a href="https://blog.logrocket.com/getinitialprops-vs-getserversideprops-nextjs/"><code>getServerSideProps</code></a>, and even with Next.js API routes. Here are the two packages head-to-head:</p>
<p><img             class="aligncenter size-full wp-image-165820 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookie-packages.png" alt="Comparing Next.js Cookie Packages" width="730" height="444"    /><noscript><img               class="aligncenter size-full wp-image-165820" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookie-packages.png" alt="Comparing Next.js Cookie Packages" width="730" height="444"  /></noscript></p>
<p>Another surprising fact about cookies-next (this one’s for all the bundle-phobic developers) is that it’s almost half the size of react-cookie. Essentially, making it more desirable to use it in your next project!🎉</p>
<p>As tradition goes, let’s start off by installing cookies-next with the following command:</p>
<pre class="language-bash hljs">npm install cookies-next 
</pre>
<p>The cookies-next package comes inbuilt with similar functions to the react-cookies package. These functions can be used for setting and removing cookies. Let’s create <code>handler</code> functions for setting and removing cookies with the following code:</p>
<pre class="language-javascript hljs">// adding cookies
const addCookie = () => {
  setCookie('user', true, {
    path: '/',
  });
  router.replace('/');
};

// removing cookies
const removeCookie = () => {
  deleteCookie('user', {
    path: '/',
  });
  router.replace('/');
};
</pre>
<p>With that done, you can go ahead and test it out by binding it to different <code>buttons</code> that render if the cookie exists. In addition to <code>getServerSideProps</code> and <a href="https://blog.logrocket.com/building-a-graphql-server-in-next-js/">API routes</a>, cookies-next can also be used on the server side of the application. Let’s look at an example where the user receives some information, has it verified, and then sets a cookie to indicate the information’s legitimacy, all on an API route.</p>
<h3 id="implementing-api-routes">Implementing API routes</h3>
<p>Go ahead and make a new API route inside <code>./pages/api/verify-otp.ts</code>. Inside the file, create a basic <code>handler</code> function with the following code:</p>
<pre class="language-javascript hljs">export default function handler (
  req: NextApiRequest,
  res: NextApiResponse
) {
  return;  
}
</pre>
<p>The cookie will be set to indicate the trustworthiness of the user and expire after a specific period. More specifically, it will expire if there is some type of verification, such as a database to check the credentials or some <a href="https://blog.logrocket.com/creating-split-otp-input-fields-react-native/">OTP logi</a><a href="https://blog.logrocket.com/creating-split-otp-input-fields-react-native/">c</a>. The <code>handler</code> function is as follows:</p>
<pre class="language-javascript hljs">if (
    req.method === 'POST' // only allow POST requests
  ) {
  // caputure the credentials required for verification from the request body
  const { name } = req.body;

  //   otp verification logic

  //   set cookie
  setCookie('authorize', true, {
    req,
    res,
    maxAge: 60 * 60 * 24 * 7, // 1 week
    path: '/',
  });

  //   respond with status and message
  return res.status(200).json({
    message: `${name} is authorized to access`,
    authorize: true,
    code: '20-0101-2092',
  });
}
</pre>
<p>Here, the cookie expires after a week and will require the user to re-verify again. On successful verification, the API responds with a status <code>200</code> message with relevant data that can be displayed in the frontend.</p>
<h3 id="accessing-api-routes-frontend">Accessing API routes from the frontend</h3>
<p>Now, let’s try to access this route from the frontend. The function can be triggered only if the user is registered the first time. Create a function with the following code:</p>
<pre class="language-javascript hljs">const verifyOTP = async (name: string) => {
  const response = await fetch('/api/verify-otp', {
    method: 'POST',
    body: JSON.stringify({ name }),
  });

  const data = await response.json();

  if (data.authorize) {
    setAuthorization(true);
    setLaunchCode(data.code);
  } else {
    setAuthorization(false);
    alert('Invalid OTP');
  }
};
</pre>
<p>We can use the <code>useState</code> Hook to store the data coming from the API route and render the <code>button</code> conditionally and based on the <code>isAuthorized</code> variable. Use the following code:</p>
<pre class="language-javascript hljs">const [isAuthorized, setAuthorization] = useState(false);
const [launchCode, setLaunchCode] = useState('');
</pre>
<p>With this done, go ahead and try out the code written so far. You can check if the cookie exists by opening up the dev tools and heading selecting the <strong>Application</strong> section, as shown below:</p>
<p><img             class="aligncenter size-full wp-image-165822 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-dev-tools.png" alt="Accessing Next.js Dev Tools and Cookies" width="730" height="444"    /><noscript><img               class="aligncenter size-full wp-image-165822" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-dev-tools.png" alt="Accessing Next.js Dev Tools and Cookies" width="730" height="444"  /></noscript></p>
<p>I attempted to make the example more entertaining by generating a random code at every login. It will also set a cookie on the API route. You can experiment with your own original ideas and try out something cooler! Here’s what my example looks like:</p>
<p><img             class="aligncenter size-full wp-image-165824 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-final.gif" alt="Final Product of Creating Cookies in Next.js" width="730" height="411"  /><noscript><img               class="aligncenter size-full wp-image-165824" src="https://blog.logrocket.com/wp-content/uploads/2023/04/next-js-cookies-final.gif" alt="Final Product of Creating Cookies in Next.js" width="730" height="411"/></noscript></p>
<h2>Conclusion</h2>
<p>Cookies are crucial to web development. The react-cookie and cookies-next packages are ideal for various use cases because of their distinctive features and advantages. React-cookie is far more popular, providing simple-to-use APIs and great compatibility with React framework. In contrast, cookies-next, a relatively new package explicitly created for Next.js, offers server-side rendering capabilities and improved security measures.</p>
<p>No matter which package you select, it is essential to understand how cookies operate and how to use them safely to prevent any security issues. These two packages make it simple for developers to handle cookies in Next.js applications, making it simpler to <a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">customi</a><a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">z</a><a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">e</a> <a href="https://blog.logrocket.com/ux-design/using-task-analysis-improve-ux-design/">UX</a> and enhance website speed.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-165797" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-165797" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-165797" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-cookies-next-js/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-cookies-next-js/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to native routing in Expo for React Native - LogRocket Blog</title>
			<link>https://blog.logrocket.com/native-routing-expo-react-native/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/native-routing-expo-react-native/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to native routing in Expo for React Native - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/native-routing-expo-react-native/">A guide to native routing in Expo for React Native - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/emmanueljohn/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emmanueljohn/">
Emmanuel John <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a full-stack software developer, mentor, and writer. I am an open source enthusiast. In my spare time, I enjoy watching sci-fi movies and cheering for Arsenal FC.</span>
</div>
</div>
<h1 class="posttitle">A guide to native routing in Expo for React Native</h1>
 <p>
<span class="post-date"><time class="post-date">
December 14, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1696</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>A decade ago, if anyone told you that you could build native mobile applications using JavaScript without compromising UX, you wouldn’t believe it, right? Then React Native came along and made it possible.</p>
<p>A few years ago, if anyone told you that you could build cross-platform apps using JavaScript without heavy emulators/developer environments such as Android Studio or Xcode, you wouldn’t imagine this working, either, right? Then Expo was created.</p>
<p>Expo and React Native are often interchanged for each other. This is understandable because they have similar features, but there are a few differences between them:</p>
<ul>
<li>Expo builds a layer of tools on top of React Native, allowing developers to build applications without writing any native code</li>
<li>Expo has a CLI (<code>expo cli</code>) that allows developers to create projects, deploy them, and open apps on their devices</li>
<li>Expo has a client app, Expo Go, where you can open your projects without needing Android Studio or Xcode</li>
</ul>
<p>However, Expo and React Native have shared one major feature: navigation. Routing in React Native applications is implemented using <a href="https://blog.logrocket.com/guide-react-native-navigation/">React Navigation</a>, which wraps your app with a <code>navigator</code> component that manages the navigation history and presentation of screens in the app.</p>
<p>This worked great, but it had its problems:</p>
<ul>
<li>You had to install peer dependencies such as <code>react-native-screens</code>, <code>react-native-safe-area-context</code>. This adds extra weight to your app</li>
<li>JavaScript developers love file-based routing. Next.js’s file-based routing style works well, and it has quickly become like the current standard for routing in JavaScript applications</li>
</ul>
<p>This led Evan Bacon, creator of Expo, to build a new library called <a href="https://github.com/expo/router">Expo Router.</a> Expo Router works similarly to the Next.js router. They both generate nested navigation and deep links based entirely on a project’s file structure.</p>
<p>In this article, we’ll look into some pros and cons of Expo Router. Expo Router is currently in beta, but we will build a React Native application using Expo Router for navigation to demonstrate its core concepts.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#core-features-expo-router">Core features of Expo Router</a></li>
<li><a href="#building-react-native-contacts-app-expo-router">Building a React Native contacts app with Expo Router</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="#creating-contact-model-aws-amplify">Creating the contact model with AWS Amplify</a></li>
<li><a href="#initializing-backend-environment">Initializing the backend environment</a></li>
<li><a href="#configuring-app-with-datastore">Configuring the app with DataStore</a>
<ul >
<li><a href="#creating-contacts-using-amplify-studio">Creating contacts using Amplify Studio</a></li>
</ul>
</li>
<li><a href="#rendering-contacts-with-static-route">Rendering contacts with a static route</a></li>
<li><a href="#rendering-single-contacts-with-dynamic-route">Rendering single contacts with a dynamic route</a></li>
</ul>
<h2 id="core-features-expo-router">Core features of Expo Router</h2>
<p>These are the core features of the new Expo Router:</p>
<ul>
<li><strong>Offline-first and fast</strong>: Native apps must handle incoming URLs without an internet connection. Expo Router enables this by implementing these features across the entire framework</li>
<li><strong>Error Handling</strong>: You can <a href="https://blog.logrocket.com/react-error-handling-react-error-boundary/">set up React</a> <a href="https://blog.logrocket.com/react-error-handling-react-error-boundary/">error boundaries</a> on each route</li>
<li><strong>Layout routes</strong>: Most screens in your app will share the same layout components. Expo Router allows you to create a parent layout component in the <code>app</code> directory</li>
<li><strong>Next.js-like linking and dynamic and static routing</strong>: Similar to the <a href="https://blog.logrocket.com/what-you-need-know-new-next-js-router/">Next.js router</a>, you can link routes using the <code>Link</code> component</li>
</ul>
<pre class="language-javascript hljs">import { Link } from "expo-router";

export default function Page() {
return (

Home
);
}</pre>
<p>The only major tradeoff with the new Expo router so far is that it is limited and opinionated. Some developers may appreciate the Expo Router features ,but want to rearrange the file directory structure. Unfortunately, due to its limitations, you might not be able to customize your Expo Router instance to fit your preferred structure just yet.</p>
<h2 id="building-react-native-contacts-app-with-expo-router">Building a React Native contacts app with Expo Router</h2>
<p>Let’s go ahead and build a contacts directory app that uses the Expo Router to navigate between screens.</p>
<p>To follow through the tutorial, ensure you have the following:</p>
<ul>
<li>Node.js ≥v14 installed</li>
<li>Knowledge of JavaScript and React</li>
<li>AWS Amplify CLI installed:<br/>
<code>npm</code> <code>install -g @aws-amplify/cli</code></li>
<li>AWS Amplify configured:<br/>
<code>amplify configure</code></li>
<li>Expo CLI installed:<br/>
<code>npm install -g expo-cli</code></li>
<li>Expo Go (installed from your mobile play store)</li>
</ul>
<p>This is the <a href="https://github.com/emmanuelhashy/RN-contact-app">GitHub repo</a> with the complete code for the demo.</p>
<h2 id="getting-started">Getting started</h2>
<p>Let’s get started by scaffolding a new Expo app. Run this command on your terminal:</p>
<pre class="language-bash hljs">npx create-react-native-app -t with-router
</pre>
<p>This will create a new React Native application with Expo Router configured. Change the directory, initialize Amplify, and install peer dependencies using these commands on your terminal:</p>
<pre class="language-bash hljs">cd ReactNativeContactExpoApp
npx <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2849455844414e51054958586844495c4d5b5c">[email protected]</a>
npm install aws-amplify @react-native-community/netinfo @react-native-async-storage/async-storage
</pre>
<p>To run the app, run <code>yarn start</code> or <code>npm run start</code>.</p>
<pre class="language-plaintext hljs">Starting Metro Bundler
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█ ▄▄▄▄▄ █▄▄███▀ ███ ▄▄▄▄▄ █
█ █   █ █ ▀█ ▄ █▄██ █   █ █
█ █▄▄▄█ █▄ ▄▄▀▀█▄██ █▄▄▄█ █
█▄▄▄▄▄▄▄█▄▀▄▀▄█ █ █▄▄▄▄▄▄▄█
█▄▄▄ ▀▀▄█ ▀████▀██▄██▄ ▄▀▄█
█▀▄▀▄▄▄▄▀▄██▀▀▀▄█▄█ ▀██▀███
█▄▀█▀ ▄▄▀▄▄▀ ▄ █ ▄█ ▄ █ █▀█
█▀▄▀██▀▄█ ▀ █▀███ ▀▀█▀▀█ ▀█
███▄▄▄▄▄█ ▄▀ ▄  ▄ ▄▄▄ ▀▄█▀█
█ ▄▄▄▄▄ ███ ▀▄███ █▄█ █▄  █
█ █   █ █▀▀█▀ ▀▀▀▄▄   █▀▀ █
█ █▄▄▄█ █  ▄▄█▀ ▀▄▀▄█▄▄ ▄██
█▄▄▄▄▄▄▄█▄█▄██▄█▄██████▄▄▄█

› Metro waiting on exp://192.168.55.200:19000
› Scan the QR code above with Expo Go (Android) or the Camera app (iOS)

› Web is waiting on http://localhost:19000

› Press a │ open Android
› Press i │ open iOS simulator
› Press w │ open web

› Press j │ open debugger
› Press r │ reload app
› Press m │ toggle menu

› Press ? │ show all commands
</pre>
<p>Scan the QR code on your mobile Expo Go app and it’ll compile.</p>
<h2 id="creating-contact-model-with-aws-amplify">Creating the contact model with AWS Amplify</h2>
<p>Just like with every other database, DataStore requires a model. To generate this model, head to the <strong>Amplify Directory</strong> > <strong>Backend</strong> > <strong>API</strong> > <strong>(Amplify project name)</strong> > <code>schema.graphql</code>. Modify the <code>schema.graphql</code> with these lines of code:</p>
<pre class="language-json hljs">type Contact @model {
  id: ID!
  name: String!
  phone: String!
  email: String!
  address: String
  message: String
}
</pre>
<p>The contact model has <code>id</code>, <code>name</code>, <code>title</code>, <code>phone</code>, and <code>email</code> as fields. Let’s now go ahead to generate the model with this command on your terminal:</p>
<pre class="language-bash hljs">npm run amplify-modelgen
</pre>
<p>This will create a <code>src</code>/<code>models</code> folder with the model and GraphQL schema.</p>
<h2 id="initializing-backend-environment">Initializing the backend environment</h2>
<p>We need to initialize an Amplify backend environment for the application. To do this, run this command on your terminal:</p>
<pre class="language-bash hljs">amplify init
? Enter a name for the environment dev
? Choose your default editor: Visual Studio Code
Using default provider  awscloudformation
? Select the authentication method you want to use: AWS profile
</pre>
<p>This will create a configuration file in <code>src/aws-config.js</code>. Next, we will deploy the backend and create AWS resources using this command:</p>
<pre class="language-bash hljs">amplify push
...
Do you want to generate code for your newly created GraphQL API? No
...
</pre>
<p>This might take some time to deploy based on the quality of your internet connection.</p>
<h2 id="configuring-app-with-datastore">Configuring the app with DataStore</h2>
<p>Let’s go ahead and configure the Expo app to work with Amplify. Create an <code>app/index.js</code> and add these lines of code:</p>
<pre class="language-javascript hljs">import config from '../src/aws-exports';
import { DataStore, Amplify } from 'aws-amplify';

Amplify.configure(config)
</pre>
<h3 id="creating-contacts-using-amplify-studio">Creating contacts using Amplify Studio</h3>
<p>Let’s add some contacts to our DataStore. To achieve this, head to the AWS Amplify console in your browser. The shortcut is running <code>amplify console</code> in your terminal and selecting <strong>AWS Console</strong>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>To create contacts with Amplify Studio, go to the Amplify dashboard and click <strong>Launch Studio</strong>:</p>
<p><img             class="aligncenter size-full wp-image-146071 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/launch-studio-amplify-studio.png" alt="Launch your studio in Amplify Studio" width="730" height="409"    /><noscript><img               class="aligncenter size-full wp-image-146071" src="https://blog.logrocket.com/wp-content/uploads/2022/12/launch-studio-amplify-studio.png" alt="Launch your studio in Amplify Studio" width="730" height="409"  /></noscript></p>
<p>You should see something like this:</p>
<p><img             class="aligncenter size-full wp-image-146073 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/data-save-deploy.png" alt="Click the Data menu and then save and deploy" width="730" height="406"    /><noscript><img               class="aligncenter size-full wp-image-146073" src="https://blog.logrocket.com/wp-content/uploads/2022/12/data-save-deploy.png" alt="Click the Data menu and then save and deploy" width="730" height="406"  /></noscript></p>
<p>Click the <strong>Data</strong> menu by the left sidebar of the dashboard and click <strong>Save and Deploy</strong>.</p>
<p><img             class="aligncenter size-full wp-image-146075 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/data-modeling-amplify-studio.png" alt="The Data modeling page in Amplify Studio" width="730" height="400"    /><noscript><img               class="aligncenter size-full wp-image-146075" src="https://blog.logrocket.com/wp-content/uploads/2022/12/data-modeling-amplify-studio.png" alt="The Data modeling page in Amplify Studio" width="730" height="400"  /></noscript></p>
<p>You can now see the schema we created and edit it using the UI. Deploying the data model might take few minutes, depending on your internet connection.</p>
<p><img             class="aligncenter size-full wp-image-146077 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/successfully-deployed-data-model.png" alt="Our successfully deployed data model" width="730" height="529"    /><noscript><img               class="aligncenter size-full wp-image-146077" src="https://blog.logrocket.com/wp-content/uploads/2022/12/successfully-deployed-data-model.png" alt="Our successfully deployed data model" width="730" height="529"  /></noscript></p>
<p>When it’s done deploying, open the <strong>Content</strong> menu.</p>
<p><img             class="aligncenter size-full wp-image-146079 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/content-menu-amplify-studio.png" alt="The Content menu in Amplify Studio" width="730" height="402"    /><noscript><img               class="aligncenter size-full wp-image-146079" src="https://blog.logrocket.com/wp-content/uploads/2022/12/content-menu-amplify-studio.png" alt="The Content menu in Amplify Studio" width="730" height="402"  /></noscript></p>
<p>Click the <strong>Create contact</strong> button to create a new contact. You can also auto-generate seed data by clicking the <strong>Actions</strong> dropdown and selecting <strong>Auto-generate data.</strong></p>
<p>That’s it! We’ve successfully created contacts for the application.</p>
<h2 id="rendering-contacts-with-static-route">Rendering contacts with a static route</h2>
<p>Let’s render the contacts. Update the <code>app/index.js</code> with these lines of code:</p>
<pre class="language-javascript hljs">import { View, Text, Button } from "react-native";
import { Link, Stack } from "expo-router";
import config from '../src/aws-exports';
import { DataStore, Amplify } from 'aws-amplify';
import { Contact } from '../src/models'
import { useState } from "react";

Amplify.configure(config)

export default function Home() {
    const [contacts, setContacts] = useState([])

    async function fetchContacts() {
        const allContacts = await DataStore.query(Contact)
        setContacts(allContacts)
    }

    fetchContacts()

    return (
        &lt;View style={container}>
            &lt;Stack.Screen options={{ title: "Contacts" }} />
            {
                contacts.map(contact => (
                    &lt;View key={contact.id} style={contactBox}>

                        &lt;View>
                            &lt;Text style={textStyleName}>{contact.name}&lt;/Text>
                            &lt;Text style={textStyle}>{contact.phone}&lt;/Text>

                        &lt;/View>
                        &lt;Link href={`contacts/${contact.id}`}>
                            &lt;Button
                                title="View contact"
                                color="#841584"
                            />
                        &lt;/Link>
                    &lt;/View>
                ))
            }
        &lt;/View>
    );
}
</pre>
<p>Here, we query the contacts from DataStore by passing the model to the <code>DataStore .query()</code> method.</p>
<pre class="language-javascript hljs">DataStore.query(Contact)
</pre>
<p>To get more details for each contact, we used the new Expo Router <code>link</code> component and passed the <code>[contact.id](&lt;http://contact.id>)</code> to the <code>href</code> attribute. The dynamic route will be <code>contacts/[contactId]</code>.</p>
<h2 id="rendering-single-contacts-with-dynamic-route">Rendering single contacts with a dynamic route</h2>
<p>Let’s create the screen for contact details. In the app directory, create a <code>contacts</code> folder and an <code>[id].js</code> file.</p>
<pre class="language-javascript hljs">import { Text, View } from "react-native";
import { Stack } from "expo-router";
import { useEffect, useState } from "react";
import { Contact } from "../../src/models";
import { DataStore } from "aws-amplify";

export default function SingleContact({ route }) {
    const [contact, setContact] = useState('')
    useEffect(() => {
        if (!route.params?.id) {
            return
        }
        DataStore.query(Contact, route.params.id).then(setContact)
    }, [route.params?.id])
    return (
        &lt;View style={container}>
            &lt;Stack.Screen options={{ title: contact.name }} />
            &lt;View style={contactBox}>
                &lt;Text style={textStyleName}>{contact.name}&lt;/Text>
                &lt;Text style={textStyle}>{contact.phone}&lt;/Text>
                &lt;Text style={textStyle}>{contact.email}&lt;/Text>
                &lt;Text style={textStyle}>{contact.address}&lt;/Text>
                &lt;Text style={textStyle}>{contact.message}&lt;/Text>
            &lt;/View>
        &lt;/View>
    );
}
</pre>
<p>If you’ve worked with Next.js, this code should look familiar. The major difference is that the Expo Router makes the <code>route</code> object available without importing it.</p>
<p>In DataStore, to query a single item by its ID, you pass the model and ID you want to query. In our case, we pass the params ID. Awesome! Run your app, and you should get something like this:</p>
<figure id="attachment_146081"   class="wp-caption aligncenter"><img             class="size-full wp-image-146081 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/final-contacts-app-expo-router.png" alt="Our final contacts app, build with the new Expo Router" width="730" height="1066"    /><noscript><img               class="size-full wp-image-146081" src="https://blog.logrocket.com/wp-content/uploads/2022/12/final-contacts-app-expo-router.png" alt="Our final contacts app, build with the new Expo Router" width="730" height="1066"  /></noscript><figcaption id="caption-attachment-146081" class="wp-caption-text">Our final contacts app, build with the new Expo Router</figcaption></figure>
<h2 id="conclusion">Conclusion</h2>
<p>This article taught us about the Expo Router, how it works, its core features, and its tradeoffs. We built a React Native app with Expo and data from Amplify DataStore.</p>
<p>File-based routing is the future of smooth navigation experience for mobile applications. Expo Router implements this solution into its library. Although it’s only in its beta release, the Expo Router features are impressive and will definitely excite React Native developers.</p><div class="code-block code-block-18" >
<div class="blog-plug inline-plug react-native-plug"><h2><a href="https://lp.logrocket.com/blg/react-native-signup">LogRocket</a>: Instantly recreate issues in your React Native apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2021/10/react-native-plug_v2-2.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a React Native monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your React Native apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your React Native apps — <a class="signup" href="https://lp.logrocket.com/blg/react-native-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-146068" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/native-routing-expo-react-native/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/native-routing-expo-react-native/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-146068" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/native-routing-expo-react-native/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-146068" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/native-routing-expo-react-native/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/native-routing-expo-react-native/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to natural language processing with Python using spaCy - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-natural-language-processing-python-spacy/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-natural-language-processing-python-spacy/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to natural language processing with Python using spaCy - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/">A guide to natural language processing with Python using spaCy - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rosariodechiara/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/rosario.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/rosario.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rosariodechiara/">
Rosario De Chiara <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a blockchain technology lead. My passions are distributed systems, efficient algorithms, and retrocomputing. I have a PhD (Dottorato di Ricerca) in Computer Science and worked as a researcher at university. I’m Italian, which means I’m pretty opinionated about food.</span>
</div>
</div>
<h1 class="posttitle">A guide to natural language processing with Python using spaCy</h1>
<p>
<span class="post-date"><time class="post-date">
April 10, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1457</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<article class="article-post">
<p>Natural language processing (NLP) is a subfield of artificial intelligence and computer science that deals with the interactions between computers and human languages. The goal of NLP is to <a href="https://blog.logrocket.com/natural-language-processing-node-js/">enable computers to understand, interpret, and generate human language</a> in a natural and useful way. This may include tasks like speech recognition, language translation, text summarization, sentiment analysis, and more. NLP is a rapidly growing field with a wide range of applications, especially in areas like customer service, language education, and information retrieval.</p>
<p>In this article, we’ll explore some examples of NLP using <a href="https://spacy.io">spaCy</a>, a popular, open source library for NLP in Python. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#natural-language-processing">How does natural language processing work?</a></li>
<li><a href="#spacy">How does spaCy work?</a></li>
<li><code><a href="#tokenizer">Tokenizer</a></code></li>
<li><code><a href="#tagger">tagger</a></code></li>
<li><a href="#parser"><code>parser</code></a></li>
<li><a href="#named-entity-recognition">Named entity recognition</a></li>
</ul>
<h2 id="natural-language-processing">How does natural language processing work?</h2>
<p>A peculiar example of NLP is the omnipresent <a href="https://openai.com/blog/chatgpt">ChatGPT</a>. ChatGPT is an extensive language model that has been trained on a vast dataset of text from the internet and can generate text similar to the text in the training dataset. It can also answer questions and perform other language-based tasks, like text summarization and language translation.</p>
<p>As you may notice, ChatGPT is actually the composition of two subsystems. One is in charge of NLP, which understands the user’s prompt, and the other handles natural language generation (NLG), which will assemble the answers in a form understandable by humans.</p>
<h2 id="spacy">How does spaCy work?</h2>
<p>spaCy is designed specifically for production use, helping developers to perform tasks like tokenization, lemmatization, part-of-speech tagging, and named entity recognition. spaCy is known for its speed and efficiency, making it well-suited for large-scale NLP tasks.</p>
<p>NLP is a process that can efficiently be represented as a pipeline of the following steps. Each of these steps is a specific algorithm whose output will be the input for the proceeding one. spaCy uses the following basic pipeline:</p>
<p><img             class="aligncenter wp-image-166673 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1natural-language-processing-spacy-steps.png" alt="Natural Language Processing Spacy Steps" width="730" height="118"    /><noscript><img               class="aligncenter wp-image-166673 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/1natural-language-processing-spacy-steps.png" alt="Natural Language Processing Spacy Steps" width="730" height="118"  /></noscript></p>
<table class="tg">
<thead>
<tr>
<th class="tg-0lax">Name</th>
<th class="tg-0lax">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/tokenizer"><span ><code>Tokenizer</code></span></a></td>
<td class="tg-0lax">Segment text into tokens</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/tagger"><span ><code>tagger</code></span></a></td>
<td class="tg-0lax">Assign part-of-speech tags</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/dependencyparser"><span ><code>parser</code></span></a></td>
<td class="tg-0lax">Assign dependency labels</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/entityrecognizer"><span ><code>ner</code></span></a></td>
<td class="tg-0lax">Detect and label named entities</td>
</tr>
<tr>
<td class="tg-vpij"><a href="https://spacy.io/api/lemmatizer"><span ><code>lemmatizer</code></span></a></td>
<td class="tg-0lax">Assign base forms</td>
</tr>
</tbody>
</table>
<p>In the GitHub repository, you can find an example for each of the steps. The file is named after the pipeline component. Now, we’ll describe the code for each component and the output. For the sake of clarity, we’ll use the same text to better understand the kind of information that each component of the pipeline will extract.</p>
<p>In each source, the entry point to the functionalities of the library is the <code>nlp</code> object. The <code>nlp</code> object is initialized with the <code>en_core_web_sm</code>, which is a small, English pipeline pre-trained on web excerpts, like blogs, news, comments, etc., including vocabulary, syntax, and entities.</p>
<p>The execution of the <code>nlp</code> default pipeline with the specified pre-trained model will populate different data structures within the <code>doc</code> object, depicted on the right in the figure above.</p>
<p>Choosing a pre-trained module may be crucial for your application. To facilitate the decision, you can use the <a href="https://spacy.io/usage/models">boilerplate generator</a> to choose between accuracy and efficiency. Accuracy is beneficial for the size and complexity of the model, but it will mean a slower pipeline.</p>
<h2 id="tokenizer"><code>Tokenizer</code></h2>
<p>spaCy’s <code>Tokenizer</code> allows you to segment text and create <code>Doc</code> objects with the discovered segment boundaries. Let’s run the following code:</p>
<pre class="language-python hljs">import spacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple is looking at buying U.K. startup for $1 billion.")

print([(token) for token in doc])
</pre>
<p>The output of the execution is the list of the tokens; tokens can be either words, characters, or subwords:</p>
<pre class="language-python hljs">python .\01.tokenizer.py
[Apple, is, looking, at, buying, U.K., startup, for, $, 1, billion, .]
</pre>
<p>You might argue that the exact result is a simple split of the input string on the space character. But, if you look closer, you’ll notice that the <code>Tokenizer</code>, being trained in the English language, has correctly kept together the “U.K.” acronym while also separating the closing period.</p>
<h2 id="tagger"><code>tagger</code></h2>
<p>The <code>tagger</code> component will take care of separating and categorizing the parts-of-speech in the input text:</p>
<pre class="language-python hljs">import spacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple is looking at buying U.K. startup for $1 billion.")

print([(w.text, w.pos_) for w in doc])
</pre>
<p>For each word in the <code>doc</code> object, the <code>nlp</code> component populates the field <code>pos_</code>, which will contain the list of parts present in the text:</p>
<pre class="language-python hljs">> python .\02.tagger.py  
[('Apple', 'PROPN'), ('is', 'AUX'), ('looking', 'VERB'), ('at', 'ADP'),
('buying', 'VERB'), ('U.K.', 'PROPN'), ('startup', 'NOUN'), ('for', 'ADP'),
('$', 'SYM'), ('1', 'NUM'), ('billion', 'NUM'), ('.', 'PUNCT')]
</pre>
<p>The possible parts of speech are described in the following table and, per usual, they heavily depend on the language of the text:</p>
<meta type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}<br/>.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;<br/>  overflow:hidden;padding:10px 5px;word-break:normal;}<br/>.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;<br/>  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}<br/>.tg .tg-4r4g{background-color:#F7F9FA;border-color:inherit;color:#1B2733;text-align:left;text-decoration:underline;<br/>  vertical-align:top}<br/>.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}<br/><meta>
<table class="tg">
<thead>
<tr>
<th class="tg-0pky">Abbreviation</th>
<th class="tg-0pky">Part of speech</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tg-0pky">ADJ</td>
<td class="tg-0pky">Adjective</td>
</tr>
<tr>
<td class="tg-4r4g">ADP</td>
<td class="tg-0pky">Adposition</td>
</tr>
<tr>
<td class="tg-4r4g">ADV</td>
<td class="tg-0pky">Adverb</td>
</tr>
<tr>
<td class="tg-4r4g">AUX</td>
<td class="tg-0pky">Auxiliary</td>
</tr>
<tr>
<td class="tg-4r4g">CCONJ</td>
<td class="tg-0pky">Coordinating conjunction</td>
</tr>
<tr>
<td class="tg-0pky">DET</td>
<td class="tg-0pky">Determiner</td>
</tr>
<tr>
<td class="tg-0pky">INTJ</td>
<td class="tg-0pky">Interjection</td>
</tr>
<tr>
<td class="tg-0pky">NOUN</td>
<td class="tg-0pky">Noun</td>
</tr>
<tr>
<td class="tg-0pky">NUM</td>
<td class="tg-0pky">Numeral</td>
</tr>
<tr>
<td class="tg-0pky">PART</td>
<td class="tg-0pky">Particle</td>
</tr>
<tr>
<td class="tg-0pky">PRON</td>
<td class="tg-0pky">Pronoun</td>
</tr>
<tr>
<td class="tg-0pky">PROPN</td>
<td class="tg-0pky">Proper noun</td>
</tr>
<tr>
<td class="tg-0pky">PUNCT</td>
<td class="tg-0pky">Punctuation</td>
</tr>
<tr>
<td class="tg-0pky">SCONJ</td>
<td class="tg-0pky">Subordinating conjunction</td>
</tr>
<tr>
<td class="tg-0pky">SYM</td>
<td class="tg-0pky">Symbol</td>
</tr>
<tr>
<td class="tg-0pky">VERB</td>
<td class="tg-0pky">Verb</td>
</tr>
<tr>
<td class="tg-4r4g">X</td>
<td class="tg-0pky">Other</td>
</tr>
</tbody>
</table>
<h2 id="parser"><code>parser</code></h2>
<p>The <code>parser</code> component will track sentences and perform a segmentation of the input text. The output is collected in some fields in the <code>doc</code> object. For each token, the <code>.dep_</code> field represents the kind of dependency and the <code>.head</code> field, which is the syntactic father of the token. Furthermore, the boolean field <code>.is_sent_start</code> is <code>true</code> for tokens that start a sentence:</p>
<pre class="language-python hljs">import spacy
`from spacy import displacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple, a big  tech company, is looking at buying U.K. startup for $1 billion. Investors are worried about the final price.")

for token in doc:
    print(token.text, token.head)

for token in doc:
    if (token.is_sent_start):
        print(token.text, token.is_sent_start)

displacy.serve(doc, )
</pre>
<p>The code is slightly longer because we used a longer input text to show how the segmentation works:</p>
<pre>> python .\03.parser.py
Apple looking
, Apple
a company
big company
  big
tech company
company Apple
, Apple
is looking
looking looking
at looking
buying at
final price
price about
. are

Apple True
Investors True
</pre>
<p>The first part of the output reports the field <code>.head</code> for each token, and the last two lines represent the two tokens that actually start a sentence. The spaCy library also provides a means to visualize the dependency graph. The <code>displacy</code> component is the entry point to access these functionalities.</p>
<p>In particular, the last line of the code above will visualize the dependency graph shown below by pointing your browser at <code>http://127.0.0.1:5000</code>:</p>
<p><img             class="aligncenter wp-image-166675 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-visualize-dependency-graph.png" alt="Visualize Dependency Graph" width="730" height="96"    /><noscript><img               class="aligncenter wp-image-166675 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/2-visualize-dependency-graph.png" alt="Visualize Dependency Graph" width="730" height="96"  /></noscript></p>
<h2 id="named-entity-recognition">Named entity recognition</h2>
<p>The named entity recognition (NER) component is a powerful step towards information extraction. It will locate and classify entities in text into categories, like the names of persons, organizations, locations, expressions of times, quantities, monetary values, percentages, and more:</p>
<pre>import spacy 

nlp = spacy.load("en_core_web_sm")
doc = nlp("Apple is looking at buying U.K. startup for $1 billion.")

for ent in doc.ents:

    print(ent.text, ent.label_)

spacy.displacy.serve(doc, )
</pre>
<p>The code above will produce:</p>
<pre class="language-python hljs">> python .\04.ner.py
Apple ORG
U.K. GPE
$1 billion MONEY
</pre>
<p>In the result, it’s clear how effectively the categorization works. It correctly categorizes the <code>U.K.</code> token, regardless of the periods, and it also categorizes the three tokens of the string <code>$1 billion</code> as a single entity that indicates a quantity of money.</p>
<p>The categories vary on the model. To print the categories that are recognized, run the following code:</p>
<pre class="language-python hljs">import spacy

nlp = spacy.load("en_core_web_sm")

print(nlp.get_pipe("ner").labels)
</pre>
<p>As shown for the <code>parser</code>, it’s possible to have a visualization of the named entity recognized in the text. Once again by using displacy, the last line of code will show the following representation of the named entities embedded in the text:</p>
<p><img             class="aligncenter wp-image-166677 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-named-entity-recognition-embedded-diagram.png" alt="Named Entity Recognition Embedded Diagram" width="730" height="57"    /><noscript><img               class="aligncenter wp-image-166677 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/04/3-named-entity-recognition-embedded-diagram.png" alt="Named Entity Recognition Embedded Diagram" width="730" height="57"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we’ve just scratched the surface of the powerful architecture of spaCy.</p>
<p>spaCy is a framework to host pipelines of components extremely specialized for NLP tasks. The behaviors and the performances of each component depend on the quality of the model, the <code>en_core_web_sm</code> in our examples.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The quality of the model depends on the size of the dataset used to train it. Pre-trained models are good for most cases but, of course, for specific domains of application, you may think about <a href="https://spacy.io/usage/training">training your own model</a>. I hope you enjoyed this article. Happy coding!</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166669" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166669" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166669" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-natural-language-processing-python-spacy/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-natural-language-processing-python-spacy/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to prototyping with ChiselStrike - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-prototyping-chiselstrike/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-prototyping-chiselstrike/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to prototyping with ChiselStrike - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-prototyping-chiselstrike/">A guide to prototyping with ChiselStrike - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/jamessinkala/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/08/james-sinkala.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/08/james-sinkala.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/jamessinkala/">
James Sinkala <span class="btn follow">Follow</span></a>
<span class="author-description d-block">James is a solution-oriented full-stack developer and passionate technical writer. An avid techie, James loves contributing to open source and sharing his coding adventures in the form of intuitive technical content. <a href="https://jamesinkala.com">Check out his portfolio.</a></span>
</div>
</div>
<h1 class="posttitle">A guide to prototyping with ChiselStrike</h1>
<p>
<span class="post-date"><time class="post-date">
November 4, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">17 min read</span>
<span class="wordcount">4909</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>At the prototyping stage of product development, especially in high-fidelity prototypes, we are normally working with tools that are as close to the production level of our apps as possible. Data provided via REST is as close to production as that gets (at least, when working on frontend apps).</p>
<p>Some of the popular options that exist for ad hoc REST servers are Express, Fastify, Koa, Nest, and Hapi. We also have options for creating custom-made servers or consuming mock APIs, which is usually a time-consuming and unreliable task.</p>
<p>One of the new candidates and the subject of this post is ChiselStrike, a scalable backend-as-a-service platform that simplifies the backend development process and eases the progress from prototyping to production.</p>
<p>ChiselStrike brings to the table several useful features that speed up app prototyping and is backed by a powerful API that allows customization for each of your projects.</p>
<p>As we unravel what ChiselStrike offers when prototyping inside this post, we are going to cover the following:</p>
<ul>
<li><a href="#what-is-chiselstrike">What is ChiselStrike?</a></li>
<li><a href="#advantages-to-chiselstrike">Advantages to ChiselStrike</a></li>
<li><a href="#how-chiselstrike-works-using-it-for-a-product-prototype">How ChiselStrike works: Using it for a product prototype</a>
<ul >
<li><a href="#creating-a-chiselstrike-project">Creating a ChiselStrike project</a></li>
<li><a href="#constructing-routes">Constructing routes</a></li>
<li><a href="#creating-and-reading-data">Creating and reading data</a></li>
<li><a href="#updating-and-deleting-data">Updating and deleting data</a></li>
<li><a href="#entity-relationships">Entity relationships</a></li>
<li><a href="#filtering-limiting-and-ordering-endpoint-results">Filtering, limiting, and ordering endpoint results</a></li>
</ul>
</li>
<li><a href="#more-on-chiselstrikes-capabilities">More on ChiselStrike’s capabilities</a>
<ul >
<li><a href="#customizing-crud-endpoints">Customizing CRUD endpoints</a></li>
<li><a href="#secrets">Secrets</a></li>
<li><a href="#api-versioning">API versioning</a></li>
</ul>
</li>
</ul>
<h2 id="what-is-chiselstrike">What is ChiselStrike?</h2>
<p>ChiselStrike is a general-purpose platform for creating and hosting web services backends; it can be used for any web or mobile application that you could host in the cloud.</p>
<p>On top of this, ChiselStrike is scalable and extensively simplifies the backend development process when building apps. You can develop ChiselStrike apps in TypeScript, bringing all of the syntactical advantages offered by the JavaScript superset into the development process.</p>
<p>To demonstrate how ChiselStrike issues simplification, here is an example of the ChiselStrike code that would implement all of the CRUD operations for a <code>BlogPost</code> data model:</p>
<pre class="language-typescript hljs">import { ChiselEntity } from "@chiselstrike/api"

export class BlogPost extends ChiselEntity {
  title: string
  cover: string
  content: string
  publishedAt: Date = new Date()
  updatedAt?: number 
}

export default BlogPost.crud()
</pre>
<p>The above code creates both a <code>BlogPost</code> model for our datastore and a route providing all HTTP request endpoints for our REST API. Meaning, we can use the route, <code>/blogpost</code>, to handle all CRUD requests made to our API with a few additional considerations.</p>
<p>ChiselStrike allows us to work both offline (in our development environment) and on the cloud (for production apps) using an SQLite database and a Postgres-like database respectively.</p>
<h2 id="advantages-to-chiselstrike">Advantages to ChiselStrike</h2>
<p>ChiselStrike has many obvious advantages. But out of all of them, the following stand out:</p>
<ul>
<li><strong>Rapid prototyping</strong>: ChiselStrike works perfectly as a rapid prototyping tool, as we’ll see with our example. It reduces the bulk of API endpoints’ code to the data model definition and two lines of code</li>
<li><strong>Seamless data model migrations</strong>: ChiselStrike makes it easy to migrate data models since we do not have to deal with or keep track of the SQL files. Migrations are as easy as adding new entity classes or modifying entity class data properties</li>
<li><strong>Transition to production</strong>: Since ChiselStrike holds the best practices of REST API development, you can migrate to production within ChiselStrike or other hosting platforms while keeping your app’s API contract, holding no concerns for platform lock-in</li>
</ul>
<h2 id="how-chiselstrike-works-using-it-for-a-product-prototype">How ChiselStrike works: Using it for a product prototype</h2>
<p>To avoid making this a chronological post about ChiselStrike’s features, we’ll go through it intuitively by trying to work on a real-life product prototype that obtains its data from a ChiselStrike server. And, while working through this app’s prototype, we’ll learn about ChiselStrike’s important concepts and API.</p>
<p>Let’s take inspiration from the following prototype of an ecommerce app.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p><img             class="aligncenter size-full wp-image-139628 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ecommerce-storefront.jpeg" alt="Ecommerce Storefront" width="730" height="533"    /><noscript><img               class="aligncenter size-full wp-image-139628" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ecommerce-storefront.jpeg" alt="Ecommerce Storefront" width="730" height="533"  /></noscript></p>
<p>What we see above, is a high-fidelity layout of a product page for Chisel Store, our imaginary ecommerce site.</p>
<p>We’ll break down this store’s prototype into five sections by their functionalities, which we are going to demonstrate by providing data with ChiselStrike.</p>
<p><img             class="aligncenter size-full wp-image-139630 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/five-sections-storefront.jpeg" alt="Five Sections Storefront" width="730" height="533"    /><noscript><img               class="aligncenter size-full wp-image-139630" src="https://blog.logrocket.com/wp-content/uploads/2022/11/five-sections-storefront.jpeg" alt="Five Sections Storefront" width="730" height="533"  /></noscript></p>
<p>For brevity, let’s name the numbered sections by their functionalities so we can easily communicate what we’ll be working on:</p>
<ol>
<li>Product listings</li>
<li>Product filters</li>
<li>Product search</li>
<li>Product sorting</li>
<li>Pagination</li>
</ol>
<h3 id="creating-a-chiselstrike-project">Creating a ChiselStrike project</h3>
<p><em>N.B., the prerequisites to work with ChiselStrike are Node v14.18.0 or above and npm. TypeScript knowledge is helpful but not required. Depending on your working environment, an HTTP client might also be useful if you fancy quick testing of the ChiselStrike server’s routes. Knowledge of HTTP and its methods is also a bonus when working with REST APIs.</em></p>
<p>We need to create a new ChiselStrike project, which is going to provide data for our frontend web app, Chisel Store. To do so, we need to run the following command on the terminal inside our target directory:</p>
<pre class="language-shell hljs">npx <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0b68796e6a7f6e26686362786e67787f7962606e266a7b7b4b3b253a382539">[email protected]</a> chisel-store
</pre>
<p>When the command has finished running, <code>cd</code> into the newly created directory <code>chisel-store</code>. This is the layout of the project files you will find inside:</p>
<p><img             class="aligncenter size-full wp-image-139632 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ecommerce-store-product-listing.jpeg" alt="Ecommerce Store Product Listing" width="626" height="210"    /><noscript><img               class="aligncenter size-full wp-image-139632" src="https://blog.logrocket.com/wp-content/uploads/2022/11/ecommerce-store-product-listing.jpeg" alt="Ecommerce Store Product Listing" width="626" height="210"  /></noscript></p>
<p><code>Chisel.toml</code> is ChiselStrike’s configuration file where all essential top-level directories are specified (<code>routes</code>, <code>models</code>, <code>policies</code>, <code>events</code>) while <code>tsconfig.json</code> is the project’s TypeScript configuration. A <code>Dockerfile</code> is also generated for building Docker images of the ChiselStrike application, which we can then use to deploy ChiselStrike applications to Kubernetes, Fly.io, and others. We’ll see the uses of most of the top-level directories as we proceed.</p>
<p>To run the ChiselStrike server locally, run the shell command <code>npm dev</code> inside the project’s directory, subsequently running the <code>dev</code> script inside <code>package.json</code>:</p>
<pre class="language-shell hljs">npm run dev
</pre>
<p>Inside <code>package.json</code>, you will notice that ChiselStrike installed two dependencies, <code>@chiselstrike/api</code> and <code>@chiselstrike/cli</code>. <code>@chiselstrike/api</code> provides the runtime API for interacting programmatically with <code>chiseld</code> (the ChiselStrike server) inside a ChiselStrike project, while <code>@chiselstrike/cli</code> provides the ChiselStrike CLI used during development, facilitating the <code>chisel dev</code> script we’ve run to start our local server.</p>
<p>The above command started the server, which is accessible through the <code>8080</code> port. Hence, all of our API endpoints will use <code>localhost:8080</code> as the base URL, prefixed with <code>/dev</code> (we’ll see later why routes are prefixed with <code>/dev</code>).</p>
<p>Note, we’ll be referring to <code>localhost:8080</code> as <code>sBASE_URL</code> from here onward.</p>
<p>Try visiting <a href="http://localhost:8080/dev/hello">localhost:8080/dev/hello</a> to see the popular “Hello, world!” phrase as the resulting JSON output.</p>
<h3 id="constructing-routes">Constructing routes</h3>
<p>To fetch data for our Chisel Store project, we need to be able to construct routes through which we’ll be consuming data inside our app.</p>
<p>In ChiselStrike, routes are created by a combination of TypeScript <code>.ts</code> files placed inside the <code>/routes</code> and entities found within the <code>/entities</code> top-level directories respectively.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h4 id="chiselstrike-endpoints">ChiselStrike routes</h4>
<p>Routes are created by adding a TypeScript file inside the <code>/routes</code> directory, where the name of the file becomes part of the route’s path name: <code>BASE_URL/dev/[TS_FILE_NAME]</code>.</p>
<p>These TypeScript files are sufficient to create API route endpoints as we’ve witnessed with the <code>/dev/hello</code> route above. Opening its <code>.ts</code> file, <code>/routes/hello.ts</code>, we find the following code:</p>
<pre class="language-typescript hljs">// hello.ts
// Example ChiselStrike route
//
// To access the route, run:
//
// curl -d '{"hello": "world"}' localhost:8080/dev/hello
import { ChiselRequest, RouteMap } from "@chiselstrike/api";
export default new RouteMap()
    .get("/", function (): string {
        return "hello world";
    })
    .post("/", async function (req: ChiselRequest): Promise {
        return await req.json();
    });
</pre>
<p>This route file implements a node module that’s exporting a single <code>RouteMap</code> object that is defining the behavior of the HTTP <code>GET</code> and <code>POST</code> requests using the <code>get()</code> and <code>post()</code> handler functions respectively.</p>
<p>The handler functions accept a single <code>ChiselRequest</code> parameter that describes the client’s request. The <code>ChiselRequest</code> parameter is a subclass of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">Request</a> class from the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>.</p>
<p>To create a product listing’s route for the Chisel Store app, we’ll create the following <code>products.ts</code> file under the <code>/routes</code> directory:</p>
<pre class="language-typescript hljs">// routes/products.ts
import { RouteMap } from "@chiselstrike/api";

export default new RouteMap()
    .get("/", function (): [] {
        return [];
    })
</pre>
<p>When saving this file, <code>chiseld</code> will give you a nod by logging the message <code>Applied:</code> on the running terminal initiated with the <code>npm run dev</code> command.</p>
<h4 id="chiselstrike-entities">ChiselStrike Entities</h4>
<p>Visiting the <code>BASE_URL/dev/products</code> route we created, we receive an empty JSON output. We expect this since we are returning an empty array inside the <code>get()</code> handler function. But since we need working data, we’ll need application data of some sort, in this case products’ data being returned to our Chisel Store application.</p>
<p>So, despite that the <code>/products</code> route was created above and is recognized by our project, it is insufficient for us. To make it useful, we need to couple it with a respective data model.</p>
<p>ChiselStrike provides us with a very simple way to define data models within projects. All we need to do is export a model class extending the <code>@chiselstrike/api</code>‘s <code>ChiselEntity</code> inside a TypeScript file from within the <code>/models</code> directory.</p>
<p>Let’s create a <code>Products</code> model for our app as follows:</p>
<pre class="language-typescript hljs">// models/Product.ts
import { ChiselEntity } from "@chiselstrike/api"
// import { Category } from "./Category"

export class Product extends ChiselEntity {
  name: string
  price: number
  image: string
  details?: string
  soldOut: boolean = false
  // category: Category = new Category()
  createdAt: Date = new Date()
}
</pre>
<p>Just like with the <code>products.ts</code> file, saving the above file will prompt <code>chiseld</code> to give us an <code>Applied:</code> message on the running terminal.</p>
<p>Within the above class, we have defined <code>name</code>, <code>price</code>, <code>details</code>, <code>soldOut</code>, and <code>createdAt</code> as the properties of our <code>Product</code> model. We have declared <code>details</code> as an optional property by suffixing it with a <code>?</code> as is done with <a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#optional-properties">optional TypeScript properties</a>, meaning we are not required to provide a value for it when creating a new <code>Product</code> entity.</p>
<p>We have given <code>false</code> as a default value to <code>soldOut</code> and added the current date in milliseconds to the <code>createdAt</code> property.</p>
<p>For now, ignore the commented code because we’ll talk more about that later.</p>
<p>The <code>ChiselEntity</code> class acquired from ChiselStrike’s runtime API is a base class for all entities that we define in a ChiselStrike project. This class provides some functions for working with the entity programmatically.</p>
<p>The <code>Product</code> entity declared above gives us a sufficient data model to work with when trying to populate the Chisel Store’s product listing section. All we need is to find a way to make this data model pair with the <code>/products</code> route. We have seen this already in the introduction above when we were showing off ChiselStrike’s features.</p>
<p>To accomplish this, replace the code inside the endpoint file <code>routes/products.ts</code> with the following:</p>
<pre class="language-typescript hljs">// routes/products.ts
import { Product } from "../models/Product.ts"

export default Product.crud()
</pre>
<h3 id="creating-and-reading-data">Creating and reading data</h3>
<p>Visiting the <code>/dev/products</code> endpoint again, we’ll get this output:</p>
<pre class="language-json hljs">{
  "results": []
}
</pre>
<p>As we can see, an HTTP <code>GET</code> request has been handled in this instance.</p>
<p>Let’s try submitting data to this endpoint.</p>
<p>With your HTTP client of choice, submit the following JSON data with an HTTP <code>POST</code> request to the <code>/dev/products</code> route:</p>
<pre class="language-json hljs">{
  "name": "Super Bass Headphones",
  "price": 60,
  "image": "https://asset-train.twic.pics/images/headphone-1.jpg"
}
</pre>
<p>We should be getting the following JSON response if everything is in order:</p>
<pre class="language-json hljs">{
  "id": "f8ab8028-661e-46fd-b926-96f5ec74bcb2",
  "name": "Super Bass Headphones",
  "price": 60,
  "image": "https://asset-train.twic.pics/images/headphone-1.jpg",
  "soldOut": false,
  "createdAt": 1664742791088
}
</pre>
<p>Now, try accessing the <a href="http://localhost:8080/dev/products">BASE_URL/dev/products</a> endpoint once more. Below is the resulting JSON response to this request to our endpoint:</p>
<p><img             class="aligncenter size-full wp-image-139634 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/resulting-json-response.jpeg" alt="Resulting JSON Response" width="730" height="286"    /><noscript><img               class="aligncenter size-full wp-image-139634" src="https://blog.logrocket.com/wp-content/uploads/2022/11/resulting-json-response.jpeg" alt="Resulting JSON Response" width="730" height="286"  /></noscript></p>
<p>We’ll discuss the <code>next_page</code> and <code>prev_page</code> properties later. Placing our focus on the <code>results</code> property for now, we can see that the data we added on the previous <code>POST</code> request is listed as an item in this array.</p>
<p>The <code>crud()</code> method passed from the <code>ChiselEntity</code> class handles all the CRUD HTTP operations we expect from API endpoints — i.e., the creation, reading, updating, and deletion of data.</p>
<p>This is one of ChiselStrike’s most powerful features because, with the two lines of code inside the <code>products.ts</code> file, we can handle all of the basic HTTP operations that can be sent to our route. This would make for a smooth transition to production since we want CRUD operations handled when working not only on prototypes but to a meaningful extent when also running our production apps.</p>
<h3 id="updating-and-deleting-data">Updating and deleting data</h3>
<p>We have already seen the creation and reading of data, so now we’ll cover the part on updating and deleting created entities.</p>
<p>To update the data added to the datastore, we simply need to make an HTTP <code>PATCH</code> request toward our route, adding the unique <code>id</code> of the product we are trying to update as the last part of the endpoint path <code>BASE_URL/dev/products/product_id</code>.</p>
<p>Using the data we added last to our datastore, extract the obtained <code>id</code> from the <code>POST</code> response and place it on the <code>product_id</code> part of the route path above. With your HTTP client, make a <code>PATCH</code> request using the following JSON data as the payload:</p>
<pre class="language-json hljs">{
  "price": 72,
  "soldOut": true
}
</pre>
<p>We should receive the following JSON response:</p>
<p><img             class="aligncenter size-full wp-image-139636 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/following-json-response.jpeg" alt="Following JSON Response" width="720" height="178"    /><noscript><img               class="aligncenter size-full wp-image-139636" src="https://blog.logrocket.com/wp-content/uploads/2022/11/following-json-response.jpeg" alt="Following JSON Response" width="720" height="178"  /></noscript></p>
<p>Before proceeding with a deletion request, visit the <a href="http://localhost:8080/dev/products">BASE_URL/dev/products</a> once more to see the data we currently have. We can also see the changes that we made through the previous request:</p>
<p><img             class="aligncenter size-full wp-image-139638 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/changes-in-previous-request.jpeg" alt="Changes in Previous Request" width="730" height="360"    /><noscript><img               class="aligncenter size-full wp-image-139638" src="https://blog.logrocket.com/wp-content/uploads/2022/11/changes-in-previous-request.jpeg" alt="Changes in Previous Request" width="730" height="360"  /></noscript></p>
<p>To delete this piece of data from our datastore, all we need is to make an HTTP <code>DELETE</code> request passing the items’ <code>id</code> just like we did in the <code>PATCH</code> request.</p>
<p>If we visit the <code>products</code> endpoint after making the delete request, we see this JSON output:</p>
<pre class="language-shell hljs">"Deleted ID f8ab8028-661e-46fd-b926-96f5ec74bcb2"
</pre>
<p>Accessing the <code>BASE_URL/dev/products</code> afterward gives us an empty <code>results</code> property array as we had initially:</p>
<pre class="language-json hljs">{
  "results": []
}
</pre>
<p>This part finalizes the first section of our Chisel Store application on product listings. We’ll be populating the section with data obtained through making HTTP <code>GET</code> requests to our ChiselStrike server in a short while; we just need to cover one more concept first.</p>
<h3 id="entity-relationships">Entity relationships</h3>
<p>To cover the second section of our Chisel Store prototype, product filters, we need to implement another of ChiselStrike’s useful features: entity relationships. Since our product filtering section expects a list of categories that a visitor may use to filter, we need to add a <code>Category</code> entity that will be used to place the products into their related group.</p>
<p>This is why we commented out the <code>category</code> property of our <code>Product</code> entity.</p>
<p>Create a <code>Category.ts</code> file inside the <code>/models</code> directory and add the following code inside it:</p>
<pre class="language-typescript hljs">// models/Category.ts
import { ChiselEntity } from "@chiselstrike/api"

export class Category extends ChiselEntity {
  name: string
}
</pre>
<p>Head to the <code>/endpoints</code> directory and create an endpoint for this entity:</p>
<pre class="language-typescript hljs">// models/categories.ts
import { Category } from "../models/Category.ts"

export default Category.crud()
</pre>
<p>The two files created above create an endpoint that handles all CRUD operations for the <code>/dev/categories</code> endpoint.</p>
<p>Now, back inside our <code>models/Product.ts</code> entity file, comment out the two lines handling the <code>Category</code> entity import and declaration of the <code>category</code> property:</p>
<pre class="language-typescript hljs">// models/Product.ts
import { ChiselEntity } from "@chiselstrike/api"
import { Category } from "./Category"

export class Product extends ChiselEntity {
  name: string
  price: number
  image: string
  details?: string
  soldOut: boolean = false
  category: Category = new Category()
  createdAt: number = Date.now()
}
</pre>
<p>The terms “referred entity” and “referenced entity” are used to describe <code>category</code> and <code>Product</code> respectively in the code above, and this is how entity relationships are created in ChiselStrike.</p>
<p>To create a referenced <code>Category</code> entity as we create a new product, we need to pass its <code>details</code> on the <code>category</code> property.</p>
<p>Try making an HTTP <code>POST</code> request that is passing the following <code>JSON</code> payload to the <code>/dev/products</code> endpoint to see the results:</p>
<pre class="language-json hljs">{
  "name": "Baby Shoes",
  "price": 22,
  "image": "https://asset-train.twic.pics/images/shoes-1.jpg",
  "category": {
    "name": "Shoes"
  }
}
</pre>
<p>Here is the expected JSON response:</p>
<p><img             class="aligncenter size-full wp-image-139640 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/expected-json-response.jpeg" alt="Expected JSON Response" width="649" height="244"    /><noscript><img               class="aligncenter size-full wp-image-139640" src="https://blog.logrocket.com/wp-content/uploads/2022/11/expected-json-response.jpeg" alt="Expected JSON Response" width="649" height="244"  /></noscript></p>
<p>As we can see, a new category entity has been created per the result payload, and we can check on its existence by fetching the <code>/dev/categories</code> endpoint, getting the output below:</p>
<p><img             class="aligncenter size-full wp-image-139642 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/output.jpeg" alt="Output" width="730" height="218"    /><noscript><img               class="aligncenter size-full wp-image-139642" src="https://blog.logrocket.com/wp-content/uploads/2022/11/output.jpeg" alt="Output" width="730" height="218"  /></noscript></p>
<h4 id="entity-migrations">Entity migrations</h4>
<p>Adding a <code>Category</code> as a referenced entity to the existing referencing entity, <code>Product</code>, is a depiction of a ChiselStrike migration. This wouldn’t work if the <code>Product</code> entity had existing data. This is mainly because we were adding a new required data property, a behavior that ChiselStrike wouldn’t allow. You can read more on <a href="https://docs.chiselstrike.com/reference/data-modeling/migration">ChiselStrike entity migrations on this page</a>.</p>
<p>Now that we have the <code>Category</code> model set up and running, we can use it within product filtering inside our app. We can now seed some data to our datastore.</p>
<p>To continue working with the Chisel Store example, you can clone its <a href="https://github.com/xinnks/chisel-store">GitHub repository</a> and run <code>npm run dev</code> inside the project to deploy the local server, followed by running <code>node utils/seed.js</code> to seed some data to our datastore. Or, if you don’t want to clone this repository, copy the code from the repo’s <code>utils/seed.js</code> file, which has some data we can use to seed the local ChiselStrike datastore with.</p>
<h3 id="filtering-limiting-and-ordering-endpoint-results">Filtering, limiting, and ordering endpoint results</h3>
<p>Let’s see how we can implement the filtering, limiting, and ordering of ChiselStrike endpoint results. We want to cater to the functionalities the remaining sections of our Chisel Store app need.</p>
<h4 id="endpoint-filters">Route filters</h4>
<p>To add product filtering — a crucial feature inside any ecommerce website’s product listing page — we need to know how to implement filters on the ChiselStrike server’s routes.</p>
<p>ChiselStrike gives us access to several filters that we can pass as parameters to our routes, ultimately filtering the returned JSON results.</p>
<p>We can pass as many filtering parameters to the eroutes as allowed to get our intended results. The route filters can be roughly grouped into comparison and equality filters.</p>
<h5 id="comparison-filters">Comparison filters</h5>
<p>The supported comparison filters in ChiselStrike are as follows:</p>
<ul>
<li><code>lt</code>: less than</li>
<li><code>lte</code>: less than or equal to</li>
<li><code>gt</code>: greater than</li>
<li><code>gte</code>: greater than or equal to</li>
<li><code>like</code>: similar to SQL <code>LIKE</code>, includes wildcards <code>%</code> and <code>_</code></li>
<li><code>unlike</code>: similar to SQL <code>NOT LIKE</code>, includes wildcards <code>%</code> and <code>_</code></li>
</ul>
<p>We apply comparison filters by prefixing the property in question with a period, <code>.property_name</code>, and suffixing it with the tilde-prefixed comparison filter <code>~</code>. We then assign a relevant filter value to this complex query parameter.</p>
<p>Observing the product filtering section of our Chisel Store app, we need to filter the products being listed by <code>price</code> range and <code>category</code>.</p>
<p>We can filter the products by a <code>price</code> range in three possible ways, depending on the data being provided by the user:</p>
<ol>
<li>If the user only provides the lower limit product <code>price</code>, we need to filter the returned products by applying only the <code>gte</code> operator on the <code>price</code> property, hence passing the query <code>.price~gte</code> with the provided price. To get all products above <code>50$</code>, we will need to construct the route URL into <code>BASE_URL/dev/products?.price~gte=50</code></li>
<li>If the user only provides the higher limit product <code>price</code>, we need to filter the returned products by applying only the <code>lte</code> operator on the <code>price</code> property. To get all products below or equal to <code>120$</code>, we will need to construct the route URL to be <code>BASE_URL/dev/products?.price~lte=120</code></li>
<li>If the user provides both the higher and lower limits of the product’s <code>price</code>, we’ll need to pass two filters, <code>gte</code> and <code>lte</code> filters, assigning them the lower and higher <code>price</code>s respectively. Borrowing the previous <code>price</code> limits, we end up with the final route URL: <code>BASE_URL/dev/products?.price~gte=50&amp;.price~lte=120</code></li>
</ol>
<p>We can apply the <code>like</code> comparison filter to handle the product search section of our app. The <code>like</code> filter is suitable for handling search operations and behaves just like its SQL counterpart. In our case, our search results route URL would be constructed as <code>BASE_URL/dev/products?.name~like=%search_term%</code>.</p>
<p><em>N.B., as of this moment (</em><code>@chiselstrike/api - v0.12.1</code><em>), the</em> <code>like</code> <em>filter operates on one property per endpoint call.</em></p>
<p>This covers half of our products filter and finalizes the product search functionalities for the app.</p>
<h5 id="equality-filters">Equality filters</h5>
<p>The equality filter, <code>=</code>, operates by filtering entity properties with the exact value as the one passed as the parameter. Like the <code>like</code> filter, it only supports filtering one property per endpoint request.</p>
<p>Here is how we can construct a route to filter the product categories for the remaining half of the product filters section: <code>BASE_URL/dev/products?.category.name=category_name</code>.</p>
<p>Trying to list only the products belonging to the shoes category per the seed data provided above, we can visit this endpoint: <a href="http://localhost:8080/dev/products?.category.name=Shoes">BASEURL/dev/products?.category.name=categoryname</a>. We should end up with the following results:</p>
<p><img             class="aligncenter size-full wp-image-139644 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/final-results.jpeg" alt="Final Results" width="730" height="640"    /><noscript><img               class="aligncenter size-full wp-image-139644" src="https://blog.logrocket.com/wp-content/uploads/2022/11/final-results.jpeg" alt="Final Results" width="730" height="640"  /></noscript></p>
<p>This completes the product filters section for our app. You can read more about the <a href="https://docs.chiselstrike.com/reference/entity-crud-api/filter-order-limit-query">endpoint filtering properties that ChiselStrike supports here</a>.</p>
<h4 id="sorting-endpoint-results">Sorting endpoint results</h4>
<p>Onto our app’s fourth section, product sorting. We are going to enable sorting listed products by passing the <code>sort</code> parameter to our <code>/products</code> route.</p>
<p>To sort products in the order of a specific property, we need to pass the name of an existing entity property as the value of the <code>sort</code> parameter.</p>
<p>For example, to sort the returned products by the order of their <code>name</code>s in our app, we need to construct the route URL as <a href="https://file+.vscode-resource.vscode-cdn.net/home/james/Projects/Technical%20Writing/Paid/LogRocketBlog/Misc/A%20guide%20to%20prototyping%20with%20Chiselstrike/(http://localhost:8080/dev/products?sort=name)">BASE_URL/dev/products?.category.sort=name</a>. Fetching this endpoint will give us the following JSON output:</p>
<p><img             class="aligncenter size-full wp-image-139646 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/json-output.jpeg" alt="JSON Output" width="730" height="677"    /><noscript><img               class="aligncenter size-full wp-image-139646" src="https://blog.logrocket.com/wp-content/uploads/2022/11/json-output.jpeg" alt="JSON Output" width="730" height="677"  /></noscript></p>
<p>As you may have noticed, queried results are in ascending order by default. To get the sort in a descending order, prefix the property being passed with a minus <code>-</code> sign. In this case, we’d modify our route URL to <a href="https://file+.vscode-resource.vscode-cdn.net/home/james/Projects/Technical%20Writing/Paid/LogRocketBlog/Misc/A%20guide%20to%20prototyping%20with%20Chiselstrike/(http://localhost:8080/dev/products?sort=-name)">BASE_URL/dev/products?.category.sort=name</a>.</p>
<p>This covers the product sorting section of our ecommerce prototype.</p>
<h4 id="pagination">Pagination</h4>
<p>No one wants to see an endless page of results, and we can implement lazy loading results to better this, but sometimes users are just scrolling down to access your footer and not trying to see more items. Hence, when not thoughtfully implemented, lazy loading may account for just as bad of a user experience.</p>
<p>Pagination is not only a good frontend implementation, but likewise with backend data fetching. You don’t want a client to fetch a million rows of data from a backend because that might be an expensive transaction for both parties, the server and client.</p>
<p><code>ChiselEntity</code> class’s <code>crud()</code> method paginates fetched data by capping the returned data at a thousand elements per page. This is why we saw the <code>next_page</code> and <code>prev_page</code> properties accompanying all of the <code>GET</code> requests made to the server in previous examples.</p>
<p>The cursor query accompanying the next and previous pages is ChiselStrike’s implementation of <a href="https://jsonapi.org/profiles/ethanresnick/cursor-pagination/">cursor-based paging</a>. In short, the cursor ensures that you only get entities that come after the last element on the current page and avoids pitfalls such as getting duplicates if insertions or deletions happen as we transition between pages.</p>
<p>To modify Chisel Store’s default paging capacity, we use the <code>page_size</code> query parameter. This parameter sets up the number of items we want returned per request.</p>
<p>To implement pagination for Chisel Store, we pass a reasonable number as the value for the <code>page_size</code> parameter.</p>
<p>Passing <code>2</code> as the <code>page_size</code> to the <code>products</code> route, <a href="http://localhost:8080/dev/products?page_size=2">BASEURL/dev/products?pagesize=2</a>, we get the following result:</p>
<p><img             class="aligncenter size-full wp-image-139648 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/passing-2-results.jpeg" alt="Passing 2 Results" width="730" height="579"    /><noscript><img               class="aligncenter size-full wp-image-139648" src="https://blog.logrocket.com/wp-content/uploads/2022/11/passing-2-results.jpeg" alt="Passing 2 Results" width="730" height="579"  /></noscript></p>
<p>Visiting the endpoint provided in the <code>next_page</code> property of the result takes us to the next page in the data pagination order, which has this data:</p>
<p><img             class="aligncenter size-full wp-image-139650 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/pagination-data.jpeg" alt="Pagination Data" width="730" height="579"    /><noscript><img               class="aligncenter size-full wp-image-139650" src="https://blog.logrocket.com/wp-content/uploads/2022/11/pagination-data.jpeg" alt="Pagination Data" width="730" height="579"  /></noscript></p>
<p>Then, following the <code>prev_page</code> endpoint URL from the second result returns us to the data page from the earlier response.</p>
<p>We can then implement this on the pagination section of our app, using the previous page button to trigger data fetching from the <code>prev_page</code> URL and likewise with the next page pagination button with the respective <code>next_page</code> URL.</p>
<p>This ultimately sums up the pagination section of our app, and the final part of the functionalities we intend to implement in this prototype.</p>
<p>As we can see in this project, a high-fidelity ecommerce prototype, we were able to accomplish the task of providing the data to make it fully dynamic and presentable enough to proceed to the next phase in its development lifecycle. We were able to do this without having to scour through all of ChiselStrike’s API.</p>
<p>This short demonstration lays out how easy it is to carry out rapid prototyping with ChiselStrike.</p>
<p>You can <a href="https://github.com/xinnks/chisel-store-web">visit the GitHub repository for our Chisel Store app here</a>.</p>
<h2 id="more-on-chiselstrikes-capabilities">More on ChiselStrike’s capabilities</h2>
<p>Not only does ChiselStrike provides us with a superb starting point for prototyping projects, but it also goes beyond that initial level by facilitating a smooth transition into production.</p>
<p>Let’s see some of its features.</p>
<h3 id="customizing-crud-endpoints">Customizing CRUD endpoints</h3>
<p>Beyond simple CRUD requests, ChiselStrike allows us to customize our methods to suit unique use cases.</p>
<p>We can easily customize a CRUD endpoint to restrict certain HTTP methods. Let’s look at this example:</p>
<pre class="language-typescript hljs">// routes/products.ts
import { Product } from "../models/Product";
import { crud, responseFromJson } from "@chiselstrike/api";

export default crud(
  Product,
  {
    deleteAll: false,
    deleteOne: false,
    createResponse: (body: unknown, status: number) => {
      if (status &lt; 400){
        const data = body["results"] || body;
        return responseFromJson({ data }, status);
      }
      return responseFromJson({ error: body }, status);
    }
  }
)
</pre>
<p>We’ve restricted access to <code>DELETE</code> requests to the <code>/dev/products</code> route by setting the <code>deleteAll</code> and <code>deleteOne</code> properties of the configuration object passed as the second argument to the top-level <code>crud()</code> function to <code>false</code>.</p>
<p>Additionally, we’ve modified the data being fetched on this route by placing it inside a <code>data</code> property, stripping out the pagination properties for successful requests and returning error information for unsuccessful ones.</p>
<p>When we make HTTP <code>DELETE</code> requests to the <code>/dev/products</code> route, we will receive this response:</p>
<pre class="language-shell hljs">Method DELETE is not supported for "/products/&lt;ROUTE_ID>"
</pre>
<p>We can go further and fully customize our our route endpoints using ChiselStrike’s <code>RouteMap</code> API:</p>
<pre class="language-typescript hljs">import { Product } from "../models/Product"
import { RouteMap, ChiselRequest } from "@chiselstrike/api"

async function getAllProducts() : Promise&lt;Product[]>{
  return Product.findAll();
}

async function getOneProduct(req: ChiselRequest) : Promise&lt;Product>{
  const id = req.params.get("id");
  return Product.findOne({id});
}

export default new RouteMap()
  .get("/", getAllProducts)
  .get("/:id", getOneProduct)
</pre>
<p>In the above code, we are using the <code>RouteMap</code> API, which gives us the independence to specify routes by HTTP method. It also enables us to observe <code>GET</code> requests made to the products route <code>/dev/products</code> and those which pass an entity’s <code>id</code>: <code>/dev/products/</code>. We are handling these endpoint requests using the <code>getAllProducts()</code> and <code>getOneProduct()</code> functions.</p>
<h3 id="secrets">Secrets</h3>
<p>ChiselStrike supports the application adding and hot reloading secrets accessed at runtime.</p>
<p><em>N.B., always treat secrets with care and apply safety practices whenever using them in a VCS environment.</em></p>
<p>To add secrets to a ChiselStrike project, create a <code>.env</code> file at the root of our project and add the secrets in JSON:</p>
<pre class="language-json hljs">{
  "secret": "Not so secretive",
  "vcs": {
    "randomkey": "livingdangerously",
    "githubkey": "stageandcommitmeatyourownperil"
  }
}
</pre>
<p>We can then access the keys by using the <code>getSecret</code> method exported from <code>@chiselstrike/api</code> as follows. Create a new <code>secrets</code> route inside our ChiselStrike app, then visit it to see the secrets information returned:</p>
<pre class="language-typescript hljs">// routes/secrets.ts
import { getSecret, RouteMap, responseFromJson } from "@chiselstrike/api";

export default new RouteMap()
  .get("/", async function(){
    const secret = getSecret("vcs");
    return responseFromJson(secret)
  })
</pre>
<h3 id="api-versioning">API versioning</h3>
<p>Sometimes, we need to be working on different branches of our projects, trying new features and experimenting inside branches that are more likely to experience errors.</p>
<p>ChiselStrike enables us to version our API into more than the initial <code>/dev/</code> root endpoint we’ve been accessing. The <code>/dev</code> part of the API routes we’ve been accessing up to this point is a “development” version of the API since ChiselStrike treats API versioning as a first-class citizen.</p>
<p>Regardless of API versioning being a production-oriented workflow, we can try it within our local projects; we just have to make ample changes to what we’ve been working with.</p>
<p>Add a new <code>start</code> script to the project’s <code>package.json</code> file:</p>
<pre class="language-json hljs">{
  "scripts": {
    "dev": "chisel dev",
    "start": "chisel start"
  }
}
</pre>
<p>Halt the <code>npm run dev</code> command we were running initially and start the server using <code>start</code> instead: <code>npm run start</code>. Our project should resume as usual, with the <code>/dev</code> routes accessible.</p>
<p>To create a new branch, <code>test</code>, in our project directory, run:</p>
<pre class="language-shell hljs">npx chisel apply --version test
</pre>
<p>Chisel should report the addition of this new API version with the log message <code>INFO - Version "test" is ready</code>. We can now access all of the previously added routes prefixed with <code>/test/</code>.</p>
<p><img             class="size-full wp-image-141750 aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/chiselstrike-routes-after-test.png" alt="ChiselStrike Routes After /test" width="593" height="104"    /><noscript><img               class="size-full wp-image-141750 aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/11/chiselstrike-routes-after-test.png" alt="ChiselStrike Routes After /test" width="593" height="104"  /></noscript></p>
<p>Visiting the <code>/test/products</code> endpoint should return an empty response, while the old <code>/dev</code> prefixed routes should be working as normal.</p>
<p>To populate the <code>test</code> version of our API, we can make the same data population requests we made to the <code>dev</code> API, only making sure that we are replacing the <code>dev</code> with <code>test</code> for the newly created API version endpoints.</p>
<p>We can also choose to migrate the data from our old <code>dev</code> datastore to <code>test</code>:</p>
<pre class="language-shell hljs">npx chisel populate --version test --from dev
</pre>
<p>On successful data migration, we should receive an <code>OK</code> message from the terminal.</p>
<p>Try visiting the <code>test</code> branch’s <code>/products</code> route once more. It should now contain a carbon copy of the data returned when accessing the <code>dev</code> API <code>/products</code> endpoint.</p>
<p><a href="https://docs.chiselstrike.com/reference/versions">Read more on ChiselStrike API versioning here</a>.</p>
<p>Since not everything can fit into this post, here is a list of more of ChiselStrike’s features.</p>
<ul>
<li><a href="https://docs.chiselstrike.com/reference/streaming">Streaming</a> — ChiselStrike integrates with Kafka streaming</li>
<li><a href="https://docs.chiselstrike.com/reference/pol">Data policies</a> — Setting rules for how data is served from storage</li>
<li><a href="https://docs.chiselstrike.com/reference/login">User login</a> — ChiselStrike user authentication using NextAuth.js</li>
<li><a href="https://docs.chiselstrike.com/reference/cursors">Cursors</a> — ChiselStrike’s cursor API for building advanced queries beyond <code>findMany()</code> and <code>findOne()</code></li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Not only does ChiselStrike enable efficient prototyping, but it also involves as small of a source code footprint as possible. ChiselStrike covers essential operations with the power of the <code>ChiselEntity</code> class and its powerful <code>crud()</code> method.</p>
<p>You’ve gotten a sampling of what ChiselStrike can do with our demo, but feel free to try ChiselStrike in other apps, like those with read-only interfaces or dynamic features like forms and polls.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-139617" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-prototyping-chiselstrike/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-prototyping-chiselstrike/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-139617" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-prototyping-chiselstrike/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-139617" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-prototyping-chiselstrike/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
 <div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-prototyping-chiselstrike/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to streaming SSR with React 18 - LogRocket Blog</title>
			<link>https://blog.logrocket.com/streaming-ssr-with-react-18/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/streaming-ssr-with-react-18/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to streaming SSR with React 18 - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/streaming-ssr-with-react-18/">A guide to streaming SSR with React 18 - LogRocket Blog</a>
<div class="mainheading">
 
<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/chakshunyu/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/chak-shun-yu.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/chak-shun-yu.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/chakshunyu/">
Chak Shun Yu <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A software engineer with a current focus on frontend and React, located in the Netherlands.</span>
</div>
</div>
<h1 class="posttitle">A guide to streaming SSR with React 18</h1>
<p>
<span class="post-date"><time class="post-date">
January 2, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2384</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<article class="article-post">
 <p>React 18 has introduced a lot of exciting changes and features. It’s probably something that you’ve heard a lot about already, and for good reasons. Even though slightly less eye-catching, there were also some extremely exciting developments made in the React SSR architecture. To understand the breakthroughs that React 18 brought, it’s essential to look at the entire timeline and the incremental steps that led up to it.</p>
<p>Before we can dive into the before-and-after of SSR, it’s crucial to understand the reason why we do SSR in the first place. In particular, we’ll dive into its importance and the aspects of it that shaped the way the React team decided to improve their SSR architecture.</p>
<p>In this article, we’ll be taking a careful look at SSR because it’s important to have a fundamental understanding of this topic and how it compares against other techniques, most importantly client-side rendering (CSR). Unfortunately, we can’t cover the entire thing in this article and will only focus on the important aspects of SSR in the context of React 18. Although not strictly necessary, we recommend you brush up on this topic to make the most out of this article.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#short-introduction-ssr">A short introduction to SSR</a></li>
<li><a href="#streaming-ssr-pre-react-18">(Streaming) SSR, pre-React 18</a></li>
<li><a href="#streaming-ssr-post-react-18">Streaming SSR post-React 18</a>
<ul>
<li><a href="#suspense-component">The <code>Suspense</code> component</a></li>
<li><a href="#rendertopipeablestream-api">The <code>renderToPipeableStream</code> API</a></li>
<li><a href="#introducing-reactdomclient-hydrateroot-selective-hydration">Introducing <code>ReactDOMClient.hydrateRoot</code> for selective hydration</a></li>
</ul>
</li>
</ul>
<h2 id="short-introduction-ssr">A short introduction to SSR</h2>
<p>At its core, the most important reasons for implementing SSR are:</p>
<ul>
<li>Performance</li>
<li>Search engine optimization (SEO)</li>
<li>User experience (UX)</li>
</ul>
<p>In essence, there exists a specific rendering flow of a React application using SSR. First, the server takes over the client’s responsibility of fetching all the data and rendering the entire React application. After doing so, the resulting HTML and JavaScript are sent from the server to the client. Lastly, that client puts the HTML on the screen and connects it with appropriate JavaScript, which is also known as the<a href="https://www.joshwcomeau.com/react/the-perils-of-rehydration/"> hydration</a> process. Now, the client receives the entire HTML structure instead of one enormous bundle of JavaScript that it needs to render itself.</p>
<p>The benefits of this flow include easier access for web crawlers to index these pages, which improves SEO, and the client can quickly show the generated HTML to the user instead of a blank screen, which improves UX. Because all the rendering happens on the server, the client is relieved of this duty and doesn’t risk becoming a bottleneck in the scenario of low-end devices, leading to improved performance.</p>
<p>However, the setup as described is only a starting point for SSR. Based on how things are implemented above, there is a lot more to gain in terms of performance and UX. With these two aspects in mind, let’s take a trip down React SSR memory lane, dive into the issues pre-React 18, experience its evolution over time, and learn how React 18 with its streaming features changed everything.</p>
<h2 id="streaming-ssr-pre-react-18">(Streaming) SSR, pre-React 18</h2>
<p>Before React 18, <a href="https://blog.logrocket.com/react-suspense-data-fetching/">Suspense</a>, or any of the new streaming features existed, the typical SSR setup in React would look something as follows. While different implementations will probably contain minor differences, most setups will follow a similar architecture.</p>
<pre class="language-typescript hljs">// server/index.ts
import path from 'path';
import fs from 'fs';

import React from 'react';
import ReactDOMServer from 'react-dom/server';
import express from 'express';

import { App } from '../client/App';

const app = express();

app.get('/', (req, res) => {
    const appContent = ReactDOMServer.renderToString(&lt;App />);
    const indexFile = path.resolve('./build/index.html');


    fs.readFile(indexFile, 'utf8', (err, data) => {
        if (err) {
                console.error('Something went wrong:', err);
                return res.status(500).send('Failed to load the app.');
        }

        return res.send(
                data.replace('&lt;div id="root">&lt;/div>', `&lt;div id="root">${app}&lt;/div>`)
        );
    });
});

app.use(express.static('./build'));

app.listen(8080, () => {
    console.log(`Server is listening on port ${PORT}`);
});

// build/index.html
&lt;!DOCTYPE html>
&lt;html lang="en">
  &lt;head>
    &lt;title>React App&lt;/title>
    &lt;script src="main.js" async defer>&lt;/script>
  &lt;/head>
  &lt;body>
    &lt;div id="root">&lt;/div>
  &lt;/body>
&lt;/html>
</pre>
<p>The biggest part of an SSR setup is the server, so let’s start with that. In this example, we’re using Express to spin up a server to serve the files from our <code>build</code> folder on port 8080. When the server receives a request at the root URL, it will render the React application to an HTML string using the <code>renderToString</code> function from the <code>ReactDOMServer</code> package.</p>
<p>The result then needs to be sent back to the client. But before that, the server needs to surround the rendered application with the appropriate HTML structure. To do so, this example looks in the <code>build</code> folder for the <code>index.html</code> file, imports it, and injects the rendered application into the root element:</p>
<pre class="language-typescript hljs">// client/index.ts
import React from "react";
import ReactDOM from 'react-dom';
import { App } from './App';

// Instead of `ReactDOM.render(...)`
ReactDOM.hydrate(&lt;App />, document.getElementById('root'));
</pre>
<p>Then, the main change that needs to be made on the client side is that it doesn’t have to render the application anymore.</p>
<p>As we saw in the previous step, the application is already rendered by the server. So now, the client is only responsible for hydrating the application. It does so by using the <code>ReactDOM.hydrate</code> function instead of <code>ReactDOM.render</code>.</p>
<p>While this is a working setup of React SSR, there are still a few major drawbacks to it regarding performance and UX:</p>
<ul>
<li>While the server is now responsible for rendering the React application, the server-side-rendered content is still one large blob of HTML that needs to be transmitted towards the client before it’s rendered</li>
<li>Due to the interdependent nature of React components, the server must wait for all the data to be fetched before it can start rendering components, generate the HTML response, and send it to the client</li>
<li>The client still needs to load the entire app’s JavaScript before it can start hydrating the server’s HTML response</li>
<li>The hydration process is something that needs to happen all at once, but components are only interactive after being hydrated, which means that users cannot interact with a page before hydration is complete</li>
</ul>
<p>In the end, all of these drawbacks boil down to the current setup, which is still a waterfall-like approach from the server towards the client. This creates an all-or-nothing flow from one end to the other: either the entire HTML response is sent to the client or not, either all the data is done fetching so the server can start rendering or not, either the entire application is hydrated or not, and either the entire page is responsive or none.</p>
<p>In React 16, the <code><a href="https://reactjs.org/docs/react-dom-server.html#rendertonodestream">renderToNodeStream server rendering function</a></code> was introduced on top of the existing <code>renderToString</code>. In terms of the setup and results, this didn’t change a lot except that this function returns a Node.js <code>ReadableStream</code>. This allows the server to stream the HTML to the client.</p>
<pre class="language-typescript hljs">app.get('/', (req, res) => {
    const endHTML = "&lt;/div>&lt;/body>&lt;/html>";
    const indexFile = path.resolve('./build/index.html');

    fs.readFile(indexFile, 'utf8', (err, data) => {
            if (err) {
              console.error('Something went wrong:', err);
              return res.status(500).send('Failed to load the app.');   
        }

        // Split the HTML where the React app should be injected and send the first part to the client
        const beginHTML = data.replace('&lt;/div>&lt;/body>&lt;/html>', '');
        res.write(beginHTML);


        // Render the application into a stream using `renderToNodeStream`  and pipe that into the response
        const appStream = ReactDOMServer.renderToNodeStream(&lt;App />);
        appStream.pipe(res, { end: 'false' });


        // When the server is done rendering, send the rest of the HTML
        appStream.on('end', () => {
            response.end(endHTML);
        )};
    });  
});
</pre>
<p>This new function partly solves one of the drawbacks we described; namely, it has to transmit the HTML response as one large blob from the server to the client. However, the server still needs to wait for the entire HTML structure to be generated before it can start transmitting anything to the client. So, it doesn’t really address any of the other drawbacks that we described.</p>
<p>Now, let’s look at the situation after React 18 with the newly introduced features and how they address these drawbacks.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h2 id="streaming-ssr-post-react-18">Streaming SSR post-React 18</h2>
<p>The SSR architecture post-React 18 involves a handful of different parts. None of these single-handedly fixes any of the drawbacks that we described, but the combination of them makes the magic work. So, to fully understand the entire setup, it’s necessary to look into all of them and what they contribute.</p>
<h3 id="suspense-component">The <code>Suspense</code> component</h3>
<p>At the center of it all is the famous <code><a href="https://reactjs.org/blog/2022/03/29/react-v18.html#new-suspense-features">Suspense component</a></code>. It is the main gateway towards all the features that we’ll describe, so let’s start with it.</p>
<pre class="language-javascript hljs">// client/src/SomeComponent.js
import { lazy, Suspense } from 'react';

const SomeInnerComponent = lazy(() => import('./SomeInnerComponent.js' /* webpackPrefetch: true */));

export default function SomeComponent() {
    // ...
    return (
        &lt;Suspense fallback={&lt;Spinner />}>
          &lt;SomeInnerComponent />
        &lt;/Suspense>
    );
}
</pre>
<p>In short, Suspense is a mechanism for developers to tell React that a certain part of the application is waiting for data. In the meantime, React will show a fallback UI in its place and update it when the data is ready.</p>
<p>This doesn’t sound too different from previous approaches, but fundamentally, it synchronizes React’s rendering process and the data-fetching process in a way that is more graceful and integrated. To learn more about the details, take a look at <a href="https://www.chakshunyu.com/blog/a-fundamental-guide-to-react-suspense/">this guide to Suspense</a>.</p>
<p>Suspense boundaries split up the application into chunks based on their data fetching requirements, which the server can then use to delay rendering what is pending. Meanwhile, it can pre-render the chunks for which data is available and stream it to the client. When the data for a previously pending chunk is ready, the server will then render it and send it to the client again using the open stream.</p>
<p>Together with <code>React.lazy</code>, which is used to code-split your JavaScript bundle into smaller parts, it provides the first pieces of the puzzle towards fixing the remaining waterfall drawbacks.</p>
<p>However, the problem was that Suspense and code-splitting using <code>React.lazy</code> were not compatible with SSR yet, until React 18.</p>
<h3 id="rendertopipeablestream-api">The <code>renderToPipeableStream</code> API</h3>
<p>To understand the remaining connecting puzzle pieces, we’ll take a look at the <a href="https://codesandbox.io/s/kind-sammet-j56ro?file=/src/App.js">Suspense SSR example</a> that the React teams provided in their <a href="https://github.com/reactwg/react-18/discussions/37">working group discussion</a> for the architecture post React 18.</p>
<pre class="language-javascript hljs">import ReactDOMServer from "react-dom/server";
import { App } from "../client/App";

app.get('/', (req, res) => {
    res.socket.on('error', (error) => console.log('Fatal', error));

    let didError = false;
    const stream = ReactDOMServer.renderToPipeableStream(
        &lt;App />,
        {
            bootstrapScripts: ['/main.js'],
            onShellReady: () => {
                res.statusCode = didError ? 500 : 200;
                res.setHeader('Content-type', 'text/html');
                stream.pipe(res);
            },
            onError: (error) => {
                didError = true;
                console.log(error);
            } 
        }
    );
});
</pre>
<p>The most significant change compared to the previous setup is the usage of <code>renderToPipeableStream</code> API on the server side. This is a newly introduced server rendering function in React 18, which returns a pipeable Node.js stream. While the previous <code>renderToNodeStream</code> couldn’t wait for data and would buffer the entire HTML content until the end of the stream, the <code>renderToPipeableStream</code> function does not suffer from these limitations.</p>
<p>When the content above the <code>Suspense</code> boundary is ready, the <code>onShellReady</code> callback is called. If any error happened in the meanwhile, it’ll be reflected that in the response towards the client. Then, we’ll start streaming the HTML to the client by piping it into the response.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>After that, the stream will stay open and transmit any subsequent rendered HTML blocks to the client. This is the biggest change compared to its former version.</p>
<p>This rendering function fully integrates with the Suspense feature and code splitting through <code>React.lazy</code> on the side of the server, which is what enables the streaming HTML feature for SSR. This solves the previously described waterfalls of both HTML and data fetching, as the application can be rendered and transmitted incrementally based on data requirements.</p>
<pre class="language-typescript hljs">// client/index.ts
import React from "react";
import ReactDOMClient from 'react-dom/client';
import { App } from './App';

// Instead of `ReactDOM.hydrate(...)`
ReactDOMClient.hydrateRoot(document.getElementById('root'), &lt;App />);
</pre>
<h3 id="introducing-reactdomclient-hydrateroot-selective-hydration">Introducing <code>ReactDOMClient.hydrateRoot</code> for selective hydration</h3>
<p>On the client side, the only change that needs to be made is how the application is put on the screen. As a replacement for the previous <code>ReactDOM.hydrate</code>, the React team has introduced a new <code>ReactDOMClient.hydrateRoot</code> in React 18. While the change is minimal, it enables a lot of improvements and features. For our context, the most important one is selective hydration.</p>
<p>As mentioned, Suspense splits the application into HTML chunks based on data requirements, while code-splitting splits the application into JavaScript chunks. Selective hydration allows React to put these things together on the client and start hydrating chunks at different timings and priorities. It can start hydrating as soon as chunks of HTML and JS are received, and prioritize a hydration queue of parts that the user interacted with.</p>
<p>This solves the remaining two waterfall issues that we had: having to wait for all JavaScript to load before hydrating can start, and either hydrating the entire application or none of it.</p>
<p>The combination of selective hydration and the other mentioned features allows React to start hydrating as soon as the necessary JavaScript code is loaded, while also being able to hydrate different parts of the application separately and based on priority.</p>
<h2>What’s next?</h2>
<p>React 18 is the cherry on top of the long-lasting development of changes in its SSR architecture over several major versions and years of fine-tuning. Suspense and code splitting were early pieces of the puzzle, but couldn’t be used to their full potential on the server until the introduction of streaming HTML and selective hydration in React 18.</p>
<p>To help you understand how these changes came to fruition, we looked at the situation before and after React 18, explored code examples of typical approaches to setting SSR up, dove into the main drawbacks that the React SSR architecture faced, and lastly went over how the combination of Suspense, code splitting, streaming HTML, and selective hydration have solved these issues.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-152071" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/streaming-ssr-with-react-18/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/streaming-ssr-with-react-18/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-152071" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/streaming-ssr-with-react-18/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-152071" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/streaming-ssr-with-react-18/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/streaming-ssr-with-react-18/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to using Convex for state management - LogRocket Blog</title>
			<link>https://blog.logrocket.com/using-convex-for-state-management/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/using-convex-for-state-management/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to using Convex for state management - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/using-convex-for-state-management/">A guide to using Convex for state management - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/anshumanbhardwaj/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/09/anshuman-bhardwaj.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/09/anshuman-bhardwaj.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/anshumanbhardwaj/">
Anshuman Bhardwaj <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Anshuman, a.k.a Superman–is a seasoned software engineer who loves writing and teaching. A craftsman of React and JavaScript, he enjoys solving everyday problems with code and sharing his learnings with the world.</span>
</div>
</div>
<h1 class="posttitle">A guide to using Convex for state management</h1>
<p>
<span class="post-date"><time class="post-date">
September 21, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2646</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>Modern-day frontend frameworks like React have made state management easier for developers, but using solutions like Convex for state management are making it even easier. In React, the state of a component dictates how the UI will look, and while managing an application’s state has become relatively simple, the global state concept is still a pain for developers.</p>
<p>In this tutorial, we will build a full-stack Next.js application with Convex for global state management. We’ll also implement Convex functions to query and update the data. By the end of this tutorial, we will have deployed the final application to Vercel — feel free to follow along with this walkthrough using this <a href="https://github.com/Anshuman71/convex-with-nextjs" target="_blank" rel="noopener">GitHub repository</a>.</p>
<ul>
<li><a href="#set-up-a-nextjs-project">Set up a Next.js project</a></li>
<li><a href="#set-up-convex">Set up Convex</a></li>
<li><a href="#add-state-management-using-convex">Add state management using Convex</a>
<ul >
<li><a href="#define-the-schema">Define the schema</a></li>
<li><a href="#implement-convex-functions">Implement Convex functions</a></li>
<li><a href="#connect-the-component-with-convex-functions">Connect the component with Convex functions</a></li>
<li><a href="#managing-convex">Managing Convex</a></li>
</ul>
</li>
<li><a href="#secure-the-application">Secure the application</a>
<ul >
<li><a href="#create-an-auth0-application">Create an Auth0 application</a></li>
<li><a href="#set-up-auth0">Set up Auth0</a></li>
<li><a href="#integrate-auth0-with-convex">Integrate Auth0 with Convex</a></li>
</ul>
</li>
<li><a href="#deploy-to-vercel">Deploy to Vercel</a></li>
</ul>
<h2>What is Convex?</h2>
<p>Consider, for example, applications keeping track of financial transactions that work with a global state all clients can change and observe in real-time. Such applications are hard to develop because developers need to sync the state between applications and take care of ACID properties.</p>
<p><a href="https://www.convex.dev/" target="_blank" rel="noopener">Convex</a> aims to solve this problem by providing a full-stack solution including data storage, retrieval, and mutations, all built into an SDK for global state management. Its serverless approach is efficient and makes for a highly scalable platform. Convex is a developer-first platform, with a reactive architecture that aligns well with React, and the SDK additionally has support for features like <a href="https://docs.convex.dev/using/optimistic-updates" target="_blank" rel="noopener">optimistic updates</a> and subscriptions.</p>
<h3 id="prerequisites">Prerequisites</h3>
<p>You’ll need Node.js, npm, or yarn, and a code editor like VS Code installed on your computer. You’ll also need a GitHub account to use with Convex.</p>
<h2 id="set-up-a-nextjs-project">Set up a Next.js project</h2>
<p>The application will allow users to see a list of existing posts and submit new blog posts. A blog post will contain a title, body, and the author’s name.</p>
<p>To get started, run the following command to set up a new Next.js project:</p>
<pre class="language-bash hljs">npx <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="076475626673622a69627f732a667777476b6673627473">[email protected]</a> convex-example --typescript
</pre>
<p>Open the project inside the code editor and update the <code>pages/index.tsx</code> file to display a form in order to create a blog post:</p>
<pre class="language-typescript hljs">// pages/index.tsx
import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useCallback, useState } from 'react'

const Home: NextPage = () => {
  const [author, setAuthor] = useState('')
  const [title, setTitle] = useState('')
  const [body, setBody] = useState('')

  const createPost = async () => {
    // TODO: create a new post inside database
    console.log({ author, title, body  })
    // reset the inputs after submission
    setAuthor('')
    setBody('')
    setTitle('')
  }

  return (
      &lt;div className={styles.container}>
        &lt;Head>
          &lt;title>Next.js with Convex&lt;/title>
          &lt;meta name="description" content="Generated by create next app" />
          &lt;link rel="icon" href="/favicon.ico" />
        &lt;/Head>

        &lt;main className={styles.main}>
          &lt;h1 className={styles.title}>
            Welcome to &lt;a href="https://nextjs.org">Next.js&lt;/a> with{' '}
            &lt;a href="https://convex.dev">Convex&lt;/a>
          &lt;/h1>
          &lt;input
              type={'text'}
              value={title}
              placeholder={'Title'}
              className={styles.inputStyles}
              onChange={(event) => setTitle(event.target.value)}
          />      
          &lt;input
              type={'text'}
              value={author}
              placeholder={'Author'}
              className={styles.inputStyles}
              onChange={(event) => setAuthor(event.target.value)}
          />
          &lt;textarea
              value={body}
              rows={5}
              placeholder={'Post body '}
              className={styles.inputStyles}
              onChange={(event) => setBody(event.target.value)}
          />
          &lt;button className={styles.button} onClick={createPost}>
            Create post
          &lt;/button>
        &lt;/main>
      &lt;/div>
  )
}

export default Home
</pre>
<p>Update the <code>styles/Home.module.css</code> to the following:</p>
<pre class="language-css hljs">/* styles/Home.module.css */
.container {
  padding: 0 2rem;
  display: flex;
  flex-direction: column;
}

.main {
  padding: 4rem 0;
  flex: 10;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.button {
  font-size: 1rem;
  font-weight: 800;
  cursor: pointer;
  margin: 0.5rem;
  padding: 0.5rem;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  width: 200px;
}

.button:hover,
.button:focus,
.button:active {
  color: #0070f3;
  border-color: #0070f3;
}

.inputStyles {
  width: 300px;
  margin: 10px auto;
}
</pre>
<p>Run <code>npm run dev</code> to start the application, then open <code>http://localhost:3000/</code> in a web browser.</p>
<p><img             class="aligncenter wp-image-133398 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-blog-post-form.png" alt="Convex Blog Post Form" width="730" height="411"    /><noscript><img               class="aligncenter wp-image-133398 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-blog-post-form.png" alt="Convex Blog Post Form" width="730" height="411"  /></noscript></p>
<p>The form for creating new posts is ready. Now, you have to implement the logic to save and read the data using Convex.</p>
<h2 id="set-up-convex">Set up Convex</h2>
<p>Convex provides a JavaScript SDK that you can use in your project.</p>
<ol>
<li>Run <code>npm i convex</code> to install the Convex package</li>
<li>Inside the project, run <code>npx convex login</code>, which will open a page in the browser to log into Convex using your GitHub account</li>
<li>After logging in, run <code>npx convex init</code> to initialize the Convex project with a <code>convex.json</code> and <code>.env.local</code> for configuration. This command will also create a <code>convex/</code> directory to write functions into</li>
</ol>
<p>(Note: This command will prompt you for a project name)</p>
<p>Finally, update the <code>pages/_app.tsx</code> to add <code>ConvexProvider</code> to the complete application. The <code>ConvexProvider</code> will allow you to use React hooks provided by Convex across the application.</p>
<pre class="language-typescript hljs">// pages/_app.tsx
import '../styles/globals.css'
import type { AppProps } from 'next/app'

import { ConvexProvider, ConvexReactClient } from 'convex/react'
import convexConfig from '../convex.json'
const convex = new ConvexReactClient(convexConfig.origin)

function MyApp({ Component, pageProps }: AppProps) {
  return (
      &lt;ConvexProvider client={convex}>
        &lt;Component {...pageProps} />
      &lt;/ConvexProvider>
  )
}

export default MyApp
</pre>
<h2 id="add-state-management-using-convex">Add state management using Convex</h2>
<p>With Convex set up in the project, it’s time to create a data model and connect the frontend with the database.</p>
<h3 id="define-the-schema">Define the schema</h3>
<p>Inside the <code>convex/</code> folder, create a new file, <code>schema.ts</code>, to define the schema for blog posts. The <code>defineTable</code> function will create a <code>posts</code> table inside Convex.</p>
<pre class="language-typescript hljs">// convex/schema.ts
import { defineSchema, defineTable, s } from 'convex/schema'

export default defineSchema({
  posts: defineTable({
    title: s.string(),
    author: s.string(),
    body: s.string(),
  }),
})
</pre>
<p>Now, run <code>npx convex codegen</code> to generate type definitions for the <code>posts</code> schema to improve code completions. This will allow you to reference posts as <code>Document&lt;'posts'></code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="implement-convex-functions">Implement Convex functions</h3>
<p>Convex functions allow the frontend to communicate with the database in two ways: queries and mutation.</p>
<p>These functions are exported from files within the <code>convex</code> directory and they are deployed as serverless functions to execute database interactions.</p>
<p>The frontend needs to read the available posts. For that, create a new file; <code>convex/getPosts.ts</code>. This file exports a query function that returns all available <code>posts</code> from the database.</p>
<pre class="language-typescript hljs">// convex/getPosts.ts
import { query } from './_generated/server'
import { Document } from './_generated/dataModel'

export default query(async ({ db }): Promise&lt;Document&lt;'posts'>[]> => {
  return await db.table('posts').collect()
})
</pre>
<p>Inside the <code>convex/</code> folder, create a new file called <code>addPost.ts</code>. This file exports a mutation function to allow users to add a new post to the database. The function accepts a <code>post</code> object as an argument.</p>
<pre class="language-typescript hljs">// convex/addPost.ts
import { mutation } from './_generated/server'

export default mutation(
  async (
    { db },
    post: { author: string; body: string; title: string }
  ) => {
    await db.insert('posts', post)
  }
)
</pre>
<p>Run <code>npx convex push</code> to generate the type definitions and deploy the functions to Convex.</p>
<h3 id="connect-the-component-with-convex-functions">Connect the component with Convex functions</h3>
<p>Convex provides <code>useQuery</code> and <code>useMutation</code> hooks to interact with the database using the functions implemented above.</p>
<p>Add the <code>useMutation</code> hook to the <code>Home</code> component and update the <code>createPost</code> function to call the <code>addPost</code> mutation function with the post data.</p>
<pre class="language-typescript hljs">// pages/index.tsx
import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useCallback, useState } from 'react'
import {useMutation} from "../convex/_generated/react";

const Home: NextPage = () => {
  const addPost = useMutation('addPost')

  const [author, setAuthor] = useState('')
  const [title, setTitle] = useState('')
  const [body, setBody] = useState('')

  const createPost = async () => {
    await addPost({ body, author, title});
    // reset the inputs after submission
    setAuthor('')
    setBody('')
    setTitle('')
  }

  return (
      // return the component
  )
}

export default Home
</pre>
<p>Add the <code>useQuery</code> hook to fetch and display the list of posts from the database. The <code>useQuery</code> hook will return <code>undefined</code> while loading data, and a list of posts afterward.</p>
<pre class="language-typescript hljs">// pages/index.tsx
import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useCallback, useState } from 'react'
import {useMutation, useQuery} from "../convex/_generated/react";

const Home: NextPage = () => {
  const posts = useQuery('getPosts')
  const addPost = useMutation('addPost')

  const [author, setAuthor] = useState('')
  const [title, setTitle] = useState('')
  const [body, setBody] = useState('')

  const createPost = async () => {
    await addPost({ body, author, title});
    // reset the inputs after submission
    setAuthor('')
    setBody('')
    setTitle('')
  }

  return (
      &lt;div className={styles.container}>
        &lt;Head>
          &lt;title>Next.js with Convex&lt;/title>
          &lt;meta name="description" content="Generated by create next app" />
          &lt;link rel="icon" href="/favicon.ico" />
        &lt;/Head>

        &lt;main className={styles.main}>
          &lt;h1 className={styles.title}>
            Welcome to &lt;a href="https://nextjs.org">Next.js&lt;/a> with{' '}
            &lt;a href="https://convex.dev">Convex&lt;/a>
          &lt;/h1>
          {posts ? (
              &lt;>
                &lt;p className={styles.description}>
                  {'Total posts:'} {posts.length}
                &lt;/p>

                &lt;ul>
                  {posts.map((post) => (
                      &lt;li key={post._id.toString()}>{post.title}&lt;/li>
                  ))}
                &lt;/ul>
              &lt;/>
          ) : (
              'Loading posts...'
          )}
          &lt;input
              type={'text'}
              value={title}
              placeholder={'Title'}
              className={styles.inputStyles}
              onChange={(event) => setTitle(event.target.value)}
          />      
          &lt;input
              type={'text'}
              value={author}
              placeholder={'Author'}
              className={styles.inputStyles}
              onChange={(event) => setAuthor(event.target.value)}
          />
          &lt;textarea
              value={body}
              rows={5}
              placeholder={'Post body '}
              className={styles.inputStyles}
              onChange={(event) => setBody(event.target.value)}
          />
          &lt;button className={styles.button} onClick={createPost}>
            Create post
          &lt;/button>
        &lt;/main>
      &lt;/div>
  )
}

export default Home
</pre>
<p>Your application is ready now! Open <code>http://localhost:3000</code> to see it in action:</p>
<p><img             class="aligncenter wp-image-133396 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-nextjs-create-app.gif" alt="Convex Next.js Create App" width="730" height="410"  /><noscript><img               class="aligncenter wp-image-133396 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-nextjs-create-app.gif" alt="Convex Next.js Create App" width="730" height="410"/></noscript></p>
<p>You’ll notice that the list of posts gets updated automatically whenever you create a new post.</p>
<p>This behavior is possible due to the end-to-end reactivity of the Convex global state; <em>every</em> component using the query gets updated whenever the data changes.</p>
<h3 id="managing-convex">Managing Convex</h3>
<p>Run <code>npx convex dashboard</code> to log in to the <a href="https://dashboard.convex.dev/" target="_blank" rel="noopener">Convex dashboard</a> to manage your application data, view logs, and see the metrics for function execution and read/writes.</p>
<p><img             class="aligncenter wp-image-133400 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-dashboard.png" alt="Convex Dashboard" width="730" height="382"    /><noscript><img               class="aligncenter wp-image-133400 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-dashboard.png" alt="Convex Dashboard" width="730" height="382"  /></noscript></p>
<h2 id="secure-the-application">Secure the application</h2>
<p>Keeping the application data secure is crucial, and Convex simplifies protecting your data using identity providers. Convex comes with first-class support for Auth0 out of the box, and you can set it up in no time.</p>
<h3 id="create-an-auth0-application">Create an Auth0 application</h3>
<p>Log into your Auth0 dashboard and create a new Single Page Web Application. You can <a href="https://a0.to/signup-for-auth0" target="_blank" rel="noopener">sign up</a> for a free account on Auth0 if you don’t have an account already.</p>
<p><img             class="aligncenter wp-image-133402 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/create-auth0-application.png" alt="Create Auth0 Application" width="730" height="411"    /><noscript><img               class="aligncenter wp-image-133402 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/create-auth0-application.png" alt="Create Auth0 Application" width="730" height="411"  /></noscript></p>
<p>Copy the Domain and Client ID from the settings page of this new application and save them for later.</p>
<p><img             class="aligncenter wp-image-133405 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/copy-client-id-domain.png" alt="Copy Client ID Domain" width="730" height="411"    /><noscript><img               class="aligncenter wp-image-133405 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/copy-client-id-domain.png" alt="Copy Client ID Domain" width="730" height="411"  /></noscript></p>
<p>In the application settings page, add <code>http://localhost:3000</code> into the “Allowed Callback URLs” field as shown below. This will enable <code>http://localhost:3000</code> to use Auth0 for login during development.</p>
<p><img             class="aligncenter wp-image-133407 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/add-local-host-id.png" alt="Add Local Host ID" width="730" height="381"    /><noscript><img               class="aligncenter wp-image-133407 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/add-local-host-id.png" alt="Add Local Host ID" width="730" height="381"  /></noscript></p>
<h3 id="set-up-auth0">Set up Auth0</h3>
<p>Start by running <code>npm i @auth0/auth0-react</code> to install Auth0 in your project.</p>
<p>Then, run <code>npx convex auth add</code> to add Auth0 as the identity provider to Convex. This command will prompt you for the Domain and Client ID copied earlier.</p>
<p>Create a new folder called <code>components/</code> at the root of the project and add a new file called <code>Login.tsx</code> for the Login component that has a button to prompt users for login.</p>
<pre class="language-typescript hljs">// components/Login.tsx
import { useAuth0 } from '@auth0/auth0-react'

export function Login() {
  const { isLoading, loginWithRedirect } = useAuth0()
  if (isLoading) {
    return &lt;button className="btn btn-primary">Loading...&lt;/button>
  }
  return (
    &lt;main className="py-4">
      &lt;h1 className="text-center">Convex Chat&lt;/h1>
      &lt;div className="text-center">
        &lt;span>
          &lt;button className="btn btn-primary" onClick={loginWithRedirect}>
            Log in
          &lt;/button>
        &lt;/span>
      &lt;/div>
    &lt;/main>
  )
}
</pre>
<p>Update the <code>pages/_app.tsx</code> to replace the <code>ConvexProvider</code> with <code>ConvexProviderWithAuth0</code>.</p>
<pre class="language-typescript hljs">import '../styles/globals.css'
import { ConvexProviderWithAuth0 } from 'convex/react-auth0'
import { ConvexReactClient } from 'convex/react'
import convexConfig from '../convex.json'
import { AppProps } from 'next/app'
import { Login } from '../components/Login'

const convex = new ConvexReactClient(convexConfig.origin)
const authInfo = convexConfig.authInfo[0]

function MyApp({ Component, pageProps }: AppProps) {
    return (
        &lt;ConvexProviderWithAuth0
            client={convex}
            authInfo={authInfo}
            loggedOut={&lt;Login />}
        >
            &lt;Component {...pageProps} />
        &lt;/ConvexProviderWithAuth0>
    )
}

export default MyApp
</pre>
<p>Now, when you open the application <code>http://localhost:3000</code>, you’ll see a login button instead of the post form.</p>
<p><img             class="aligncenter wp-image-133409 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/login-with-auth0.png" alt="Login With Auth0" width="730" height="604"    /><noscript><img               class="aligncenter wp-image-133409 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/login-with-auth0.png" alt="Login With Auth0" width="730" height="604"  /></noscript></p>
<h3 id="integrate-auth0-with-convex">Integrate Auth0 with Convex</h3>
<p>Now that you have Auth0 configured, you can secure the mutation function. The <code>mutation</code> function provides the authentication information as the <code>auth</code> object. The <code>addPost</code> mutation will now reject any unauthenticated requests.</p>
<pre class="language-typescript hljs">// convex/addPost.ts
import { mutation } from './_generated/server'

export default mutation(
    async (
        { db, auth },
        post: { author: string; body: string; title: string }
    ) => {
      const identity = await auth.getUserIdentity()
      if (!identity) {
        throw new Error('Called addPosts without authentication present!')
      }
      await db.insert('posts', post)
    }
)
</pre>
<p>You can also update the code on the frontend to use the logged-in user’s name as the author field:</p>
<pre class="language-typescript hljs">// pages/index.tsx
import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useCallback, useState } from 'react'
import {useMutation, useQuery} from "../convex/_generated/react";
import {useAuth0} from "@auth0/auth0-react";

const Home: NextPage = () => {
  const {user} = useAuth0()
  const posts = useQuery('getPosts')
  const addPost = useMutation('addPost')

  const [title, setTitle] = useState('')
  const [body, setBody] = useState('')

  const createPost = async () => {
    if(user?.name) {
      await addPost({ body, author: user.name, title});
    }
    // reset the inputs after submission
    setBody('')
    setTitle('')
  }

  return (
      &lt;div className={styles.container}>
        &lt;Head>
          &lt;title>Next.js with Convex&lt;/title>
          &lt;meta name="description" content="Generated by create next app" />
          &lt;link rel="icon" href="/favicon.ico" />
        &lt;/Head>

        &lt;main className={styles.main}>
          &lt;h1 className={styles.title}>
            Welcome to &lt;a href="https://nextjs.org">Next.js&lt;/a> with{' '}
            &lt;a href="https://convex.dev">Convex&lt;/a>
          &lt;/h1>
          {posts ? (
              &lt;>
                &lt;p className={styles.description}>
                  {'Total posts:'} {posts.length}
                &lt;/p>

                &lt;ul>
                  {posts.map((post) => (
                      &lt;li key={post._id.toString()}>{post.title}&lt;/li>
                  ))}
                &lt;/ul>
              &lt;/>
          ) : (
              'Loading posts...'
          )}
          &lt;input
              type={'text'}
              value={title}
              placeholder={'Title'}
              className={styles.inputStyles}
              onChange={(event) => setTitle(event.target.value)}
          />
          &lt;textarea
              value={body}
              rows={5}
              placeholder={'Post body '}
              className={styles.inputStyles}
              onChange={(event) => setBody(event.target.value)}
          />
          &lt;button className={styles.button} onClick={createPost}>
            Create post
          &lt;/button>
        &lt;/main>
      &lt;/div>
  )
}

export default Home
</pre>
<h2 id="deploy-to-vercel">Deploy to Vercel</h2>
<p>To deploy the application, push your code (including <code>convex.json</code>) to a repository on GitHub and link it to your <a href="https://vercel.com/new" target="_blank" rel="noopener">Vercel account</a>:</p>
<p><img             class="aligncenter wp-image-133411 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/deploy-to-vercel.png" alt="Deploy To Vercel" width="730" height="411"    /><noscript><img               class="aligncenter wp-image-133411 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/deploy-to-vercel.png" alt="Deploy To Vercel" width="730" height="411"  /></noscript></p>
<p>Replace the build command with <code>npx convex push &amp;&amp; next build</code> to push the latest functions to Convex while deploying, and add the <code>CONVEX_ADMIN_KEY</code> environment variable from the <code>.env.local</code>:</p>
<p><img             class="aligncenter wp-image-133413 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/update-deploy-settings.png" alt="Update Deploy Settings" width="730" height="631"    /><noscript><img               class="aligncenter wp-image-133413 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/update-deploy-settings.png" alt="Update Deploy Settings" width="730" height="631"  /></noscript></p>
<p>Once the application is deployed, copy the deployment URL (<code>.vercel.app</code>):</p>
<p><img             class="aligncenter wp-image-133415 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/copy-vercel-deployment-url.png" alt="Copy Vercel Deployment" width="730" height="527"    /><noscript><img               class="aligncenter wp-image-133415 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/copy-vercel-deployment-url.png" alt="Copy Vercel Deployment" width="730" height="527"  /></noscript></p>
<p>Add the URL to the Allowed Callback URLs list alongside the <code>http://localhost:3000</code> in the Auth0 application settings.</p>
<p><img             class="aligncenter wp-image-133417 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-dashboard-1.png" alt="Convex Dashboard" width="730" height="382"    /><noscript><img               class="aligncenter wp-image-133417 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/09/convex-dashboard-1.png" alt="Convex Dashboard" width="730" height="382"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>Your application is now deployed on Vercel. In this tutorial, we learned about global state management and how to deploy a Next.js application with state management using Convex.</p>
<p>We also learned about securing the application with Auth0 and deploying it to Vercel. You can extend the above application to use advanced features like <a href="https://docs.convex.dev/using/optimistic-updates" target="_blank" rel="noopener">optimistic updates</a> and <a href="https://docs.convex.dev/using/indexes" target="_blank" rel="noopener">indexes</a> to make it even faster.</p>
<p>You can try Convex for free today and <a href="https://docs.convex.dev/getting-started/" target="_blank" rel="noopener">read more about using it in their documentation</a>.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-133367" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/using-convex-for-state-management/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/using-convex-for-state-management/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-133367" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/using-convex-for-state-management/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-133367" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/using-convex-for-state-management/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/using-convex-for-state-management/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to using Node on Windows with Chocolatey - LogRocket Blog</title>
			<link>https://blog.logrocket.com/install-node-windows-chocolatey/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/install-node-windows-chocolatey/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to using Node on Windows with Chocolatey - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/install-node-windows-chocolatey/">A guide to using Node on Windows with Chocolatey - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/chimeprincewill/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/12/Screen-Shot-2022-12-07-at-4.27.48-PM.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/12/Screen-Shot-2022-12-07-at-4.27.48-PM.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/chimeprincewill/">
Chime Princewill <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a passionate MERN stack engineer currently working with Descasio as a full-stack engineer.</span>
</div>
</div>
<h1 class="posttitle">A guide to using Node on Windows with Chocolatey</h1>
<p>
 <span class="post-date"><time class="post-date">
December 8, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1144</span>
<span class="logrocket_editor">112</span>
</p>
</div>
<article class="article-post">
<p>If you’ve used a Linux or Mac system as a developer, you may well agree with me that their flexible and secure options for <a href="https://blog.logrocket.com/javascript-package-managers-compared/">managing packages</a> are second to none.</p>
<p>Package managers like apt-get for Linux and Homebrew for Mac have greatly improved the installation speed, configuration, and security of packages for our projects.</p>
<p>Well, if you’re a Windows user, then do not fear! Guess what? Thanks to Chocolatey, you can automatically install packages and software and deploy packages right from your Windows terminal — all without having to manually jump through hoops to install and set them up.</p>
<h2 id="whatwewillcoverinthischocolateyguide">What we will cover in this Chocolatey guide</h2>
<p>In this article, I will guide you on how to set up Chocolatey to do the following right from your Windows system.</p>
<ul>
<li><a href="#introduction-chocolatey">Introduction to Chocolatey</a></li>
<li><a href="#requirements">Requirements</a></li>
<li><a href="#windows-package-managers">Windows package managers</a></li>
<li><a href="#installations">Installation</a></li>
<li><a href="#resolve-installation-issues">Resolve installation issues</a></li>
<li><a href="#installing-packages">Installing packages</a></li>
<li><a href="#nvm-installl-node-js-npm">Using NVM to install Node.js and npm</a></li>
<li><a href="#running-repl-node-environment">Running REPL on the Node environment</a></li>
<li><a href="#retrieve-information-specific-package">Retrieve information about a specific package</a></li>
<li><a href="#install-multiple-packages">Install multiple packages</a></li>
<li><a href="#uninstall-packages">Uninstall packages</a></li>
</ul>
<h2 id="introduction-chocolatey">Introduction to Chocolatey</h2>
<p>Chocolatey is a Windows package manager that helps install, upgrade, and uninstall packages, and more.</p>
<p>You can think of it as similar to the aforementioned APT or Homebrew. Its ability to scan through installed packages for virus detection means you can be confident that packages remain secure.</p>
<h2 id="requirements">Requirements</h2>
<ul>
<li>Windows</li>
<li>PowerShell</li>
<li>Working knowledge of JavaScript</li>
</ul>
<h2 id="windows-package-managers">Windows package managers</h2>
<p>Unlike other package managers like Winget, RuckZuck, and Yarn, Chocolatey brings several benefits with it, such as:</p>
<ul>
<li>Large number of applications/utilities available</li>
<li>Installs without bloatware</li>
<li>You can put <code>Chocolatey</code> install commands into your PowerShell scripts</li>
<li>Easy to use</li>
<li>Downloaded files are verified by checksums</li>
<li>Free and open source</li>
<li>Builds on technology already familiar to devs</li>
<li>Decentralized package source</li>
</ul>
<h2 id="installations">Installation</h2>
<p>Let’s navigate to the command line (CMD). Open it as an admin and run the following PowerShell scripts:</p>
<pre class="language-c-sharp hljs">@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
</pre>
<h2 id="resolve-installation-issues">Resolve installation issues</h2>
<p>While installing Chocolatey, you may run into the following error shown in the code snippet image here:</p>
<p><img             class="aligncenter wp-image-145367 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/error-code-1.png" alt="Error Code Snippet Installation Chocolatey" width="730" height="195"    /><noscript><img               class="aligncenter wp-image-145367 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/error-code-1.png" alt="Error Code Snippet Installation Chocolatey" width="730" height="195"  /></noscript></p>
<p>Open PowerShell as an admin and set the required rights, as shown below:</p>
<pre class="language-shell hljs"> Get-ExecutionPolicy
</pre>
<p>If this response returns:</p>
<pre class="language-shell hljs">Restricted
</pre>
<p>Then run the following code snippet:</p>
<pre class="language-shell hljs"> Get-ExecutionPolicy AllSigned
</pre>
<p>After running the code snippet above, you will be prompted to respond “Yes” to secure your system against scripts you don’t trust. Once you’ve done so, rerun the code snippet and you should see this:</p>
<p><img             class="aligncenter wp-image-145371 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/code-rerun-1.png" alt="Code Rerun Get-ExecutionPolicy" width="730" height="97"    /><noscript><img               class="aligncenter wp-image-145371 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/code-rerun-1.png" alt="Code Rerun Get-ExecutionPolicy" width="730" height="97"  /></noscript></p>
<p>Currently, an added security check has been set for scripts. Let’s go back to the command-line interface and continue from where we left off.</p>
<p>If you look closely at the error message that was encountered earlier, a suggestion to set the environment variable for Chocolatey was made. So, let’s set the environment variable, as shown below:</p>
<p><img             class="aligncenter wp-image-145375 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/environment-variable.png" alt="Environment Variable" width="730" height="31"    /><noscript><img               class="aligncenter wp-image-145375 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/environment-variable.png" alt="Environment Variable" width="730" height="31"  /></noscript></p>
<p>Now we’ve set the variable with the above code snippet, let’s try to install Chocolatey again, as demonstrated here:</p>
<pre class="language-c-sharp hljs">@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
</pre>
<p>If the code snippet above was successful, the command-line interface should look like this:</p>
<p><img             class="aligncenter wp-image-145377 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/command-line-interface.png" alt="Command-line Interface Successful Installation" width="730" height="382"    /><noscript><img               class="aligncenter wp-image-145377 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/command-line-interface.png" alt="Command-line Interface Successful Installation" width="730" height="382"  /></noscript></p>
<p>To see the version of Chocolatey that was installed, you can run the following code snippet:</p>
<p><img             class="aligncenter wp-image-145381 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/chocolatey-version.png" alt="Check Chocolatey Version" width="730" height="130"    /><noscript><img               class="aligncenter wp-image-145381 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/chocolatey-version.png" alt="Check Chocolatey Version" width="730" height="130"  /></noscript></p>
<p>To execute Chocolatey, all you need to do is to open the command line and run:</p>
<pre class="language-shell hljs">choco
</pre>
<h2 id="installing-packages">Installing packages</h2>
<p>To start installing packages, close the CMD and reopen it as an admin once again.</p>
<p>Now, let’s see how Chocolatey can be used to install NVM (Node Version Manager), as shown here:</p>
<pre class="language-shell hljs">choco install nvm.portable
</pre>
<p>Let’s explain this further: to install a package, the keyword <code>choco</code> is used, then <code>install</code>, and then the name of the package itself.</p>
<p>NVM (Node Version Manager) is a package used to manage the installation of different versions of <a href="https://blog.logrocket.com/tag/node/">Node.js</a> and npm. There are also <a href="https://community.chocolatey.org/packages">many more packages</a> that are available to install.</p>
<p>Every installed package is saved in one location and can be found in the following path:</p>
<pre class="language-shell hljs"> 'C:\ProgramData\chocolatey\lib'
</pre>
<p>To locate a single package, you must add the package name to the <code>lib</code> path, like this:</p>
<pre class="language-shell hljs">'C:\ProgramData\chocolatey\lib\yourPackageName'
</pre>
<h2 id="nvm-installl-node-js-npm">Using NVM to install Node.js and npm</h2>
<p>Let’s go into the terminal and run the following code snippet:</p>
<pre class="language-shell hljs">nvm install lts
</pre>
<p>The snippet above will install the latest stable version of Node.js and npm. A specific version of Node can also be installed by running the following:</p>
<pre class="language-shell hljs">nvm install 16.18.0
</pre>
<p>To see the list of Node versions that can be selected, run the following:</p>
<p><img             class="aligncenter wp-image-145396 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/list-node-versions.png" alt="List Of Node Versions That Can Be Selected" width="730" height="205"    /><noscript><img               class="aligncenter wp-image-145396 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/list-node-versions.png" alt="List Of Node Versions That Can Be Selected" width="730" height="205"  /></noscript></p>
<p>This is a list of Node versions that have been installed, including the one I am currently using on my Windows machine. Now, let’s see how a specific Node version is selected — take a look here:</p>
<pre class="language-shell hljs">nvm use 16.18.0
</pre>
<p>Run the code snippet to check the version of Node and npm we are currently using:</p>
<p><img             class="aligncenter wp-image-145399 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/current-version-node.png" alt="Current Version Of Node" width="730" height="306"    /><noscript><img               class="aligncenter wp-image-145399 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/current-version-node.png" alt="Current Version Of Node" width="730" height="306"  /></noscript></p>
<h2 id="running-repl-node-environment">Running REPL on the Node environment</h2>
<p><img             class="aligncenter wp-image-145403 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/js-code-node-env.png" alt="JavaScript Code Right From The Node Environment" width="730" height="543"    /><noscript><img               class="aligncenter wp-image-145403 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/js-code-node-env.png" alt="JavaScript Code Right From The Node Environment" width="730" height="543"  /></noscript></p>
<p>In the code snippet above, I was able to write my normal JavaScript code right from the Node environment, meaning I can calculate numbers, create loops and functions, and read variables directly from the terminal.</p>
<blockquote><p><strong>N.B.,</strong> all that is necessary is to write <code>node</code> and hit enter to start up the Node environment on the terminal</p></blockquote>
<h2 id="uninstall-node-js">Uninstall Node.js</h2>
<p>To uninstall Node, you just need to specify the Node version to uninstall, as shown here:</p>
<pre class="language-shell hljs">nvm uninstall node 16.18.0
</pre>
<h2 id="upgrade-packages">Upgrade packages</h2>
<p>To upgrade a package that has been installed using Chocolatey, let’s run the following code snippet:</p>
<pre class="language-shell hljs">choco upgrade nvm.portable
</pre>
<p>The code snippet above will search for the NVM package inside the <code>lib</code> location. Once it finds it, it will look for a possible stable release and upgrade to the relevant version.</p>
<h2 id="retrieve-information-specific-package">Retrieve information about a specific package</h2>
<p>To get all available information about a package, we can run the following code snippet:</p>
<pre class="language-shell hljs">choco info nvm.portable
</pre>
<p>In the response displayed below, you will find pertinent information regarding the package you queried.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.55.13-PM.png
"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p><img             class="aligncenter wp-image-145406 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/info-package-queried.png" alt="Information Regarding Specific Package" width="730" height="286"    /><noscript><img               class="aligncenter wp-image-145406 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/12/info-package-queried.png" alt="Information Regarding Specific Package" width="730" height="286"  /></noscript></p>
<h2 id="install-multiple-packages">Install multiple packages</h2>
<p>To install multiple packages, simply run the following code snippet:</p>
<pre class="language-shell hljs">choco install nvm.portable firefox
</pre>
<p>In the snippet above, you can see that, in the same way multiple files work with npm, it’s also true of Chocolatey — we simply stack each package after the other.</p>
<h2 id="uninstall-packages">Uninstall packages</h2>
<p>To uninstall a package installed using <code>choco</code>, run the following code snippet:</p>
<pre class="language-shell hljs">choco uninstall nvm.portable
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>Chocolatey is a great choice as your package manager for your Windows packages. The flexibility of using packages in your projects just the same way you always have means that devs are not required to learn anything new and the barrier to entry is low as a result, which is great!</p><div class="code-block code-block-23" >
<div class="blog-plug inline-plug node-plug"><h2>200’s only <img  src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"   class=" jetpack-lazy-image"/><noscript><img   src="https://blog.logrocket.com/wp-content/uploads/2019/10/green-check.png"/></noscript> Monitor failed and slow network requests in production</h2> Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you’re interested in ensuring requests to the backend or third party services are successful, <a href="https://lp.logrocket.com/blg/node-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer"><img src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" width="1496" alt="LogRocket Network Request Monitoring"/></noscript></a><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens while a user interacts with your app. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.</p> LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. <a class="signup" href="https://lp.logrocket.com/blg/node-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>. </div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-145351" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/install-node-windows-chocolatey/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/install-node-windows-chocolatey/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-145351" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/install-node-windows-chocolatey/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-145351" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/install-node-windows-chocolatey/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/install-node-windows-chocolatey/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to using Primer.css - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-using-primer-css/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-using-primer-css/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to using Primer.css - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-using-primer-css/">A guide to using Primer.css - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/onuorahbonaventure/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/10/onuorah-bonaventure.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/10/onuorah-bonaventure.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/onuorahbonaventure/">
Onuorah Bonaventure <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Full-stack web developer that loves connecting brands to their customers by developing amazing, performant websites. Interested in teaching programming concepts and breaking down difficult concepts. When I'm not coding, I play chess and checkers with my friends while listening to cool Afrobeats.</span>
</div>
</div>
<h1 class="posttitle">A guide to using Primer.css</h1>
<p>
<span class="post-date"><time class="post-date">
February 27, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">17 min read</span>
<span class="wordcount">4777</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<article class="article-post">
<p>Primer.css is the internal framework that GitHub uses to handle styles and organize its CSS. The primary purpose of Primer.css is to enforce consistent styles across a website. In this article, we will learn about Primer.css, how to use it, and what it takes from BEM. We will begin by learning about what it comprises before we build a landing page and evaluate its resemblance to BEM.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#getting-started-primer-css"> Getting started with Primer.css</a></li>
<li><a href="#primer-css-key-concepts"> The Primer.css key concepts</a>
<ul >
<li><a href="#breakpoints-spacing"> Breakpoints and spacing</a></li>
<li><a href="#theming"> Theming</a></li>
</ul>
</li>
<li><a href="#primer-css-utilities"> Understanding Primer.css utilities</a>
<ul >
<li><a href="#padding"> Padding</a></li>
<li><a href="#margins-typography"> Margins and typography</a></li>
<li><a href="#text-alignment-font"> Text alignment and font utilities</a></li>
<li><a href="#colors"> Colors</a></li>
<li><a href="#borders"> Borders</a></li>
<li><a href="#box-shadows-flex"> Box shadows and flex</a></li>
</ul>
</li>
<li><a href="#primer-css-components"> Exploring the Primer.css components</a>
<ul >
<li><a href="#buttons"> <code>Buttons</code></a></li>
<li><a href="#alerts"> <code>Alerts</code></a></li>
<li><a href="#box-loaders"> <code>Box</code> and <code>loaders</code></a></li>
</ul>
</li>
<li><a href="#building-landing-page-primer-css"> Building a landing page with Primer.css</a>
<ul >
<li><a href="#adding-container"> Adding a container</a></li>
<li><a href="#adding-hero-section"> Adding a <code>hero</code> section</a></li>
<li><a href="#creating-sections"> Creating the sections</a></li>
</ul>
</li>
<li><a href="#primer-css-bem"> What does Primer.css take from BEM?</a>
<ul >
<li><a href="#primer-css"> How Primer.css is different</a></li>
</ul>
</li>
</ul>
<h2 id="getting-started-primer-css">Getting started with Primer.css</h2>
<p>We can install Primer.css via npm or Yarn by running <code>npm install @primer/css</code>. After that, set up <a href="https://blog.logrocket.com/a-beginners-guide-to-programming-for-css-with-sass/">Sass</a> and import it into our main <a href="https://blog.logrocket.com/the-definitive-guide-to-scss/">SCSS</a> file with the <code>@import "@primer/css/index.scss";</code> command.</p>
<p>Similarly, you can download the minified version and host it in your code via <a href="https://unpkg.com/@primer/css@20.8.0/dist/primer.css">this link</a>. However, for this article, we will use the CDN version, so make sure to create a new folder named <code>primercss-cdn</code>. Then, create a new <code>index.html</code> file and add the following link to the <code>head</code> tag:</p>
<pre class="language-html hljs">&lt;link href="https://unpkg.com/@primer/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dab9a9a99a">[email protected]</a>^20.2.4/dist/primer.css" rel="stylesheet" />
</pre>
<p>Your code should look similar to this:</p>
<pre class="language-html hljs">&lt;!DOCTYPE html>
&lt;html lang="en">
  &lt;head>
    &lt;meta charset="UTF-8" />
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" />
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" />
    &lt;link
      href="https://unpkg.com/@primer/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b8dbcbcbf8">[email protected]</a>^20.2.4/dist/primer.css"
      rel="stylesheet"
    />
    &lt;title>Primer CSS cdn&lt;/title>
  &lt;/head>
  &lt;body>&lt;/body>
&lt;/html>
</pre>
<h2 id="primer-css-key-concepts">The Primer.css key concepts</h2>
<p>Primer.css is a fantastic framework that has been divided into subsections covering utilities, components, and marketing styles. However, we need to understand how breakpoints, spacing, and theming work to get started with the subsections.</p>
<h3 id="breakpoints-spacing">Breakpoints and spacing</h3>
<p>Like other <a href="https://blog.logrocket.com/comparing-bootstrap-vs-tailwind-css-vs-material-ui-mui/">popular CSS frameworks</a> like Tailwind CSS, Primer.css uses four breakpoints that rely on a <code>min-width</code> property set in the media query. The breakpoints are <code>sm</code>, <code>md</code>, <code>lg</code> and <code>xl</code> which represents a minimum width of <code>544px</code>, <code>768px</code>, <code>1012px</code>, and <code>1280px</code>.</p>
<p>To specify a breakpoint, you can use a syntax similar to setting the display on a small and medium screen. Primer.css uses a scale from <code>0-12</code> that represents values from <code>0</code> to <code>4px</code>, <code>8px</code>, <code>16px</code>, <code>24px</code>, <code>32px</code>, <code>40px</code>, <code>48px</code>, <code>64px</code>, <code>80px</code>, <code>96px</code>, <code>112px</code> and <code>128px</code>. To set spacing for an element, you can specify your desired axis like this: &lt;<code>h2 class="px-1 py-1">Content&lt;/h2></code>.</p>
<h3 id="theming">Theming</h3>
<p>These days, users have a list of basically two preferences for <a href="https://blog.logrocket.com/a-guide-to-theming-in-css/">theming</a>. These preferences are light and dark modes. Primer.css has provided a set of data attributes that can be used to set the theme for your website. These data attributes are expected to be added to the &lt;<code>html></code> which is the root tag of the entire page. Here’s what they look like:</p>
<table  width="730">
<tbody>
<tr>
<td>Theme</td>
<td>Data attributes</td>
</tr>
<tr>
<td>Light</td>
<td>
<pre class="language-html hljs">&lt;html data-color-mode="light" data-light-theme="light">
&lt;!-- Other tags go in here -->
&lt;/html></pre>
</td>
</tr>
<tr>
<td>Dark</td>
<td>
<pre class="language-html hljs">&lt;html data-color-mode="dark" data-dark-theme="dark">
&lt;!-- Other tags go in here --> 
&lt;/html></pre>
</td>
</tr>
<tr>
<td>Dark dimmed</td>
<td>
<pre class="language-html hljs">&lt;html data-color-mode="dark" data-dark-theme="dark_dimmed">
&lt;!-- Other tags go in here -->
&lt;/html></pre>
</td>
</tr>
<tr>
<td>Dark high contrast</td>
<td>
<pre class="language-html hljs">&lt;html data-color-mode="dark" data-dark-theme="dark_high_contrast">
&lt;!-- Other tags go in here -->
&lt;/html></pre>
</td>
</tr>
</tbody>
</table>
<h2 id="primer-css-utilities">Understanding Primer.css utilities</h2>
<p>The Primer.css utility styles include <code><a href="https://blog.logrocket.com/advanced-guide-setting-colors-css/">colors</a></code>, <code><a href="https://blog.logrocket.com/three-ways-style-css-box-shadow-effects/">box-shadows</a></code>, and <a href="https://blog.logrocket.com/css-grid-guide/">CSS grids</a> that are used most frequently in our code. Essentially, these styles help us maintain a more consistent style on our website. Primer.css has provided a set of utilities we can use, which we will discuss below.</p>
<h3 id="padding">Padding</h3>
<p>Padding is used to specify the internal spacing of an element. Primer.css provides shorthands that can be used together to set padding. For instance, we can set the padding for all the sides of an element in combination with any of the spacing we discussed above like this: <code>p-2</code>. Similarly, we can set the padding for the left, right, top, bottom, vertical, and horizontal axes using the following class names: <code>pl-2</code>, <code>pr-2</code>, <code>pt-2</code>, <code>pb-2</code>, <code>py-2</code>, and <code>px-2</code>.</p>
<p>Primer.css is focused on responsiveness, and staying in line with that goal, the Primer.css team has provided a set of classes for setting the padding for different screen sizes. All you have to do is to attach <code>sm</code>, <code>md</code>, <code>lg</code>, or <code>xl</code> to the padding. It should look similar to this: <code>p-sm-2 py-md-3 pt-lg-4</code>.</p>
<h3 id="margins-typography">Margins and typography</h3>
<p>Generally, with margins, we can set the spacing between an element and another element. The class names look very similar to padding except for replacing <code>p</code> with <code>m</code>. Moreover, the class name <code>mx-auto</code> is used to center <code>block</code> elements only when they have a set width while <code>mb-auto</code>, <code>ml-auto</code>, <code>mr-auto</code> and <code>mt-auto</code> are used to move a <code>block</code> element to the top, right, left, and bottom.</p>
<p>It is also important to note that we can set negative margins with class names similar to <code>mr-n6 m-n2 my-n9 my-md-n7</code>. The secret is to precede the letter spacing number with the letter <code>n</code>.</p>
<p>Typography, in this case, includes the styles for setting text alignment, font size, line height, word break, list styles, typographic styles, and more. You can learn more about typography in Primer.css in the <a href="https://primer.style/css/support/typography">official docs</a>.</p>
<h3 id="text-alignment-font">Text alignment and font utilities</h3>
<p>The text alignment utility can be used alight the right, center, or left of the text and images inside an element using the following styles: <code>text-right</code>, <code>text-center</code>, and <code>text-right</code> respectively. Heading and type scale utilities are used to specify the font size of a text or SVG.</p>
<p>The heading utilities set the <code>font size</code> and the <code>font-weight</code> to match the default heading styles. These styles range from <code>h1</code> to <code>h6</code> with the former being the largest and the later the smallest:</p>
<pre class="language-html hljs">&lt;p class="h4">I love primer.css&lt;/p>
</pre>
<p>The type scale only sets the font size and ranges from <code>f1</code> to <code>f6</code>. Here’s an example:</p>
<pre class="language-html hljs">&lt;p class="f5">I love my Life&lt;/p>
</pre>
<h3 id="colors">Colors</h3>
<p>Primer.css comes with 13 colors to choose from, including: <code>default</code>, <code>muted</code>, <code>subtle</code>, <code>accent</code>, <code>success</code>, <code>attention</code>, <code>severe</code>, <code>danger</code>, <code>open</code>, <code>closed</code>, <code>done</code>, <code>sponsors</code>, and <code>on</code>.</p>
<p>The CSS classes for setting colors are broadly divided into four parts: <code>text</code>, <code>background</code>, <code>border</code>, and <code>link</code>. The class name for text color is written like this: <code>color-fg-danger</code>. Essentially, the last text can be any of the colors listed above, which includes <code>success</code>, <code>muted</code>, and more.</p>
<p>To use the <code>on</code> text color, it should be written like this: <code>color-fg-on-emphasis</code>. The background color is similar to the text color, as <code>color-bg-subtle</code>. However, it has another deeper color set with <code>emphasis</code> attached to its class name.</p>
<p>Meanwhile, the class name for setting border colors also resembles that of background colors with the following: <code>color-border-open</code>, <code>color-border-closed-emphasis</code>, and <code>color-border-sponsors</code>.</p>
<p>However, <code>Links</code> are a little bit different. It can allow classes for <code>primary</code>, <code>secondary</code>, <code>muted</code>, and states such as <code>hover</code> and <code>nested</code>. The primary link can be written like this:</p>
<pre class="language-html hljs">&lt;a class="Link--primary" href="/home">Link--primary&lt;/a>
</pre>
<p>While the secondary link can be written like this:</p>
<pre class="language-html hljs">&lt;a class="Link--secondary" href="/home">Link--secondary&lt;/a>
</pre>
<p>Muted links can be indicated using the <code>Link--muted</code> class. The <code>on-hover</code> link class is used to make any text color used within the links to turn blue on hover. It can be used like this:</p>
<pre class="language-html hljs">&lt;a class="color-fg-secondary no-underline" href="#url">
 This is a link &lt;span class="Link--onHover">Link--onHover&lt;/span>
&lt;/a>
</pre>
<p>Finally, the nested link is used to show emphasis on some text inside a link, as shown below:</p>
<pre class="language-html hljs">&lt;a class="color-fg-secondary no-underline" href="#url">
 This is a link &lt;span class="Link">Link&lt;/span>
&lt;/a>
</pre>
<h3 id="borders">Borders</h3>
<p>The class names for setting borders are divided into five parts: setting default borders, border style, border radius, border colors, and responsive borders. To set the default border, we can use any of the following class names such as: <code>border</code>, <code>border-left</code>, <code>border-bottom</code>, <code>border-right</code>, <code>border-x</code>, and <code>border-y</code>. Meanwhile, Primer.css allows attaching a scale of <code>0-3</code> to the border, such as <code>border-2</code>. It is worth noting that the following class names: <code>border-top-0</code>, <code>border-right-1</code>, <code>border-bottom-2</code>, and <code>border-left-3</code> can be used to set the border for the edges of an element.</p>
<p>To set the border style of an element, the class name of <code>border</code> must always be provided like this: <code>border dashed</code>. Similarly, we can also provide the border radius of an element using the <code>rounded</code> class name with a scale of <code>0-3</code> or the class name of <code>circle</code> to make the element circular. It can be used like this:</p>
<pre class="language-html hljs">&lt;div class="border rounded-2>
 .border .rounded-2
&lt;/div>
</pre>
<p>Or:</p>
<pre class="language-html hljs">&lt;div class="border circle" >
.border .circle
&lt;/div>
</pre>
<p>Finally, just like with padding and margin, we can also set the border of an element on different breakpoints. We can do it on any of the border patterns mentioned above, such as: <code>border-sm</code>, <code>border-md</code>, <code>border-lg</code>, <code>border-xl</code>, <code>border-sm-2</code>, <code>border-sm-top</code>, and <code>border-sm-bottom-3</code>.</p>
<h3 id="box-shadows-flex">Box shadows and flex</h3>
<p>Primer.css provides five class names to control the box shadow of an element, including: <code>color-shadow-small</code>, <code>color-shadow-medium</code>, <code>color-shadow-large</code>, <code>color-shadow-extra-large</code>, and <code>box-shadow-none</code>.</p>
<p>It can be used as follows:</p>
<pre class="language-html hljs">&lt;div class="color-shadow-extra-large p-3">
  .color-shadow-extra-large
&lt;/div>
</pre>
<p>The class name for handling CSS flexbox essentially reflects what the style does. To make an element a flexbox, we can use <code>d-flex</code> and <code>d-inline-flex</code> which stands for:</p>
<pre class="language-css hljs">{ display: flex; }
</pre>
<p>And:</p>
<pre class="language-css hljs"> { display: inline-flex; }
</pre>
<p>Meanwhile, you can use the <code>flex-row</code>, <code>flex-row-reverse</code>, <code>flex-column</code>, and <code>flex-column-reverse</code> classes to set the flex directions. Interestingly, the same naming convention exists for <code>flex-wrap</code>. This means that you can use <code>flex-wrap</code>, <code>flex-nowrap</code>, and <code>flex-wrap-reverse</code> to choose whether flex items should be wrapped into multiple lines when they overflow or into a single line.</p>
<p>It’s worth noting that you should have already made an element a flexbox before you can apply the other flex classes like this:</p>
<pre class="language-html hljs">&lt;div class="border d-flex flex-wrap">
  &lt;span class="p-4 border">Item 1&lt;/span>
  &lt;span class="p-4 border">Item 2&lt;/span>
  &lt;span class="p-4 border">Item 3&lt;/span>
&lt;/div>
</pre>
<p>To apply the <code>justify-content</code> style that is used to distribute the space around and between flex items, we can use the following class names: <code>flex-justify-start</code>, <code>flex-justify-end</code>, <code>flex-justify-center</code>, <code>flex-justify-between</code>, and <code>flex-justify-around</code>.</p>
<p>Furthermore, you can use the following class names to apply the <code>align item</code> style: <code>flex-justify-around</code>, <code>flex-items-end</code>, <code>flex-items-end</code>, <code>flex-items-baseline</code>, and <code>flex-items-stretch</code>.</p>
<p>Although we can create simple and complex layouts using the styles above, there may be times when we want a bit more control over our flex items. The <code>flex-1</code> class name instructs a flex item to fill up any available space. The <code>flex-auto</code> class can be used to make a flex item fill up open space and auto-resize it if its content changes. While the <code>flex-grow-0</code> and <code>flex-shrink-0</code> can be used to prevent the growing and shrinking of a flex item.</p>
<p>Other class names provided by Primer.css are used to adjust the alignment of an individual flex item:</p>
<pre class="language-css hljs">.flex-content-start    { align-content: flex-start; }

.flex-content-end      { align-content: flex-end; }

.flex-content-center   { align-content: center; }

.flex-content-between  { align-content: space-between; }

.flex-content-around   { align-content: space-around; }

.flex-content-stretch  { align-content: stretch; }
</pre>
<p>And to set the order:</p>
<pre class="language-css hljs">.flex-order-1    { order: 1; }

.flex-order-2    { order: 2; }

.flex-order-none { order: inherit; }
</pre>
<p>We can even add and apply a responsive style to items by appending any breakpoints to the flexbox class names mentioned above. It generally follows two rules:</p>
<ul>
<li><code>d-[sm or md or lg or xl]-[the property]</code></li>
<li><code>flex-[sm or md or lg or xl]-[the property]-[the behavior]</code></li>
</ul>
<p>An excellent example of this is setting an item to a flexbox in a particular breakpoint like this: <code>d-md-flex</code>; or specifying justified content style for only a breakpoint: <code>flex-lg-justify-center</code>.</p>
<h2 id="primer-css-components">Exploring the Primer.css components</h2>
<p>Components in Primer.css are already-built items that look the same regardless of where they are placed on the webpage. They follow patterns that only work when you combine the appropriate modifiers and class names.</p>
<h3 id="buttons"><code>Buttons</code></h3>
<p>The Primer.css default <code>button</code> component can be created by adding <code>btn</code> class to a <code>button</code> element, as shown below:</p>
<pre class="language-html hljs"> &lt;button class="btn" type="button">Default button></pre>
<p>Essentially, we can add more classes to a <code>button</code> to set its type, state, and variations. The class names that can be used to specify the button type are <code>btn-primary</code>, <code>btn-outline</code>, and <code>btn-danger</code>. As for the state, we can use the <code>aria-disabled="true"</code> and <code>aria-selected="true"</code> attributes to disable or enable a button. The attributes can be used as follows:</p>
<pre class="language-html hljs"> &lt;button class="btn mr-2" type="button" aria-disabled="true">Disabled
</pre>
<p>Also, we can specify <code>btn-sm</code> or <code>btn-large</code> to set the size of the button:</p>
<pre class="language-html hljs">  &lt;button class="btn btn-large">Large button&lt;/a>
</pre>
<p>Similarly, we can make a button grow to the width of its parent when we set <code>btn-block</code> class name to it and remove the borders around the button using the <code>btn-invisible</code> class name.</p>
<h3 id="alerts"><code>Alerts</code></h3>
<p>Alerts are used to inform users about the status of their actions. In Primer.css, alerts can be created by adding the <code>flash</code> class name to an element. By default, this will generate an alert with a light blue background. However, we can vary the alert by appending the <code>flash-warn</code>, <code>flash-error</code>, or <code>flash-success</code> classes.</p>
<p>Most of the time, alerts are dismissable and have a <code>close</code> button. We can use the <code>flash-close js-flash-close</code> to properly add to it and position the icon for the action. To create the UI of a dismissible alert, your markup should look similar to this:</p>
<pre class="language-html hljs">    &lt;div class="flash mt-3 flash-error">

      Alert message

      &lt;button

        class="flash-close js-flash-close"

        type="button"

        aria-label="Close"

      >

        Close

      &lt;/button>

    &lt;/div>
</pre>
<h3 id="box-loaders"><code>Box</code> and <code>Loaders</code></h3>
<p>A <code>Box</code> in Primer.css is a container with a background color, borders, and rounded corners. It has no extra styles by default. To create a <code>Box</code>, we can use the <code>Box</code> class:</p>
<pre class="language-html hljs">&lt;div class="Box">

  Box Content

&lt;/div>
</pre>
<p>A <code>Box</code> can have a header, body, and footer. The following class names can be used to indicate the function of an element inside a box: <code>Box-header</code>, <code>Box-body</code>, and <code>Box-footer</code>. We can use the class name to add emphasis on the title of a <code>Box</code>.</p>
<p>We can use modifiers to further enhance the look and feel of our <code>Box</code>. The <code>Box-header--blue</code> can be used to change the background and border color of an element with the <code>Box-header</code> class name:</p>
<pre class="language-html hljs">&lt;div class="Box">

  &lt;div class="Box-header Box-header--blue">

    &lt;h3 class="Box-title">This is the title&lt;/h3>

  &lt;/div>

  &lt;div class="Box-body">

  This is  Box body

  &lt;/div>

&lt;/div>
</pre>
<p>Other modifiers, such as <code>Box--danger</code> and <code>Box-row--unread</code> can be set to the <code>Box</code> container and the <code>Box</code> item. They essentially add a red border to the <code>Box</code> and a left border to the <code>Box</code> item, respectively.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p><code>Loaders</code> are used to indicate a pending state. It should be used with other components and can be triggered using the <code>AnimatedEllipsis</code> class name:</p>
<pre class="language-html hljs">&lt;h2>&lt;span>Loading&lt;/span>&lt;span class="AnimatedEllipsis">&lt;/span>&lt;/h2>
</pre>
<h2 id="building-landing-page-primer-css">Building a landing page with Primer.css</h2>
<p>In this section, we will build a landing page that we can use to demonstrate how to combine components and utilities available in Primer.css. Here is what the result will look like:</p>
<p><iframe  title="A guide to using Primer.css" src="https://codesandbox.io/embed/a-guide-to-using-primer-css-k3fdu?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<h3 id="adding-container">Adding a container</h3>
<p>The first step in building our landing page is to open the <code>primercss-cdn/index.html</code> that we created earlier. Then, we will create a <code>div</code> that will wrap our app:</p>
<pre class="language-html hljs">  &lt;div  class="mx-auto py-1 px-2">

  &lt;!-- Content will go here -->

  &lt;/div>
</pre>
<p>Next, we will add our navbar:</p>
<pre class="language-html hljs">      &lt;div>

        &lt;nav class="UnderlineNav" aria-label="Nav bar">

          &lt;div class="UnderlineNav-body">

            &lt;a

              class="UnderlineNav-item app-link"

              href="#home"

              aria-current="page"

              onclick="handleClick(this)"

              >Home&lt;/a

            >

            &lt;a

              class="UnderlineNav-item app-link"

              href="#about"

              onclick="handleClick(this)"

              >About&lt;/a

            >

            &lt;a

              class="UnderlineNav-item app-link"

              href="#newsletter"

              onclick="handleClick(this)"

              >Newsletter&lt;/a

            >

          &lt;/div>

          &lt;div class="UnderlineNav-actions">

            &lt;a href="mailto:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bfddd0d1decdd7c6d2daffd8d2ded6d391dcd0d2">[email protected]</a>" class="btn btn-sm">Reach Us&lt;/a>

          &lt;/div>

        &lt;/nav>

      &lt;/div>
</pre>
<p>Let’s break it down:</p>
<p>Our navbar is made up of a <code>div</code> that wraps a <code>nav</code> element. The <code>nav</code> contains an <code>UnderlineNav</code> class and wraps two <code>div</code> with an <code>UnderlineNav-body</code> and <code>UnderlineNav-actions</code> that signify two parts of the navbar.</p>
<p>Meanwhile, the <code>UnderlineNav-body</code> contains three <code>a</code> elements that all have the <code>UnderlineNav-item</code> class from Primer.css, <code>app-link</code> class, and <code>aria-current="page"</code> that we will be used to show the currently selected item. Also, each item has an <code>onClick</code> handler, which we will handle with JavaScript.</p>
<h3 id="adding-hero-section">Adding a <code>hero</code> section</h3>
<p>After that, we can add our <code>hero</code> section:</p>
<pre class="language-html hljs">     &lt;div id="hero" class="py-8 blankslate">

        &lt;div

          

          class="mx-auto border p-3 rounded-2"

        >

          &lt;h1>I love Primer.css&lt;/h1>

          &lt;p>Click on the buttons below to find out why:&lt;/p>

          &lt;div class="d-flex flex-wrap px-3 my-4" >

            &lt;!-- Pop up example -->

            &lt;div class="position-relative text-center">

              &lt;div

                class="Popover position-relative app-popover"

                

              >

                &lt;div

                  class="Popover-message Popover-message--bottom p-4 mx-auto mb-2 text-left Box color-shadow-large"

                >

                  &lt;h4 class="mb-2">Yes, this is the heading&lt;/h4>

                  &lt;p>You are not out of luck! This is the message&lt;/p>

                  &lt;button

                    type="submit"

                    class="btn btn-outline mt-2 text-bold app-popover-btn"

                    onclick="handlePopover()"

                  >

                    Got it!

                  &lt;/button>

                &lt;/div>

              &lt;/div>

              &lt;button class="btn btn-primary" onclick="handlePopover()">

                View Popup

              &lt;/button>

            &lt;/div>

            &lt;!-- End Pop up example -->

            &lt;!-- Loading example -->

            &lt;div class="position-relative text-center">

              &lt;div

                class="Popover position-relative app-popover2"

                

              >

                &lt;div

                  class="Popover-message Popover-message--bottom p-4 mx-auto mb-2 text-left Box color-shadow-large"

                >

                  &lt;h2>

                    &lt;span>Loading&lt;/span

                    >&lt;span class="AnimatedEllipsis mb-2">&lt;/span>

                  &lt;/h2>

                 &lt;button

                    type="submit"

                    class="btn btn-outline mt-2 text-bold app-popover-btn"

                    onclick="handlePopover2()"

                  >

                    Got it!

                  &lt;/button>

                &lt;/div>

              &lt;/div>

              &lt;button

                class="btn-mktg btn-small-mktg mx-3"

                type="button"

                onclick="handlePopover2()"

              >

                View Others

              &lt;/button>

            &lt;/div>

            &lt;!-- End loading example -->

            &lt;!-- Dialog Example -->

            &lt;details

              class="details-reset details-overlay details-overlay-light"

            >

              &lt;summary class="btn" aria-haspopup="dialog">Open dialog&lt;/summary>

              &lt;details-dialog

                class="Box Box--overlay d-flex flex-column anim-fade-in fast"

              >

                &lt;div class="Box-header">

                  &lt;button

                    class="Box-btn-octicon btn-octicon float-right"

                    type="button"

                    aria-label="Close dialog"

                    data-close-dialog

                  >

                    &lt;!-- &lt;%= octicon "x" %> -->

                    &lt;svg

                      class="octicon octicon-x"

                      viewBox="0 0 12 16"

                      version="1.1"

                      width="12"

                      height="16"

                      

                    >

                      &lt;path

                        fill-rule="evenodd"

                        d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"

                      &lt;/path>

                    &lt;/svg>

                  &lt;/button>

                  &lt;h3 class="Box-title">What do you think about this?&lt;/h3>

                &lt;/div>

                &lt;div class="overflow-auto">

                  &lt;div class="Box-body overflow-auto">

                    &lt;p>

                      You see how cool this CSS framework is??

                      &lt;br />

                      It is what it is!

                    &lt;/p>

                  &lt;/div>

                  &lt;ul>

                    &lt;li class="Box-row">

                      &lt;img

                        class="avatar v-align-middle mr-2"

                        src="https://avatars.githubusercontent.com/bonarhyme?s=48"

                        alt="bonarhyme"

                        width="24"

                        height="24"

                      />

                      @bonarhyme

                    &lt;/li>

                    &lt;li class="Box-row border-bottom">

                      &lt;img

                        class="avatar v-align-middle mr-2"

                        src="https://avatars.githubusercontent.com/bonarhyme?s=48"

                        alt="bonarhyme"

                        width="24"

                        height="24"

                      />

                      @bonarhyme

                    &lt;/li>

                    &lt;li class="Box-row border-bottom">

                      &lt;img

                        class="avatar v-align-middle mr-2"

                        src="https://avatars.githubusercontent.com/bonarhyme?s=48"

                        alt="bonarhyme"

                        width="24"

                        height="24"

                      />

                      @bonarhyme

                    &lt;/li>

                  &lt;/ul>

                &lt;/div>

                &lt;div class="Box-footer">

                  &lt;button type="button" class="btn btn-block" data-close-dialog>

                    Close

                  &lt;/button>

                &lt;/div>

              &lt;/details-dialog>

            &lt;/details>

            &lt;!-- End of Dialog example -->

          &lt;/div>

        &lt;/div>

      &lt;/div>
</pre>
<p>Let’s break it down:</p>
<p>The hero page is made up of a <code>div</code> that contains a <code>hero</code> ID and <code>py-8 blankslate</code> class names. It wraps around another <code>div</code> with the following styles and class names:</p>
<pre class="language-html hljs">  

  class="mx-auto border p-3 rounded-2"
</pre>
<p>The inner <code>div</code> contains an <code>h1</code>, <code>p</code>, and a <code>div</code> with the following style and classes:</p>
<pre class="language-html hljs"> class="d-flex flex-wrap px-3 my-4"

 
</pre>
<p>Inside the <code>div</code> we have a popup, loading, and dialog example. The secret to creating a popup with Primer.css is adding the <code>position-relative text-center</code> class to the element you want to make a popup. Then, it should have the <code>div</code> and <code>button</code> children that will be used to display the contents and trigger the popup. For our example, our <code>button</code> should have the following attributes:</p>
<pre class="language-html hljs"> class="btn btn-primary"

 onclick="handlePopover()"
</pre>
<p>The <code>div</code> containing the content should have the following attributes:</p>
<pre class="language-html hljs">  class="Popover position-relative app-popover"

  
</pre>
<p>It should also have an inner <code>div</code> of the classes: <code>Popover-message Popover-message--bottom p-4 mx-auto mb-2 text-left Box color-shadow-large</code> that will eventually contain the contents. We can also add an <code>onclick</code> to a <code>button</code> inside the <code>Popover-message</code> with <code>onclick="handlePopover()"</code>.</p>
<h3 id="creating-sections">Creating the sections</h3>
<p>Next, we will add the about us section to our landing page. The about section contains an <code>h2</code> that is actually a <a href="https://blog.logrocket.com/controlling-tooltips-pop-up-menus-using-compound-components-in-react-ccedc15c7526/">tooltip</a>. It also includes another <code>div</code> with a colorful <code>timeline</code> with four items in it. For brevity, here’s the link to the <a href="https://github.com/bonarhyme/chunks-code-holder/blob/main/primercss/about.html">GitHub repo</a>.</p>
<p>The first <code>timeline</code> item contains <code>breadcrumbs</code>. While the second, third, and fourth timelines have <a href="https://blog.logrocket.com/ways-truncate-text-css/">truncated</a> links, normal links with a hover state style, and a <code>toast</code> component.</p>
<p>Next, we have the <code>newsletter</code> section which we can add with the following:</p>
<pre class="language-html hljs">     &lt;div id="newsletter">

        &lt;h2 class="py-2 h3-mktg">Subscribe to my Newsletter&lt;/h2>

        &lt;form>

          &lt;div class="form-group">

            &lt;div class="form-group-header">

              &lt;label for="example-text">Email address&lt;/label>

            &lt;/div>

            &lt;div class="form-group-body">

              &lt;input

                class="form-control"

                type="text"

                placeholder="Email address"

                id="example-text"

              />

            &lt;/div>

          &lt;/div>

          &lt;button class="btn btn-block btn-primary" >

            Submit

          &lt;/button>

        &lt;/form>

      &lt;/div>
</pre>
<p>Let’s break it down. The <code>newsletter</code> section contains an <code>h2</code> and a <code>form</code>. The <code>form</code> contains a <code>label</code>, <code>input</code>, and a <code>button</code>. Next, we have the footer, as shown below:</p>
<pre class="language-html hljs">  &lt;div>

    &lt;p class="text-center py-4">

      Made by

      &lt;a href="https://github.com/bonarhyme">bonarhyme&lt;/a>

    &lt;/p>

  &lt;/div>
</pre>
<p>Finally, we have our <code>script</code> that handles <code>onclick</code> events in our code:</p>
<pre class="language-javascript hljs">// Internal JavaScript written inside the body of HTML

    &lt;script>

      function handleClick(e) {

        document.querySelectorAll('.app-link').forEach((x) => {

          x.removeAttribute('aria-current');

        });

        e.setAttribute('aria-current', 'page');

      }

      function handlePopover() {

        const popup = document.querySelector('.app-popover');

        if (popup.style.display === 'none') {

          popup.style.display = 'block';

        } else {

          popup.style.display = 'none';

        }

      }

      function handlePopover2() {

        const popup = document.querySelector('.app-popover2');

        if (popup.style.display === 'none') {

          popup.style.display = 'block';

        } else {

          popup.style.display = 'none';

        }

      }

    &lt;/script>
</pre>
<h2 id="primer-css-bem">What does Primer.css take from BEM?</h2>
<p>Primer.css has a unique architecture that uses object-oriented CSS programming techniques and is influenced by the BEM model. BEM stands for block, element, and modifiers. Essentially, BEM is a method of writing CSS and structuring HTML that helps create components that are cleaner and easier to share across the team. To learn more about BEM and its methodologies, check out this <a href="https://blog.logrocket.com/bem-vs-smacss-comparing-css-methodologies/">article</a>.</p>
<p>Generally, a block is a standalone entity or component that stands and is meaningful on its own. A great example of a block is a menu, navigation, box, and so on. It should be written like this:</p>
<pre class="language-html hljs">&lt;div class=”card”>

&lt;!-- elements and modifiers go here –>

&lt;/div>
</pre>
<p>An element is part of a block semantically tied to its block. Mostly, it has no standalone meaning and should always be tied to a block. Navigation items, box headers, and menu items are all great examples of an element. It can be written with double underscore like so:</p>
<pre class="language-html hljs">&lt;div class="navigation__item">A navigation item&lt;/div>
</pre>
<p>Or like this:</p>
<pre class="language-html hljs">&lt;div class="card__header">This is a card header&lt;/div>
</pre>
<p>As the name implies, a modifier is used to change the behavior and appearance of a block or an element. This means that a modifier can be tied directly to a block or an element. Examples of applying a modifier to a block include: <code>navigation disabled</code>, <code>box danger</code>, <code>button large</code>, etc. An example of appending a modifier to an element includes: <code>navigation item disabled</code>, <code>box header danger</code>, and more. Generally, a modifier should be written like this:</p>
<pre class="language-html hljs">&lt;div class=”card__button–danger”>A card button that indicates an error that has occurred&lt;/div>
</pre>
<p>Furthermore, The syntax for writing BEM using a card as an example is as follows:</p>
<pre class="language-html hljs"> &lt;section class="card">

      &lt;h1 class="card__title">The Title&lt;/h1>

      &lt;div class="card__imageContainer">

 &lt;img src="https://images.unsplash.com/photo-1676136358787-6510632d3e30?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=387&amp;q=80"

          alt="an amazing landscape"

          class="card__image"

        />

      &lt;/div>

      &lt;div class="card__content">

       &lt;p class="card__description">

          Lorem ipsum dolor sit amet consectetur adipiscing elit. Aperiam porro

          quidem iure natus consequatur. A dolorum quis mollitia veritatis

          nostrum excepturi eligendi impedit doloremque, autem non reiciendis

          nemo, error quidem.

        &lt;/p>

        &lt;div class="card__buttonGroup">

          &lt;button class="card__button">Proceed&lt;/button>

          &lt;button class="card__button card__button--disabled">Cancel&lt;/button>

          &lt;button class="card__button card__button--danger">Delete&lt;/button>

        &lt;/div>

      &lt;/div>

    &lt;/section>
</pre>
<p>And CSS:</p>
<pre class="language-css hljs">.card {

        width: 100%;

        max-width: 400px;

        margin-left: auto;

        margin-right: auto;

        border: 1px solid gray;

        padding: 0.8rem;

        border-radius: 0.5rem;

      }

      .card__title {

        color: rgb(31, 31, 31);

      }

      .card__imageContainer {

        width: 100%;

        height: 300px;

      }

      .card__image {

        width: 100%;

        height: 100%;

        object-fit: cover;

      }

      .card__buttonGroup {

        display: flex;

        gap: 0.5rem;

      }

      .card__button {

        padding: 0.4rem 0.8rem;

        cursor: pointer;

        outline: none;

        border-radius: 0.3rem;

        border: 1px solid;

      }

      .card__button--disabled {

        cursor: not-allowed;

        background-color: gray;

        border-color: gray;

      }

      .card__button--danger {

        background-color: rgb(231, 36, 36);

        color: white;

        border-color: rgb(231, 36, 36);

      }
</pre>
<h3 id="primer-css">How Primer.css is different</h3>
<p>Primer.css makes use of the same pattern BEM uses. However, instead of double underscores, which are used to identify elements, it uses a hyphen. But for modifiers, it makes use of an <a href="https://blog.logrocket.com/using-ariakit-components-react-apps/">ARIA</a> for <code>button</code> components and a double hyphen for some other components, like a <code>Box</code>.</p>
<p>A block in Primer.css includes components such as <code>Dropdowns</code>, <code>Pagination</code>, <code>Popovers</code>, and <code>menu</code>. It should be noted that some blocks are capitalized while some are lowercase. With BEM, elements shouldn’t be standalone and should instead be inside of a block. The same applies to Primer.css; an element must be inside a component to work as expected. Also, modifiers must be combined with a block or an element to work correctly.</p>
<p>BEM methodology ensures that our CSS code is more structured and easily reused across the team in various application parts by enforcing a more consistent pattern of generating class names. This particular approach is what Primer.css uses under the hood to ensure that our app UI is consistent across the board.</p>
<h2>Conclusion</h2>
<p>The simplicity of Primer.css makes it an excellent choice for building your next project and should be adopted because it comes with many components and utilities that are very responsive and clean. Thank you for reading through. I hope you enjoyed this article, and be sure to comment if you have any questions. Happy coding!</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-160342" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-using-primer-css/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-using-primer-css/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-160342" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-using-primer-css/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-160342" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-using-primer-css/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-using-primer-css/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to using act with GitHub Actions - LogRocket Blog</title>
			<link>https://blog.logrocket.com/guide-using-act-github-actions/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/guide-using-act-github-actions/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to using act with GitHub Actions - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/guide-using-act-github-actions/">A guide to using act with GitHub Actions - LogRocket Blog</a>
<div class="mainheading">

 <div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/andrewevans/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/11/andrew-evans.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/11/andrew-evans.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/andrewevans/">
Andrew Evans <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Husband, engineer, FOSS contributor, and developer at AWS. Follow me at <a href="http://rhythmandbinary.com">rhythmandbinary.com</a> and <a href="https://andrewevans.dev">andrewevans.dev</a>.</span>
</div>
</div>
<h1 class="posttitle">A guide to using act with GitHub Actions</h1>
<p>
<span class="post-date"><time class="post-date">
March 17, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2148</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<article class="article-post">
<p>The <code>act</code> project is a powerful tool that you can use with GitHub Actions to quickly test and refine a continuous integration and continuous delivery (CI/CD) pipeline. With <a href="https://github.com/nektos/act"><code>act</code></a>, you can use Docker containers locally to directly run steps in GitHub Actions. <code>act</code> helps developers run independent stages in a pipeline, and it generally improves the feedback loop whenever you’re building pipelines with GitHub Actions.</p>
<p>In this article, we’ll introduce <code>act</code> in a sample project, install it, and then cover the different ways that <code>act</code> can improve your experience building and testing GitHub Actions. To follow along, check out my <a href="https://www.github.com/andrewevans0102/getting-started-with-act">sample project on GitHub</a>. Let’s get started!</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-are-github-actions">What are GitHub Actions?</a></li>
<li><a href="#how-you-use-act">How do you use <code>act</code>?</a></li>
<li><a href="#seeing-act-in-action">Seeing <code>act</code> in action</a></li>
</ul>
<h2 id="what-are-github-actions">What are GitHub Actions?</h2>
<p>Before we begin working with <code>act</code>, we should have a <a href="https://blog.logrocket.com/github-actions-how-to-autodeploy-your-app/">basic understanding of how GitHub Actions work</a>. Similar to CI/CD tools like CircleCI, Jenkins, and more, GitHub Actions allow you to define a pipeline in a YAML file. GitHub will then run your pipeline on specific events, which could include opening a pull request or merging into the master branch.</p>
<p>GitHub Actions’ syntax looks like the following:</p>
<pre class="language-javascript hljs">name: Node.js CI
'on':
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c7a4afa2a4aca8b2b387b1f4">[email protected]</a>
      - name: Use Node.js 16.x
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d5a6b0a1a0a5f8bbbab1b095a3e6">[email protected]</a>
        with:
          node-version: 16.x
          cache: npm
      - run: npm install
      - run: npm run build
</pre>
<p>In the example above, a GitHub Action is defined with a <code>build</code> job that checks out your code, does an npm install, and builds the project. You could have additional jobs that are reliant on this one, but the steps can also be their own actions. For example, if you wanted to cache the node modules, you could just add the following code:</p>
<pre class="language-javascript hljs">     - run: npm install
      - run: npm run build
      - name: Cache node modules
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7b181a18131e3b0d48">[email protected]</a>
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: >-
            ${{ runner.os }}-build-${{ env.cache-name }}-${{
            hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
</pre>
<p>The <code>actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="315250525954714702">[email protected]</a></code> is its own action that is run as a step in this pipeline. You can also build out these actions. For example, by enabling them in your GitHub repo, you can run CI/CD on pushes to master and other events. In GitHub, this looks like the following:</p>
<p><img             class="aligncenter wp-image-163206 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/1-github-actions-build-syntax.jpeg" alt="GitHub Actions Build Syntax" width="730" height="289"    /><noscript><img               class="aligncenter wp-image-163206 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/1-github-actions-build-syntax.jpeg" alt="GitHub Actions Build Syntax" width="730" height="289"  /></noscript></p>
<p>You can drill down into the different stages and even see a history of the actions as they run. In the GitHub Actions <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">documentation</a>, there is a detailed definition of this syntax; I recommend checking it out.</p>
<p>In the next sections, we’ll learn how to do all of this locally instead of having to rely on the GitHub console and events to test out our pipeline.</p>
<h2 id="how-you-use-act">How do you use <code>act</code>?</h2>
<p><code>act</code> acts as a CLI on your local machine, supporting Linux, Mac, and Windows. I work on a Mac, so I used <code>brew</code> to install <code>act</code> with the following command:</p>
<pre class="language-javascript hljs">brew install act
</pre>
<p>To learn more about the installation, <a href="https://github.com/nektos/act#installation-through-package-managers">check out the instructions in the GitHub repo</a>.</p>
<p>Once you have <code>act</code> installed, using it is easy. Inside the <code>.github</code> folder in your repo, call the CLI directly with <code>act</code> from a terminal inside a project that has a GitHub action YAML file setup. If you don’t have GitHub Actions set up yet, click the <strong>actions</strong> option at the top of your GitHub project, and GitHub will walk you through creating a starter YAML file:</p>
<p><img             class="aligncenter wp-image-163208 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/2-github-actions-set-up-yaml-file.jpeg" alt="Github Actions Set Up Yaml File" width="730" height="307"    /><noscript><img               class="aligncenter wp-image-163208 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/2-github-actions-set-up-yaml-file.jpeg" alt="Github Actions Set Up Yaml File" width="730" height="307"  /></noscript></p>
<p><img             class="aligncenter wp-image-163210 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/3-github-actions-edit-yaml-file.jpeg" alt="GitHub Actions Edit YAML File" width="730" height="204"    /><noscript><img               class="aligncenter wp-image-163210 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/3-github-actions-edit-yaml-file.jpeg" alt="GitHub Actions Edit YAML File" width="730" height="204"  /></noscript></p>
<p>There are a lot of different options, but I found the following to be the most useful:</p>
<pre class="language-javascript hljs"># List all the actions in your YAML file
act -l

# List actions for a specific event (here the event is push)
act push -l

# Get Act to run the workflow as if a specific push to master event occured
act push

# Get Act to run a specific job
act -j test

# pass secrets into a job so that the GitHub action can consume them
act -s MY_TOKEN_SECRET=&lt;token> -s MY_NETLIFY_SITE_ID=&lt;site_id> 

# run a GitHub action that uses artifacts between jobs
act --artifact-server-path /tmp/artifacts push
</pre>
<p>When these commands run, <code>act</code> builds a Docker container to run your GitHub actions inside. The images listed on the <code>act</code> GitHub project include the following:</p>
<p><img             class="aligncenter wp-image-163212 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/03/4-github-actions-builds-docker-container.jpeg" alt="Github Actions Builds Docker Container" width="730" height="365"    /><noscript><img               class="aligncenter wp-image-163212 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/03/4-github-actions-builds-docker-container.jpeg" alt="Github Actions Builds Docker Container" width="730" height="365"  /></noscript></p>
<p>If your GitHub Action job specifies an image to use, it will pull the image and run it in the <code>act</code> container to do the work.</p>
<h2 id="seeing-act-in-action">Seeing <code>act</code> in action</h2>
<p>As I stated in the intro, <a href="https://github.com/andrewevans0102/getting-started-with-act">I used a sample project with Act</a> to test out some of the features. The project is a very simple, basic to-do list app with React. I included one test that I could create a stage in the pipeline for, and I also included a stage to deploy to Netlify.</p>
<p>The code below represents the actual YAML file that I built for the GitHub Actions in this project:</p>
<pre class="language-javascript hljs">name: Node.js CI
'on':
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e6858e83858d899392a690d5">[email protected]</a>
      - name: Use Node.js 16.x
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2655435253560b48494243665015">[email protected]</a>
        with:
          node-version: 16.x
          cache: npm
      - run: npm install
      - run: npm run build
      - name: Cache node modules
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9efdfffdf6fbdee8ad">[email protected]</a>
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: >-
            ${{ runner.os }}-build-${{ env.cache-name }}-${{
            hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
      - name: Archive production artifacts
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8efbfee2e1efeaa3effcfae7e8efedfacef8bd">[email protected]</a>
        with:
          name: built-project
          path: build
          retention-days: 1
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8cefe4e9efe7e3f9f8ccfabf">[email protected]</a>
      - name: Use Node.js 16.x
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1764726362673a79787372576124">[email protected]</a>
        with:
          node-version: 16.x
          cache: npm
      - name: Download build for testing
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6c08031b0200030d08410d1e18050a0d0f182c1a5f">[email protected]</a>
        with:
          name: built-project
      - run: npm install
      - run: npm run pipeline-test
  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    name: 'Deploy to Netlify'
    steps:
      - uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="187b707d7b73776d6c586e2b">[email protected]</a>
      - name: Download build for deployment
        uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="492d263e272526282d64283b3d202f282a3d093f7a">[email protected]</a>
        with:
          name: built-project
      - uses: jsmrcaga/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="92f3f1e6fbfdfcbffcf7e6fefbf4ebbff6f7e2fefdebd2e4a3bca3bca2">[email protected]</a>
        with:
          NETLIFY_AUTH_TOKEN: ${{ secrets.MY_TOKEN_SECRET }}
          NETLIFY_SITE_ID: ${{ secrets.MY_NETLIFY_SITE_ID }}
          NETLIFY_DEPLOY_TO_PROD: true
          build_command: "echo build command not required since we are using artifacts"
</pre>
<p>As you can see, I have three different jobs:</p>
<ul>
<li><code>build</code>: Builds the project, caches the node modules, and caches the built assets</li>
<li><code>test</code>: Runs the associated tests with the project. In this case, it’s just the one <code>App.test.tsx</code> file</li>
<li><code>deploy</code>: Takes the assets that were built in the first job and then deploys them to Netlify using the <a href="https://github.com/marketplace/actions/netlify-deploy">Netlify Deploy GitHub Action</a></li>
</ul>
<p>The <code>test</code> job is dependent on the <code>build</code> job, and the <code>deploy</code> job is dependent on the <code>test</code> and <code>build</code> jobs. I also used <a href="https://github.com/actions/cache">caching</a> and <a href="https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts">storing artifacts</a> between stages. These topics are beyond the scope of this article, but for reference, I recommend checking out the GitHub Actions documentation.</p>
<p>Using Act with this pipeline, I was able to do several things, including running the jobs independently as well as directly seeing data about the jobs. I found this to be really helpful because I could build the pipeline without having to directly interact with the GitHub console. This saved significant time that I would have otherwise spent deploying and updating the YAML file, then waiting for the console to complete.</p>
<p>In the sample project, I list the associated jobs as follows:</p>
<pre class="language-javascript hljs">➜  getting-started-with-act git:(master) act -l
WARN  ⚠ You are using Apple M1 chip and you have not specified container architecture, you might encounter issues while running act. If so, try running it with '--container-architecture linux/amd64'. ⚠  
Stage  Job ID  Job name           Workflow name  Workflow file  Events
0      build   build              Node.js CI     node.js.yml    push  
1      test    test               Node.js CI     node.js.yml    push  
2      deploy  Deploy to Netlify  Node.js CI     node.js.yml    push  
</pre>
<p>The warning message indicates that <code>act</code> noticed the type of machine I’m using. If I wanted to, I could specify the architecture and avoid seeing that message. Next, I’ll look at the dependencies of the jobs on the <code>push</code> event:</p>
<pre class="language-javascript hljs">➜  getting-started-with-act git:(master) act push -l
WARN  ⚠ You are using Apple M1 chip and you have not specified container architecture, you might encounter issues while running act. If so, try running it with '--container-architecture linux/amd64'. ⚠  
Stage  Job ID  Job name           Workflow name  Workflow file  Events
0      build   build              Node.js CI     node.js.yml    push  
1      test    test               Node.js CI     node.js.yml    push  
2      deploy  Deploy to Netlify  Node.js CI     node.js.yml    push  
</pre>
<p>If I just want to run the build job independently, I’ll use the code below:</p>
<pre class="language-javascript hljs">➜  getting-started-with-act git:(master) act -j build
WARN  ⚠ You are using Apple M1 chip and you have not specified container architecture, you might encounter issues while running act. If so, try running it with '--container-architecture linux/amd64'. ⚠  
[Node.js CI/build] 🚀  Start image=node:16-buster-slim
[Node.js CI/build]   🐳  docker pull image=node:16-buster-slim platform= username= forcePull=false
[Node.js CI/build]   🐳  docker create image=node:16-buster-slim platform= entrypoint=["tail" "-f" "/dev/null"] cmd=[]
[Node.js CI/build]   🐳  docker run image=node:16-buster-slim platform= entrypoint=["tail" "-f" "/dev/null"] cmd=[]
[Node.js CI/build]   ☁  git clone 'https://github.com/actions/setup-node' # ref=v3
[Node.js CI/build]   ☁  git clone 'https://github.com/actions/cache' # ref=v3
[Node.js CI/build]   ☁  git clone 'https://github.com/actions/upload-artifact' # ref=v3
[Node.js CI/build] ⭐ Run Main actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="40232825232b2f3534003673">[email protected]</a>
[Node.js CI/build]   🐳  docker cp src=/Users/andrewevans/Documents/projects/getting-started-with-act/. dst=/Users/andrewevans/Documents/projects/getting-started-with-act
[Node.js CI/build]   ✅  Success - Main actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="294a414c4a42465c5d695f1a">[email protected]</a>
[Node.js CI/build] ⭐ Run Main Use Node.js 16.x
[Node.js CI/build]   🐳  docker cp src=/Users/andrewevans/.cache/act/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c9a8aabda0a6a7bae4baacbdbcb9e4a7a6adac89bffa">[email protected]</a>/ dst=/var/run/act/actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c9a8aabda0a6a7bae4baacbdbcb9e4a7a6adac89bffa">[email protected]</a>/
[Node.js CI/build]   🐳  docker exec cmd=[node /var/run/act/actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="51303225383e3f227c22342524217c3f3e3534112762">[email protected]</a>/dist/setup/index.js] user= workdir=
[Node.js CI/build]   💬  ::debug::isExplicit: 
[Node.js CI/build]   💬  ::debug::explicit? false
</pre>
<p>If I want to run the build and test jobs together, I need to specify a location for the artifacts. The GitHub Action that passes artifacts between jobs uses a default location within the GitHub servers.</p>
<p>Since I’m running this locally in a Docker container, I have to specify a location for it to use in the container. In the images below, you can see the job kickoff, and then successfully build and store the artifact:</p>
<pre class="language-javascript hljs">[Node.js CI/build]   🐳  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=
| 
| > <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8aedeffefee3e4eda7f9feebf8feefeea7fde3fee2a7ebe9fecabaa4bba4ba">[email protected]</a> build
| > react-scripts build
| 
| Creating an optimized production build...
| Compiled successfully.
| 
| File sizes after gzip:
| 
|   47.11 kB  build/static/js/main.172f414d.js
|   1.79 kB   build/static/js/787.de4328d8.chunk.js
|   313 B     build/static/css/main.51a848c0.css
| 
| The project was built assuming it is hosted at /.
| You can control this with the homepage field in your package.json.
| 
| The build folder is ready to be deployed.
| You may serve it with a static server:
| 
|   npm install -g serve
|   serve -s build
| 
| Find out more about deployment here:
| 
|   https://cra.link/deployment
| 
[Node.js CI/build]   ✅  Success - Main npm run build
[Node.js CI/build] ⭐ Run Main Cache node modules
</pre>
<p>Often times, you’ll have secrets that you need to pass to specific jobs. When running with <code>act</code>, you can do this directly in the command line with the following code:</p>
<pre class="language-javascript hljs">act -s MY_SECRET=&lt;first_secret> push 
</pre>
<p>There are a lot of other things you can do with <code>act</code> as you develop. I found it very helpful to be able to run jobs independently to debug issues that occurred.</p>
<p>As I stated earlier, I also included a deploy stage to upload the artifacts to Netlify. I had some issues passing in tokens, and I ultimately realized it was an issue with the way I had generated the token in Netlify. Regardless, you can still see how you could have a <code>deploy</code> stage. You could test this with other providers like AWS, Azure, etc.</p>
<h2 id="conclusion">Conclusion</h2>
<p>This article is just the tip of the iceberg of what you can do with <code>act</code>. By running Docker alongside <code>act</code>, I was able to see the containers running and the images that were pulled down. I also went through multiple iterations of running parts of jobs and then consulting the documentation to clean up the code. It greatly helped in the development of the pipeline, even if it was necessarily simple.</p>
<p>I highly recommend checking out the <code>act</code> project and reading more about it in the repo’s <a href="https://github.com/nektos/act">README</a>. I’ve found that <code>act</code> has a fairly strong community, so any issues I saw usually had an associated GitHub issue that I could consult for help.</p>
<p>Thanks for reading! Follow my writing on <a href="https://rhythmandbinary.com/">rhythmandbinary.com</a> and Twitter at <a href="https://twitter.com/AndrewEvans0102">@AndrewEvans0102</a>.</p><div class="code-block code-block-28" >
<div class="blog-plug inline-plug js-libraries-plug"><h2>Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?</h2><p>There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.</p>
<p><a href="https://lp.logrocket.com/blg/javascript-signup">LogRocket</a> is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively. </p><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.
</p><p>Build confidently — <a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-30 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-30 .fadeOut {
    opacity:0 !important;
}

.code-block-30 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-163186" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/guide-using-act-github-actions/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/guide-using-act-github-actions/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-163186" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/guide-using-act-github-actions/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-163186" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/guide-using-act-github-actions/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/guide-using-act-github-actions/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A guide to visual debugging with Vitest Preview - LogRocket Blog</title>
			<link>https://blog.logrocket.com/visual-debugging-vitest-preview/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/visual-debugging-vitest-preview/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A guide to visual debugging with Vitest Preview - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/visual-debugging-vitest-preview/">A guide to visual debugging with Vitest Preview - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ezesunday/">
<img alt="alt" src="https://secure.gravatar.com/avatar/1a5676951d435c367a59971d8c76959f?s=72&amp;d=mm&amp;r=g" class="avatar avatar-72 photo imgavt jetpack-lazy-image" height="72" width="72"    /><noscript><img  alt="" src="https://secure.gravatar.com/avatar/1a5676951d435c367a59971d8c76959f?s=72&amp;d=mm&amp;r=g"  class="avatar avatar-72 photo imgavt" height="72" width="72"  /></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ezesunday/">
Eze Sunday <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Eze Sunday is a full-stack software developer and technical writer passionate about solving problems, one line of code at a time. Contact Eze at <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a9c1c0e9ccd3ccdadcc7cdc8d087cac6c487">[email protected]</a></span>
</div>
</div>
<h1 class="posttitle">A guide to visual debugging with Vitest Preview</h1>
<p>
<span class="post-date"><time class="post-date">
January 16, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1795</span>
<span class="logrocket_editor">111</span>
</p>
</div>
<article class="article-post">
<p>Visual debugging allows developers to see the execution of their code in real-time, making it easier to identify and fix problems. It is particularly useful when working with complex codebases with several moving parts.</p>
<p>Before using Vitest Preview for testing and visual debugging, it is recommended to have experience with unit testing using Vitest or similar testing frameworks like <a href="https://blog.logrocket.com/jest-testing-top-features/">Jest</a>. If you are new to unit testing with Vitest, we’ve written a <a href="https://blog.logrocket.com/guide-vitest-automated-testing-vue-components/">beginner-friendly guide</a> demonstrating how to test a frontend application with Vitest. This guide will help you gain a better understanding of unit testing and how to apply it to your own projects.</p>
<p><em>Jump ahead: </em></p>
<ul>
<li><a href="#visual-debugging-important"> Why is visual debugging important?</a></li>
<li><a href="#intro-vitest"> Intro to Vitest</a></li>
<li><a href="#vitest-preview"> What is Vitest Preview?</a></li>
<li><a href="#vitest-preview-debugging"> Setting up Vitest Preview for debugging</a>
<ul >
<li><a href="#creating-own-project"> Creating your own project</a></li>
<li><a href="#addressing-errors"> Addressing errors</a></li>
</ul>
</li>
<li><a href="#visual-debugging-vitest-preview"> Visual debugging with Vitest Preview</a>
<ul >
<li><a href="#creating-second-test"> Creating a second test</a></li>
</ul>
</li>
</ul>
<h2 id="visual-debugging-important">Why is visual debugging important?</h2>
<p>Visual debugging is important for several reasons. First, it helps you pinpoint errors. Visual debugging makes it easier to pinpoint the source of errors and bugs in the code, saving you time and effort when trying to fix problems.</p>
<p>Visual debugging allows developers to see how their code interacts with other parts of the system, providing valuable insights into its behavior. Additionally, visual debugging helps developers identify potential performance issues in their code, allowing them to optimize it for better performance.</p>
<p>By making it easier to identify and fix problems, visual debugging helps developers <a href="https://podrocket.logrocket.com/dev-productivity-manifesto">increase their productivity</a> and efficiency. Overall, it is an essential tool for ensuring the reliability and correctness of software.</p>
<h2 id="intro-vitest">Intro to Vitest</h2>
<p><a href="https://www.youtube.com/watch?v=rBdGDiwVyes">Vitest</a> is a new unit testing framework that’s built for speed. According to <a href="https://twitter.com/antfu7">Anthony Fu</a>, the creator of Vitest and core team member of<a href="https://vitejs.dev/"> Vite</a>:</p>
<blockquote><p>Just like how Vite works in the browser, Vitest also knows the graph of your modules, which makes it able to do smart detection and only re-run the related tests. Feels almost like HMR but for tests.</p></blockquote>
<p>The best part of Vitest is that it watches all your app’s dependencies and tests and ensures that only the part that gets an update is re-run. From my experience using both frameworks, Jest and Vitest performed similarly in their first run. Meanwhile, Vitest had better test performance on the next re-run. This is because Vitest only runs the part of the test or business logic that was updated.</p>
<p>While this is an incredibly powerful tool, it can be even more powerful if a frontend developer can visualize their test.</p>
<p>For example, when you run a test that adds two variables, <code>A</code> + <code>B</code>, and it’s supposed to return <code>C</code> to the screen, you want to see that the arithmetic was done. The result was displayed on the screen successfully, as expected visually. This is where Vitest Preview comes in.</p>
<h2 id="vitest-preview">What is Vitest Preview?</h2>
<p><a href="https://www.vitest-preview.com/">Vitest Preview</a> helps you to write and debug tests faster by allowing you to visualize your test in a browser. If you are familiar with <a href="https://blog.logrocket.com/tag/jest/">Jest</a>, you know that the Jest community has a similar debugging tool, <a href="https://github.com/nvh95/jest-preview">Jest Preview</a>, created by the same developer, Hung Viet Nguyen. To learn more about testing with Jest, check out our <a href="https://www.youtube.com/watch?v=NHMIn723hQY">video guide here</a>.</p>
<p>On 24 October 2022, <a href="https://twitter.com/hung_dev">Hung Viet Nguyen</a> publicly announced the launch of Vitest Preview with the following statement:</p>
<blockquote><p>A question that I usually get asked is “Can I use <a href="https://twitter.com/JestPreview">@JestPreview</a> for <a href="https://twitter.com/vitest_dev">@vitest_dev</a>?”</p>
<p>Today, I am launching <a href="https://twitter.com/VitestPreview">@VitestPreview</a>, a little brother of @JestPreview, built on top of @vite_js, has first-class support for @vitest_dev, and blazing fast.</p></blockquote>
<p>In the rest of this guide, I’ll show you how to integrate Vitest Preview into your Vite tests suite to help make your debugging faster and more intuitive.</p>
<h2 id="vitest-preview-debugging">Setting up Vitest Preview for debugging</h2>
<p>Because we’ll be focusing on tests, we’ll clone an existing <a href="https://github.com/ezesundayeze/vitest-preview-demo">GitHub repository</a> I created for this guide.</p>
<p>First, run the following commands to clone the repository and install all the dependencies:</p>
<pre class="language-shell hljs">git clone https://github.com/ezesundayeze/vitest-preview-demo &amp;&amp; npm install
</pre>
<p>Your cloned app directory should look like so:</p>
<pre class="language-shell hljs">├── README.md
├── index.html
├── package-lock.json
├── package.json
├── public
│   └── vitest.svg
├── src
│   ├── App.css
│   ├── App.tsx
│   ├── assets
│   │   └── vite.svg
│   ├── hooks
│   │   └── useCounter.ts
│   ├── index.css
│   ├── main.jsx
│   ├── test
│   │   ├── App.test.tsx
│   │   └── setup.ts
│   ├── utils
│   │   └── test-utils.tsx
│   └── vite.env.d.ts
├── tsconfig.json
└── vite.config.js
</pre>
<p>The cloned app is a basic <a href="https://blog.logrocket.com/using-react-flow-plan-react-project/">React project</a> that increments a counter when clicking a <strong>button</strong>. This is a common starting point for React projects, often referred to as the React Starter app.</p>
<p>To enable us to run a test with Vitest Preview, we have installed the following dependencies in our project:</p>
<pre class="language-json hljs">// package.json
 
"devDependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^12.1.5",
    "@testing-library/react-hooks": "^8.0.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/react": "^18.0.21",
    "@types/react-dom": "^18.0.6",
    "@types/testing-library__jest-dom": "^5.14.5",
    "@vitejs/plugin-react": "^2.1.0",
    "jsdom": "^20.0.1",
    "npm-run-all": "^4.1.5",
    "vite": "^3.1.8",
    "vitest": "^0.24.3",
    "vitest-preview": "^0.0.1",
  }

</pre>
<h3 id="creating-own-project">Creating your own project</h3>
<p>To create your own project from scratch, you can <a href="https://vitejs.dev/guide/">use Vite to scaffold</a> the project and install the necessary dependencies, such as <code>Vitest</code> and <code>vitest-preview</code>, as we’ve seen earlier. You can then use <code>npm-run-all</code> to run Vitest Preview and Vitest in parallel. You can add <code>npm-run-all</code> to your <code>package.json</code> file for convenience.</p>
<p>For example, you could include a <code>script</code> in your <code>package.json</code> file like this:</p>
<pre class="language-json hljs">// package.json
 
...
"scripts": {
    "start": "npm-run-all -p vitest-preview test",
  },
...

</pre>
<h3 id="addressing-errors">Addressing errors</h3>
<p>One common issue that I have encountered when setting up a new project with Vitest Preview is the following error:</p>
<pre class="language-shell hljs">Error: Cannot find module '…/build/Release/canvas.node'
</pre>
<p>or</p>
<pre class="language-shell hljs">Error: Module did not self-register .../node_modules/canvas/build/Release/canvas.node
</pre>
<p>There are many suggestions for fixing this issue on <a href="https://stackoverflow.com/search?q=Error%3A+Cannot+find+module+%E2%80%98%E2%80%A6%2Fbuild%2FRelease%2Fcanvas.node%E2%80%99">Stack Overflow</a> and other forums, but in my experience, simply installing the <code>canvas</code> dependency resolved the issue. Even when I subsequently removed the dependency, the issue did not reoccur. This behavior may seem strange, but it has worked for me in the past.</p>
<p>If you encounter this issue, you may want to try installing <code>canvas</code> and see if it resolves the issue. Keep in mind, the specific steps for fixing this issue may vary depending on your specific setup and configuration, so it’s always a good idea to consult the <a href="https://www.vitest-preview.com/">documentation</a> for the tools you’re using and seek help from the community if necessary.</p>
<h2 id="visual-debugging-vitest-preview">Visual debugging with Vitest Preview</h2>
<p>Now that you have the demo set up, let’s write a simple test. First, open the <code>src/test/app.test.tsx</code> file and write a test that simulates seven <code><strong>button</strong></code> clicks and then verifies that the <code>count</code> has been incremented by seven.</p>
<p>Here is our test:</p>
<pre class="language-typescript hljs">// src/test/App.test.ts

import App from '../App';
import { render, screen, fireEvent } from '../utils/test-utils';
import { debug } from 'vitest-preview';

describe('Simple working test', () => {
  it('should increment count on click', async () => {
    render(&lt;App />);
    const button = screen.getByRole('button');
    for (let i = 0; i &lt; 7; i++) {
      fireEvent.click(button);
    }
    debug();
    expect(await screen.findByText(/count is: 7/i)).toBeInTheDocument();
  });
}); 

</pre>
<p>In the code above, we grabbed the <code>button</code> element and ran a loop that iterated seven times, simulating seven clicks. Then, we verified that seven were rendered.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Notice the <code>debug</code> function in the code? That is where Vitest Preview gets called and does the magic. Here is the code we are testing:</p>
<pre class="language-typescript hljs">import { useCounter } from './hooks/useCounter';
import viteLogo from './assets/vite.svg';
import './App.css';
function App() {
  const { count, increment } = useCounter();
  return (
    &lt;div className="App">
      &lt;header className="App-header">
        &lt;p>
          Hello &lt;b>Vitest Preview&lt;/b>!
        &lt;/p>
        &lt;div>
          &lt;img src={viteLogo} alt="Vite Logo" width={100} />
          &lt;img src="/vitest.svg" alt="Vitest Logo" width={100} />
        &lt;/div>
        &lt;p>
          &lt;button className="counter" type="button" onClick={increment}>
            count is: {count}
          &lt;/button>
        &lt;/p>
        &lt;p>
        &lt;/p>
      &lt;/header>
    &lt;/div>
  );
}
export default App;

</pre>
<p>Although this is a standard test, what makes it unique is that we can preview and see that count of seven was rendered on the screen, as shown below:</p>
<p><img             class="aligncenter size-full wp-image-155259 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vitest-test-preview.png" alt="Vitest Preview Demo Test" width="730" height="361"    /><noscript><img               class="aligncenter size-full wp-image-155259" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vitest-test-preview.png" alt="Vitest Preview Demo Test" width="730" height="361"  /></noscript></p>
<h3 id="creating-second-test">Creating a second test</h3>
<p>Let’s create another test for a component that has two form inputs that accept numbers and return the sum of the numbers when a user submits the form.</p>
<p>Here’s our test:</p>
<pre class="language-typescript hljs">///src/test/Calculator.test.ts
import { render, screen, fireEvent } from "@testing-library/react";
import Calculator from "../Calculator";
import { debug } from "vitest-preview";

describe("Calculator", () => {
    it("should add two numbers and display the result", async () => {
        // Render the component
        render(&lt;Calculator />);

        // Find the input fields and the button
        const input1 = screen.getByLabelText("First number:");
        const input2 = screen.getByLabelText("Second number:");
        const button = screen.getByRole("button", { name: "Add numbers" });

        // Enter values into the input fields
        fireEvent.change(input1, { target: { value: "2" } });
        fireEvent.change(input2, { target: { value: "3" } });

        // Click the button
        fireEvent.click(button);
        debug();
        // Assert that the result is displayed on the page
        expect(await screen.findByText("The result is: 5")).toBeInTheDocument();
    });
})

</pre>
<p>Let’s also write the code for it:</p>
<pre class="language-typescript hljs">// src/Calculator.tsx

import { useState } from "react";
import './App.css';
const Calculator = () => {
  // Declare two state variables, one for each input field
  const [num1, setNum1] = useState(0);
  const [num2, setNum2] = useState(0);
  // Declare a state variable for the result of the calculation
  const [result, setResult] = useState("");
  // Define a function to handle the form submission
  const handleSubmit = (event) => {
    event.preventDefault();
    // Convert the input values to numbers and add them
    const sum = Number(num1) + Number(num2);
    // Update the result state with the calculated sum
    setResult(sum);
  };
  return (
    &lt;form onSubmit={handleSubmit}>
      &lt;label>
        First number:
        &lt;input
          type="number"
          value={num1}
          onChange={(event) => setNum1(event.target.value)}
        />
      &lt;/label>
      &lt;label>
        Second number:
        &lt;input
          type="number"
          value={num2}
          onChange={(event) => setNum2(event.target.value)}
        />
      &lt;/label>
      &lt;button type="submit">Add numbers&lt;/button>
      {result &amp;&amp; &lt;div>The result is: {result}&lt;/div>}
    &lt;/form>
  );
};
export default Calculator;

</pre>
<p>Here is the preview when you run the test:</p>
<p><img             class="aligncenter size-full wp-image-155261 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vitest-preview-running.png" alt="Vitest Preview Running Visual Debugging" width="730" height="228"    /><noscript><img               class="aligncenter size-full wp-image-155261" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vitest-preview-running.png" alt="Vitest Preview Running Visual Debugging" width="730" height="228"  /></noscript></p>
<p>I didn’t type those numbers in the input fields. The test did as we described. Then, Vitest Preview made sure we were able to preview it in the browser. All the tests are passing, as you can see in the terminal and visually below:</p>
<p><img             class="aligncenter size-full wp-image-155265 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vitest-preview-passing-tests.png" alt="Visual Debugging With Vitest Preview Showing Passing Tests" width="730" height="151"    /><noscript><img               class="aligncenter size-full wp-image-155265" src="https://blog.logrocket.com/wp-content/uploads/2023/01/vitest-preview-passing-tests.png" alt="Visual Debugging With Vitest Preview Showing Passing Tests" width="730" height="151"  /></noscript></p>
<p>As you can tell, Vitest Preview can be very useful in debugging frontend applications because it allows you to get real-time feedback on your test that directly simulates how your users will interact with your application beyond having a mental model of the process.</p>
<h2>Conclusion</h2>
<p>Frontend development is getting a lot more fun every day as several tools focused on enhancing developer experience are built. Vitest Preview is a valuable visual testing and debugging tool, regardless of the scale of your project. For further reading, you should check out the <a href="https://www.vitest-preview.com/">documentation</a>.</p><div class="code-block code-block-28" >
<div class="blog-plug inline-plug js-libraries-plug"><h2>Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?</h2><p>There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.</p>
<p><a href="https://lp.logrocket.com/blg/javascript-signup">LogRocket</a> is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively. </p><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.
</p><p>Build confidently — <a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-30 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-30 .fadeOut {
    opacity:0 !important;
}

.code-block-30 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-155164" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/visual-debugging-vitest-preview/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/visual-debugging-vitest-preview/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-155164" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/visual-debugging-vitest-preview/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-155164" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/visual-debugging-vitest-preview/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/visual-debugging-vitest-preview/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A new guide to CSS overflow - LogRocket Blog</title>
			<link>https://blog.logrocket.com/new-guide-css-overflow/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/new-guide-css-overflow/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A new guide to CSS overflow - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/new-guide-css-overflow/">A new guide to CSS overflow - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/davidomotayo/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/11/1629917310656.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/davidomotayo/">
David Omotayo <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Frontend developer and indie game enthusiast.</span>
</div>
</div>
<h1 class="posttitle">A new guide to CSS <code>overflow</code></h1>
<p>
<span class="post-date"><time class="post-date">
October 10, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1888</span>
 <span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>As a frontend developer, overflow is one of the most infuriating issues you are likely to encounter when building a website layout. Overflow occurs when the content within a web element doesn’t fit the constraints of its <a href="https://blog.logrocket.com/why-your-css-fails/" target="_blank" rel="noopener">block formatting context</a> and ends up spilling out:</p>
<p><img             class="aligncenter size-full wp-image-136417 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflowing-text.png" alt="Overflowing Text" width="443" height="277"    /><noscript><img               class="aligncenter size-full wp-image-136417" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflowing-text.png" alt="Overflowing Text" width="443" height="277"  /></noscript></p>
<p>A parent element will expand to fit the content within it by default, unless fixed values are specified for its width and height. When a parent element’s width and height are specified with fixed values using pixels or any other fixed CSS values, an overflow is likely to occur when the content within the element increases.</p>
<p>For example, in the below code, as long as the container does not have a specified fixed width or height, the browser will fit the content within the container:</p>
<pre class="language-css hljs">//HTML
&lt;div class="container">
  &lt;p class="content">
Lorem ipsum dolor sit amet...
  &lt;/p>
&lt;/div>

//CSS
.container{
  margin: auto;
  outline: solid purple 2px;
}
</pre>
<p><img             class="aligncenter size-full wp-image-136420 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/text-fits-in-box.png" alt="Text Fits in Box" width="390" height="245"    /><noscript><img               class="aligncenter size-full wp-image-136420" src="https://blog.logrocket.com/wp-content/uploads/2022/10/text-fits-in-box.png" alt="Text Fits in Box" width="390" height="245"  /></noscript></p>
<p>The CSS <code>overflow</code> property can be used to fix a broken layout caused by overflow issues that often occur when the content of a given element does not fit within the constraints of its parent element.</p>
<p>Rather than providing a <a href="https://blog.logrocket.com/how-to-prevent-overflow-scrolling-css/" target="_blank" rel="noopener">general overview of CSS <code>overflow</code></a>, this guide will inspect each of the CSS <code>overflow</code> values and demonstrate how they can solve overflow problems that are often encountered when building website layouts.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#prerequisites">Prerequisites</a></li>
<li><a href="#what-are-the-css-overflow-property-values">What are the CSS <code>overflow</code> property values?</a>
<ul >
<li><a href="#overflow-visible"><code>overflow-visible</code></a></li>
<li><a href="#overflow-hidden"><code>overflow-hidden</code></a></li>
<li><a href="#overflow-clip"><code>overflow-clip</code></a></li>
<li><a href="#overflow-scroll"><code>overflow-scroll</code></a></li>
<li><a href="#overflow-auto"><code>overflow-auto</code></a></li>
</ul>
</li>
<li><a href="#what-are-the-overflow-x-and-overflow-y-properties">What are the overflow-x and overflow-y properties?</a></li>
<li><a href="#what-is-the-overflow-clip-margin-property">What is the overflow-clip-margin property?</a></li>
<li><a href="#what-is-the-overflow-wrap-property">What is the overflow-wrap property?</a></li>
<li><a href="#cross-browser-compatibility">Cross-browser compatibility</a></li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<p>To follow along with the examples and understand the terminologies used in the article, you’ll need to have a fundamental knowledge of CSS.</p>
<h2 id="what-are-the-css-overflow-property-values">What are the CSS <code>overflow</code> property values?</h2>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow" target="_blank" rel="noopener"><code>overflow</code> property</a> has a set of unique values it uses to fix overflow problems in CSS. These values are used to either hide or clip overflowing content using specific approaches.</p>
<p>These values include:</p>
<ul>
<li><code>visible</code></li>
<li><code>hidden</code></li>
<li><code>clip</code></li>
<li><code>scroll</code></li>
<li><code>auto</code></li>
</ul>
<p><code>overflow-x</code>, <code>overflow-y</code>, <code>overflow-clip-margin</code>, and <code>overflow-wrap</code> are other properties that can fix overflow problems in CSS, but in slightly different ways. We’ll learn more about these properties later in this guide, but for now, let’s look at how the primary CSS <code>overflow</code> values work and how they’re used.</p>
<h3 id="overflow-visible"><code>overflow-visible</code></h3>
<p><code>overflow-visible</code> is the default value of the <code>overflow</code> property — it doesn’t hide or clip the overflowing content of an element; instead, it leaves it as is.</p>
<p>Every element has this <code>overflow</code> value set by default. If you have an element with overflowing content, then the element’s overflow is visible.</p>
<p>Setting the <code>visible</code> value on the element is the same as not setting it at all; the overflow is visible regardless:</p>
<pre class="language-css hljs">//HTML
&lt;div class="container">
  &lt;p class="content">
Lorem ipsum dolor sit amet...
  &lt;/p>
&lt;/div>

//CSS
.container{
  width: 370px;
  height: 100px;
  margin: auto;
  outline: solid purple 2px;
  overflow: visible;
} 
</pre>
<p><img             class="aligncenter size-full wp-image-136422 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/text-overflowing-box.png" alt="Text Overflowing Box" width="443" height="277"    /><noscript><img               class="aligncenter size-full wp-image-136422" src="https://blog.logrocket.com/wp-content/uploads/2022/10/text-overflowing-box.png" alt="Text Overflowing Box" width="443" height="277"  /></noscript></p>
<h3 id="overflow-hidden"><code>overflow-hidden</code></h3>
<p><code>overflow-hidden</code> is used to hide the overflow of an element by clipping the content to fit the parent element’s box and making the overflowing content invisible. In this way, only the content that is within the boundaries of the parent’s borders is visible, as depicted in the below example:</p>
<pre class="language-css hljs">&lt;div class="container">
  &lt;p class="content">
Lorem ipsum dolor sit amet...
  &lt;/p>
&lt;/div>

//CSS
.container{
  ...
  overflow: hidden;
}
</pre>
<p><img             class="aligncenter size-full wp-image-136424 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflowing-text-hidden.png" alt="Overflowing Text Hidden" width="442" height="272"    /><noscript><img               class="aligncenter size-full wp-image-136424" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflowing-text-hidden.png" alt="Overflowing Text Hidden" width="442" height="272"  /></noscript></p>
<p>Here, the overflowing text of the paragraph element is hidden, but the text that is within the borders of the parent <code>div</code> element is still visible.</p>
<h3 id="overflow-clip"><code>overflow-clip</code></h3>
<p>At first glance, <code>overflow-clip</code> works similarly to the <code>hidden</code> value; it also clips the content to fit the parent’s box and hides the overflowing content.</p>
<p>One could argue that the <code>clip</code> value is redundant since the <code>overflow</code> property already has a value with the same use case. However, the <code>clip</code> value is actually very different from the <code>hidden</code> value.</p>
<p>The <code>clip</code> value does not only hide overflows, it also disables scrolling gestures on the containers to which it is applied. As a result, users cannot use the mouse wheel to scroll the hidden content into view on such containers.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>However, unlike the <code>clip</code> value, when the <code>hidden</code> value is applied to a container, content can be programmatically scrolled using JavaScript properties and methods such as <code>scrollLeft</code> and <code>scrollTo()</code>.</p>
<p>In the below example, we see that <code>overflow-clip</code> does not permit us to scroll through the hidden content:</p>
<p class="codepen"  data-height="300" data-default-tab="result" data-slug-hash="PoeNgvJ" data-user="david4473">See the Pen <a href="https://codepen.io/david4473/pen/PoeNgvJ"><br/>
Overflow-clip</a> by david omotayo (<a href="https://codepen.io/david4473">@david4473</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Here, we see that the <code>overflow-hidden</code> property can be used with <code>scrollLeft</code> to allow us to scroll through the hidden content:</p>
<p class="codepen"  data-height="300" data-default-tab="result" data-slug-hash="rNvebKP" data-user="david4473">See the Pen <a href="https://codepen.io/david4473/pen/rNvebKP"><br/>
Overflow-hidden</a> by david omotayo (<a href="https://codepen.io/david4473">@david4473</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>As you can see, the <code>scrollLeft</code> property only works on the container with the <code>overflow-hidden</code> value.</p>
<h3 id="overflow-scroll"><code>overflow-scroll</code></h3>
<p><code>overflow-scroll</code> is also used to clip an element’s overflow, but, unlike <code>hidden</code> and <code>clip</code>, the <code>scroll</code> value adds a scrollbar to the container. Users can use the scrollbar to view the clipped content:</p>
<p><img             class="aligncenter size-full wp-image-136426 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/scrollbar-for-overflow-text.png" alt="Scrollbar for Overflow Text" width="411" height="249"    /><noscript><img               class="aligncenter size-full wp-image-136426" src="https://blog.logrocket.com/wp-content/uploads/2022/10/scrollbar-for-overflow-text.png" alt="Scrollbar for Overflow Text" width="411" height="249"  /></noscript></p>
<p>The <code>scroll</code> value may seem like an ideal solution for the overflow problem, but unfortunately, it has some issues.</p>
<p>When applied to a container, the <code>scroll</code> value displays a scrollbar on both the x-axis and y-axis of the container, regardless of whether there’s an overflow. The <code>scroll</code> value is best used with the <code>overflow-x</code> and <code>overflow-y</code> properties, as we’ll see later in this guide.</p>
<p>On another note, the browser tends to automatically add scrollbars to the viewport when an element floats beyond its parent’s boundaries, causing a layout shift.</p>
<p>This problem can be easily debugged by adding an outline to the HTML’s root element and highlighting every element in the markup. However, the problem can be much more extensive and may persist even after debugging.</p>
<p>Here’s a <a href="https://blog.logrocket.com/how-to-prevent-overflow-scrolling-css/#what-is-overflow-in-css" target="_blank" rel="noopener">detailed tutorial on how to catch scroll-related bugs</a> and suggestions for ways to fix them.</p>
<h3 id="overflow-auto"><code>overflow-auto</code></h3>
<p><code>overflow-auto</code> is similar to the <code>scroll</code> value, except it only displays scrollbars when necessary, not by default. But, if the content of the container increases and overflows its boundaries, the <code>auto</code> value will cause a scrollbar to be automatically displayed on the axis on which the content is overflowing, instead of displaying it on both axes:</p>
<p class="codepen"  data-height="300" data-default-tab="result" data-slug-hash="poVymJG" data-user="david4473">See the Pen <a href="https://codepen.io/david4473/pen/poVymJG"><br/>
Overflow-auto</a> by david omotayo (<a href="https://codepen.io/david4473">@david4473</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>If we try to decrease the width of the container element or add more content to the paragraph in the above CodePen example, a scrollbar will automatically be displayed on the container’s right border.</p>
<h2 id="what-are-the-overflow-x-and-overflow-y-properties">What are the <code>overflow-x</code> and <code>overflow-y</code> properties?</h2>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x" target="_blank" rel="noopener"><code>overflow-x</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y" target="_blank" rel="noopener"><code>overflow-y</code></a> CSS properties are used to set overflow behaviors on the x-axis and y-axis of a container element.</p>
<p>These properties are much like the <code>overflow</code> property itself. The only difference is that their values are only applied to the horizontal or vertical borders of the container, as opposed to being applied to both axes at the same time.</p>
<p>In the example below, <code>overflow-scroll</code> has been applied to the container; as a result, scrollbars are displayed on both the x-axis and the y-axis:</p>
<p><img             class="aligncenter size-full wp-image-136428 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/scrollbars-on-both-axis.png" alt="Scrollbars on Both Axis" width="424" height="275"    /><noscript><img               class="aligncenter size-full wp-image-136428" src="https://blog.logrocket.com/wp-content/uploads/2022/10/scrollbars-on-both-axis.png" alt="Scrollbars on Both Axis" width="424" height="275"  /></noscript></p>
<p>We can control where the scrollbar appears on the container by appending <code>-x</code> or <code>-y</code> to the <code>overflow</code> property (note that we are using the <code>scroll</code> value) to display it on either the x-axis or y-axis, respectively:</p>
<pre class="language-css hljs">&lt;div class="container">
  &lt;p class="content">
Lorem ipsum dolor sit amet...
  &lt;/p>
&lt;/div>

//CSS
.container{
  ...
  Overflow-y: scroll;
  Or
  Overflow-x: scroll;
}
</pre>
<p>In the below example, we use <code>overflow-y</code> to display the scrollbar on the vertical axis:</p>
<p><img             class="aligncenter size-full wp-image-136430 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/vertical-scrollbar.png" alt="Vertical Scrollbar" width="395" height="249"    /><noscript><img               class="aligncenter size-full wp-image-136430" src="https://blog.logrocket.com/wp-content/uploads/2022/10/vertical-scrollbar.png" alt="Vertical Scrollbar" width="395" height="249"  /></noscript></p>
<p>In this example, we use <code>overflow-x</code> to display the scrollbar on the horizontal axis:</p>
<p><img             class="aligncenter size-full wp-image-136432 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/horizontal-scrollbar.png" alt="Horizontal Scrollbar" width="399" height="271"    /><noscript><img               class="aligncenter size-full wp-image-136432" src="https://blog.logrocket.com/wp-content/uploads/2022/10/horizontal-scrollbar.png" alt="Horizontal Scrollbar" width="399" height="271"  /></noscript></p>
<p>The purpose of values such as <code>scroll</code> is not just to display the scrollbars, but rather to control how they are displayed.</p>
<p><strong><em>N.B.,</em></strong> <em>if content is overflowing from both axes, (i.e., from the container’s right and bottom borders), scrollbars will be displayed on both axes regardless of the</em> <code>overflow</code> <em>property used</em></p>
<h2 id="what-is-the-overflow-clip-margin-property">What is the <code>overflow-clip-margin</code> property?</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-clip-margin" target="_blank" rel="noopener"><code>overflow-clip-margin</code></a> is a relatively new CSS property. It is used to control how the <code>overflow-clip</code> value snips the overflow of an element. This property determines how far the content of an element can overflow before it gets clipped:</p>
<pre class="language-css hljs">   /*overflow-visible*/
  .container{
      width: 370px;
      height: 100px;
      margin-right: 90px;
      outline: solid purple 2px;
    }

     /*overflow-clip*/
    .container:nth-child(2){
      overflow: clip;
    }

    /*overflow-clip-margin*/
    .container:nth-child(3){
      overflow: clip;
      overflow-clip-margin: 45px;
    }
</pre>
<p><img             class="aligncenter size-full wp-image-136442 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/three-overflow-examples-1.png" alt="Three Overflow Examples" width="730" height="321"    /><noscript><img               class="aligncenter size-full wp-image-136442" src="https://blog.logrocket.com/wp-content/uploads/2022/10/three-overflow-examples-1.png" alt="Three Overflow Examples" width="730" height="321"  /></noscript></p>
<p>Notice how we added an <code>overflow-clip</code> value to the container, alongside the <code>overflow-clip-margin</code>. This is because it is required for the <code>overflow-clip-margin</code> property to work.</p>
<p>If the container does not have an <code>overflow-clip</code> value, CSS will ignore the <code>overflow-clip-margin</code> property. This is why the <code>overflow-clip-margin</code> property is only applied to the axis that is being clipped on the container. For example, if the clip value is applied to the container’s x-axis using the <code>overflow-x</code> property, the <code>overflow-clip-margin</code> will only be applied to the x-axis.</p>
<p><code>overflow-clip-margin</code> does not have dedicated values like the <code>overflow</code> property. Instead, it accepts positive number values to specify how far the overflow will extend from the container. It does, however, have global values like every other CSS property:</p>
<ul>
<li><code>inherit</code></li>
<li><code>initial</code></li>
<li><code>revert</code></li>
<li><code>unset</code></li>
</ul>
<h2 id="what-is-the-overflow-wrap-property">What is the <code>overflow-wrap</code> property?</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap" target="_blank" rel="noopener"><code>overflow-wrap</code></a> is a CSS property that is used to break a long line of text if it overflows the boundaries of a targeted container element. But, unlike the <code>overflow</code> property, <code>overflow-wrap</code> can only be applied on inline elements, such as the paragraph and heading elements.</p>
<p>This property tells the browser that it can break a line of text into multiple lines if it overflows the container. Similarly to the <code>overflow</code> property, <code>overflow-wrap</code> also has a set of values that it uses to break texts:</p>
<ul>
<li><code>normal</code>: This is the default value of the <code>overflow-wrap</code> property, it will not break text when it overflows its container; instead, the text will break at normal word break points</li>
<li><code>break-word</code>: This value will break a long line of text into multiple lines from acceptable break points if the text overflows the container</li>
<li><code>anywhere</code>: This value is similar to the <code>break-word</code> value; however, <code>anywhere</code> allows long lines of text to be broken at an arbitrary point (even in the middle of a word) if it can’t be broken at an otherwise acceptable point</li>
</ul>
<p>Here’s an example showing <code>overflow-wrap</code> with its the <code>normal</code> default value:</p>
<p><img             class="aligncenter size-full wp-image-136436 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap.png" alt="Overflow Wrap" width="369" height="184"    /><noscript><img               class="aligncenter size-full wp-image-136436" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap.png" alt="Overflow Wrap" width="369" height="184"  /></noscript></p>
<p>This example shows <code>overflow-wrap</code> with the <code>break-word</code> value:</p>
<p><img             class="aligncenter size-full wp-image-136438 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap-break-word.png" alt="Overflow Wrap Break Word" width="296" height="171"  /><noscript><img               class="aligncenter size-full wp-image-136438" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap-break-word.png" alt="Overflow Wrap Break Word" width="296" height="171"/></noscript></p>
<p>Here is the same <code>overflow-wrap</code> example, but with the <code>anywhere</code> value:</p>
<p><img             class="aligncenter size-full wp-image-136440 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap-anywhere.png" alt="Overflow Wrap Anywhere" width="310" height="163"    /><noscript><img               class="aligncenter size-full wp-image-136440" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap-anywhere.png" alt="Overflow Wrap Anywhere" width="310" height="163"  /></noscript></p>
<h2 id="cross-browser-compatibility">Cross-browser compatibility</h2>
<p>At the time of writing, the <code>overflow</code> and <code>overflow-wrap</code> properties and their values have hit full browser support, meaning that they are very well supported across modern browsers.</p>
<p>The <code>overflow-clip-margin</code> property, on the other hand, is <a href="https://caniuse.com/?search=overflow-clip-margin" target="_blank" rel="noopener">indicated to only work with the Chrome, Edge, and Opera browsers</a>, but I’ve used it with Firefox and have found that it works just fine.</p>
<p>You can try the property on your browser of choice and let us know if it works for you in the below comments.</p>
<p>Here’s a summary of browser support for the <code>overflow</code> property:</p>
<p><img             class="aligncenter size-full wp-image-136444 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-property-browser-support.png" alt="Overflow Property Browser Support" width="495" height="230"    /><noscript><img               class="aligncenter size-full wp-image-136444" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-property-browser-support.png" alt="Overflow Property Browser Support" width="495" height="230"  /></noscript></p>
<p>Here’s a summary of browser support for the <code>overflow-wrap</code> property:</p>
<p><img             class="aligncenter size-full wp-image-136446 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap-browser-support.png" alt="Overflow Wrap Browser Support" width="489" height="227"    /><noscript><img               class="aligncenter size-full wp-image-136446" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-wrap-browser-support.png" alt="Overflow Wrap Browser Support" width="489" height="227"  /></noscript></p>
<p>Here’s a summary of browser support for the <code>overflow-clip-margin</code> property:</p>
<p><img             class="aligncenter size-full wp-image-136448 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-clip-margin-browser-support.png" alt="Overflow Clip Margin Browser Support" width="494" height="232"    /><noscript><img               class="aligncenter size-full wp-image-136448" src="https://blog.logrocket.com/wp-content/uploads/2022/10/overflow-clip-margin-browser-support.png" alt="Overflow Clip Margin Browser Support" width="494" height="232"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this guide, we introduced the CSS <code>overflow</code> property, investigated its values, and considered how to use them to solve the overflow problem. We also looked at the <code>overflow-x</code>, <code>overflow-y</code>, <code>overflow-clip-margin</code>, and <code>overflow-wrap</code> properties and examined how they differ from the <code>overflow</code> property.</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-136407" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/new-guide-css-overflow/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/new-guide-css-overflow/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-136407" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/new-guide-css-overflow/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-136407" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/new-guide-css-overflow/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/new-guide-css-overflow/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A practical guide to TypeScript decorators - LogRocket Blog</title>
			<link>https://blog.logrocket.com/practical-guide-typescript-decorators/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/practical-guide-typescript-decorators/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A practical guide to TypeScript decorators - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/practical-guide-typescript-decorators/">A practical guide to TypeScript decorators - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/rahmanfadhil/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/08/rahman-fadhil.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/08/rahman-fadhil.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/rahmanfadhil/">
Rahman Fadhil <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Developer and content writer.</span>
</div>
</div>
<h1 class="posttitle">A practical guide to TypeScript decorators</h1>
<p>
<span class="post-date"><time class="post-date">
April 4, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2617</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><strong><em>Editor’s note:</em></strong> <em>This article was last updated on 4 April 2023 to include information about the accessor and auto-accessor TypeScript decorator types. To learn more about JavaScript decorators,</em> <a href="https://blog.logrocket.com/understanding-javascript-decorators/"><em>check out this article</em></a><em>.</em></p>
<p>A decorator is a design pattern in programming in which you wrap something to change its behavior. In JavaScript, this feature is currently at <a href="https://github.com/tc39/proposal-decorators">stage three</a>. Decorators are not new; several programming languages, such as Python, Java, and C#, adopted this pattern before JavaScript. Further refinement of the syntax will require feedback from implementation and users.</p>
<p>At the time of writing, <a href="https://caniuse.com/?search=decorators">most browsers</a> do not support decorators. Nonetheless, you can test them out by using compilers like Babel.</p>
<p>In this article, we will learn how decorators compare in JavaScript and TypeScript. We will also explore the different types of TypeScript decorators that exist, including the class, method, property, and accessor decorators.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#decorators-javascript-vs-typescript">Decorators in JavaScript vs. TypeScript</a></li>
<li><a href="#getting-started-decorators-typescript">Getting started with decorators in TypeScript</a></li>
<li><a href="#new-typescript-decorators">New TypeScript decorators</a></li>
<li><a href="#decorator-types">Types of decorators</a>
<ul >
<li><a href="#class-decorators">Class decorators</a></li>
<li><a href="#method-decorators">Method decorators</a></li>
<li><a href="#property-decorators">Property decorators</a></li>
<li><a href="#auto-accessor-decorators">Auto-accessor decorators</a></li>
</ul>
</li>
<li><a href="#use-cases-typescript-decorators">Use cases for TypeScript decorators</a></li>
</ul>
<h2 id="decorators-javascript-vs-typescript">Decorators in JavaScript vs. TypeScript</h2>
<p>TypeScript’s decorator feature is different from the JavaScript feature in a few significant ways. The first big difference is about what we can decorate. We can use TypeScript decorators to annotate and modify class declarations, methods, and properties, as well as accessors and parameters.</p>
<p>New TypeScript decorators do not currently support parameter decoration, but that will change in the future. Old TypeScript decorators, on the other hand, do support parameters decoration. We’ll learn more about this later in the article. JavaScript, on the other hand, only lets us decorate class declarations and methods.</p>
<p>The second important difference between decorators in JavaScript and TypeScript is type checking. Because TypeScript a strongly-typed programming language, it can type-check the parameters and return the value of the decorator function. JavaScript doesn’t have this kind of type checking and validation, so you need to rely on runtime checks or external tools like linters to catch type errors.</p>
<h2 id="getting-started-decorators-typescript">Getting started with decorators in TypeScript</h2>
<p>Start by creating a blank Node.js project:</p>
<pre class="language-typescript hljs">$ mkdir typescript-decorators
$ cd typescript decorators
$ npm init -y
</pre>
<p>Next, install TypeScript as a development dependency:</p>
<pre class="language-typescript hljs">$ npm install -D typescript @types/node
</pre>
<p>The <code>@types/node</code> package contains the Node.js type definitions for TypeScript. We need this package to access some Node.js standard libraries.</p>
<p>Add an npm script in the <code>package.json</code> file to compile your TypeScript code:</p>
<pre class="language-typescript hljs">{
  // ...
  "scripts": {
    "build": "tsc"
  }
}
</pre>
<p>Until TypeScript 5.0, we had to explicitly set a flag, <code>experimentalDecorators</code>, to use decorators in our code. With TypeScript 5.0, this is no longer the case. While such a flag is likely to stay around for the foreseeable future, we can use new-style decorators without it. As a matter of fact, the old-style decorators modeled a different version of the proposal (Stage 2). We can use both styles in our code because the type rules are different, but it’s not advisable to do so.</p>
<p>Remember to configure your working environment to use at least TypeScript 5. Otherwise, the code in this article won’t compile.</p>
<p>We’ll use <code>ES6</code> as a target for TypeScript because it’s supported by all modern browsers:</p>
<pre class="language-typescript hljs">{
  "compilerOptions": {
    "target": "ES6"
  }
}
</pre>
<p>Next, we’ll create a simple TypeScript file to test the project out:</p>
<pre class="language-typescript hljs">console.log("Hello, world!");


$ npm run build
$ node index.js
Hello, world!
</pre>
<p>Instead of repeating this command over and over, we can simplify the compilation and execution process by using a package called <code>ts-node</code>. It’s a community package that enables us to run TypeScript code directly without compiling it first.</p>
<p>Let’s install it as a development dependency:</p>
<pre class="language-typescript hljs">$ npm install -D ts-node
</pre>
<p>Next, add a <code>start</code> script to the <code>package.json</code> file:</p>
<pre>{
  "scripts": {
    "build": "tsc",
    "start": "ts-node index.ts"
  }
}
</pre>
<p>Simply run <code>npm start</code> to run your code:</p>
<pre class="language-typescript hljs">$ npm start
Hello, world!
</pre>
<p>For reference, I have all the source code on this article published on my <a href="https://github.com/mdipirro/typescript-decorators">GitHub</a>. You can clone it onto your computer using the command below:</p>
<pre class="language-typescript hljs">$ git clone <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c1a6a8b581a6a8b5a9b4a3efa2aeac">[email protected]</a>:mdipirro/typescript-decorators.git
</pre>
<h2 id="new-typescript-decorators">New TypeScript decorators</h2>
<p>In TypeScript, decorators are functions that can be attached to classes and their members, such as methods and properties.</p>
<p>In this section, we’re going to look at new-style decorators. First, the new <code>Decorator</code> type is defined as follows:</p>
<pre class="language-typescript hljs">type Decorator = (target: Input, context: {
  kind: string;
  name: string | symbol;
  access: {
    get?(): unknown;
    set?(value: unknown): void;
  };
  private?: boolean;
  static?: boolean;
  addInitializer?(initializer: () => void): void;
}) => Output | void;
</pre>
<p>The <code>type</code> definition above looks complex, so let’s break it down one piece at a time:</p>
<ul>
<li><code>target</code> represents the element we’re decorating, whose type is <code>Input</code></li>
<li><code>context</code> contains metadata about how the decorated method was declared, namely:
<ul >
<li><code>kind</code>: the type of decorated value. As we’ll see, this can be either <code>class</code>, <code>method</code>, <code>getter</code>, <code>setter</code>, <code>field</code>, or <code>accessor</code></li>
<li><code>name</code>: the name of the decorated object</li>
<li><code>access</code>: an object with references to a getter and setter method to access the decorated object</li>
<li><code>private</code>: whether the decorated object is a <code>private</code> class member</li>
<li><code>static</code>: whether the decorated object is a <code>static</code> class member</li>
<li><code>addInitializer</code>: a way to add custom initialization logic at the beginning of the constructor (or when the class is defined)</li>
</ul>
</li>
<li><code>Output</code> represents the type of value returned by the <code>Decorator</code> function</li>
</ul>
<p>In the next section, we’ll take a look at the types of decorators. Interestingly, while old-style decorators let us decorate function parameters, new-style ones don’t, at least for the time being. As a matter of fact, parameter decorators are waiting for a <a href="https://github.com/tc39/proposal-decorators/issues/47">follow-on proposal</a> to reach Stage 3.</p>
<h2 id="decorator-types">Types of decorators</h2>
<p>Now that we know how the <code>Decorator</code> type is defined, we’ll take a look at the various types of decorators.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="class-decorators">Class decorators</h3>
<p>When you attach a function to a class as a decorator, you’ll receive the class constructor as the first parameter:</p>
<pre class="language-typescript hljs">type ClassDecorator = (value: Function, context: {
  kind: "class"
  name: string | undefined
  addInitializer(initializer: () => void): void
}) => Function | void
</pre>
<p>For example, let’s assume we want to use a decorator to add two properties, <code>fuel</code> and <code>isEmpty()</code>, to a <code>Rocket</code> class. In this case, we could write the following function:</p>
<pre class="language-typescript hljs">function WithFuel(target: typeof Rocket, context): typeof Rocket {
  if (context.kind === "class") {
    return class extends target {
      fuel: number = 50
      isEmpty(): boolean {
        return this.fuel == 0
      }
    }
  }
}
</pre>
<p>After making sure the <code>kind</code> of the decorated element is indeed <code>class</code>, we return a new class with two additional properties. Alternatively, we could have used prototype objects to dynamically add new methods:</p>
<pre class="language-typescript hljs">function WithFuel(target: typeof Rocket, context): typeof Rocket {
  if (context.kind === "class") {
    target.prototype.fuel = 50
    target.prototype.isEmpty = (): boolean => {
      return this.fuel == 0
    }
  }
}
</pre>
<p>We can use <code>WithFuel</code> as follows:</p>
<pre class="language-typescript hljs">@WithFuel
class Rocket {}

const rocket = new Rocket()
console.log((rocket as any).fuel)
console.log(`Is the rocket empty? ${(rocket as any).isEmpty()}`)
/* Prints:
50
Is the rocket empty? false
*/
</pre>
<p>You might have noticed that we had to cast <code>rocket</code> to <code>any</code> to access the new properties. That’s because decorators can’t influence the structure of the type.</p>
<p>If the original class defines a property that is later decorated, the decorator overrides the original value. For example, if <code>Rocket</code> has a <code>fuel</code> property with a different value, <code>WithFuel</code> would override such a value:</p>
<pre class="language-typescript hljs">function WithFuel(target: typeof Rocket, context): typeof Rocket {
  if (context.kind === "class") {
    return class extends target {
      fuel: number = 50
      isEmpty(): boolean {
        return this.fuel == 0
      }
    }
  }
}
@WithFuel
class Rocket {
  fuel: number = 75
}

const rocket = new Rocket()
console.log((rocket as any).fuel)
// prints 50
</pre>
<h3 id="method-decorators">Method decorators</h3>
<p>Another good place to attach a decorator is class methods. In this case, the type of the decorator function is as follows:</p>
<pre class="language-typescript hljs">type ClassMethodDecorator = (target: Function, context: {
  kind: "method"
  name: string | symbol
  access: { get(): unknown }
  static: boolean
  private: boolean
  addInitializer(initializer: () => void): void
}) => Function | void
</pre>
<p>We can use method decorators when we want something to happen before or after the invocation of the method being decorated.</p>
<p>For example, during development, it might be useful to log the calls to a given method or verify pre/post-conditions before/after the call. Additionally, we can influence the way the method is invoked, for example, by delaying its execution or limiting the number of calls within a given amount of time.</p>
<p>Finally, we can use method decorators to mark a method as deprecated, logging a message to warn the user and tell them which method to use instead:</p>
<pre class="language-typescript hljs">function deprecatedMethod(target: Function, context) {
  if (context.kind === "method") {
    return function (...args: any[]) {
      console.log(`${context.name} is deprecated and will be removed in a future version.`)
      return target.apply(this, args)
    }
  }
}
</pre>
<p>Again, the first parameter of the <code>deprecatedMethod</code> function is, in this case, the method we’re decorating. After making sure it’s indeed a method (<code>context.kind === "method"</code>), we return a new <code>function</code> that basically wraps the decorated method and logs a warning message before calling the actual method call.</p>
<p>We can then use our new decorator as follows:</p>
<pre class="language-typescript hljs">@WithFuel
class Rocket {
  fuel: number = 75
  @deprecatedMethod
  isReadyForLaunch(): Boolean {
    return !(this as any).isEmpty()
  }
}

const rocket = new Rocket()
console.log(`Is the rocket ready for launch? ${rocket.isReadyForLaunch()}`)
</pre>
<p>In the <code>isReadyForLaunch()</code> method, we refer to the <code>isEmpty</code> method we added via the <code>WithFuel</code> decorator. Notice how we had to cast <code>this</code> to an instance of <code>any</code>, as we did before. When we call <code>isReadyForLaunch()</code>, we’ll see the following output, showing that the warning gets correctly printed out:</p>
<pre class="language-typescript hljs">isReadyForLaunch is deprecated and will be removed in a future version.
Is the rocket ready for launch? true
</pre>
<p>Method decorators can be useful if you want to extend the functionality of our methods, which we’ll cover later.</p>
<h3 id="property-decorators">Property decorators</h3>
<p>Property decorators are very similar to method decorators:</p>
<pre class="language-typescript hljs">type ClassPropertyDecorator = (target: undefined, context: {
  kind: "field"
  name: string | symbol
  access: { get(): unknown, set(value: unknown): void }
  static: boolean
  private: boolean
}) => (initialValue: unknown) => unknown | void
</pre>
<p>Not surprisingly, the use cases for property decorators are very similar to those for method decorators. For example, we can track the accesses to a property or mark it as deprecated:</p>
<pre class="language-typescript hljs">function deprecatedProperty(_: any, context) {
  if (context.kind === "field") {
    return function (initialValue: any) {
      console.log(`${context.name} is deprecated and will be removed in a future version.`)
      return initialValue
    }
  }
}
</pre>
<p>The code is very similar to the <code>deprecatedMethod</code> decorator we defined for methods, and so is its usage.</p>
<h3 id="accessor-decorators">Accessor decorators</h3>
<p>Very similar to method decorators are accessor decorators, which are decorators that target getters and setters:</p>
<pre class="language-typescript hljs">type ClassSetterDecorator = (target: Function, context: {
  kind: "setter"
  name: string | symbol
  access: { set(value: unknown): void }
  static: boolean
  private: boolean
  addInitializer(initializer: () => void): void
}) => Function | void

type ClassGetterDecorator = (value: Function, context: {
  kind: "getter"
  name: string | symbol
  access: { get(): unknown }
  static: boolean
  private: boolean
  addInitializer(initializer: () => void): void
}) => Function | void
</pre>
<p>The definition of accessor decorators is similar to that of as method decorators. For example, we can merge our <code>deprecatedMethod</code> and <code>deprecatedProperty</code> decorations into a single, <code>deprecated</code> function that features support for getters and setters as well:</p>
<pre class="language-typescript hljs">function deprecated(target, context) {
  const kind = context.kind
  const msg = `${context.name} is deprecated and will be removed in a future version.`
  if (kind === "method" || kind === "getter" || kind === "setter") {
    return function (...args: any[]) {
      console.log(msg)
      return target.apply(this, args)
    }
  } else if (kind === "field") {
    return function (initialValue: any) {
      console.log(msg)
      return initialValue
    }
  }
}
</pre>
<h3 id="auto-accessor-decorators">Auto-accessor decorators</h3>
<p>The new decorator proposal also introduced a new element called the “auto-accessor field”:</p>
<pre class="language-typescript hljs">class Test {
  accessor x: number
}
</pre>
<p>The transpiler will turn the <code>x</code> field above into a pair of getter and setter methods, with a <code>private</code> property behind the scenes. This is useful to represent a simple accessor pair and helps avoid some edgy issues that might arise while using decorators on class fields.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<p>Auto-accessors can be decorated, as well, and their type will essentially be a merge of <code>ClassSetterDecorator</code> and <code>ClassGetterDecorator</code>. You can find additional details in the <a href="https://github.com/microsoft/TypeScript/pull/50820">Stage 3 decorators pull request</a>.</p>
<h2 id="use-cases-typescript-decorators">Use cases for TypeScript decorators</h2>
<p>Now that we’ve covered what decorators are and how to use them properly, let’s look at some specific problems decorators can help us solve.</p>
<h3 id="calculating-execution-time">Calculating execution time</h3>
<p>Let’s say we want to estimate how long it takes to run a function as a way to gauge your application performance. We can create a decorator to calculate the execution time of a method and print it on the console:</p>
<pre class="language-typescript hljs">class Rocket {
  @measure
  launch() {
    console.log("Launching in 3... 2... 1... 🚀");
  }
}
</pre>
<p>The <code>Rocket</code> class has a <code>launch</code> method inside of it. To measure the execution time of the <code>launch</code> method, you can attach the <code>measure</code> decorator:</p>
<pre class="language-typescript hljs">import { performance } from "perf_hooks";

function measure(target: Function, context) {
  if (context.kind === "method") {
    return function (...args: any[]) {
      const start = performance.now()  
      const result = target.apply(this, args)
      const end = performance.now()

      console.log(`Execution time: ${end - start} milliseconds`)
      return result
    }
  }
}
</pre>
<p>As you can see, the <code>measure</code> decorator replaces the original method with a new one that enables it to calculate the execution time of the original method and log it to the console. To calculate the execution time, we’ll use the <a href="https://nodejs.org/api/perf_hooks.html">Performance Hooks API</a> from the Node.js standard library. Instantiate a new <code>Rocket</code> instance and call the <code>launch</code> method:</p>
<pre class="language-typescript hljs">const rocket = new Rocket()
rocket.launch()
</pre>
<p>You’ll get the following result:</p>
<pre class="language-typescript hljs">Launching in 3... 2... 1... 🚀
Execution time: 1.062355000525713 milliseconds
</pre>
<h3 id="using-decorator-factory-function">Using the decorator factory function</h3>
<p>To configure your decorators to act differently in a certain scenario, you can use a concept called the decorator factory. Decorator factories are functions returning a decorator. This enables us to customize the behavior of your decorators by passing some parameters in the factory.</p>
<p>Take a look at the example below:</p>
<pre class="language-typescript hljs">function fill(value: number) {
  return function(_, context) {
    if (context.kind === "field") {
      return function (initialValue: number) {
        return value + initialValue
      }
    }
  }
}
</pre>
<p>The <code>fill</code> function returns a decorator changing the value of the property based on the value passed from your factory:</p>
<pre class="language-typescript hljs">class Rocket {
  @fill(20)
  fuel: number = 50
}
const rocket = new Rocket()
console.log(rocket.fuel) // 70
</pre>
<h3 id="automatic-error-guard">Automatic error guard</h3>
<p>Another common use case for decorators is checking pre- and post-conditions on method calls. For example, assume we want to make sure <code>fuel</code> is at least a given value before calling the <code>launch()</code> method:</p>
<pre class="language-typescript hljs">class Rocket {
  fuel = 50

  launch() {
    console.log("Launching to Mars in 3... 2... 1... 🚀")
  }
}
</pre>
<p>Let’s say we have a <code>Rocket</code> class that has a <code>launchToMars</code> method. To launch a rocket, the fuel level must be above, for example, 75.</p>
<p>Let’s create the decorator for it:</p>
<pre class="language-typescript hljs">function minimumFuel(fuel: number) {
  return function(target: Function, context) {
    if (context.kind === "method") {
        return function (...args: any[]) {
          if (this.fuel > fuel) {
            return target.apply(this, args)
          } else {
            console.log(`Not enough fuel. Required: ${fuel}, got ${this.fuel}`)
          }
        }
    }
  }
}
</pre>
<p><code>minimumFuel</code> is a factory decorator. It takes the <code>fuel</code> parameter, which indicates how much fuel is needed to launch a particular rocket. To check the fuel condition, wrap the original method with a new method, just like in the previous use case. Notice how we can freely refer to <code>this.fuel</code>, which will just work at runtime.</p>
<p>Now we can plug our decorator to the <code>launch</code> method and set the minimum fuel level:</p>
<pre class="language-typescript hljs">class Rocket {
  fuel = 50

  @minimumFuel(75)
  launch() {
    console.log("Launching to Mars in 3... 2... 1... 🚀")
  }
}
</pre>
<p>If we now invoke the <code>launch</code> method, it won’t launch the rocket because the current fuel level is 50:</p>
<pre>const rocket = new Rocket()
rocket.launch()

Not enough fuel. Required: 75, got 50
</pre>
<p>The cool thing about this decorator is that you can apply the same logic to a different method without rewriting the whole if-else statement.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It’s true that in some scenarios, it’s not necessary to make your own decorators. Many TypeScript libraries/frameworks out there, such as <a href="https://typeorm.io">TypeORM</a> and <a href="https://angular.io/">Angular</a>, already provide all the decorators you need. But it’s always worth the extra effort to understand what’s going on under the hood, and it might even inspire you to build your own TypeScript framework.</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-18524" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-18524" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-18524" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/practical-guide-typescript-decorators/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/practical-guide-typescript-decorators/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>A quick guide to optimizing Laravel apps with Octane - LogRocket Blog</title>
			<link>https://blog.logrocket.com/optimizing-laravel-apps-octane/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/optimizing-laravel-apps-octane/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>A quick guide to optimizing Laravel apps with Octane - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/optimizing-laravel-apps-octane/">A quick guide to optimizing Laravel apps with Octane - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/abiodunsolomon/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/07/abiodun-solomon.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/07/abiodun-solomon.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/abiodunsolomon/">
Abiodun Solomon <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I’m a software developer that is curious about modern technologies. I love contributing to the growth of knowledge for the betterment of humanity.</span>
</div>
</div>
<h1 class="posttitle">A quick guide to optimizing Laravel apps with Octane</h1>
<p>
<span class="post-date"><time class="post-date">
October 19, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">3 min read</span>
<span class="wordcount">1059</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>The <a href="https://blog.logrocket.com/whats-new-laravel-9/">Laravel</a> team announced the release of Laravel Octane in 2021, its purpose being to improve the speed and performance of Laravel applications by reducing the request/response time by caching an instance of a Laravel dependency container in RAM memory. This process is done by tools called <a href="https://openswoole.com/" target="_blank" rel="noopener">Swoole</a> and <a href="https://roadrunner.dev/" target="_blank" rel="noopener">RoadRunner</a>.</p>
<p>In this post, we will be conducting a quick-start guide on how to optimize your Laravel apps with Octane, taking into consideration a benchmark analysis to demonstrate the performance differences between RoadRunner, Swoole, and Nginx.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#explanation-tools">Explanation of tools</a></li>
<li><a href="#why-laravel-octane">Why Larvel Octane?</a></li>
<li><a href="#pros-octane">Pros of Octane</a></li>
<li><a href="#challenges-octane">Challenges of Octane</a></li>
<li><a href="#setting-up-laravel-octane-app">Setting up a Laravel Octane App</a></li>
<li><a href="#installing-application-servers">Installing application servers</a></li>
<li><a href="#benchmarking-app-servers-autocannon">Benchmarking app servers with AutoCannon</a>
<ul>
<li><a href="#swoole">Swoole</a></li>
<li><a href="#roadrunner">Roadrunner</a></li>
</ul>
</li>
</ul>
<h2 id="explanation-tools">Explanation of tools</h2>
<ul>
<li><strong>Swoole</strong><strong>:</strong> Swoole is a PHP extension that helps with low-level or traditional stateless models such as event loops and async to improve the performance of PHP. Swoole tends to be popular, due to the fact that it’s a PHP extension, compared with roadrunner, which is built with Go</li>
<li><strong>RoadRunner</strong><strong>:</strong> RoadRunner is a high-performance PHP application server, load-balancer, and process manager written in Go — it’s a binary app that needs to be installed before use</li>
<li><a href="https://github.com/mcollina/autocannon" target="_blank" rel="noopener"><strong>AutoCannon</strong></a><strong>:</strong> AutoCannon is an HTTP benchmarking tool written in Node.js. It’s used for evaluating the performance of web applications</li>
</ul>
<h2 id="why-laravel-octane">Why Laravel Octane?</h2>
<p><a href="https://laravel.com/docs/9.x/octane" target="_blank" rel="noopener">Laravel Octane</a> is a package that serves Laravel apps with Swoole or RoadRunner to help improve performance.</p>
<p>Conventional Laravel apps are served from webservers like Apache, Nginx, and Lighttpd, which with every request spawns a PHP-FPM worker. This approach causes an overhead for creating processes and booting Laravel apps on every request, which is referred to as a stateless approach, as none of PHP processes are re-used on each request.</p>
<p>While Swoole and RoadRunner still use worker processes for all requests, they only serve the first request to boot the framework (dependency containers), and any other ones are from the bootstrapped version of the framework.</p>
<h2 id="pros-octane">Pros of Octane</h2>
<ul>
<li>It supercharges the performance of your Laravel apps</li>
<li>It conserves resources compared to conventional Laravel apps</li>
</ul>
<h2 id="challenges-octane">Challenges of Octane</h2>
<ul>
<li>Code changes can be a challenge, since Octane caches your app in the memory and a change in your code may not be seen after a browser refresh, unless Octane is running or on <strong>Watch</strong> mode</li>
<li>Since the app is running in memory, memory leaks can be another challenge to look into, as all data is being stored in the memory — particularly static and global variables</li>
</ul>
<h2 id="setting-up-laravel-octane-app">Setting up a Laravel Octane app</h2>
<p>Now that we’ve gone over the details of what comprises Octane and what it does, let’s get started with putting it into action.</p>
<p>Here’s how to begin:</p>
<pre class="language-bash hljs">❯ composer create-project laravel/laravel laravel-octane


❯ composer require laravel/octane


❯ php artisan octane:install


 Which application server you would like to use?:
  [0] roadrunner
  [1] swoole
 > 0
</pre>
<h2 id="installing-application-servers">Installing application servers</h2>
<p>RoadRunner or Swoole is needed to serve your application since they are both external packages, but most times RoadRunner will be installed after app server selection. If it is not, use the command below to install it manually:</p>
<pre class="language-bash hljs">composer require spiral/roadrunner
</pre>
<p>Installing Swoole can be a bit different, as it’s a PHP extension and not a package and requires few procedures. The following command is used to install it and get started with setup procedures:</p>
<pre class="language-bash hljs">pecl install swoole
</pre>
<p>(Note: We won’t cover the procedures for installing and setting up Swoole with PHP, but here’s a simple <a href="https://medium.com/@mfkhao2009/install-or-update-php-swoole-extension-by-make-from-source-code-on-mac-4810ee807831" target="_blank" rel="noopener">guide</a> to do it)</p>
<p>Start your app with the following command, then navigate to your browser.</p>
<pre class="language-bash hljs"> php artisan octane:start

   INFO  Server running…

  Local: http://127.0.0.1:8000
</pre>
<p>You can also specify which technology/server to use and how many threads to run, based on your environment’s CPU threads, as shown below.</p>
<pre class="language-bash hljs">php artisan octane:start --workers=4 --server=roadrunner
</pre>
<h2 id="benchmarking-app-servers-autocannon">Benchmarking app servers with AutoCannon</h2>
<p>The project used in this post is a simple page with a little populated data. We will be changing the app server (RoadRunner, Swoole, and Nginx) at every stage of the test, so as to evaluate and compare the performance of each server by using AutoCannon.</p>
<p>This process will help you in making a decision on which app server is most suitable for your project.</p>
<p>AutoCannon is capable of generating lots of traffic, even when running on a single multi-core CPU; we will be running a benchmark for 10 seconds with 100 concurrent connections, 10 pipeline connections, and 3 worker threads to fire requests.</p>
<h3 id="swoole"><strong>Swoole</strong></h3>
<pre class="language-bash hljs">❯ autocannon http://127.0.0.1:8000 -d 10 -w 3 -c 100 -p 10
Running 10s test @ http://127.0.0.1:8000
100 connections with 10 pipelining factor
3 workers

/
┌─────────┬────────┬─────────┬─────────┬─────────┬────────────┬───────────┬─────────┐
│ Stat    │ 2.5%   │ 50%     │ 97.5%   │ 99%     │ Avg        │ Stdev     │ Max     │
├─────────┼────────┼─────────┼─────────┼─────────┼────────────┼───────────┼─────────┤
│ Latency │ 201 ms │ 1773 ms │ 3175 ms │ 3304 ms │ 1854.07 ms │ 657.15 ms │ 4201 ms │
└─────────┴────────┴─────────┴─────────┴─────────┴────────────┴───────────┴─────────┘
┌───────────┬─────┬──────┬─────────┬─────────┬─────────┬─────────┬─────────┐
│ Stat      │ 1%  │ 2.5% │ 50%     │ 97.5%   │ Avg     │ Stdev   │ Min     │
├───────────┼─────┼──────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ Req/Sec   │ 0   │ 0    │ 503     │ 576     │ 475.3   │ 166.71  │ 440     │
├───────────┼─────┼──────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ Bytes/Sec │ 0 B │ 0 B  │ 4.13 MB │ 4.73 MB │ 3.91 MB │ 1.37 MB │ 3.62 MB │
└───────────┴─────┴──────┴─────────┴─────────┴─────────┴─────────┴─────────┘

Req/Bytes counts sampled once per second.
# of samples: 30

6k requests in 10.02s, 39.1 MB read
</pre>
<h3 id="roadrunner"><strong>Roadrunner</strong></h3>
<pre class="language-bash hljs">❯ autocannon http://127.0.0.1:8000 -d 10 -w 3 -c 100 -p 10
Running 10s test @ http://127.0.0.1:8000
100 connections with 10 pipelining factor
3 workers

-
┌─────────┬────────┬─────────┬─────────┬─────────┬────────────┬───────────┬─────────┐
│ Stat    │ 2.5%   │ 50%     │ 97.5%   │ 99%     │ Avg        │ Stdev     │ Max     │
├─────────┼────────┼─────────┼─────────┼─────────┼────────────┼───────────┼─────────┤
│ Latency │ 119 ms │ 1692 ms │ 2314 ms │ 2587 ms │ 1617.82 ms │ 574.62 ms │ 3153 ms │
└─────────┴────────┴─────────┴─────────┴─────────┴────────────┴───────────┴─────────┘
┌───────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┬─────────┐
│ Stat      │ 1%      │ 2.5%    │ 50%     │ 97.5%   │ Avg     │ Stdev   │ Min     │
├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ Req/Sec   │ 366     │ 366     │ 544     │ 861     │ 546.3   │ 124.68  │ 366     │
├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┼─────────┤
│ Bytes/Sec │ 3.01 MB │ 3.01 MB │ 4.47 MB │ 7.08 MB │ 4.49 MB │ 1.02 MB │ 3.01 MB │
└───────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┴─────────┘

Req/Bytes counts sampled once per second.
# of samples: 30

6k requests in 10.02s, 44.9 MB read
</pre>
<p>To benchmark the app via Nginx, we need to setup Laravel <a href="https://laravel.com/docs/9.x/valet" target="_blank" rel="noopener">Valet</a> , and then proceed to run the same command; but in this case, we use <code>127.0.0.1</code>, because it runs on port <code>80</code>.</p>
<pre class="language-bash hljs">❯ autocannon http://127.0.0.1 -d 10 -w 3 -c 100 -p 10
Running 10s test @ http://127.0.0.1
100 connections with 10 pipelining factor
3 workers

/
┌─────────┬────────┬────────┬────────┬────────┬───────────┬─────────┬────────┐
│ Stat    │ 2.5%   │ 50%    │ 97.5%  │ 99%    │ Avg       │ Stdev   │ Max    │
├─────────┼────────┼────────┼────────┼────────┼───────────┼─────────┼────────┤
│ Latency │ 111 ms │ 169 ms │ 202 ms │ 235 ms │ 166.22 ms │ 23.1 ms │ 290 ms │
└─────────┴────────┴────────┴────────┴────────┴───────────┴─────────┴────────┘
┌───────────┬─────────┬─────────┬─────────┬─────────┬─────────┬────────┬─────────┐
│ Stat      │ 1%      │ 2.5%    │ 50%     │ 97.5%   │ Avg     │ Stdev  │ Min     │
├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼────────┼─────────┤
│ Req/Sec   │ 4551    │ 4551    │ 5691    │ 6343    │ 5718.8  │ 464.3  │ 4548    │
├───────────┼─────────┼─────────┼─────────┼─────────┼─────────┼────────┼─────────┤
│ Bytes/Sec │ 2.13 MB │ 2.13 MB │ 2.67 MB │ 2.98 MB │ 2.68 MB │ 218 kB │ 2.13 MB │
└───────────┴─────────┴─────────┴─────────┴─────────┴─────────┴────────┴─────────┘

Req/Bytes counts sampled once per second.
# of samples: 32

0 2xx responses, 62950 non 2xx responses
64k requests in 10.01s, 29.5 MB read
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>According to the bechmark analysis, you will notice that Nginx ran a total number of <strong>64k</strong> requests, which is a lot more than the requests made by both Swoole and RoadRunner, which is around <strong>12k</strong>, or 6k each.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>In conclusion, I would consider Swoole and RoadRunner a better option in this scenario, but that doesn’t necessarily mean Nginx or other web servers such as Apache and lighttpd should not be considered, as they are still used by many to serve millions of websites with large concurrent users and are still great choices.</p>
<p>Thanks for reading, let me know your own opinion about Laravel Octane (or other web servers) and which you like using in your own projects.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-135082" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/optimizing-laravel-apps-octane/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/optimizing-laravel-apps-octane/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-135082" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/optimizing-laravel-apps-octane/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-135082" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/optimizing-laravel-apps-octane/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/optimizing-laravel-apps-octane/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>ARIA-live regions for JavaScript frameworks - LogRocket Blog</title>
			<link>https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>ARIA-live regions for JavaScript frameworks - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/">ARIA-live regions for JavaScript frameworks - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/cristiandiaz/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/07/cristian-diaz.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/07/cristian-diaz.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/cristiandiaz/">
Cristian Diaz <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Cristian is a frontend developer from Colombia. He enjoys writing about what he learns and is focusing his career on helping to make web content more accessible to everyone. His main areas of expertise are HTML, CSS, and web accessibility.</span>
</div>
</div>
<h1 class="posttitle">ARIA-live regions for JavaScript frameworks</h1>
<p>
<span class="post-date"><time class="post-date">
March 6, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">14 min read</span>
<span class="wordcount">3951</span>
<span class="logrocket_editor">107</span>
</p>
</div>
<article class="article-post">
<p>Modern web applications are filled with status updates: toasts, notifications, a loading screen, and in general, any relevant change you are noticing on screen. A sighted user will be able to notice these status updates, but what about screen reader users? You need to ensure that they receive these important updates as well.</p>
<p>This is where <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions">ARIA-live regions</a> come into play. It’s a combination of markup and ARIA roles and properties; when content is injected into it with JavaScript, it will announce any change in its content to assistive technology devices. Having a solid understanding ARIA-live regions is helpful for making apps and websites that are accessible for everyone.</p>
<p>In this article, I’ll discuss available options you can use to create ARIA-live regions, each with different purposes. I’ll also demonstrate some tools you can use to create ARIA-live regions in modern JavaScript frameworks like React, Angular, and Vue.js.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#aria-live-region-attributes">ARIA-live region attributes</a>
<ul >
<li><a href="#aria-live"><code>aria-live</code></a></li>
<li><a href="#aria-atomic"><code>aria-atomic</code></a></li>
<li><a href="#aria-relevant"><code>aria-relevant</code></a></li>
</ul>
</li>
<li><a href="#types-aria-live-regions">Types of ARIA-Live regions</a>
<ul >
<li><a href="#role-status"><code>role="status"</code></a></li>
<li><a href="#role-alert"><code>role="alert"</code></a></li>
<li><a href="#role-log"><code>role="log"</code></a></li>
</ul>
</li>
<li><a href="#other-live-region-roles">Other live region roles</a>
<ul >
<li><a href="#output"><code>&lt;output></code></a></li>
</ul>
</li>
<li><a href="#creating-aria-live-regions-javascript-frameworks">Creating ARIA-live regions for JavaScript frameworks</a>
<ul >
<li><a href="#liveannouncer-angular"><code>LiveAnnouncer</code> – Angular</a></li>
<li><a href="#live-utils-vue-js">Live utils – Vue.js</a></li>
<li><a href="#react-a11y-announcer-react"><code>react-a11y-announcer</code> – React</a></li>
</ul>
</li>
</ul>
<h2 id="aria-live-region-attributes">ARIA-live region attributes</h2>
<p>There are multiple ways to make an ARIA-live region, including some ARIA roles with ready-made markup. However, you can also use a <code>&lt;div></code> along with specific ARIA-live region attributes to create a custom live region. These attributes can have quite inconsistent results between different assistive technologies, so keep that in mind before attempting to create a custom live region markup by yourself. A little later in the article, we’ll review the ARIA roles.</p>
<h3 id="aria-live"><code>aria-live</code></h3>
<p>The <code>aria-live</code> attribute defines at what moment assistive technologies will announce a change of content to the live region. This attribute has three values: <code>off</code>, <code>polite</code>, and <code>assertive</code>. <code>off</code> means the content will not be announced, so let’s focus on the other two attributes:</p>
<p>The <code>polite</code> attribute will set up the region to wait until the screen reader announces the content is reading to announce whatever was injected in the live region.</p>
<p>On the other hand, an <code>assertive</code> live region will announce the content immediately, interrupting any other action a screen reader is doing at the moment. For this reason, <code>assertive</code> live regions should be used when you need to provide critical or time-sensitive information to assistive technology users.</p>
<h3 id="aria-atomic"><code>aria-atomic</code></h3>
<p>The <code>aria-atomic</code> attribute will tell screen readers if the live region’s content will be announced in its entirety or only the parts that receive a change.</p>
<p>If you set this attribute to <code>false</code>, the live region will only announce the content that has changed. If you set it to <code>true</code>, it will announce all the content at once. To further clarify, let’s suppose we have this live region:</p>
<pre class="language-html hljs">&lt;div aria-live="polite">
  &lt;p>The amount spent is of &lt;span>$25.00&lt;/span>&lt;/p>
&lt;/div>
</pre>
<p>If we add the <code>aria-atomic</code> attribute and then change the content inside the <code>span</code> to $30.00, this is what should happen:</p>
<pre class="language-html hljs">&lt;div aria-live="polite" aria-atomic="false">
  &lt;p>The amount spent is of &lt;span>$30.00&lt;/span>&lt;/p>
&lt;/div>
</pre>
<p>If the attribute’s value is <code>false</code>, like above, it will just announce the content in the <code>span</code>. In this case, it will say “$30.00.” If the attribute’s value is <code>true</code>, it will announce the entire string. In this case, it will say “The amount spent is $30.00.”</p>
<p>At least this is how it should work in theory. According to <a href="https://a11ysupport.io/tech/aria/aria-atomic_attribute">aria-atomic tests made by a11ysupport</a>, some screen readers (mainly JAWS) have issues reading an inner content’s change when the attribute is set to <code>false</code>. So if you’re going to use this attribute, keep this in mind.</p>
<h3 id="aria-relevant"><code>aria-relevant</code></h3>
<p>The <code>aria-relevant</code> attribute allows you to specify to assistive technologies the type of updates you want the live region to announce.</p>
<p>This attribute has multiple values and you can add several of them separated by a space:</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>additions</code></td>
<td>Announces when a new node is added inside the live region</td>
</tr>
<tr>
<td><code>text</code></td>
<td>Announces when any text or text alternative (like <code>aria-label</code> or <code>alt</code> for <code>img</code> elements) is added inside the live region</td>
</tr>
<tr>
<td><code>removals</code></td>
<td>Announces when any text or text alternative is removed from the live region</td>
</tr>
<tr>
<td><code>additions text</code> (default)</td>
<td>Announces text changes and additions of nodes inside the live region</td>
</tr>
<tr>
<td><code>all</code></td>
<td>Announces any kind of change inside the live region (the equivalent of writing <code>additions text removals</code>)</td>
</tr>
</tbody>
</table>
<p>The support for this attribute is quite inconsistent. As you can see in <a href="https://a11ysupport.io/tests/tech__aria__aria-relevant">a11ysupport’s entry about <code>aria-relevant</code></a>, it only has partial support. Mainly, it fails to make a differentiation in behavior between <code>additions</code> and <code>additions text</code>. Even more importantly, it directly fails to behave as needed with the <code>removals</code> attribute with most screen readers. So, keep this in mind if you plan to use this attribute.</p>
<h2 id="types-aria-live-regions">Types of ARIA-live regions</h2>
<p>Now that we’ve reviewed how to create a custom ARIA-live region, let’s take a look at using ARIA <code>roles</code> with prebuilt markup.</p>
<h3 id="role-status"><code>role="status"</code></h3>
<p>According to <a href="https://www.w3.org/WAI/WCAG22/Techniques/aria/ARIA22">W3C specs</a>, <code>role="status"</code> is created to “advisory information for the user but is not important enough to justify an <code>alert</code>” In other words, this attribute is created to give users information about any relevant change that does not require immediate attention or action.</p>
<p><code>role="status"</code> is great for things like message notifications, success messages, or any type of event that is not urgent and can be attended to at any time. This region has the implicit attributes of <code>aria-live="polite"</code> and <code>aria-atomic="true"</code>. However, according to <a href="https://a11ysupport.io/tests/tech__aria__status-role-named">a11ysupport’s tests on the <code>status</code> role</a>, Orca (Linux’s screen reader) and NVDA won’t take into consideration the <code>aria-atomic</code> implicit value for <code>role="status"</code>. Therefore, I suggest that when you use this live region, you add the <code>aria-atomic="true"</code> attribute in an explicit form, like so:</p>
<pre class="language-html hljs">&lt;div role="status" aria-atomic="true">
  Your message was successfully sent!
&lt;/div>
</pre>
<p>Other than that, <code>role="status"</code> is a pretty well-supported ARIA role and will likely be one of your main tools for creating live regions.</p>
<h3 id="role-alert"><code>role="alert"</code></h3>
<p><code>role="alert"</code> is created to provide the user with information that is both important and time-sensitive. Alerts that inform the user that their session is about to end, that information wasn’t saved, or any other important error message are good use cases for <code>role="alert"</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>This region has the implicit values of <code>aria-atomic="true"</code> and <code>aria-live="assertive"</code>. Due to how “intrusive” it feels – it will stop any action the screen reader is doing – remember to use it sparingly and only when needed. Here’s how the markup for this type of live region should look:</p>
<pre class="language-html hljs">&lt;div role="alert">
  Your changes were not saved due to a network error. Please try again
&lt;/div>
</pre>
<p>If you need to add interactive elements to a status message with this role, use <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/alertdialog_role"><code>role="alertdialog"</code></a> instead of <code>role="alert"</code>. For example, it may be expected that the user will close a status message with a <code>&lt;button></code>.</p>
<h3 id="role-log"><code>role="log"</code></h3>
<p>According to <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/log_role">W3C specs</a>, the <code>role="log"</code> role creates a live region “where new information is added in a meaningful order and old information may disappear.” This is useful in cases where old information is stored inside a live region and there is a certain order that needs to be respected, like messaging history or a change log.</p>
<p>This live region has the implicit values <code>aria-live="polite"</code> and <code>aria-atomic="false"</code>, meaning all changes are announced without interrupting any action. Also, it will just announce the part of the markup that is being changed.</p>
<p>If you change the <code>aria-atomic</code> value to <code>true</code>, it will announce all the content each time new content is injected, which is not desirable. Here’s how the markup for this type of live region might look:</p>
<pre class="language-html hljs">&lt;div role="log">
  &lt;ul aria-label="Message story">
    &lt;li>
      &lt;span>Gabrielle: &lt;/span> Hi, I'm Gabrielle from XYZ Co. How may I help you?
    &lt;/li>
    &lt;li>
      &lt;span>Diana: &lt;/span> Hi, I'm Diana. I need to cancel my appointment.
    &lt;/li>
  &lt;/ul>
&lt;/div>
</pre>
<p>The <code>role="log"</code> live region has decent support, except for Narrator with Microsoft Edge, as you can see in <a href="https://a11ysupport.io/tests/tech__aria__log-role-named">a11ysupport’s test on <code>role="log"</code></a>. If Narrator and Microsoft Edge are scenarios that need to be considered, you might be better off using a custom region with <code>aria-live="polite"</code> and <code>aria-atomic="false"</code>. The <code>log</code> role is not needed as often as the <code>status</code> and <code>alert</code> roles, but it’s still important to keep it in mind for certain use cases.</p>
<h2 id="other-live-region-roles">Other live region roles</h2>
<p>There are a couple of extra live region roles, <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/marquee_role"><code>marquee</code></a> and <a href="&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/timer_role"><code>timer</code></a>, but due to their poor support, using them is not recommended. By default, both have the attribute <code>aria-live="off"</code> which means they won’t announce any change of content inside the live regions.</p>
<p>According to <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/timer_role">W3C specs</a>, <code>role="timer"</code> was created to contain “a numerical counter which indicates an amount of elapsed time from a start point, or the time remaining until an endpoint.” So, this role would be ideal for either a timer function (to indicate time elapsed) or a stopwatch function (to indicate time remaining).</p>
<p><code>role="marquee"</code> was created to add nonessential information that is continually updated. Things like stock price changes or charts would be ideal for this type of live region.</p>
<p>Since these roles are unsupported, it may be helpful to use a workaround. For example, to provide an alert about the remaining time left to complete a task, you could use <code>role="status</code> or <code>role="alert"</code> instead.</p>
<h3 id="output"><code>&lt;output></code></h3>
<p>According to <a href="https://html.spec.whatwg.org/multipage/form-elements.html#the-output-element">HTML specs</a>, the <code>&lt;output></code> HTML element is designed to expose “the result of a calculation performed by the application, or the result of a user action.”</p>
<p>This element is not an ARIA-live role. It should be used only inside or outside forms to show screen reader users the result of a calculation or action within the form. This element has the following attributes:</p>
<ul>
<li><code>for</code>: This is a list of the related form element IDs, separated by spaces</li>
<li><code>form</code>: This attribute helps to associate the <code>output</code> element with any form; it’s only necessary if you use it outside a form element</li>
<li><code>name</code>: This represents the element’s name; it works the same as any <code>input</code> element that goes inside a form</li>
</ul>
<p>Here are some examples of the <code>&lt;output></code> element:</p>
<pre class="language-html hljs">&lt;form>
  &lt;input type="number" id="b" name="b" value="1" /> +
  &lt;input type="number" id="a" name="a" value="3" /> =
  &lt;output name="result" for="a b">4&lt;/output>
&lt;/form>
</pre>
<p>In this case, the <code>&lt;output></code> element is inside a form, so it only needs to have the <code>for</code> attribute with the list of elements you want that contribute to its value:</p>
<pre class="language-html hljs">&lt;form action="/results" role="search" id="search-form">
  &lt;label for="search-input">Search articles&lt;/label>
  &lt;input type="search" id="search-input" />
  &lt;input type="submit" value="Submit search" />
&lt;/form>
&lt;p>There are &lt;output for="search" form="search-form">&lt;/output> articles&lt;/p>
</pre>
<p>Here the<code>&lt;output></code> element is outside of the form, so it’s preferable to use not just the <code>f</code>or attribute, but also the <code>form</code> attribute to create a relation between the live region and the form.</p>
<p>This element is very useful and some people have even used it to create live regions that you’d normally make with <code>role="status"</code> or <code>role="alert"</code>. However, keep in mind its screen reader support needs some extra work. If you want to know more, you can check <a href="https://www.scottohara.me/blog/2019/07/10/the-output-element.html#page_banner">Scott O’Hara’s article about the <code>output</code> element</a>.</p>
<p>Now, with all possibilities for ARIA-live regions explained, it’s time to investigate what options are available to make live regions in modern JavaScript frameworks!</p>
<h2 id="creating-aria-live-regions-javascript-frameworks">Creating ARIA-live regions with JavaScript frameworks</h2>
<p>Here I’m going to show you how to create live regions using the three most popular frontend frameworks: React, Angular, and Vue. After some research, I’ve decided to use three dependencies – one for each framework:</p>
<ul>
<li><a href="https://material.angular.io/cdk/a11y/overview"><code>LiveAnnouncer</code></a> from Angular</li>
<li><a href="https://jinjiang.dev/vue-a11y-utils/">Live utils</a> from Vue</li>
<li><a href="https://www.npmjs.com/package/react-a11y-announcer"><code>react-a11y-announcer</code> from React</a></li>
</ul>
<p>Here’s the scenario for our demonstration. We’ll have a <code>&lt;button></code> that will let us end a shopping process. When the user clicks the <code>&lt;button></code>, the message “Your purchase has been successful!” will appear inside a live region.</p>
<p>But first, I want to set a couple of ground rules:</p>
<ol>
<li>I’m going to use these tools strictly as explained in their respective documentation. It may be possible that some of these tools could be used in a more advanced way for better results, but by sticking to the documentation we’ll be able to check if the default implementation works well</li>
<li>I want to check if these tools let me create <code>polite</code> and <code>assertive</code> live regions, so I’ll evaluate the markup that the tools generate</li>
</ol>
<p>With that explained, let’s dive in!</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h3 id="liveannouncer-angular"><code>LiveAnnouncer</code> – Angular</h3>
<p>Angular offers the <code>LiveAnnouncer</code> package in its Component Dev Kit to create live regions. I started by adding this markup in the <code>app.component.html</code> file:</p>
<pre class="language-html hljs">&lt;div>
  &lt;h1>Aria Live region text with <code>LiveAnnouncer</code>&lt;/h1> &lt;button (click)="announce()">Complete your purchase!&lt;/button> &lt;/div></pre>
<p>Then, I went to the <code>app.components.ts</code> file and imported <code>LiveAnnouncer</code> to create the <code>announce()</code> function:</p>
<pre class="language-typescript hljs">import { Component } from "@angular/core";
import { LiveAnnouncer } from "@angular/cdk/a11y";

@Component({
  selector: "app-root",
  templateUrl: "./app.component.html",
})
export class AppComponent {
  constructor(private announcer: LiveAnnouncer) {}

  public announce() {
    this.announcer.announce("Your purchase has been successful!");
  }
}</pre>
<p>Let’s check what kind of markup it creates for our live region:</p>
<pre class="language-html hljs">&lt;div class="cdk-live-announcer-element cdk-visually-hidden" aria-atomic="true" aria-live="polite" id="cdk-live-announcer-6">&lt;/div>
</pre>
<p>When a user clicks on the <code>&lt;button></code>, the string “Your purchase has been successful!” will be added to the element, effectively announcing the content to assistive technologies:</p>
<pre class="language-html hljs">&lt;div class="cdk-live-announcer-element cdk-visually-hidden" aria-atomic="true" aria-live="polite" id="cdk-live-announcer-6">
  Your purchase has been successful!
&lt;/div>
</pre>
<p>If we need to create an <code>assertive</code> live region, we can add a parameter to <code>this.announcer.announce</code> to specify that we want an <code>assertive</code> live region:</p>
<pre class="language-typescript hljs">public announce() {
  this.announcer.announce("Your purchase has been successful!", "assertive");
}
</pre>
<p>Here’s the resulting markup:</p>
<pre class="language-html hljs">&lt;div class="cdk-live-announcer-element cdk-visually-hidden" aria-atomic="true" aria-live="assertive" id="cdk-live-announcer-7">
  Your purchase has been successful!
&lt;/div>
</pre>
<p><code>LiveAnnouncer</code> approaches the task of creating live regions by adding the attributes <code>aria-atomic="true"</code> and <code>aria-live</code> (<code>polite</code> or <code>assertive</code>) depending on your needs.</p>
<p>This approach will work for assistive technology, but as I mentioned before, it’s preferable to use more appropriate ARIA roles like <code>status</code> or <code>alert</code> because they add more context to assistive technology users. Just to give an example, the <code>alert</code> role will be effectively announced as an alert message by NVDA by narrating: “Alert. Your purchase has been successful!”</p>
<p>I am probably missing more settings, but as far as I have found, those are the options we receive with <code>LiveAnnouncer</code> and it works! Personally, though, I’d prefer to use custom markup just to be sure a screen reader user doesn’t miss any important context when a live region appears.</p>
<h3 id="live-utils-vue-js">Live utils – Vue.js</h3>
<p>Live Utils is part of the <a href="https://github.com/Jinjiang/vue-a11y-utils"><code>vue-a11y-utils</code></a> library. It is composed of two utils called <code>Live</code>, creating a context where it adds the live region and a function called <code>useLive()</code> that creates the live region.</p>
<p>I started by creating a single-file component called <code>LiveExample.vue</code>:</p>
<pre class="language-typescript hljs">&lt;template>
  &lt;h1>Vue live region example with Live Utils&lt;/h1>
  &lt;button @click="announce(message, isAssertive)">
    Complete your purchase!
  &lt;/button>
&lt;/template>

&lt;script setup>
  import { ref } from "vue";
  import { useLive } from "vue-a11y-utils";
  const message = ref("Your purchase has been successful");
  const isAssertive = ref(false);
  const [announce] = useLive();
&lt;/script>
</pre>
<p>In this component, I used <code>useLive</code> to create the live region when the user clicks the <code>&lt;button></code>. The function has two parameters: a <code>message</code> and a Boolean value that determines if the live region is <code>assertive</code> (if it’s <code>true</code>) or <code>polite</code> (if it’s <code>false</code>).</p>
<p>Next, I imported the component to the <code>App.vue</code> file. I needed to create the context where the live region will be shown, so I had to call the component <code>Live</code> to make it work:</p>
<pre class="language-typescript hljs">&lt;template>
  &lt;Live>
    &lt;live-example />
  &lt;/Live>
&lt;/template>

&lt;script setup>
  import { Live } from "vue-a11y-utils";
  import LiveExample from "@/components/LiveExample.vue";
&lt;/script>
</pre>
<p>This is where I faced my first problem because, in Vue a11y utils’ documentation, this context appears as <code>&lt;VueLive></code>, not <code>&lt;Live></code>, but if you try to use <code>VueLive</code>, you’ll see the error message in your console:</p>
<p><code>“export 'VueLive' (imported as 'VueLive') was not found in 'vue-a11y-utils' (possible exports: FocusTrap, Live, ariaToAttrs, directiveAria, genId, getTabindexByRole, useGlobalHotkey, useHotkey, useLive, useTravel)”</code></p>
<p>Well, this error is not hard to fix. Let’s get straight to the point and check the live region output:</p>
<pre class="language-html hljs">&lt;div >
  &lt;div role="log" aria-live="assertive" aria-busy="false">&lt;/div>
  &lt;div role="log" aria-live="assertive" aria-busy="false">&lt;/div>
  &lt;div role="log" aria-live="polite" aria-busy="false">&lt;/div>
  &lt;div role="log" aria-live="polite" aria-busy="false">&lt;/div>
&lt;/div>
</pre>
<p>This output has quite a lot of problems!</p>
<p>First, the rules inside of the <code>style</code> attribute are there to hide this container visually but not from screen readers. It is a good accessibility technique to hide certain elements with semantic values, like headings. However, with live regions, this strategy is debatable. In most cases, you’d also want to create visual feedback.</p>
<p>Second, for some reason, this container has four live regions and there are two copies of each one. This might have something to see with the <code>isBusy</code> attribute that the documentation mentions. However, since the same documentation mentions it’s experimental, I won’t take it into account. It feels unnecessarily redundant.</p>
<p>Finally, those live regions include the <code>log</code> role, which is only useful for some very specific cases due to its implicit value of <code>aria-atomic="false"</code>. Personally, I think this tool should have tried to create live regions with more flexible use cases.</p>
<p>In this example, If the <code>assertive</code> attribute is <code>false</code>, the messages will be injected into the third live region (the one with the <code>aria-live="polite"</code> attribute) when the user clicks the <code>&lt;button></code>. If the <code>assertive</code> attribute is set to <code>true</code>, the first live region will receive the content.</p>
<p>In the most basic sense, this tool works only for some specific cases that do not require visual feedback. I would not use this tool for common cases. I’d prefer to create a custom tool for this task if I’d be using Vue, or maybe use another dependency like <a href="https://github.com/vue-a11y/vue-announcer/tree/next"><code>vue-announcer</code></a>. I decided to go with Live Utils for this article because it appeared to have more recent updates, but the results are not ideal for common use cases.</p>
<h3 id="react-a11y-announcer-react"><code>react-a11y-announcer</code> – React</h3>
<p><a href="https://github.com/thinkcompany/react-a11y-announcer"><code>react-a11y-announcer</code></a> was created by Think Company. It creates a component called <code>Announcer</code> where you add the content of the live region. It’s quite easy to implement, you just need this component and a <code>useState</code>.</p>
<p>The documentation still uses a class syntax. This is OK (meaning it will work), but by modern standards, it just feels a little outdated. Instead, I decided to create this example with a more modern syntax.</p>
<p>Here’s the code I used in my <code>App.jsx</code> file:</p>
<pre class="language-javascript hljs">import Announcer from 'react-a11y-announcer';
import { useState } from "react";

export default function App() {

  const [announcement, setAnnouncement] = useState("")

  const handleClick = () => {
    setAnnouncement("Your purchase has been successful!")
  }

  return (
    &lt;div className="App">
      &lt;h1><code>react-a11y-announcer</code> test&lt;/h1> &lt;button onClick={handleClick}>Complete your purchase!&lt;/button> &lt;Announcer text={announcement} /> &lt;/div> ); }</pre>
<p>Here I added the live region’s content in a <code>useState</code>, created a function to change that state, and then added it to the <code>Announcer</code> component with the prop <code>text</code>.</p>
<p>Alright, let’s check the live region’s output:</p>
<pre class="language-html hljs">&lt;div aria-atomic="true" aria-live="polite" >
  &lt;p>Your purchase has been successful!&amp;nbsp;&lt;/p>
&lt;/div>
</pre>
<p>Just like Live Utils from Vue, <code>react-a11ly-announcer</code> creates a visually hidden live region, which is not ideal for the reasons I previously explained. But unlike Live Utils, it doesn’t have a prop of any kind to change if the live region is <code>polite</code> or <code>assertive</code>.</p>
<p><code>react-a11ly-announcer</code> created a live region that is <code>polite</code> by default and (according to the documentation) can’t be changed. So, according to my initial rules for this project, I’d have to say this dependency might not be the best one to do the work.</p>
<p>However, after experimenting a bit, I noticed that you can add more props to the <code>Announcer</code> component. You can add your desired <code>role</code>, attributes, and even a <code>className</code> that will remove the <code>style</code> attribute, making it visible. So, in theory, if I wanted, for example, a live region with the <code>alert</code> role, I could do this:</p>
<pre class="language-html hljs">&lt;Announcer text={announcement} role="alert" aria-live="assertive" className="status" />
</pre>
<p>Remember, it has the attribute <code>aria-live="polite"</code> by default, so you need to change it manually. This workaround solves our issue, but I have two problems with that:</p>
<ol>
<li>It’s not in the documentation, so most people would likely miss out on this functionality</li>
<li>If I need to add those props to create a live region, then why would I need this dependency? I would be better off creating a component on my own instead of using a third-party package. It would be more practical to create a component for my example because I would not need to add the <code>aria-live="assertive"</code> attribute (since I’m adding a <code>role="alert"</code> by myself)</li>
</ol>
<p>You can fix the mistakes <code>react-a11y-announcer</code> has by default, but it still doesn’t feel very intuitive. If you need to use it for the specific case of creating a <code>polite</code> live region that doesn’t need to be shown on screen, then use this package. Otherwise, you’d be better off creating it on your own.</p>
<h2 id="conclusion">Conclusion</h2>
<p>My intention with this article is not by any means to denigrate people’s efforts to build tools that use ARIA-live regions to help create more accessible applications. However, as we saw in this article, there’s lots of room for improvement.</p>
<p>When you create accessible applications and use any external package, it’s very important to test the results and ensure the package suits your use case. This is only possible if you have a fundamental understanding of what you want to test. I hope this article has provided some insights into ARIA-live regions and how to build one according to your specific needs.</p><div class="code-block code-block-28" >
<div class="blog-plug inline-plug js-libraries-plug"><h2>Are you adding new JS libraries to improve performance or build new features? What if they’re doing the opposite?</h2><p>There’s no doubt that frontends are getting more complex. As you add new JavaScript libraries and other dependencies to your app, you’ll need more visibility to ensure your users don’t run into unknown issues.</p>
<p><a href="https://lp.logrocket.com/blg/javascript-signup">LogRocket</a> is a frontend application monitoring solution that lets you replay JavaScript errors as if they happened in your own browser so you can react to bugs more effectively. </p><a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/10/errors-screenshot.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app’s performance, reporting metrics like client CPU load, client memory usage, and more.
</p><p>Build confidently — <a class="signup" href="https://lp.logrocket.com/blg/javascript-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
<meta>
.plug-poll {margin-bottom: 2rem;}
.code-block-30 .fadeIn {
    opacity:1 !important;
    height:auto !important;
}

.code-block-30 .fadeOut {
    opacity:0 !important;
}

.code-block-30 .wpcf7-email {margin: 15px 0;}

#plug-survey-errors, #plug-survey-help, #plug-survey-email  {opacity:0; height:1px; transition: all 1s;overflow:hidden; width: 100%;}

<meta>
<meta>
  jQuery("#plug-survey-framework input").click(function() {
  analytics.track('footer-poll', {
      'footer-poll-framework': jQuery(this).val()
    });
    jQuery('#plug-survey-framework').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-errors').delay(800).addClass('fadeIn');
  });
    jQuery("#plug-survey-errors input").click(function() {
    jQuery('#plug-survey-errors').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-help').delay(800).addClass('fadeIn');
  });
  
      jQuery("#plug-survey-help input").click(function() {
        analytics.track('footer-poll', {
      'footer-poll-help': jQuery(this).val()
    });
    jQuery('#plug-survey-help').delay(200).addClass('fadeout').delay(200).css('display', 'none');
    jQuery('#plug-survey-email').delay(800).addClass('fadeIn');
  });
  
  </meta>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-161527" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-161527" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-161527" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/aria-live-regions-for-javascript-frameworks/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Add stepper components to your React app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/add-stepper-components-react-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/add-stepper-components-react-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Add stepper components to your React app - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/add-stepper-components-react-app/">Add stepper components to your React app - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/shalithasuranga/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/04/shalitha-suranga.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/shalithasuranga/">
Shalitha Suranga <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Programmer | Author of Neutralino.js | Technical Writer</span>
</div>
</div>
<h1 class="posttitle">Add stepper components to your React app</h1>
<p>
<span class="post-date"><time class="post-date">
April 18, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2953</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<article class="article-post">
<p>Web developers develop web application interfaces with various UI elements, such as buttons, tabs, sliders, toggle buttons, and dropdowns. In some scenarios, these include wizard-like flows with several steps, such as in web apps that let users make a reservation: designers typically decompose the entire workflow into several steps, such as entering user details, making a payment, and receiving the booking confirmation. Then, they indicate the progress through the list of steps in a separate section.</p>
<p><img             class="aligncenter size-full wp-image-166964 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"    /><noscript><img               class="aligncenter size-full wp-image-166964" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"  /></noscript></p>
<p>These steps-based flow indicators are known as stepper components. A stepper component typically visualizes several steps and indicates the current progress by highlighting already completed steps. A stepper component is usually responsible for displaying the workflow progress, so we often need to switch form segments programmatically.</p>
<p>In this tutorial, I’ll explain several ways to add stepper components to your React apps with practical examples.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#implement-stepper-component-react">Ways to implement a stepper component in React</a>
<ul >
<li><a href="#using-react-stepper-horizontal">Using <code>react-stepper-horizontal</code></a></li>
<li><a href="#using-react-form-stepper">Using <code>react-form-stepper</code></a></li>
<li><a href="#importing-stepper-components-ui-kits">Importing stepper components from UI kits</a></li>
<li><a href="#building-stepper-component-from-scratch">Building a stepper component from scratch</a></li>
</ul>
</li>
<li><a href="#creating-stepper-components-react-stepper-horizontal">Creating stepper components with <code>react-stepper-horizontal</code></a>
<ul >
<li><a href="#creating-basic-stepper-component">Creating a basic stepper component</a></li>
<li><a href="#using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</a></li>
<li><a href="#customizing-styles">Customizing styles</a></li>
</ul>
</li>
<li><a href="#creating-stepper-components-react-form-stepper">Creating stepper components with <code>react-form-stepper</code></a>
<ul >
<li><a href="#using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</a></li>
<li><a href="#creating-custom-styles">Creating custom styles</a></li>
</ul>
</li>
<li><a href="#using-stepper-components-ui-kits">Using stepper components from UI kits</a>
<ul >
<li><a href="#mui">MUI</a></li>
<li><a href="#prime-react">Prime React</a></li>
</ul>
</li>
<li><a href="#creating-stepper-component-from-scratch">Creating a stepper component from scratch</a></li>
</ul>
<h2 id="implement-stepper-component-react">Ways to implement a stepper component in React</h2>
<p>In this section, we’ll check out the available stepper component development options and discuss when to use each!</p>
<p>Using a library for adding steppers is a good choice if you don’t use a fully-featured UI kit or don’t want to build a stepper widget from scratch. The following popular stepper libraries offer pre-developed, customizable React components:</p>
<h3 id="using-react-stepper-horizontal">Using <code>react-stepper-horizontal</code></h3>
<p><a href="https://www.npmjs.com/package/react-stepper-horizontal"><code>react-stepper-horizontal</code></a> is a library that lets you create stepper components with a pre-developed, pre-styled <code>Stepper</code> component. This npm module was initially released in 2016 and offers several props to control the component behavior and styling.</p>
<p>This library’s <a href="https://github.com/mu29/react-stepper">GitHub repository</a> doesn’t show much development activity, but it is highly usable in React apps because of its complete features and customizability.</p>
<h3 id="using-react-form-stepper">Using <code>react-form-stepper</code></h3>
<p><a href="https://www.npmjs.com/package/react-form-stepper"><code>react-form-stepper</code></a> is an alternative to the <code>react-stepper-horizontal</code> library and offers a Material-inspired, pre-developed <code>Stepper</code> component for React developers. This library was released in 2019 and has an actively maintained <a href="https://github.com/M0kY/react-form-stepper">GitHub repository</a>.</p>
<p>This package offers almost all customization features, similar to the <code>react-stepper-horizontal</code> package. Additionally, it offers some modern features like HOC (higher-order components)-based step definitions.</p>
<h3 id="&quot;importing-stepper-components-ui-kits">Importing stepper components from UI kits</h3>
<p>Many React developers use UI kits to develop their apps because UI kits offer all the generic components they need, so they don’t need to look for multiple-dependency libraries. Most modern React developers use MUI, React Bootstrap, or Prime React-like, fully-featured UI kits instead of writing their own UI elements. Most UI kits offer pre-developed stepper components, so we don’t need to install a dedicated stepper library if we use a fully-featured UI kit.</p>
<h3 id="building-stepper-component-from-scratch">Building a stepper component from scratch</h3>
<p>External packages increase your app bundle size (you can calculate this using <a href="https://bundlephobia.com/">BundlePhobia</a>), so adding a third-party package for every development requirement isn’t always a good choice. Also, third-party packages may not completely fulfill your design requirements and may bring features that you don’t even use. Writing your own stepper component is also an option by including only the required features.<br/>
Let’s start creating stepper components with the above methods!</p>
<h2 id="creating-stepper-components-react-stepper-horizontal">Creating stepper components with <code>react-stepper-horizontal</code></h2>
<p>Now, let’s make our first stepper component with the <code>react-stepper-horizontal</code> package, which offers a customizable, pre-developed <code>Stepper</code> component. First, create a new React project with <a href="https://blog.logrocket.com/getting-started-with-create-react-app-d93147444a27/">Create React App</a>, as follows:</p>
<pre class="language-bash hljs">npx create-react-app react-steppers-demo
cd react-steppers-demo
</pre>
<p>Next, install the stepper component library:</p>
<pre class="language-bash hljs">npm install react-stepper-horizontal
# --- or ---
yarn add react-stepper-horizontal
</pre>
<h3 id="creating-basic-stepper-component">Creating a basic stepper component</h3>
<p>Let’s create a basic stepper with this library. In this example, we’ll visualize a fixed, pre-defined set of steps for demonstration purposes. Add the following code to your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import Stepper from 'react-stepper-horizontal';
import './App.css';

function App() {
  const steps = [
    { title: 'User details' },
    { title: 'Payment' },
    { title: 'Booking confirmation' },
  ];
  const activeStep = 1;

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
    &lt;/div>
  );
}

export default App;
</pre>
<p>Run your app and check the web browser. You’ll see a pre-styled stepper component with three steps, as we defined in the source file:</p>
<p><img             class="aligncenter size-full wp-image-166964 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"    /><noscript><img               class="aligncenter size-full wp-image-166964" src="https://blog.logrocket.com/wp-content/uploads/2023/04/basic-stepper-component.png" alt="A basic stepper component" width="730" height="405"  /></noscript></p>
<p>Here, we rendered a basic stepper by providing three steps via the <code>steps</code> prop and highlighting the finished steps by setting the <code>activeStep</code> prop. Steps one and two are marked as done because <code>activeStep</code> is <code>1</code> (index 1 refers to the second element, since the index starts from 0).</p>
<h3 id="using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</h3>
<p>Now we can dynamically switch form segments based on the active step to make the app more interactive. Use the following code in your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import React, { useState } from 'react';
import Stepper from 'react-stepper-horizontal';
import './App.css';

function UserDetails() {
  return &lt;h2>User details&lt;/h2>;
}

function Payment() {
  return &lt;h2>Payment information&lt;/h2>;
}

function Confirmation() {
  return &lt;h2>Booking is confirmed&lt;/h2>;
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { title: 'User details' },
    { title: 'Payment' },
    { title: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}

export default App;
</pre>
<p>Here, we store the current step index with the <code>activeStep</code> state field and use the <code>setActiveStep</code> function to change the current step. The <code>getSectionComponent</code> function helps us to render a form component based on the current step.</p>
<p>Users can switch steps by clicking on the next and previous buttons. Look at the following preview:</p>
<figure id="attachment_166969"   class="wp-caption aligncenter"><img             class="size-full wp-image-166969 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/changing-active-step-stepper-component-react-hooks.gif" alt="Changing the active step in the stepper component via React Hooks" width="730" height="402"  /><noscript><img               class="size-full wp-image-166969" src="https://blog.logrocket.com/wp-content/uploads/2023/04/changing-active-step-stepper-component-react-hooks.gif" alt="Changing the active step in the stepper component via React Hooks" width="730" height="402"/></noscript><figcaption id="caption-attachment-166969" class="wp-caption-text">Changing the active step in the stepper component via React Hooks</figcaption></figure>
<p>This library lets you attach click handlers to each step. For example, the following setup helps you navigate between steps by clicking the completed steps:</p>
<pre class="language-javascript hljs">const steps = [
  { title: 'User details', onClick: () => setActiveStep(0) },
  { title: 'Payment', onClick: () => setActiveStep(1) },
  { title: 'Booking confirmation', onClick: () => setActiveStep(2) },
];
</pre>
<h3 id="customizing-styles">Customizing styles</h3>
<p>In the previous example, we didn’t use any custom styles for the stepper component, so the library used the default blue color appearance for the stepper component.</p>
<p>The <code>Stepper</code> component accepts several props for style configuration. Let’s use those props and customize styles in the stepper component. We’ll create a dark-color theme for our sample app.</p>
<p>First, activate the dark-color theme by adding the following CSS into your <code>App.css</code>:</p>
<pre class="language-css hljs">.container {
  height: 100vh;
  background: #111;
  color: #eee;
}
</pre>
<p>Next, implement a new wrapper component for the customized step and use it as follows in <code>App.js</code>:</p>
<pre class="language-javascript hljs">function CustomStepper(props) {
  return (
    &lt;Stepper
      { ...props }
      activeColor="#ffd813"
      defaultColor="#eee"
      completeColor="#ffbd13"
      activeTitleColor="#fff"
      completeTitleColor="#eee"
      defaultTitleColor="#bbb"
      circleFontColor="#000"
      completeBarColor="#ffbd13"/>
  );
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { title: 'User details' },
    { title: 'Payment' },
    { title: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div className="container">
      &lt;CustomStepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}
</pre>
<p>Here, we’ve created a custom stepper by setting various props in the <code>CustomStepper</code> component implementation:</p>
<pre class="language-javascript hljs">&lt;Stepper
  { ...props }
  activeColor="#ffd813"
  defaultColor="#eee"
  completeColor="#ffbd13"
  activeTitleColor="#fff"
  completeTitleColor="#eee"
  defaultTitleColor="#bbb"
  circleFontColor="#000"
  completeBarColor="#ffbd13"/>
</pre>
<p>Once you add the above code updates, you’ll see the following result:</p>
<figure id="attachment_166974"   class="wp-caption aligncenter"><img             class="size-full wp-image-166974 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/modifying-stepper-component-dark-color-theme.gif" alt="Modifying the stepper component for a dark-color theme" width="730" height="402"  /><noscript><img               class="size-full wp-image-166974" src="https://blog.logrocket.com/wp-content/uploads/2023/04/modifying-stepper-component-dark-color-theme.gif" alt="Modifying the stepper component for a dark-color theme" width="730" height="402"/></noscript><figcaption id="caption-attachment-166974" class="wp-caption-text">Modifying the stepper component for a dark-color theme</figcaption></figure>
<p>This library also lets you use custom opacities, margins, and stepper-bar styles. See all supported props in the <a href="https://www.npmjs.com/package/react-stepper-horizontal#api">official API documentation</a>.</p>
<h2 id="creating-stepper-components-react-form-stepper">Creating stepper components with <code>react-form-stepper</code></h2>
<p>The <code>react-form-stepper</code> package is a modern alternative to the <code>react-stepper-horizontal</code> package. Its API is more structured than the <code>react-stepper-horizontal</code> package, but offers almost the same feature set.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Let’s get started by installing the new library as follows on the same React project we’ve used before:</p>
<pre class="language-bash hljs">npm install react-form-stepper
# --- or ---
yarn add react-form-stepper
</pre>
<p>Next, add the following code to your <code>App.js</code> file to create a basic stepper. Make sure to remove the dark theme CSS from your <code>App.css</code>:</p>
<pre class="language-javascript hljs">import { Stepper } from 'react-form-stepper';
import './App.css';

function App() {
  const steps = [
    { label: 'User details' },
    { label: 'Payment' },
    { label: 'Booking confirmation' },
  ];
  const activeStep = 1;

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
    &lt;/div>
  );
}

export default App;
</pre>
<p>We’ve created a read-only, static stepper component by using the <code>steps</code> and <code>activeStep</code> props.</p>
<p>Run the app. You’ll see a stepper component with a default, Material-like styling, as shown in the following preview:</p>
<figure id="attachment_166977"   class="wp-caption aligncenter"><img             class="size-full wp-image-166977 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/read-only-static-stepper-material.png" alt="A read-only, static stepper with Material-like design" width="730" height="404"    /><noscript><img               class="size-full wp-image-166977" src="https://blog.logrocket.com/wp-content/uploads/2023/04/read-only-static-stepper-material.png" alt="A read-only, static stepper with Material-like design" width="730" height="404"  /></noscript><figcaption id="caption-attachment-166977" class="wp-caption-text">A read-only, static stepper with Material-like design</figcaption></figure>
<p>This library offers another coding style for constructing stepper components. For example, we can create the previous stepper in the following way:</p>
<pre class="language-javascript hljs">import { Stepper, Step } from 'react-form-stepper';
import './App.css';

function App() {
  const activeStep = 1;

  return (
    &lt;div>
      &lt;Stepper
        activeStep={activeStep}>
        &lt;Step label="User details"/>
        &lt;Step label="Payment"/>
        &lt;Step label="Booking confirmation"/>
      &lt;/Stepper>
    &lt;/div>
  );
}

export default App;
</pre>
<p>Here, we used <code>Stepper</code>, a Higher-Order Component (HOC), and <code>Step</code> components as children. You can use either the <code>steps</code> prop or the HOC coding style according to your preference.</p>
<h3 id="using-dynamic-sections-stepper-component">Using dynamic sections with the stepper component</h3>
<p>We can dynamically switch form components based on the active step to make the app more interactive. Use the following code in your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">import React, { useState } from 'react';
import { Stepper } from 'react-form-stepper';
import './App.css';

function UserDetails() {
  return &lt;h2>User details&lt;/h2>;
}

function Payment() {
  return &lt;h2>Payment information&lt;/h2>;
}

function Confirmation() {
  return &lt;h2>Booking is confirmed&lt;/h2>;
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { label: 'User details' },
    { label: 'Payment' },
    { label: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div>
      &lt;Stepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}

export default App;
</pre>
<p>The above code implements navigation buttons to switch the active step as we implemented for the <code>react-stepper-horizontal</code> example before. The above code will work as follows:</p>
<figure id="attachment_166979"   class="wp-caption aligncenter"><img             class="size-full wp-image-166979 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/dynamic-stepper-component-react-hooks.gif" alt="Implementing a dynamic stepper component with React Hooks" width="730" height="402"  /><noscript><img               class="size-full wp-image-166979" src="https://blog.logrocket.com/wp-content/uploads/2023/04/dynamic-stepper-component-react-hooks.gif" alt="Implementing a dynamic stepper component with React Hooks" width="730" height="402"/></noscript><figcaption id="caption-attachment-166979" class="wp-caption-text">Implementing a dynamic stepper component with React Hooks</figcaption></figure>
<p>You can attach a click handler to each completed step node, and enable navigation support in the stepper component as follows:</p>
<pre class="language-javascript hljs">const steps = [
  { label: 'User details', onClick: () => setActiveStep(0) },
  { label: 'Payment', onClick: () => setActiveStep(1) },
  { label: 'Booking confirmation', onClick: () => setActiveStep(2) },
];
</pre>
<h3 id="creating-custom-styles">Creating custom styles</h3>
<p>Earlier, the library rendered a default stepper component because we didn’t apply custom styles. This library lets you customize the component appearance via props. Let’s check the supported styling props by implementing a dark-color theme.</p>
<p>First, activate a dark-color theme by using the following CSS in your <code>App.css</code>:</p>
<pre class="language-css hljs">.container {
  height: 100vh;
  background: #111;
  color: #eee;
}
</pre>
<p>Next, use the following component implementations in your <code>App.js</code> file:</p>
<pre class="language-javascript hljs">function CustomStepper(props) {
  return (
    &lt;Stepper
      { ...props }
      connectorStateColors={true}
      connectorStyleConfig={{
        completedColor: '#ffbd13',
        activeColor: '#ffbd13',
        disabledColor: '#eee'
      }}
      styleConfig={{
        activeBgColor: '#ffd813',
        completedBgColor: '#ffbd13',
        inactiveBgColor: '#eee',
        activeTextColor: '#111',
        completedTextColor: '#222',
        inactiveTextColor: '#444'
      }}
      />
  );
}

function App() {
  const [ activeStep, setActiveStep ] = useState(0);

  const steps = [
    { label: 'User details' },
    { label: 'Payment' },
    { label: 'Booking confirmation' },
  ];

  function getSectionComponent() {
    switch(activeStep) {
      case 0: return &lt;UserDetails/>;
      case 1: return &lt;Payment/>;
      case 2: return &lt;Confirmation/>;
      default: return null;
    }
  }

  return (
    &lt;div className="container">
      &lt;CustomStepper
        steps={steps}
        activeStep={activeStep}/>
      &lt;div style={{padding: '20px'}}>
        { getSectionComponent()  }
        { (activeStep !== 0 &amp;&amp; activeStep !== steps.length - 1)
            &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep - 1) }>Previous&lt;/button>
        }
        { activeStep !== steps.length - 1
          &amp;&amp; &lt;button onClick={ () => setActiveStep(activeStep + 1) }>Next&lt;/button>
        }
      &lt;/div>
    &lt;/div>
  );
}
</pre>
<p>The above code implements a custom, dark-theme-ready stepper component via the <code>CustomStepper</code> wrapper component. Run your app and check the web browser. You’ll see a custom stepper component as follows:</p>
<figure id="attachment_166981"   class="wp-caption aligncenter"><img             class="size-full wp-image-166981 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/customized-stepper-component-dark-color-theme.gif" alt="A customized stepper component with a dark-color theme" width="730" height="402"  /><noscript><img               class="size-full wp-image-166981" src="https://blog.logrocket.com/wp-content/uploads/2023/04/customized-stepper-component-dark-color-theme.gif" alt="A customized stepper component with a dark-color theme" width="730" height="402"/></noscript><figcaption id="caption-attachment-166981" class="wp-caption-text">A customized stepper component with a dark-color theme</figcaption></figure>
<p>This library lets you customize the node connectors’ thickness, node border-radius, and node content via component props. See all supported props from the <a href="https://www.npmjs.com/package/react-form-stepper">official API documentation</a>.</p>
<h2 id="using-stepper-components-ui-kits">Using stepper components from UI kits</h2>
<p><a href="https://blog.logrocket.com/top-10-react-ui-libraries-kits/">Popular React UI kits</a> offer pre-developed, pre-styled stepper components, so you don’t need separate third-party libraries if you use a UI kit that provides a stepper component. The following React UI kits come with beautiful, fully-featured stepper components:</p>
<h3 id="mui">MUI</h3>
<figure id="attachment_166983"   class="wp-caption aligncenter"><img             class="size-full wp-image-166983 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/mui-stepper-preview.png" alt="MUI stepper preview" width="730" height="156"    /><noscript><img               class="size-full wp-image-166983" src="https://blog.logrocket.com/wp-content/uploads/2023/04/mui-stepper-preview.png" alt="MUI stepper preview" width="730" height="156"  /></noscript><figcaption id="caption-attachment-166983" class="wp-caption-text">MUI stepper preview</figcaption></figure>
<p>MUI offers the <a href="https://mui.com/material-ui/react-stepper/"><code>Stepper</code> component</a> for adding steppers to your React apps. The MUI stepper offers the following step and stepper types:</p>
<ul>
<li>Types of steps: editable, non-editable, mobile, optional</li>
<li>Types of steppers: horizontal, vertical, linear, non-linear</li>
</ul>
<p>MUI stepper comes with several sub-components and props for customization purposes. You can check the <a href="https://mui.com/material-ui/react-stepper/#api">official API documentation</a> to learn more. You can also see a live demo on CodeSandbox:</p>
<p><iframe  title="primereact_demo" src="https://codesandbox.io/embed/primereact-demo-yyc0vl?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<h3 id="prime-react">Prime React</h3>
<figure id="attachment_166988"   class="wp-caption aligncenter"><img             class="size-full wp-image-166988 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/prime-react-steps.png" alt="Prime React steps preview" width="730" height="117"    /><noscript><img               class="size-full wp-image-166988" src="https://blog.logrocket.com/wp-content/uploads/2023/04/prime-react-steps.png" alt="Prime React steps preview" width="730" height="117"  /></noscript><figcaption id="caption-attachment-166988" class="wp-caption-text">Prime React steps preview</figcaption></figure>
<p>Prime React offers the <a href="https://primereact.org/steps/"><code>Steps</code> component</a> for creating stepper components. It provides a basic stepper component and an interactive one where users can navigate among steps by clicking on each node. It also comes with various props for customization purposes.</p>
<p>You can browse API documentation from the <a href="https://primereact.org/steps/#api.Steps">official website</a> and see this component live on CodeSandbox:</p>
<p><iframe  title="primereact_demo" src="https://codesandbox.io/embed/primereact-demo-yyc0vl?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<h2 id="creating-stepper-component-from-scratch">Creating a stepper component from scratch</h2>
<p>If you need a minimal stepper, you don’t need to migrate to a large React UI kit or use a fully-featured stepper component library. Creating a shareable, minimal stepper component with React Hooks and some CSS is so easy and not so time-consuming.</p>
<p>I added this example’s source into a <a href="https://github.com/codezri/react-stepper-minimal">GitHub repository</a>, so you can clone it into your computer to get started:</p>
<pre class="language-bash hljs">git clone https://github.com/codezri/react-stepper-minimal.git
</pre>
<p>Install dependencies with the following command:</p>
<pre class="language-bash hljs">npm install 
# --- or ---
yarn install
</pre>
<p>Next, run the React app and see it on your web browser:</p>
<pre class="language-bash hljs">npm start 
# --- or ---
yarn start
</pre>
<p>Once you run the app, you’ll see the following result:</p>
<figure id="attachment_166992"   class="wp-caption aligncenter"><img             class="size-full wp-image-166992 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/stepper-component-built-from-scratch.gif" alt="A stepper component built from scratch" width="730" height="396"  /><noscript><img               class="size-full wp-image-166992" src="https://blog.logrocket.com/wp-content/uploads/2023/04/stepper-component-built-from-scratch.gif" alt="A stepper component built from scratch" width="730" height="396"/></noscript><figcaption id="caption-attachment-166992" class="wp-caption-text">A stepper component built from scratch</figcaption></figure>
<p>This minimal stepper component has the following features:</p>
<ul>
<li>Accepts <code>steps</code> as a string array and <code>activeStep</code> as an integer for rendering the stepper component based on arbitrary steps</li>
<li>Renders indices in circles based on steps and indicates completed, current, and inactive steps, with different styles accordingly</li>
<li>Renders and styles connector lines based on the current step</li>
<li>Changes the width and node positions adaptively according to the device resolution</li>
</ul>
<p>Let’s understand how it works.</p>
<p>Look at the <code>Stepper</code> component implementation below. It constructs the step elements from the <code>steps</code> prop as follows:</p>
<pre class="language-javascript hljs">steps.map((label, index) =>
  &lt;div className={getStepClasses(index)} key={index}>
    &lt;div>&lt;div className="circle">{index + 1}&lt;/div>&lt;/div>
    &lt;div className="label">{label}&lt;/div>
    { index &lt; steps.length - 1 &amp;&amp; &lt;div className="line">&lt;/div> }
  &lt;/div>
)
</pre>
<p>We used the <code>getStepClass</code> function to dynamically set a CSS class to style steps based on the active step. For example, if a particular step’s index is the active step index, we use the <code>step-active</code> CSS class:</p>
<pre class="language-javascript hljs">function getStepClasses(step) {
  let cls = 'step';
  if(activeStep === step) {
    cls += ' step-active';
  }
// ----
</pre>
<p>Each step element has a circle with the step number, label, and connector line. In <code>App.css</code>, we’ve styled these as <code>div</code>s:</p>
<pre class="language-css hljs">/* ---- */
.step-done .circle {
  background: #236ee8;
  color: #eee;
}

.step-inactive .circle {
  background: #bbb;
  color: #000;
}

.step-active .label {
  color: #000;
}
/* ---- */
</pre>
<p>This stepper component is so minimal and implements all the basic features that a generic web app needs. You can copy-paste this implementation and extend it as you wish. If your step element rendering logic grows complex, you can refactor the <code>Stepper</code> component by separating step-related code into a new component called <code>Step</code>.</p>
<h2>Conclusion</h2>
<p>In this tutorial, we discussed several available methods for creating stepper components in React apps. The <a href="https://www.npmjs.com/package/react-progress-stepper"><code>react-progress-stepper</code> package</a> lets you create animated steppers with progress bars. <a href="https://www.npmjs.com/package/react-stepper-js"><code>react-stepper-js</code></a> offers a minimal pre-developed stepper component.</p>
<p>As discussed, you can implement your own stepper for your project and publish it to the npm registry as an open-source project for other developers to use. Importing a stepper component from a popular UI kit is another productive approach.</p>
<p>Try to adhere to <a href="https://blog.logrocket.com/ux-design/">UI/UX principles</a> while adding stepper components to your apps regardless of your stepper component creation method (library, UI kit, or from scratch). For example, make sure that steppers render accordingly on different screen resolutions, use text colors that don’t blend with backgrounds, and match stepper colors with your global app theme.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-166962" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-166962" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-166962" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/add-stepper-components-react-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/add-stepper-components-react-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Adding CarPlay to your Flutter app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/adding-carplay-flutter-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/adding-carplay-flutter-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Adding CarPlay to your Flutter app - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/adding-carplay-flutter-app/">Adding CarPlay to your Flutter app - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/lewiscianci/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/Lewis-Cianci.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/Lewis-Cianci.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/lewiscianci/">
Lewis Cianci <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a passionate mobile-first developer, and I've been making apps with Flutter since it first released. I also use ASP.NET 5 for web. Given the chance, I'll talk to you for far too long about why I love Flutter so much.</span>
</div>
</div>
 <h1 class="posttitle">Adding CarPlay to your Flutter app</h1>
<p>
<span class="post-date"><time class="post-date">
October 24, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2145</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>It wasn’t so long ago that the highest level of integration that you could expect between your phone and your car was playing music from your phone to your car speakers.</p>
<p>As time has gone on, this has changed drastically, with the introduction of technologies like Android Auto and Apple CarPlay. Now your chosen audio, fast-food, or navigation app can beam itself directly to your cars entertainment system for easy interactions.</p>
<p>While the intent between Apple CarPlay and Android Audio are similar, in this article we’ll look at how we can complement our Flutter app with some CarPlay functionality. We will cover:</p>
<ul>
<li><a href="#setting-expectations">Setting our expectations</a>
<ul >
<li><a href="#carplay-app-requires-apple-approval">Your CarPlay app requires Apple’s specific approval</a></li>
<li><a href="#can-t-run-any-app-carplay">You can’t run any type of app on CarPlay</a></li>
</ul>
</li>
<li><a href="#setting-up-basics-carplay-flutter-app">Setting up the basics of our CarPlay Flutter app</a></li>
<li><a href="#adding-carplay-flutter-project">Adding CarPlay to our Flutter project</a></li>
<li><a href="#modifying-xcode-project">Modifying our XCode project</a></li>
<li><a href="#setting-up-entitlements">Setting up our entitlements</a></li>
<li><a href="#calling-carplay-functionality-flutter-app">Calling CarPlay functionality from our Flutter app</a></li>
<li><a href="#setting-root-template">Setting a </a><code><a href="#setting-root-template">RootTemplate</a></code></li>
</ul>
<h2 id="setting-expectations">Setting our expectations</h2>
<p>Now, as the writer of this article, I would just love to jump into the exciting technical details of how to do this (as I am sure you would like to read about them!). However, before I do that, we need to briefly mention some of the things that could possibly obstruct you from ever getting your Flutter CarPlay app off the ground.</p>
<p>As developers, we’re always keen to find a way forward to deliver a certain product or feature. When we’re told that we can’t do something, or that something isn’t supported, we’re tempted to do it anyway just to see if we can be the first to do something, or because we really want to deliver for our customers.</p>
<p>However, in the case of developing an app that makes use of Apple CarPlay, we need to define some realistic expectations. This article relates to Flutter apps, but would apply to any app that leverages CarPlay. Let’s dive in.</p>
<h3 id="carplay-app-requires-apple-approval">Your CarPlay app requires Apple’s specific approval</h3>
<p>Creating a Flutter app that has a CarPlay component is not as easy as just pulling a package in, setting up some values, and deploying it out to your users. Any app that uses CarPlay must specifically be approved by Apple.</p>
<p>This approval process can be long, sometimes to the order of months. There are also reports of Apple simply not getting back to developers who request this functionality. There’s nothing you can do or say to speed up this process — you are entirely on Apple’s timeline.</p>
<p>Even still, it’s not as simple as checking a box declaring that your app uses CarPlay. Your app must fall into a set of categories that Apple has pre-defined, which brings us to our next point.</p>
<h3 id="can-t-run-any-app-carplay">You can’t run any type of app on CarPlay</h3>
<p>To make use of CarPlay within your app, it has to fit into a certain set of categories that Apple prescribes. These categories are, essentially:</p>
<ul>
<li>Audio app</li>
<li>Communication app (like Teams, Slack, or Discord)</li>
<li>“Driving Task” app (such as logging mileage in the user’s car — new in iOS 16)</li>
<li>EV charging app</li>
<li>Fueling app (to pay for fuel from CarPlay — new in iOS 16)</li>
<li>Navigation app (like Google Maps or Apple Maps)</li>
<li>Parking app (to pay for parking)</li>
<li>Quick food ordering app (like DoorDash or Uber Eats)</li>
</ul>
<p>And that’s it.</p>
<p>Perhaps you feel that it’s draconian of Apple to enforce such restrictions on what you can and cannot develop for CarPlay. However, consider the premise of CarPlay: it’s something that people use in their car to complete basic tasks that should not distract them from driving.</p>
<p><img             class="aligncenter size-full wp-image-138481 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img1-Generic-photo-infotainment-system.jpeg" alt="Stock Photo Showing Infotainment System Displayed On Front Dashboard Of Car" width="730" height="487"    /><noscript><img               class="aligncenter size-full wp-image-138481" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img1-Generic-photo-infotainment-system.jpeg" alt="Stock Photo Showing Infotainment System Displayed On Front Dashboard Of Car" width="730" height="487"  /></noscript></p>
<p>If you developed an app that let people play Flappy Bird on their infotainment systems as they were driving, and they crashed their car, it’s true that the driver would be at fault for being so careless. But wouldn’t Apple bear some responsibility for allowing the app in the first place? In that light, the restrictions seem warranted.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>So, considering the above, we’d only consider adding CarPlay to our Flutter app if:</p>
<ul>
<li>It fits into one of the above categories</li>
<li>Our app would not be useless without CarPlay</li>
<li>We’ve printed out, read, and highlighted the <a href="https://developer.apple.com/carplay/documentation/CarPlay-App-Programming-Guide.pdf">54-page CarPlay App Programming Guide from Apple</a></li>
</ul>
<p>If we ignore the above and just send apps out for Apple’s endorsement, they will likely not take the time to help your app become compliant. They will reject your application, or worse, just never get back to you, leaving your app stranded without an official approval (which you can use) or a rejection (which you can possibly escalate).</p>
<p>In case Apple does not approve our app, it’s important for us not to pin the success or failure of our app on having the CarPlay feature, especially considering that Apple may not tell us why the app was rejected.</p>
<p>With all of that out of the way, let’s dig in to how to actually add CarPlay to our Flutter app.</p>
<h2 id="setting-up-basics-carplay-flutter-app">Setting up the basics of our CarPlay Flutter app</h2>
<p>For today’s example, we’ll be bringing CarPlay functionality to our fast-food ordering app, which is called EatUp. On our phone, this is what the app looks like:</p>
<p><img             class="aligncenter size-full wp-image-138496 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img2-Fast-food-ordering-app-demonstration.gif" alt="Phone Screen Showing Example Fast Food Ordering App Features In Action, From Order Screen To Pizza Options And Ordering Feature" width="345" height="730"  /><noscript><img               class="aligncenter size-full wp-image-138496" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img2-Fast-food-ordering-app-demonstration.gif" alt="Phone Screen Showing Example Fast Food Ordering App Features In Action, From Order Screen To Pizza Options And Ordering Feature" width="345" height="730"/></noscript></p>
<p>The focus of this article isn’t on <a href="https://blog.logrocket.com/pros-cons-flutter-app-development/">Flutter app development</a> itself, but rather on how to add CarPlay to the app. You are welcome to <a href="https://github.com/flutterfromscratch/using-flutter-with-carplay">peruse the source code</a> to understand how we achieved the layout shown above, but we won’t go into further detail here.</p>
<h2 id="adding-carplay-flutter-project">Adding CarPlay to our Flutter project</h2>
<p>The configuration steps for <code>flutter_carplay</code> are <a href="https://pub.dev/packages/flutter_carplay#get-started">available on pub.dev</a>, so let’s go through them now.</p>
<p>Note that in doing this, you will be making changes to your Flutter project. If you are adding CarPlay to an existing app, now would be an ideal time to commit your changes to source control. This way, you can easily revert your changes if they cause problems.</p>
<p>First of all, we want to add a reference to our <code>pubspec.yaml</code> in our dependencies:</p>
<pre class="language-yaml hljs">dependencies:
  flutter:
    sdk: flutter
  ...other dependencies...
  flutter_carplay: ^1.0.3
</pre>
<p>Then, we should run the <code>flutter pub get</code> command within our project. This will create a <code>Podfile</code> that helps integrate the native parts of <code>flutter_carplay</code> with our project.</p>
<p>Let’s open the <code>ios/Podfile</code> file and uncomment the top line, and set the global platform to iOS 14.0:</p>
<pre class="language-yaml hljs"># Uncomment this line to define a global platform for your project
platform :ios, '14.0'
</pre>
<p>Change directories into the <code>ios</code> folder and run <code>pod install --repo-update</code>.</p>
<h2 id="modifying-xcode-project">Modifying our XCode project</h2>
<p>Because CarPlay is a native iOS feature, we will need to make changes to our XCode project. Right-click on the <code>ios</code> folder, and then choose <code>Flutter > Open iOS module in Xcode</code>:</p>
<p><img             class="aligncenter size-full wp-image-138500 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img3-Popup-menu-modifying-XCode-project.png" alt="Demonstration Of Steps To Modify Xcode Project Showing Submenus After Right Clicking Ios Folder And Hovering Over Flutter Menu Item" width="730" height="389"    /><noscript><img               class="aligncenter size-full wp-image-138500" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img3-Popup-menu-modifying-XCode-project.png" alt="Demonstration Of Steps To Modify Xcode Project Showing Submenus After Right Clicking Ios Folder And Hovering Over Flutter Menu Item" width="730" height="389"  /></noscript></p>
<p>Within our project, navigate to <code>Runner > Runner > AppDelegate</code> and replace the contents of our <code>application</code> function with a simple <code>return true</code>. In my case, I commented out the old code and added the new code directly beneath it, so it should look the same for you:</p>
<p><img             class="aligncenter size-full wp-image-138503 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img4-Runner-AppDelegate-folder-contents.png" alt="Appdelegate Folder Contents With Edited Application Function" width="730" height="426"    /><noscript><img               class="aligncenter size-full wp-image-138503" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img4-Runner-AppDelegate-folder-contents.png" alt="Appdelegate Folder Contents With Edited Application Function" width="730" height="426"  /></noscript></p>
<p>Within our <code>Runner</code> folder (not the topmost one, but the one that exists one level down), create a <code>SceneDelegate.swift</code> file, and set the contents to the below:</p>
<pre class="language-swift hljs">@available(iOS 13.0, *)
class SceneDelegate: UIResponder, UIWindowSceneDelegate {
    var window: UIWindow?

    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {
        guard let windowScene = scene as? UIWindowScene else { return }

        window = UIWindow(windowScene: windowScene)

        let flutterEngine = FlutterEngine(name: "SceneDelegateEngine")
        flutterEngine.run()
        GeneratedPluginRegistrant.register(with: flutterEngine)
        let controller = FlutterViewController.init(engine: flutterEngine, nibName: nil, bundle: nil)
        window?.rootViewController = controller
        window?.makeKeyAndVisible()
    }
}
</pre>
<p>After you have done this, the <code>SceneDelegate</code> should look like this:</p>
<p><img             class="aligncenter size-full wp-image-138505 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img5-SceneDelegate-contents.png" alt="Scenedelegate File Contents" width="730" height="426"    /><noscript><img               class="aligncenter size-full wp-image-138505" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img5-SceneDelegate-contents.png" alt="Scenedelegate File Contents" width="730" height="426"  /></noscript></p>
<p>Now, right-click on the <code>Info.plist</code> file and click on <code>Open As > Source Code</code>. This will open the <code>Info.plist</code> in plain text so that you can easily paste the next configuration into the file.</p>
<p>We should be extra careful during this step because it’s very easy to accidentally break this file if we type the wrong thing into it:</p>
<p><img             class="aligncenter size-full wp-image-138508 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img6-Steps-to-open-Source-Code-for-Info-plist-file.png" alt="Steps Within Runner File Showing How To Right Click Info File, Navigate To Open As Menu Option, And Select Correct Source Code File That Should Be Opened" width="730" height="613"    /><noscript><img               class="aligncenter size-full wp-image-138508" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img6-Steps-to-open-Source-Code-for-Info-plist-file.png" alt="Steps Within Runner File Showing How To Right Click Info File, Navigate To Open As Menu Option, And Select Correct Source Code File That Should Be Opened" width="730" height="613"  /></noscript></p>
<p>Before the closing <code>&lt;/dict></code>, add the following text. This is the default configuration, and we will come back to this later to customize it:</p>
<pre class="language-html hljs">&lt;key>UIApplicationSceneManifest&lt;/key>
&lt;dict>
  &lt;key>UIApplicationSupportsMultipleScenes&lt;/key>
  &lt;true />
  &lt;key>UISceneConfigurations&lt;/key>
  &lt;dict>
    &lt;key>CPTemplateApplicationSceneSessionRoleApplication&lt;/key>
    &lt;array>
      &lt;dict>
        &lt;key>UISceneConfigurationName&lt;/key>
        &lt;string>CarPlay Configuration&lt;/string>
        &lt;key>UISceneDelegateClassName&lt;/key>
        &lt;string>flutter_carplay.FlutterCarPlaySceneDelegate&lt;/string>
      &lt;/dict>
    &lt;/array>
    &lt;key>UIWindowSceneSessionRoleApplication&lt;/key>
    &lt;array>
      &lt;dict>
        &lt;key>UISceneConfigurationName&lt;/key>
        &lt;string>Default Configuration&lt;/string>
        &lt;key>UISceneDelegateClassName&lt;/key>
        &lt;string>$(PRODUCT_MODULE_NAME).SceneDelegate&lt;/string>
        &lt;key>UISceneStoryboardFile&lt;/key>
        &lt;string>Main&lt;/string>
      &lt;/dict>
    &lt;/array>
  &lt;/dict>
&lt;/dict>
</pre>
<h2 id="setting-up-entitlements">Setting up our entitlements</h2>
<p>Even in development, we need to permit our app to interact with the CarPlay simulator on our computer. Let’s configure these entitlements now.</p>
<p>Within XCode, click on <code>Runner</code>, then click on <code>Signing &amp; Certificates</code>, and then click on the <code>+</code> button to the left of <code>All</code>:</p>
<p><img             class="aligncenter size-full wp-image-138510 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img7-Opening-list-all-signing-and-certificates.png" alt="Opening List Of All Signing And Certificates Options To Configure Entitlements" width="730" height="397"    /><noscript><img               class="aligncenter size-full wp-image-138510" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img7-Opening-list-all-signing-and-certificates.png" alt="Opening List Of All Signing And Certificates Options To Configure Entitlements" width="730" height="397"  /></noscript></p>
<p>In the list that comes up, select <code>Keychain Sharing</code>. Your app doesn’t actually use keychain sharing, but doing this sets you up with a <code>Runner.entitlements</code> file in your project:</p>
<p><img             class="aligncenter size-full wp-image-138512 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img8-Runner-entitlements-file-resulting-from-selecting-Keychain-Sharing.png" alt="Red Arrow Pointing Left To Runner Entitlements File Resulting From Previous Step" width="365" height="660"    /><noscript><img               class="aligncenter size-full wp-image-138512" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img8-Runner-entitlements-file-resulting-from-selecting-Keychain-Sharing.png" alt="Red Arrow Pointing Left To Runner Entitlements File Resulting From Previous Step" width="365" height="660"  /></noscript></p>
<p>Within this file, remove the <code>Keychain Access Groups</code> and add a new entitlement, depending on what type of app you are developing. You can check <a href="https://developer.apple.com/documentation/carplay/requesting_carplay_entitlements">Apple’s list of available entitlements</a> to see which one to use for your project.</p>
<p>When you are done, your <code>Runner.entitlements</code> file should look like the following:</p>
<p><img             class="aligncenter size-full wp-image-138514 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img9-Runner-entitlements-file-contents.png" alt="Runner Entitlements File Contents With Keychain Access Groups Removed And New Entitlement Added" width="730" height="426"    /><noscript><img               class="aligncenter size-full wp-image-138514" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img9-Runner-entitlements-file-contents.png" alt="Runner Entitlements File Contents With Keychain Access Groups Removed And New Entitlement Added" width="730" height="426"  /></noscript></p>
<p>Now we’re finally ready to add some functionality to our Flutter app! 🎉</p>
<h2 id="calling-carplay-functionality-flutter-app">Calling CarPlay functionality from our Flutter app</h2>
<p>Now, we’ll add the following UI into the CarPlay component of our app.</p>
<p><img             class="aligncenter size-full wp-image-138518 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img10-CarPlay-Flutter-UI-order-confirmation-dismissal.gif" alt="Gif Showing Carplay Ui For Pizza Ordering App Including Pizza Selection Options, Order Confirmation Options, And Order Confirmation Dismissal" width="730" height="459"  /><noscript><img               class="aligncenter size-full wp-image-138518" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img10-CarPlay-Flutter-UI-order-confirmation-dismissal.gif" alt="Gif Showing Carplay Ui For Pizza Ordering App Including Pizza Selection Options, Order Confirmation Options, And Order Confirmation Dismissal" width="730" height="459"/></noscript></p>
<p>Here’s we will need to do in order to achieve this:</p>
<ol>
<li>Set a <code>RootTemplate</code> that will form the basis of our CarPlay experience</li>
<li>Add details to the template</li>
<li>Set up callbacks within our app</li>
</ol>
<p>Let’s go ahead and take care of these steps now.</p>
<h2 id="setting-root-template">Setting a <code>RootTemplate</code></h2>
<p>Within our <code>main.dart</code> file, we’ll create a new <code>FlutterCarplay</code> object. This object will be responsible for handling our connection to CarPlay, and will let us control what is happening within our CarPlay experience:</p>
<pre class="language-dart hljs">final FlutterCarplay _flutterCarplay = FlutterCarplay();
</pre>
<p>Next, within our <code>initState</code> for our widget, we want to set up the <code>RootTemplate</code> with some options to tap on. It’s fairly easy to create a grid template, set a title, and then describe some buttons that we would like to be able to be pressed:</p>
<pre class="language-dart hljs">@override
void initState() {
  FlutterCarplay.setRootTemplate(
    rootTemplate: CPGridTemplate(
      title: "What pizza?",
      buttons: [
        ...Data.FoodItems.map(
          (e) => CPGridButton(
            titleVariants: [e.name],
            image: 'assets/images/${e.asset}',
            onPress: () {
              showOrderingConfirmationSheet(e);
              // showActionSheet();
            },
          ),
        )
      ],
    ),
    animated: true,
  );

  _flutterCarplay.forceUpdateRootTemplate(); // This makes the CarPlay experience reload on hot reload, useful during development.

  // TODO: implement initState
  super.initState();
}
</pre>
<p>As expected, this is the result:</p>
<p><img             class="aligncenter size-full wp-image-138520 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img11-CarPlay-Flutter-UI-order-options.png" alt="Six Types Of Pizza Shown In Pizza Ordering Options Displayed Within Carplay Flutter App Ui" width="730" height="477"    /><noscript><img               class="aligncenter size-full wp-image-138520" src="https://blog.logrocket.com/wp-content/uploads/2022/10/img11-CarPlay-Flutter-UI-order-options.png" alt="Six Types Of Pizza Shown In Pizza Ordering Options Displayed Within Carplay Flutter App Ui" width="730" height="477"  /></noscript></p>
<p>Now, let’s implement <code>showOrderingConfirmationSheet</code>:</p>
<pre class="language-dart hljs">void showOrderingConfirmationSheet(FoodItem food) {
  FlutterCarplay.showActionSheet(
    template: CPActionSheetTemplate(
      title: "Order ${food.name}?",
      message: "Your pizza will be ready soon after confirmation.",
      actions: [
        CPAlertAction(
          title: "Cancel",
          style: CPAlertActionStyles.cancel,
          onPress: () {
            // print("Cancel pressed in action sheet");
            FlutterCarplay.popModal(animated: true);
          },
        ),
        CPAlertAction(
          title: "Ok",
          style: CPAlertActionStyles.normal,
          onPress: () {
            print("Ok pressed in action sheet");
            FlutterCarplay.popModal(animated: true);
            FlutterCarplay.showAlert(
                template: CPAlertTemplate(titleVariants: [
              '${food.name} ordered!'
            ], actions: [
              CPAlertAction(
                title: "Dismiss",
                style: CPAlertActionStyles.destructive,
                onPress: () {
                  print("Dismiss pressed in action sheet");
                  FlutterCarplay.popModal(animated: true);
                },
              ),
            ]));
          },
        ),
      ],
    ),
  );
}
</pre>
<p>This results in the particular food item being opened and a confirmation message being displayed. You can also call native functionality within your Flutter app at this stage, such as adding or removing items from an internal database, depending on your needs.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As always, you can retrieve a <a href="https://github.com/flutterfromscratch/using-flutter-with-carplay">full copy of the source code on Github</a>. There is a commit before I implemented CarPlay, and a commit after I had implemented it, so you can use this to compare what changed. This comparison can be useful in case you experience difficulties in implementing CarPlay.</p>
<p>So, that’s how you add CarPlay to your Flutter app. The most time-consuming component of adding CarPlay is getting Apple to approve your use of CarPlay within your app. If you want to start using CarPlay within your Flutter app, that’s something you should start working on as soon as you can.</p>
<p>Adding CarPlay to your Flutter app can be quite a process, but if CarPlay is a good fit for your app, it can add a lot of value to your app’s experience.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-138469" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/adding-carplay-flutter-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/adding-carplay-flutter-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-138469" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/adding-carplay-flutter-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-138469" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/adding-carplay-flutter-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/adding-carplay-flutter-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Adding a robots.txt file to your Next.js app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/adding-robots-txt-file-next-js-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/adding-robots-txt-file-next-js-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Adding a robots.txt file to your Next.js app - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/adding-robots-txt-file-next-js-app/">Adding a robots.txt file to your Next.js app - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/marie-starck/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/05/Marie-Starck-Author.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/05/Marie-Starck-Author.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/marie-starck/">
Marie Starck <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Marie Starck is a fullstack software developer. Her specialty is JavaScript frameworks. In a perfect world, she would work for chocolate. Find her on Twitter <a href="https://www.twitter.com/MStarckJS">@MStarckJS</a>.</span>
</div>
</div>

<h1 class="posttitle">Adding a <code>robots.txt</code> file to your Next.js app</h1>
<p>
<span class="post-date"><time class="post-date">
November 9, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">3 min read</span>
<span class="wordcount">946</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>Next.js offers a wide variety of great features. Whether it’s the way it generates pages (statically or on server request) or updates them with <a href="https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration">Incremental Static Regeneration</a>, this framework has a lot of exciting options to attract developers. Out of all Next.js’s features, its SEO support stands out as one of its main advantages over other frameworks such as Create React App.</p>
<p>React is a great language for JavaScript developers, but it is unfortunately quite bad for SEO. The reason is that React is client-side rendered. Concretely, when a user requests a page, instead of the server returning HTML, it serves JavaScript, which the browser will then use to construct the page.</p>
<p>As a result, the initial page load in a SPA is typically longer than in an application using server-side rendering. Added to this, for a long time, Google bots didn’t crawl JavaScript properly.</p>
<p>Next.js fixed this issue by not only being based on React but offering developers server-side rendering. This made it easy for developers to migrate their applications.</p>
<p>An essential piece of SEO is having a <code>robots.txt</code> on your website. In this article, you will discover what a <code>robots.txt</code> is and how you can add one to your Next.js application, which isn’t something Next does out of the box.</p>
<h2>What is a <code>robots.txt</code> file?</h2>
<p>A <code>robots.tx</code>t file is a web standard file that tells search engine crawlers, like Google bots, which pages they can or cannot crawl. This file is at the root of your host and can therefore be accessed at this URL: <code>yourdomain.com/robots.txt</code>.</p>
<p>As mentioned, this file allows you to tell bots where pages and files are crawlable or not. You might have certain parts of your application that you want inaccessible such as your admin pages.</p>
<p>You can disallow URLs like this:</p>
<pre class="language-xml hljs">User-agent: nameOfBot
Disallow: /admin/
</pre>
<p>Or allow them like this:</p>
<pre class="language-xml hljs">User-agent: *
Allow: /
</pre>
<p>At the end of your file, you should also add a line for the destination to your sitemap like this:</p>
<pre class="language-xml hljs">Sitemap: http://www.yourdomain.com/sitemap.xml
</pre>
<p><em>N.B., unfamiliar with sitemaps? Don’t hesitate to check out <a href="https://developers.google.com/search/docs/crawling-indexing/sitemaps/overview">Google’s documentation</a> on the subject.</em></p>
<p>In the end, your <code>robots.txt</code> would look something like this:</p>
<pre class="language-xml hljs">User-agent: nameOfBot
Disallow: /admin/

User-agent: *
Allow: /

Sitemap: http://www.yourdomain.com/sitemap.xml
</pre>
<h2>How to add a <code>robots.txt</code> file to your Next.js application</h2>
<p>Adding a <code>robots.txt</code> file to your application is very easy. Every Next.js project comes with a folder called <code>public</code>. This folder allows you to store static assets that will then be accessible from the root of your domain. Therefore, by storing an image like <code>dolphin.jpeg</code> in your public folder, when your project is built, it will be accessible from the URL <code>http://www.yourdomain.com/dolphin.jpeg</code>. The same technique can be used for your <code>robots.txt</code> file.</p>
<p>So, to add a <code>robots.txt</code> file to your application, all you have to do is drop it in your <code>public</code> folder in your application.</p>
<h2>Alternative option: Dynamic generation</h2>
<p>There is a way to dynamically generate your <code>robots.txt</code> file. To do so, you can take advantage of two of Next.js’s features: <a href="https://nextjs.org/docs/api-routes/introduction">API route</a> and <a href="https://nextjs.org/docs/api-reference/next.config.js/rewrites">rewrites</a>.</p>
<p>Next.js allows you to define API routes. This means that when a request is done to a specific API endpoint, you can return the correct content for your <code>robots.txt</code> file.</p>
<p>To do so, create a <code>robots.js</code> file in your <code>pages/api</code> folder. This automatically creates a route. Inside this file, add your handler, which will return your <code>robots.txt</code> content:</p>
<pre class="language-javascript hljs">export default function handler(req, res) {
    res.send('Robots.txt content goes there'); // Send your `robots.txt content here
}
</pre>
<p>Unfortunately, this is only available at the URL <code>/api/robots</code> and as mentioned above, search engine crawlers will look for the <code>/robots.txt</code> url.</p>
<p>Thankfully, Next.js offers a feature called rewrites. This allows you to reroute a specific destination path to another path. In this particular case, you want to redirect all the requests for <code>/robots.txt</code> to <code>/api/robots</code>.</p>
<p>To do so, go into your <code>next.config.js</code> and add the rewrite:</p>
<pre class="language-javascript hljs">/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  async rewrites() {
      return [
          {
              source: '/robots.txt',
              destination: '/api/robots'
          }
      ];
  }
}

module.exports = nextConfig
</pre>
<p>With this in place, every time you access <code>/robots.txt</code>, it will call <code>/api/robots</code> and display the “Robots.txt content goes there” message.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h2>How to validate your <code>robots.txt</code> file?</h2>
<p>Once you deploy your application to production, you can validate your <code>robots.txt</code> file thanks to <a href="https://www.google.com/webmasters/tools/robots-testing-tool?siteUrl=https://mariestarck.com/">the tester provided by Google Search</a>. If your file is valid, you should see a message saying <strong>0 errors</strong> displayed.</p>
<p><img             class="aligncenter size-full wp-image-140981 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/robotstxt-file-no-errors.png" alt="Robots.txt File With No Errors" width="730" height="230"    /><noscript><img               class="aligncenter size-full wp-image-140981" src="https://blog.logrocket.com/wp-content/uploads/2022/11/robotstxt-file-no-errors.png" alt="Robots.txt File With No Errors" width="730" height="230"  /></noscript></p>
<p>To deploy your application on production, I highly recommend <a href="https://vercel.com/dashboard">Vercel</a>. This platform was created by the founder of Next.js and was built with this framework in mind. LogRocket has a tutorial on <a href="https://blog.logrocket.com/deploy-react-app-for-free-using-vercel/">how to deploy your Next.js application on Vercel</a>.</p>
<h2>Conclusion</h2>
<p>SEO is very important for sites that need to be discovered. To have a good page ranking, webpages need to be easily crawlable by search engine crawlers. Next.js makes that easy for React developers by offering inbuilt SEO support. This support includes the ability to add a <code>robots.txt</code> file to your project easily.</p>
<p>In this article, you learned what a <code>robots.txt</code> file was, how to add it to your Next.js application, and how to validate it when your app is deployed.</p>
<p>Once you have your <code>robots.txt</code> file set up, you will also need a sitemap. Thankfully, LogRocket also has an article on <a href="https://blog.logrocket.com/build-sitemap-generator-nextjs/">how to build a sitemap generator in Next.js</a>.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-140979" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/adding-robots-txt-file-next-js-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/adding-robots-txt-file-next-js-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-140979" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/adding-robots-txt-file-next-js-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-140979" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/adding-robots-txt-file-next-js-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/adding-robots-txt-file-next-js-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Adding an RSS feed to your Next.js app - LogRocket Blog</title>
			<link>https://blog.logrocket.com/adding-rss-feed-next-js-app/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/adding-rss-feed-next-js-app/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Adding an RSS feed to your Next.js app - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/adding-rss-feed-next-js-app/">Adding an RSS feed to your Next.js app - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ibadehinmojeed/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ibadehinmojeed/">
Ibadehin Mojeed <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an advocate of project-based learning. I also write technical content around web development.</span>
</div>
</div>
<h1 class="posttitle">Adding an RSS feed to your Next.js app</h1>
<p>
<span class="post-date"><time class="post-date">
October 10, 2022 </time></span>
 <span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2040</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>RSS, or Really Simple Syndication, is one of the means used by site publishers to distribute content in a timely manner. It lets site visitors stay updated on the latest content without having to check for new pieces regularly.</p>
<p>An RSS feed uses an XML file containing details about pieces of content like a list of articles or podcasts in reverse chronological order — where the latest content is displayed on top. It is a file that can be automatically updated to serve a different purpose.</p>
<p>When this file is available for a website, users can access and engage the site’s content using an RSS feed reader or aggregator. This reader is a tool that can fetch the XML content and present the data in a user-friendly format.</p>
<p>The RSS feed is also useful when setting up a campaign for the site’s newsletter. The email marketing platforms can use it to pull content like blog posts, so they can automatically send new content to subscribers.</p>
<p>In this lesson, we will learn how to integrate an RSS feed into a Next.js application. To follow this tutorial, ensure you are familiar with Next.js.</p>
<p>What we’ll cover:</p>
<ul>
<li><a href="#setting-up-next-js-rss-feed-project">Setting up our Next.js RSS feed project</a></li>
<li><a href="#quick-look-inside-next-js-rss-feed-project">A quick look inside our Next.js RSS feed project</a></li>
<li><a href="#creating-rss-feed-next-js-app">Creating an RSS feed for our Next.js app</a></li>
<li><a href="#using-rss-library">Using the </a><code><a href="#using-rss-library">rss</a></code><a href="#using-rss-library"> library</a>
<ul >
<li><a href="#creating-new-rss-feed">Creating a new RSS feed</a></li>
<li><a href="#adding-items-rss-feed">Adding items to the RSS feed</a></li>
<li><a href="#sending-xml-data-client">Sending XML data to the client</a></li>
<li><a href="#using-feed-reader">Using a feed reader</a></li>
</ul>
</li>
<li><a href="#using-feed-library">Using the </a><code><a href="#using-feed-library">feed</a></code><a href="#using-feed-library"> library
<ul >
<li><a href="#generating-other-rss-feed-formats">Generating other RSS feed formats</a></li>
</ul>

<li><a href="#adding-rss-feed-icon">Adding an RSS feed icon</a></li>

<h2 id="setting-up-next-js-rss-feed-project">Setting up our Next.js RSS feed project</h2>
<p>To add an RSS feed to Next.js, we need a Next application. Just so we can focus on the subject, I have created a <a href="https://github.com/Ibaslogic/nextjs-mdx-blog-starter" target="_blank" rel="noreferrer noopener">Next blog starter project</a> containing a <a href="https://blog.logrocket.com/create-next-js-mdx-blog/" target="_blank" rel="noreferrer noopener">list of MDX blog posts</a> that we can subscribe to via RSS.</p>
<p>Let’s clone it using the following command:</p>
<pre class="language-javascript hljs">git clone https://github.com/Ibaslogic/nextjs-mdx-blog-starter
</pre>
<p>Then, run the following command to install […]:</p>
<pre class="language-bash hljs">cd nextjs-mdx-blog-starter

npm install
# or
yarn
</pre>
<p>Finally, use the following command to run the project:</p>
<pre class="language-bash hljs">npm run dev
# or
yarn dev
</pre>
<p>The project blog page should look like so:</p>
<p><img             class="aligncenter size-full wp-image-134762 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img1-Next-js-project-frontend-blog-page.png" alt="Simple Black And White Next Js Project Frontend Blog Page With Two Example Posts In Reverse Chronological Order" width="730" height="522"    /><noscript><img               class="aligncenter size-full wp-image-134762" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img1-Next-js-project-frontend-blog-page.png" alt="Simple Black And White Next Js Project Frontend Blog Page With Two Example Posts In Reverse Chronological Order" width="730" height="522"  /></noscript></p>
<h2 id="quick-look-inside-next-js-rss-feed-project">A quick look inside our Next.js RSS feed project</h2>
<p>Let’s see how we generated the post list to be on the same page. Knowing how the post list is generated will be useful in generating RSS feeds for our blog posts.</p>
<p>If you open the <code>utils/mdx.js</code> file, you will see that we exported an async function called <code>getSortedPost()</code>, returning a list of posts with front matter details like title, slug, description, date, and more.</p>
<p>We then invoked the function inside the <code>getStaticProps()</code> fetching method in the blog page file — <code>pages/blog/index.js</code> — to get access to the data and render the component.</p>
<p>For our RSS feed project, we will create a function to generate the XML feed file and invoke it inside the <code>getStaticProps()</code>. This is because <code>getStaticProps()</code> will be called during the build time for a production site. That is a perfect time to generate the RSS feed.</p>
<p>Note that this fetching method is also always called on every request in development. Hence, the XML file will be generated in development when we navigate to the blog page.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>If you have interacted with a website powered by WordPress, you may know that you can view the site’s RSS feed by appending <code>/feed/</code> to the end of the website URL like so:</p>
<pre class="language-javascript hljs">https://example.com/feed/
</pre>
<p>In our project, adding a path in a similar way — like <code>http://localhost:3000/feed/</code> — will display a 404 error page. So, let’s add the RSS feed to our Next.js app in the next section.</p>
<h2 id="creating-rss-feed-next-js-app">Creating an RSS feed for our Next.js app</h2>
<p>There are different ways to create an RSS feed. In the sections below, we will take a look at two different packages: the <code>rss</code> package and the <code>feed</code> npm package.</p>
<h2 id="using-rss-library">Using the <code>rss</code> library</h2>
<p><a href="https://github.com/dylang/node-rss" target="_blank" rel="noreferrer noopener">The </a><code><a href="https://github.com/dylang/node-rss" target="_blank" rel="noreferrer noopener">rss</a></code><a href="https://github.com/dylang/node-rss" target="_blank" rel="noreferrer noopener"> package</a> lets us generate an RSS feed and add it to our Next project. Let’s add it by running the following command:</p>
<pre class="language-bash hljs">npm i rss
#or
yarn add rss
</pre>
<p>Once we have added the package, we can create a new RSS feed, add items to the feed, and more.</p>
<h3 id="creating-new-rss-feed">Creating a new RSS feed</h3>
<p>Let’s create a <code>utils/generateRSSFeed.js</code> file and add the following code:</p>
<pre class="language-javascript hljs">import RSS from 'rss';

export default async function generateRssFeed() {
 const feedOptions = {};
 const feed = new RSS(feedOptions);
}
</pre>
<p>We started by importing <code>RSS</code> from the <code>rss</code> module and creating a new feed instance. The <code>RSS</code> feed accepts an object that will consist of the feed options.</p>
<p>Let’s add the feed options by updating the file‘s contents to the following:</p>
<pre class="language-javascript hljs">import RSS from 'rss';

export default async function generateRssFeed() {
 const site_url = 'localhost:3000';

 const feedOptions = {
  title: 'Blog posts | RSS Feed',
  description: 'Welcome to this blog posts!',
  site_url: site_url,
  feed_url: `${site_url}/rss.xml`,
  image_url: `${site_url}/logo.png`,
  pubDate: new Date(),
  copyright: `All rights reserved ${new Date().getFullYear()}, Ibas`,
 };

 const feed = new RSS(feedOptions);
}
</pre>
<p>The feed options are self-explanatory.</p>
<p>We used the <code>localhost</code> URL as the <code>site_URL</code>. If you are deploying to production, that URL must be the production URL.</p>
<p>The <code>feed_URL</code> specifies the path for the RSS feed. It will be available at <code>http://localhost:3000/rss.xml</code> in development.</p>
<p>Keep note of this path, as we will maintain the same URL when we write the XML content to the client later in this lesson. You can specify your path, like <code>/feed.xml</code> instead of <code>/rss.xml</code> or whatever name you want.</p>
<h3 id="adding-items-rss-feed">Adding items to the RSS feed</h3>
<p>We need to get the list of posts to add our blog posts to the feed. As mentioned earlier, the <code>getSortedPost()</code> function returns the list of post details.</p>
<p>We will import the function, loop through the posts list, and add each individual post to the feed.</p>
<p>The <code>utils/generateRSSFeed.js</code> file now looks like so:</p>
<pre class="language-javascript hljs">import RSS from 'rss';
import { getSortedPost } from './mdx';

export default async function generateRssFeed() {
 const site_url = 'localhost:3000';

 const allPosts = await getSortedPost();

 const feedOptions = {
  // ...
 };

 const feed = new RSS(feedOptions);

 allPosts.map((post) => {
  feed.item({
   title: post.title,
   description: post.description,
   url: `${site_url}/blog/${post.slug}`,
   date: post.date,
  });
 });
}
</pre>
<p>Since the <code>getSortedPost()</code> function from the <code>utils/mdx.js</code> file is an async function, we await it using an <code>await</code> keyword and assign the returned posts to the <code>allPosts</code> variable. We looped through the <code>allPosts</code> variable using the <code>map</code> function and added each individual post to a feed item.</p>
<h3 id="sending-xml-data-client">Sending XML data to the client</h3>
<p>Next, we will write the RSS feed to a file as <a href="https://blog.logrocket.com/reading-writing-xml-node-js/" target="_blank" rel="noreferrer noopener">XML using the Node.js</a> <code>fs</code> function. Let’s import <code>fs</code> and use <code>fs.writeFileSync()</code> API like so:</p>
<pre class="language-javascript hljs">import fs from 'fs';
import RSS from 'rss';
import { getSortedPost } from './mdx';

export default async function generateRssFeed() {
 // ...
 allPosts.map((post) => {
  // ...
 });

 fs.writeFileSync('./public/rss.xml', feed.xml({ indent: true }));
}
</pre>
<p>This API creates an <code>rss.xml</code> file in the <code>public</code> folder and writes the XML data to the file.</p>
<p>Save the file.</p>
<p>Finally, find the <code>getStaticProps()</code> fetching method in your project and invoke the <code>generateRssFeed()</code> function. In our project, we can find it in the blog page file, <code>pages/blog/index.js</code>. So let’s import the <code>generateRssFeed()</code> and call it in the <code>getStaticProps()</code> like this:</p>
<pre class="language-javascript hljs">// ....
import generateRssFeed from '../../utils/generateRSSFeed';

export async function getStaticProps() {
 await generateRssFeed();
 // ....
}

// .... 
</pre>
<p>Let’s save all files.</p>
<p>If we run the <code>npm run build</code> production build command, an RSS feed will be generated automatically in the public folder. However, since we are in development, we will generate the file if we navigate to the blog page. Remember, the fetching method holding the <code>generateRssFeed()</code> lives in the blog page file.</p>
<p>So, navigate to the <code>http://localhost:3000/blog</code> page to generate the file. After that, visit <code>http://localhost:3000/rss.xml</code> in the browser to see an XML page like so:</p>
<p><img             class="aligncenter size-full wp-image-134765 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img2-XML-page-localhost-3000.png" alt="Xml Page Shown At Localhost 3000 With Message At Top Stating That The File Has No Associated Style Information And A Document Tree Is Shown Instead" width="730" height="551"    /><noscript><img               class="aligncenter size-full wp-image-134765" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img2-XML-page-localhost-3000.png" alt="Xml Page Shown At Localhost 3000 With Message At Top Stating That The File Has No Associated Style Information And A Document Tree Is Shown Instead" width="730" height="551"  /></noscript></p>
<p>As we can see in the image above, the latest item in the XML file is the latest blog post. Now, anytime we add a new post, the file will be regenerated to contain the post, and any users that subscribe will automatically get the update.</p>
<h3 id="using-feed-reader">Using a feed reader</h3>
<p>Now that we have a working RSS feed link — though still in development at <code>localhost:3000</code> — users can use the link to subscribe to the feed in an RSS reader.</p>
<p>If we <a href="https://chrome.google.com/webstore/detail/rss-feed-reader/pnjaodmkngahhkoihejjehlcdlnohgmp/related?hl=en" target="_blank" rel="noreferrer noopener">install a feed reader extension</a> for Chrome and visit the feed URL, we will see the below:</p>
<p><img             class="aligncenter size-full wp-image-134767 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img3-Next-js-project-frontend-blog-page-RSS-feed-left-column.png" alt="Next Js Project Frontend Blog Page With Chrome Feed Reader Extension Displaying Rss Feed In Column Format At Left Side Of Page" width="730" height="491"    /><noscript><img               class="aligncenter size-full wp-image-134767" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img3-Next-js-project-frontend-blog-page-RSS-feed-left-column.png" alt="Next Js Project Frontend Blog Page With Chrome Feed Reader Extension Displaying Rss Feed In Column Format At Left Side Of Page" width="730" height="491"  /></noscript></p>
<p>The content here is friendly to users, and the posts are linked back to the source. Once the users subscribe to the feed, they get notifications for new updates.</p>
<h2 id="using-feed-library">Using the <code>feed</code> library</h2>
<p><a href="https://github.com/jpmonette/feed" target="_blank" rel="noreferrer noopener">The </a><code><a href="https://github.com/jpmonette/feed" target="_blank" rel="noreferrer noopener">feed<a href="https://github.com/jpmonette/feed" target="_blank" rel="noreferrer noopener"> npm package</a> is more robust than the <code>rss</code> package. It lets us generate different feed formats, including RSS, Atom, and JSON.
<p>Let’s add it to our project:</p>
<pre class="language-bash hljs">npm i feed
#or
yarn add feed
</pre>
<p>Next, replace the content of the <code>utils/generateRSSFeed.js</code> file with the following:</p>
<pre class="language-javascript hljs">import fs from 'fs';
import { Feed } from 'feed';
import { getSortedPost } from './mdx';

export default async function generateRssFeed() {
 const allPosts = await getSortedPost();
 const site_url = 'localhost:3000';

 const feedOptions = {
  title: 'Blog posts | RSS Feed',
  description: 'Welcome to this blog posts!',
  id: site_url,
  link: site_url,
  image: `${site_url}/logo.png`,
  favicon: `${site_url}/favicon.png`,
  copyright: `All rights reserved ${new Date().getFullYear()}, Ibas`,
  generator: 'Feed for Node.js',
  feedLinks: {
   rss2: `${site_url}/rss.xml`,
  },
 };

 const feed = new Feed(feedOptions);

 allPosts.forEach((post) => {
  feed.addItem({
   title: post.title,
   id: `${site_url}/blog/${post.slug}`,
   link: `${site_url}/blog/${post.slug}`,
   description: post.description,
   date: new Date(post.date),
  });
 });

 fs.writeFileSync('./public/rss.xml', feed.rss2());
}
</pre>
<p>Implementing the <code>feed</code> package is similar to implementing the <code>rss</code> package. You can follow the same steps as above. If we save the file, we should also get a similar result.</p>
<h3 id="generating-other-rss-feed-formats">Generating other RSS feed formats</h3>
<p>To generate RSS feeds for our Next.js app in other formats, including JSON, we will update <code>feedLinks</code> to the following:</p>
<pre class="language-javascript hljs">feedLinks: {
  rss2: `${site_url}/rss.xml`,
  // other feed formats
  json: `${site_url}/rss.json`,
  atom: `${site_url}/atom.xml`,
},
</pre>
<p>Then, we will write the RSS feeds to their respective files in the <code>public</code> folder, like so:</p>
<pre class="language-javascript hljs">// write other feed formats to public folder
fs.writeFileSync('./public/rss.json', feed.json1());
fs.writeFileSync('./public/atom.xml', feed.atom1());
</pre>
<p>After saving the <code>utils/generateRSSFeed.js</code> file and navigating to the blog page to generate the feed files, we can visit <code>http://localhost:3000/rss.json</code> and <code>http://localhost:3000/atom.xml</code> in the browser to see the RSS feeds in their respective formats.</p>
<h2 id="adding-rss-feed-icon">Adding an RSS feed icon</h2>
<p>To ensure that site users easily find the RSS feed URL, we will add an icon that points to the RSS feed at the bottom of our web project. We can <a href="https://blog.logrocket.com/react-icons-comprehensive-tutorial-examples/" target="_blank" rel="noreferrer noopener">get the icon from the React Icons library</a>.</p>
<p>Let’s install <code>react-icons</code>:</p>
<pre class="language-bash hljs">yarn add react-icons
#or
npm install react-icons
</pre>
<p>Open the <code>components/Footer.js</code> file and import the feed icon component at the top:</p>
<pre class="language-javascript hljs">import { MdRssFeed } from 'react-icons/md';
</pre>
<p>Then, find this code:</p>
<pre class="language-javascript hljs">>&lt;div className={styles.footer__content}>
 &lt;p>&amp;copy; {new Date().getFullYear().toString()} by Ibas&lt;/p>
&lt;/div>
</pre>
<p>And update it to the following instead:</p>
<pre class="language-javascript hljs">&lt;div className={styles.footer__content}>
 &lt;p>
  &amp;copy; {new Date().getFullYear().toString()} by Ibas
 &lt;/p>
 &lt;a
  href="http://localhost:3000/rss.xml"
  rel="noreferrer"
  target="_blank"
 >
  &lt;MdRssFeed color="#ee802f" size="30px" />
 &lt;/a>
&lt;/div>
</pre>
<p>In production, the URL path must be the production URL. If we save and test our project, the icon should appear in the site footer, like so:</p>
<p><img             class="aligncenter size-full wp-image-134771 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img4-Next-js-project-frontend-blog-page-RSS-feed-footer-icon-1.png" alt="Next Js Project Frontend Blog Page With Red Arrow Pointing To Rss Feed Icon In Site Footer" width="730" height="550"    /><noscript><img               class="aligncenter size-full wp-image-134771" src="https://blog.logrocket.com/wp-content/uploads/2022/09/img4-Next-js-project-frontend-blog-page-RSS-feed-footer-icon-1.png" alt="Next Js Project Frontend Blog Page With Red Arrow Pointing To Rss Feed Icon In Site Footer" width="730" height="550"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>Adding an RSS feed to a Next.js app is one way to keep users updated on the latest content shared on your site. This lesson discussed integrating the RSS XML file in our Next.js app.</p>
<p>If you enjoyed this lesson, share it around the web. The complete source code is <a href="https://github.com/Ibaslogic/nextjs-mdx-blog-rss" target="_blank" rel="noreferrer noopener">available on GitHub</a>, and the finished <a href="https://nextjs-mdx-blog-rss.vercel.app/" target="_blank" rel="noreferrer noopener">project is live here</a>.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-134759" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/adding-rss-feed-next-js-app/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/adding-rss-feed-next-js-app/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-134759" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/adding-rss-feed-next-js-app/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-134759" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/adding-rss-feed-next-js-app/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>

<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/06/IbadehinMojeed.png?w=128&amp;h=128&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ibadehinmojeed/">
Ibadehin Mojeed <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm an advocate of project-based learning. I also write technical content around web development.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/nextjs/">#nextjs</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/new-guide-css-overflow/" rel="prev">A new guide to CSS <code>overflow</code></a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/what-is-product-portfolio-management/" rel="next">What is product portfolio management?</a> &amp;raquo;</div></div>
</div>



<div class="hideshare"/>
<div class="graybg">
<div class="container">
<div class="row justify-content-center listrecent listrelated">
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/">Hybrid rendering in Astro: A step-by-step guide</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">Emanuel Suriano</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/using-modern-decorators-typescript/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/using-modern-decorators-typescript/">Using modern decorators in TypeScript</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/alecbrunelle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/alecbrunelle/">Alec Brunelle</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/using-modern-decorators-typescript/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/">Using Camome to design highly customizable UIs</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/judemiracle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/judemiracle/">Jude Miracle</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">11 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
</div>
<div class="clearfix"/>
<div class="row justify-content-center">
<div class="col-md-8">
<div id="comments" class="comments-area">
<div id="respond" class="comment-respond">
<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/adding-rss-feed-next-js-app/#respond" >Cancel reply</a></small>
</h3>
<form id="commentform" class="comment-form">
<iframe title="Comment Form" src="https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=134759&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=9375ebee30&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=5dda0f81274c4107be0dff48f02c91b2282b2ad9#parent=https%3A%2F%2Fblog.logrocket.com%2Fadding-rss-feed-next-js-app%2F" name="jetpack_remote_comment"  class="jetpack_remote_comment" id="jetpack_remote_comment" sandbox="allow-same-origin allow-top-navigation allow-scripts allow-forms allow-popups">
									</iframe>
<!--[if !IE]><!-->
<meta>
						document.addEventListener('DOMContentLoaded', function () {
							var commentForms = document.getElementsByClassName('jetpack_remote_comment');
							for (var i = 0; i &lt; commentForms.length; i++) {
								commentForms[i].allowTransparency = false;
								commentForms[i].scrolling = 'no';
							}
						});
					</meta>
<!--<![endif]-->
</form>
</div>
<input type="hidden" name="comment_parent" id="comment_parent" value=""/>
</div>
</div>
</div> </div>
</div>
<div class="alertbar">
<div class="container text-center">
</div>
</div>

<div class="container">
<footer class="footer">
<p class="pull-left"> Does something seem off? Email <a><span class="__cf_email__" data-cfemail="6615131616091412260a09011409050d03124805090b">[email protected]</span></a> </p>
<p class="pull-right"> </p>
<div class="clearfix"/>
<form role="search" method="get" class="search-form" action="https://blog.logrocket.com/">
<input type="hidden" name="post_type" value="post"/>
<input type="search" class="search-field" placeholder="Search..." value="" name="s" title="Search for:"/>
<button type="submit" class="search-submit">
<i class="fa fa-search"/>
</button>
</form> <a href="" class="back-to-top hidden-md-down">
<i class="fa fa-angle-up"/>
</a>
</footer>
</div>
<meta>window.onload = function() {
  if (typeof hljs !== 'undefined')
  {
  document.querySelectorAll('pre').forEach((block) => {
    hljs.highlightBlock(block);
  });
  }
if (jQuery(".type-post").length) {
  var localDate = new Date(document.getElementsByTagName('time')[0].innerText);
  var pubDate = new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate()));
  analytics.track('post-info', {
    url: window.location.href.split('?')[0],
    wordCount: jQuery('.wordcount').text(),
    publishDate: pubDate,
    blogtag: jQuery('.aretags li a').text(),
	postAuthor: jQuery("meta[name='twitter:data1']").attr("content"),
	id: jQuery(".mainheading").closest(".col-md-8").attr("id").replace('post-',''),
	lr_editor: jQuery(".logrocket_editor").text()
  });
}
jQuery(".aretags li a:contains('archive')").parent('li').hide();
jQuery(".aretags li a:contains('86919')").parent('li').hide();
jQuery(".aretags li a:contains('72293')").parent('li').hide();
jQuery(".aretags li a:contains('custom-plug')").parent('li').hide();
};</meta> <div >
<div class="grofile-hash-map-3c06c4eafddbd580880b66c642e23128">
</div>
<div class="grofile-hash-map-de8225213d7b8bc59895625735574f7d">
</div>
<div class="grofile-hash-map-1d70ad5cb2a361e3fdf176f64c042921">
</div>
<div class="grofile-hash-map-73b9bd9514e5a89b137a35b20f810cfa">
</div>
</div>
<div id="jp-carousel-loading-overlay">
<div id="jp-carousel-loading-wrapper">
<span id="jp-carousel-library-loading">&amp;nbsp;</span>
</div>
</div>
<div class="jp-carousel-overlay" >
<div class="jp-carousel-container">

<div class="jp-carousel-wrap swiper-container jp-carousel-swiper-container jp-carousel-transitions" itemscope="itemscope" itemtype="https://schema.org/ImageGallery">
<div class="jp-carousel swiper-wrapper"/>
<div class="jp-swiper-button-prev swiper-button-prev">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskPrev" mask-type="alpha" maskUnits="userSpaceOnUse" x="8" y="6" width="9" height="12">
<path d="M16.2072 16.59L11.6496 12L16.2072 7.41L14.8041 6L8.8335 12L14.8041 18L16.2072 16.59Z" fill="white"/>
</mask>
<g mask="url(#maskPrev)">
<rect x="0.579102" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>
<div class="jp-swiper-button-next swiper-button-next">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskNext" mask-type="alpha" maskUnits="userSpaceOnUse" x="8" y="6" width="8" height="12">
<path d="M8.59814 16.59L13.1557 12L8.59814 7.41L10.0012 6L15.9718 12L10.0012 18L8.59814 16.59Z" fill="white"/>
</mask>
<g mask="url(#maskNext)">
<rect x="0.34375" width="23.8822" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>
</div>

<div class="jp-carousel-close-hint">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskClose" mask-type="alpha" maskUnits="userSpaceOnUse" x="5" y="5" width="15" height="14">
<path d="M19.3166 6.41L17.9135 5L12.3509 10.59L6.78834 5L5.38525 6.41L10.9478 12L5.38525 17.59L6.78834 19L12.3509 13.41L17.9135 19L19.3166 17.59L13.754 12L19.3166 6.41Z" fill="white"/>
</mask>
<g mask="url(#maskClose)">
<rect x="0.409668" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>

<div class="jp-carousel-info">
<div class="jp-carousel-info-footer">
<div class="jp-carousel-pagination-container">
<div class="jp-swiper-pagination swiper-pagination"/>
<div class="jp-carousel-pagination"/>
</div>
<div class="jp-carousel-photo-title-container">
<h2 class="jp-carousel-photo-caption"/>
</div>
<div class="jp-carousel-photo-icons-container">
<a href="#" class="jp-carousel-icon-btn jp-carousel-icon-info" aria-label="Toggle photo metadata visibility">
<span class="jp-carousel-icon">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskInfo" mask-type="alpha" maskUnits="userSpaceOnUse" x="2" y="2" width="21" height="20">
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.7537 2C7.26076 2 2.80273 6.48 2.80273 12C2.80273 17.52 7.26076 22 12.7537 22C18.2466 22 22.7046 17.52 22.7046 12C22.7046 6.48 18.2466 2 12.7537 2ZM11.7586 7V9H13.7488V7H11.7586ZM11.7586 11V17H13.7488V11H11.7586ZM4.79292 12C4.79292 16.41 8.36531 20 12.7537 20C17.142 20 20.7144 16.41 20.7144 12C20.7144 7.59 17.142 4 12.7537 4C8.36531 4 4.79292 7.59 4.79292 12Z" fill="white"/>
</mask>
<g mask="url(#maskInfo)">
<rect x="0.8125" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</span>
</a>
<a href="#" class="jp-carousel-icon-btn jp-carousel-icon-comments" aria-label="Toggle photo comments visibility">
<span class="jp-carousel-icon">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskComments" mask-type="alpha" maskUnits="userSpaceOnUse" x="2" y="2" width="21" height="20">
<path fill-rule="evenodd" clip-rule="evenodd" d="M4.3271 2H20.2486C21.3432 2 22.2388 2.9 22.2388 4V16C22.2388 17.1 21.3432 18 20.2486 18H6.31729L2.33691 22V4C2.33691 2.9 3.2325 2 4.3271 2ZM6.31729 16H20.2486V4H4.3271V18L6.31729 16Z" fill="white"/>
</mask>
<g mask="url(#maskComments)">
<rect x="0.34668" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
<span class="jp-carousel-has-comments-indicator" aria-label="This image has comments."/>
</span>
</a>
</div>
</div>
<div class="jp-carousel-info-extra">
<div class="jp-carousel-info-content-wrapper">
<div class="jp-carousel-photo-title-container">
<h2 class="jp-carousel-photo-title"/>
</div>
<div class="jp-carousel-comments-wrapper">
<div id="jp-carousel-comments-loading">
<span>Loading Comments...</span>
</div>
<div class="jp-carousel-comments"/>
<div id="jp-carousel-comment-form-container">
<span id="jp-carousel-comment-form-spinner">&amp;nbsp;</span>
<div id="jp-carousel-comment-post-results"/>
<form id="jp-carousel-comment-form">
<label for="jp-carousel-comment-form-comment-field" class="screen-reader-text">Write a Comment...</label>
<textarea name="comment" class="jp-carousel-comment-form-field jp-carousel-comment-form-textarea" id="jp-carousel-comment-form-comment-field" placeholder="Write a Comment..."/>
<div id="jp-carousel-comment-form-submit-and-info-wrapper">
<div id="jp-carousel-comment-form-commenting-as">
<fieldset>
<label for="jp-carousel-comment-form-email-field">Email (Required)</label>
<input type="text" name="email" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-email-field"/>
</fieldset>
<fieldset>
<label for="jp-carousel-comment-form-author-field">Name (Required)</label>
<input type="text" name="author" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-author-field"/>
</fieldset>
<fieldset>
<label for="jp-carousel-comment-form-url-field">Website</label>
<input type="text" name="url" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-url-field"/>
</fieldset>
</div>
<input type="submit" name="submit" class="jp-carousel-comment-form-button" id="jp-carousel-comment-form-button-submit" value="Post Comment"/>
</div>
</form>
</div>
</div>
<div class="jp-carousel-image-meta">
<div class="jp-carousel-title-and-caption">
<div class="jp-carousel-photo-info">
<h3 class="jp-carousel-caption" itemprop="caption description"/>
</div>
<div class="jp-carousel-photo-description"/>
</div>
<ul class="jp-carousel-image-exif" />
<a class="jp-carousel-image-download" target="_blank" >
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0" mask-type="alpha" maskUnits="userSpaceOnUse" x="3" y="3" width="19" height="18">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.84615 5V19H19.7775V12H21.7677V19C21.7677 20.1 20.8721 21 19.7775 21H5.84615C4.74159 21 3.85596 20.1 3.85596 19V5C3.85596 3.9 4.74159 3 5.84615 3H12.8118V5H5.84615ZM14.802 5V3H21.7677V10H19.7775V6.41L9.99569 16.24L8.59261 14.83L18.3744 5H14.802Z" fill="white"/>
</mask>
<g mask="url(#mask0)">
<rect x="0.870605" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
<span class="jp-carousel-download-text"/>
</a>
<div class="jp-carousel-image-map" />
</div>
</div>
</div>
</div>
</div>
</div>
<meta>
		window.WPCOM_sharing_counts = {"http:\/\/blog.logrocket.com\/adding-rss-feed-next-js-app\/":134759};
	</meta>
<link rel="stylesheet" id="all-css-0" href="https://blog.logrocket.com/_static/??-eJytkcFOw0AMRH8IxyQIlAviW5aN27p4vau1rah/T0CECxxaxNWeeTOWcW2QqzqpYwloEkdWwzN5S/kNxmm4x1KXEDLMqdcwErSVG3V4DV2Ehmx2h3/B7Nt98E1izRLLh9QMl2Qn3tg2FNYfYXuSsp4THGovhsmM/MvM1iRdoDZW3hggfDz5rZTDJoO0ktVC17aAEuIMLXX/n0JgfhHCzVzDfz3SvEf26J8veSnP49M8PU4P4zy/A8Motq0=" type="text/css" media="all"/>
<meta>
var codePrettifyLoaderBaseUrl = "https:\/\/blog.logrocket.com\/wp-content\/plugins\/code-prettify\/prettify";
</meta>


<meta>
var WPGroHo = {"my_hash":""};
</meta>
<meta>
var jetpackLazyImagesL10n = {"loading_warning":"Images are still loading. Please cancel your print and try again."};
</meta>
<meta>
var jetpackSwiperLibraryPath = {"url":"https:\/\/blog.logrocket.com\/wp-content\/mu-plugins\/jetpack-12.0\/_inc\/build\/carousel\/swiper-bundle.min.js"};
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","nonce":"84e2b202f1","display_exif":"1","display_comments":"1","single_image_gallery":"1","single_image_gallery_media_file":"","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size &lt;span class=\"photo-size\">{0}&lt;span class=\"photo-size-times\">\u00d7&lt;\/span>{1}&lt;\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","copyright":"Copyright","comment_registration":"0","require_name_email":"1","login_url":"https:\/\/blog.logrocket.com\/wp-login.php?redirect_to=http%3A%2F%2Fblog.logrocket.com%2Fadding-rss-feed-next-js-app%2F","blog_id":"1","meta_data":["camera","aperture","shutter_speed","focal_length","copyright"]};
</meta>
<meta>
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
</meta>
<meta>
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
</meta>
<meta>
var sharing_js_options = {"lang":"en","counts":"1","is_stats_active":"1"};
</meta>

<meta>
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-twitter' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-twitter' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-linkedin' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-linkedin' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-facebook' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-facebook' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
						return false;
					}
				} );
			} )();
</meta>
<!--[if IE]>
		<meta>
			if ( 0 === window.location.hash.indexOf( '#comment-' ) ) {
				// window.location.reload() doesn't respect the Hash in IE
				window.location.hash = window.location.hash;
			}
		</meta>
		<![endif]-->
<meta>
			(function () {
				var comm_par_el = document.getElementById( 'comment_parent' ),
					comm_par = ( comm_par_el &amp;&amp; comm_par_el.value ) ? comm_par_el.value : '',
					frame = document.getElementById( 'jetpack_remote_comment' ),
					tellFrameNewParent;

				tellFrameNewParent = function () {
					if ( comm_par ) {
						frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=134759&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=9375ebee30&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=5dda0f81274c4107be0dff48f02c91b2282b2ad9#parent=https%3A%2F%2Fblog.logrocket.com%2Fadding-rss-feed-next-js-app%2F" + '&amp;replytocom=' + parseInt( comm_par, 10 ).toString();
					} else {
						frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=134759&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=9375ebee30&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=5dda0f81274c4107be0dff48f02c91b2282b2ad9#parent=https%3A%2F%2Fblog.logrocket.com%2Fadding-rss-feed-next-js-app%2F";
					}
				};

				
				if ( 'undefined' !== typeof addComment ) {
					addComment._Jetpack_moveForm = addComment.moveForm;

					addComment.moveForm = function ( commId, parentId, respondId, postId ) {
						var returnValue = addComment._Jetpack_moveForm( commId, parentId, respondId, postId ),
							cancelClick, cancel;

						if ( false === returnValue ) {
							cancel = document.getElementById( 'cancel-comment-reply-link' );
							cancelClick = cancel.onclick;
							cancel.onclick = function () {
								var cancelReturn = cancelClick.call( this );
								if ( false !== cancelReturn ) {
									return cancelReturn;
								}

								if ( ! comm_par ) {
									return cancelReturn;
								}

								comm_par = 0;

								tellFrameNewParent();

								return cancelReturn;
							};
						}

						if ( comm_par == parentId ) {
							return returnValue;
						}

						comm_par = parentId;

						tellFrameNewParent();

						return returnValue;
					};
				}

				
				// Do the post message bit after the dom has loaded.
				document.addEventListener( 'DOMContentLoaded', function () {
					var iframe_url = "https:\/\/jetpack.wordpress.com";
					if ( window.postMessage ) {
						if ( document.addEventListener ) {
							window.addEventListener( 'message', function ( event ) {
								var origin = event.origin.replace( /^http:\/\//i, 'https://' );
								if ( iframe_url.replace( /^http:\/\//i, 'https://' ) !== origin ) {
									return;
								}
								frame.style.height = event.data + 'px';
							});
						} else if ( document.attachEvent ) {
							window.attachEvent( 'message', function ( event ) {
								var origin = event.origin.replace( /^http:\/\//i, 'https://' );
								if ( iframe_url.replace( /^http:\/\//i, 'https://' ) !== origin ) {
									return;
								}
								frame.style.height = event.data + 'px';
							});
						}
					}
				})

			})();
		</meta>

<meta>
		_stq = window._stq || [];
		_stq.push([ 'view', {v:'ext',blog:'217016018',post:'134759',tz:'-4',srv:'blog.logrocket.com',hp:'vip',j:'1:12.0'} ]);
		_stq.push([ 'clickTrackerInit', '217016018', '134759' ]);
	</meta><meta>
	<span id="nf-form-title-{{{ data.id }}}" class="nf-form-title">
		{{{ ( 1 == data.settings.show_title ) ? '&lt;h' + data.settings.form_title_heading_level + '>' + data.settings.title + '' : '' }}}
	</span>
	<div class="nf-form-wrap ninja-forms-form-wrap">
		<div class="nf-response-msg"/>
		<div class="nf-debug-msg"/>
		<div class="nf-before-form"/>
		<div class="nf-form-layout"/>
		<div class="nf-after-form"/>
	</div>
</meta>
<meta>

</meta>
<meta>
	{{{ data.beforeForm }}}
</meta><meta>
	{{{ data.afterForm }}}
</meta><meta>
    <div class="nf-form-fields-required">{{{ data.renderFieldsMarkedRequired() }}}</div>
    {{{ data.beforeFields }}}
</meta><meta>
    {{{ data.afterFields }}}
    <div id="nf-form-errors-{{{ data.id }}}" class="nf-form-errors" role="alert"/>
    <div class="nf-form-hp"/>
</meta>
<meta>
    {{{ data.beforeField }}}
</meta><meta>
    {{{ data.afterField }}}
</meta><meta>
	<form>
		<div>
			<div class="nf-before-form-content"/>
			<div class="nf-form-content {{{ data.element_class }}}"/>
			<div class="nf-after-form-content"/>
		</div>
	</form>
</meta><meta>
	<label id="nf-label-field-hp-{{{ data.id }}}" for="nf-field-hp-{{{ data.id }}}" >
		{{{ nfi18n.formHoneypot }}}
		<input id="nf-field-hp-{{{ data.id }}}" name="nf-field-hp" class="nf-element nf-field-hp" type="text" value="" aria-labelledby="nf-label-field-hp-{{{ data.id }}}"/>
	</label>
</meta>
<meta>
    <div id="nf-field-{{{ data.id }}}-container" class="nf-field-container {{{ data.type }}}-container {{{ data.renderContainerClass() }}}">
        <div class="nf-before-field"/>
        <div class="nf-field"/>
        <div class="nf-after-field"/>
    </div>
</meta>
<meta>
    {{{ data.beforeField }}}
</meta><meta>
    &lt;#
    /*
     * Render our input limit section if that setting exists.
     */
    #>
    <div class="nf-input-limit"/>
    &lt;#
    /*
     * Render our error section if we have an error.
     */
    #>
    <div id="nf-error-{{{ data.id }}}" class="nf-error-wrap nf-error" role="alert"/>
    &lt;#
    /*
     * Render any custom HTML after our field.
     */
    #>
    {{{ data.afterField }}}
</meta>
<meta>
	<div id="nf-field-{{{ data.id }}}-wrap" class="{{{ data.renderWrapClass() }}}" data-field-id="{{{ data.id }}}">
		&lt;#
		/*
		 * This is our main field template. It's called for every field type.
		 * Note that must have ONE top-level, wrapping element. i.e. a div/span/etc that wraps all of the template.
		 */
        #>
		&lt;#
		/*
		 * Render our label.
		 */
        #>
		{{{ data.renderLabel() }}}
		&lt;#
		/*
		 * Render our field element. Uses the template for the field being rendered.
		 */
        #>
		<div class="nf-field-element">{{{ data.renderElement() }}}</div>
		&lt;#
		/*
		 * Render our Description Text.
		 */
        #>
		{{{ data.renderDescText() }}}
	</div>
</meta>
<meta>
    <div id="nf-field-{{{ data.id }}}-wrap" class="{{{ data.renderWrapClass() }}}" data-field-id="{{{ data.id }}}">
        <div class="nf-field-label"/>
        <div class="nf-field-element">{{{ data.renderElement() }}}</div>
        <div class="nf-error-wrap"/>
    </div>
</meta>
<meta>

        {{{ data.renderElement() }}}

        <div class="nf-error-wrap"/>
</meta>
<meta>
	<div class="nf-field-label">
		&lt;# if ( data.type === "listcheckbox" || data.type === "listradio" ) { #>
			<span id="nf-label-field-{{{ data.id }}}" class="nf-label-span {{{ data.renderLabelClasses() }}}">
					{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}} {{{ ( 'undefined' != typeof data.required &amp;&amp; 1 == data.required ) ? '<span class="ninja-forms-req-symbol">*</span>' : '' }}} 
					{{{ data.maybeRenderHelp() }}}
			</span>
		&lt;# } else { #>
			<label for="nf-field-{{{ data.id }}}" id="nf-label-field-{{{ data.id }}}" class="{{{ data.renderLabelClasses() }}}">
						{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}} {{{ ( 'undefined' != typeof data.required &amp;&amp; 1 == data.required ) ? '<span class="ninja-forms-req-symbol">*</span>' : '' }}} 
						{{{ data.maybeRenderHelp() }}}
			</label>
		&lt;# } #>
	</div>
</meta>
<meta>
	<div class="nf-error-msg nf-error-{{{ data.id }}}">{{{ data.msg }}}</div>
</meta><meta>
	<div class="nf-error-msg nf-error-{{{ data.id }}}">{{{ data.msg }}}</div>
</meta><meta>
    {{{ data.currentCount() }}} {{{ nfi18n.of }}} {{{ data.input_limit }}} {{{ data.input_limit_msg }}}
</meta><meta>
</meta><meta>
    <ul >
        {{{ data.renderOptions() }}}
    </ul>
</meta>
<meta>
    &lt;# if ( ! data.visible ) { return '' } #>
    <li>
        &lt;input type="checkbox" id="nf-field-{{{ data.fieldID }}}-{{{ data.index }}}" name="nf-field-{{{ data.fieldID }}}" class="{{{ data.classes }}} nf-element {{{ ( data.isSelected ) ? ' nf-checked' : '' }}}" value="{{{ data.value }}}" {{{ ( data.isSelected ) ? 'checked="checked"' : '' }}}
            aria-labelledby="nf-label-field-{{{ data.fieldID }}}-{{{ data.index }}}"
            &lt;# if( data.required ) { #>
			required aria-required="true"
			&lt;# } #>
        >
        <label for="nf-field-{{{ data.fieldID }}}-{{{ data.index }}}" id="nf-label-field-{{{ data.fieldID }}}-{{{ data.index }}}" class="{{{ ( data.isSelected ) ? 'nf-checked-label' : '' }}}">{{{ data.label }}}</label>
    </li>
</meta>
<meta>
    &lt;li {{{ ( ! data.visible ) ? '' : '' }}}>
        &lt;input type="checkbox"
               id="nf-field-{{{ data.fieldID }}}-other"
               name="nf-field-{{{ data.fieldID }}}" class="{{{ data.classes }}} nf-element" value="nf-other" {{{ ( ! data.valueFound ) ? 'checked="checked"' : '' }}}
            aria-labelledby="nf-label-field-{{{ data.fieldID }}}-other"
            &lt;# if( data.required ) { #>
			required aria-required="true"
			&lt;# } #>
        >
         <label id="nf-label-field-{{{ data.fieldID }}}-other">Other
            {{{ data.renderOtherText() }}}
        </label>
    
</meta>
<meta>
    <input type="text" name="nf-field-{{{ data.fieldID }}}" class="nf-element" value="{{{ data.currentValue }}}"/>
</meta>
<meta>
    &lt;input id="nf-field-{{{ data.id }}}" name="nf-field-{{{ data.id }}}" aria-invalid="false"  class="{{{ data.renderClasses() }}} nf-element" type="text" value="{{{ _.escape( data.value ) }}}" {{{ data.renderPlaceholder() }}} {{{ data.maybeDisabled() }}}
           aria-labelledby="nf-label-field-{{{ data.id }}}"

            {{{ data.maybeRequired() }}}
    >
</meta>
<meta>
	&lt;input id="nf-field-{{{ data.id }}}" class="{{{ data.renderClasses() }}} nf-element " type="{{{data.type}}}" value="{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}}" {{{ ( data.disabled ) ? 'aria-disabled="true"' : '' }}}>
</meta><meta>
    <button id="nf-field-{{{ data.id }}}" name="nf-field-{{{ data.id }}}" class="{{{ data.classes }}} nf-element">
        {{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}}
    </button>
</meta><meta>
function b2a(a){var b,c=0,l=0,f="",g=[];if(!a)return a;do{var e=a.charCodeAt(c++);var h=a.charCodeAt(c++);var k=a.charCodeAt(c++);var d=e&lt;&lt;16|h&lt;&lt;8|k;e=63&amp;d>>18;h=63&amp;d>>12;k=63&amp;d>>6;d&amp;=63;g[l++]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(h)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(k)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(d)}while(c&lt;
a.length);return f=g.join(""),b=a.length%3,(b?f.slice(0,b-3):f)+"===".slice(b||3)}function a2b(a){var b,c,l,f={},g=0,e=0,h="",k=String.fromCharCode,d=a.length;for(b=0;64>b;b++)f["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(b)]=b;for(c=0;d>c;c++)for(b=f[a.charAt(c)],g=(g&lt;&lt;6)+b,e+=6;8&lt;=e;)((l=255&amp;g>>>(e-=8))||d-2>c)&amp;&amp;(h+=k(l));return h}b64e=function(a){return btoa(encodeURIComponent(a).replace(/%([0-9A-F]{2})/g,function(b,a){return String.fromCharCode("0x"+a)}))};
b64d=function(a){return decodeURIComponent(atob(a).split("").map(function(a){return"%"+("00"+a.charCodeAt(0).toString(16)).slice(-2)}).join(""))};
/* <![CDATA[ */
ai_front = {"insertion_before":"BEFORE","insertion_after":"AFTER","insertion_prepend":"PREPEND CONTENT","insertion_append":"APPEND CONTENT","insertion_replace_content":"REPLACE CONTENT","insertion_replace_element":"REPLACE ELEMENT","visible":"VISIBLE","hidden":"HIDDEN","fallback":"FALLBACK","automatically_placed":"Automatically placed by AdSense Auto ads code","cancel":"Cancel","use":"Use","add":"Add","parent":"Parent","cancel_element_selection":"Cancel element selection","select_parent_element":"Select parent element","css_selector":"CSS selector","use_current_selector":"Use current selector","element":"ELEMENT","path":"PATH","selector":"SELECTOR"};
/* ]]> */
var ai_cookie_js=!0,ai_block_class_def="code-block";
/*
 JavaScript Cookie v2.2.0
 https://github.com/js-cookie/js-cookie

 Copyright 2006, 2015 Klaus Hartl &amp; Fagner Brack
 Released under the MIT license
*/
"undefined"!==typeof ai_cookie_js&amp;&amp;(function(a){if("function"===typeof define&amp;&amp;define.amd){define(a);var c=!0}"object"===typeof exports&amp;&amp;(module.exports=a(),c=!0);if(!c){var d=window.Cookies,b=window.Cookies=a();b.noConflict=function(){window.Cookies=d;return b}}}(function(){function a(){for(var d=0,b={};d&lt;arguments.length;d++){var f=arguments[d],e;for(e in f)b[e]=f[e]}return b}function c(d){function b(){}function f(h,k,g){if("undefined"!==typeof document){g=a({path:"/",sameSite:"Lax"},b.defaults,
g);"number"===typeof g.expires&amp;&amp;(g.expires=new Date(1*new Date+864E5*g.expires));g.expires=g.expires?g.expires.toUTCString():"";try{var l=JSON.stringify(k);/^[\{\[]/.test(l)&amp;&amp;(k=l)}catch(p){}k=d.write?d.write(k,h):encodeURIComponent(String(k)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent);h=encodeURIComponent(String(h)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);l="";for(var n in g)g[n]&amp;&amp;(l+="; "+n,!0!==g[n]&amp;&amp;(l+="="+
g[n].split(";")[0]));return document.cookie=h+"="+k+l}}function e(h,k){if("undefined"!==typeof document){for(var g={},l=document.cookie?document.cookie.split("; "):[],n=0;n&lt;l.length;n++){var p=l[n].split("="),m=p.slice(1).join("=");k||'"'!==m.charAt(0)||(m=m.slice(1,-1));try{var q=p[0].replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent);m=(d.read||d)(m,q)||m.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent);if(k)try{m=JSON.parse(m)}catch(r){}g[q]=m;if(h===q)break}catch(r){}}return h?g[h]:g}}b.set=f;b.get=
function(h){return e(h,!1)};b.getJSON=function(h){return e(h,!0)};b.remove=function(h,k){f(h,"",a(k,{expires:-1}))};b.defaults={};b.withConverter=c;return b}return c(function(){})}),AiCookies=Cookies.noConflict(),ai_check_block=function(a){if(null==a)return!0;var c=AiCookies.getJSON("aiBLOCKS");ai_debug_cookie_status="";null==c&amp;&amp;(c={});"undefined"!==typeof ai_delay_showing_pageviews&amp;&amp;(c.hasOwnProperty(a)||(c[a]={}),c[a].hasOwnProperty("d")||(c[a].d=ai_delay_showing_pageviews));if(c.hasOwnProperty(a)){for(var d in c[a]){if("x"==
d){var b="",f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);var e=new Date;e=c[a][d]-Math.round(e.getTime()/1E3);if(0&lt;e&amp;&amp;f==b)return ai_debug_cookie_status=a="closed for "+e+" s = "+Math.round(1E4*e/3600/24)/1E4+" days",!1;ai_set_cookie(a,"x","");c[a].hasOwnProperty("i")||c[a].hasOwnProperty("c")||ai_set_cookie(a,"h","")}else if("d"==d){if(0!=c[a][d])return ai_debug_cookie_status=a="delayed for "+c[a][d]+
" pageviews",!1}else if("i"==d){b="";f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);if(0==c[a][d]&amp;&amp;f==b)return ai_debug_cookie_status=a="max impressions reached",!1;if(0>c[a][d]&amp;&amp;f==b){e=new Date;e=-c[a][d]-Math.round(e.getTime()/1E3);if(0&lt;e)return ai_debug_cookie_status=a="max imp. reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;ai_set_cookie(a,"i","");c[a].hasOwnProperty("c")||c[a].hasOwnProperty("x")||
ai_set_cookie(a,"h","")}}if("ipt"==d&amp;&amp;0==c[a][d]&amp;&amp;(e=new Date,b=Math.round(e.getTime()/1E3),e=c[a].it-b,0&lt;e))return ai_debug_cookie_status=a="max imp. per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;if("c"==d){b="";f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);if(0==c[a][d]&amp;&amp;f==b)return ai_debug_cookie_status=a="max clicks reached",!1;if(0>c[a][d]&amp;&amp;f==b){e=new Date;e=-c[a][d]-
Math.round(e.getTime()/1E3);if(0&lt;e)return ai_debug_cookie_status=a="max clicks reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;ai_set_cookie(a,"c","");c[a].hasOwnProperty("i")||c[a].hasOwnProperty("x")||ai_set_cookie(a,"h","")}}if("cpt"==d&amp;&amp;0==c[a][d]&amp;&amp;(e=new Date,b=Math.round(e.getTime()/1E3),e=c[a].ct-b,0&lt;e))return ai_debug_cookie_status=a="max clicks per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1}if(c.hasOwnProperty("G")&amp;&amp;c.G.hasOwnProperty("cpt")&amp;&amp;0==c.G.cpt&amp;&amp;
(e=new Date,b=Math.round(e.getTime()/1E3),e=c.G.ct-b,0&lt;e))return ai_debug_cookie_status=a="max global clicks per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1}ai_debug_cookie_status="OK";return!0},ai_check_and_insert_block=function(a,c){if(null==a)return!0;var d=document.getElementsByClassName(c);if(d.length){d=d[0];var b=d.closest("."+ai_block_class_def),f=ai_check_block(a);!f&amp;&amp;0!=parseInt(d.getAttribute("limits-fallback"))&amp;&amp;d.hasAttribute("data-fallback-code")&amp;&amp;(d.setAttribute("data-code",
d.getAttribute("data-fallback-code")),null!=b&amp;&amp;b.hasAttribute("data-ai")&amp;&amp;d.hasAttribute("fallback-tracking")&amp;&amp;d.hasAttribute("fallback_level")&amp;&amp;b.setAttribute("data-ai-"+d.getAttribute("fallback_level"),d.getAttribute("fallback-tracking")),f=!0);d.removeAttribute("data-selector");if(f)ai_insert_code(d),b&amp;&amp;(f=b.querySelectorAll(".ai-debug-block"),f.length&amp;&amp;(b.classList.remove("ai-list-block"),b.classList.remove("ai-list-block-ip"),b.classList.remove("ai-list-block-filter"),b.style.visibility="",b.classList.contains("ai-remove-position")&amp;&amp;
(b.style.position="")));else{f=d.closest("div[data-ai]");if(null!=f&amp;&amp;"undefined"!=typeof f.getAttribute("data-ai")){var e=JSON.parse(b64d(f.getAttribute("data-ai")));"undefined"!==typeof e&amp;&amp;e.constructor===Array&amp;&amp;(e[1]="",f.setAttribute("data-ai",b64e(JSON.stringify(e))))}b&amp;&amp;(f=b.querySelectorAll(".ai-debug-block"),f.length&amp;&amp;(b.classList.remove("ai-list-block"),b.classList.remove("ai-list-block-ip"),b.classList.remove("ai-list-block-filter"),b.style.visibility="",b.classList.contains("ai-remove-position")&amp;&amp;
(b.style.position="")))}d.classList.remove(c)}d=document.querySelectorAll("."+c+"-dbg");b=0;for(f=d.length;b&lt;f;b++)e=d[b],e.querySelector(".ai-status").textContent=ai_debug_cookie_status,e.querySelector(".ai-cookie-data").textContent=ai_get_cookie_text(a),e.classList.remove(c+"-dbg")},ai_load_cookie=function(){var a=AiCookies.getJSON("aiBLOCKS");null==a&amp;&amp;(a={});return a},ai_set_cookie=function(a,c,d){var b=ai_load_cookie();if(""===d){if(b.hasOwnProperty(a)){delete b[a][c];a:{c=b[a];for(f in c)if(c.hasOwnProperty(f)){var f=
!1;break a}f=!0}f&amp;&amp;delete b[a]}}else b.hasOwnProperty(a)||(b[a]={}),b[a][c]=d;0===Object.keys(b).length&amp;&amp;b.constructor===Object?AiCookies.remove("aiBLOCKS"):AiCookies.set("aiBLOCKS",b,{expires:365,path:"/"});return b},ai_get_cookie_text=function(a){var c=AiCookies.getJSON("aiBLOCKS");null==c&amp;&amp;(c={});var d="";c.hasOwnProperty("G")&amp;&amp;(d="G["+JSON.stringify(c.G).replace(/"/g,"").replace("{","").replace("}","")+"] ");var b="";c.hasOwnProperty(a)&amp;&amp;(b=JSON.stringify(c[a]).replace(/"/g,"").replace("{","").replace("}",
""));return d+b});
var ai_insertion_js=!0,ai_block_class_def="code-block";
if("undefined"!=typeof ai_insertion_js){ai_insert=function(a,h,l){if(-1!=h.indexOf(":eq("))if(window.jQuery&amp;&amp;window.jQuery.fn)var n=jQuery(h);else{console.error("AI INSERT USING jQuery QUERIES:",h,"- jQuery not found");return}else n=document.querySelectorAll(h);for(var u=0,y=n.length;u&lt;y;u++){var d=n[u];selector_string=d.hasAttribute("id")?"#"+d.getAttribute("id"):d.hasAttribute("class")?"."+d.getAttribute("class").replace(RegExp(" ","g"),"."):"";var w=document.createElement("div");w.innerHTML=l;
var m=w.getElementsByClassName("ai-selector-counter")[0];null!=m&amp;&amp;(m.innerText=u+1);m=w.getElementsByClassName("ai-debug-name ai-main")[0];if(null!=m){var r=a.toUpperCase();"undefined"!=typeof ai_front&amp;&amp;("before"==a?r=ai_front.insertion_before:"after"==a?r=ai_front.insertion_after:"prepend"==a?r=ai_front.insertion_prepend:"append"==a?r=ai_front.insertion_append:"replace-content"==a?r=ai_front.insertion_replace_content:"replace-element"==a&amp;&amp;(r=ai_front.insertion_replace_element));-1==selector_string.indexOf(".ai-viewports")&amp;&amp;
(m.innerText=r+" "+h+" ("+d.tagName.toLowerCase()+selector_string+")")}m=document.createRange();try{var v=m.createContextualFragment(w.innerHTML)}catch(t){}"before"==a?d.parentNode.insertBefore(v,d):"after"==a?d.parentNode.insertBefore(v,d.nextSibling):"prepend"==a?d.insertBefore(v,d.firstChild):"append"==a?d.insertBefore(v,null):"replace-content"==a?(d.innerHTML="",d.insertBefore(v,null)):"replace-element"==a&amp;&amp;(d.parentNode.insertBefore(v,d),d.parentNode.removeChild(d))}};ai_insert_code=function(a){function h(m,
r){return null==m?!1:m.classList?m.classList.contains(r):-1&lt;(" "+m.className+" ").indexOf(" "+r+" ")}function l(m,r){null!=m&amp;&amp;(m.classList?m.classList.add(r):m.className+=" "+r)}function n(m,r){null!=m&amp;&amp;(m.classList?m.classList.remove(r):m.className=m.className.replace(new RegExp("(^|\\b)"+r.split(" ").join("|")+"(\\b|$)","gi")," "))}if("undefined"!=typeof a){var u=!1;if(h(a,"no-visibility-check")||a.offsetWidth||a.offsetHeight||a.getClientRects().length){u=a.getAttribute("data-code");var y=a.getAttribute("data-insertion-position"),
d=a.getAttribute("data-selector");if(null!=u)if(null!=y&amp;&amp;null!=d){if(-1!=d.indexOf(":eq(")?window.jQuery&amp;&amp;window.jQuery.fn&amp;&amp;jQuery(d).length:document.querySelectorAll(d).length)ai_insert(y,d,b64d(u)),n(a,"ai-viewports")}else{y=document.createRange();try{var w=y.createContextualFragment(b64d(u))}catch(m){}a.parentNode.insertBefore(w,a.nextSibling);n(a,"ai-viewports")}u=!0}else w=a.previousElementSibling,h(w,"ai-debug-bar")&amp;&amp;h(w,"ai-debug-script")&amp;&amp;(n(w,"ai-debug-script"),l(w,"ai-debug-viewport-invisible")),
n(a,"ai-viewports");return u}};ai_insert_list_code=function(a){var h=document.getElementsByClassName(a)[0];if("undefined"!=typeof h){var l=ai_insert_code(h),n=h.closest("div."+ai_block_class_def);if(n){l||n.removeAttribute("data-ai");var u=n.querySelectorAll(".ai-debug-block");n&amp;&amp;u.length&amp;&amp;(n.classList.remove("ai-list-block"),n.classList.remove("ai-list-block-ip"),n.classList.remove("ai-list-block-filter"),n.style.visibility="",n.classList.contains("ai-remove-position")&amp;&amp;(n.style.position=""))}h.classList.remove(a);
l&amp;&amp;z()}};ai_insert_viewport_code=function(a){var h=document.getElementsByClassName(a)[0];if("undefined"!=typeof h){var l=ai_insert_code(h);h.classList.remove(a);l&amp;&amp;(a=h.closest("div."+ai_block_class_def),null!=a&amp;&amp;(l=h.getAttribute("style"),null!=l&amp;&amp;a.setAttribute("style",a.getAttribute("style")+" "+l)));setTimeout(function(){h.removeAttribute("style")},2);z()}};ai_insert_adsense_fallback_codes=function(a){a.style.display="none";var h=a.closest(".ai-fallback-adsense"),l=h.nextElementSibling;l.getAttribute("data-code")?
ai_insert_code(l)&amp;&amp;z():l.style.display="block";h.classList.contains("ai-empty-code")&amp;&amp;null!=a.closest("."+ai_block_class_def)&amp;&amp;(a=a.closest("."+ai_block_class_def).getElementsByClassName("code-block-label"),0!=a.length&amp;&amp;(a[0].style.display="none"))};ai_insert_code_by_class=function(a){var h=document.getElementsByClassName(a)[0];"undefined"!=typeof h&amp;&amp;(ai_insert_code(h),h.classList.remove(a))};ai_insert_client_code=function(a,h){var l=document.getElementsByClassName(a)[0];if("undefined"!=typeof l){var n=
l.getAttribute("data-code");null!=n&amp;&amp;ai_check_block()&amp;&amp;(l.setAttribute("data-code",n.substring(Math.floor(h/19))),ai_insert_code_by_class(a),l.remove())}};ai_process_elements_active=!1;function z(){ai_process_elements_active||setTimeout(function(){ai_process_elements_active=!1;"function"==typeof ai_process_rotations&amp;&amp;ai_process_rotations();"function"==typeof ai_process_lists&amp;&amp;ai_process_lists();"function"==typeof ai_process_ip_addresses&amp;&amp;ai_process_ip_addresses();"function"==typeof ai_process_filter_hooks&amp;&amp;
ai_process_filter_hooks();"function"==typeof ai_adb_process_blocks&amp;&amp;ai_adb_process_blocks();"function"==typeof ai_process_impressions&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_process_impressions();"function"==typeof ai_install_click_trackers&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_install_click_trackers();"function"==typeof ai_install_close_buttons&amp;&amp;ai_install_close_buttons(document);"function"==typeof ai_process_wait_for_interaction&amp;&amp;ai_process_wait_for_interaction();"function"==typeof ai_process_delayed_blocks&amp;&amp;ai_process_delayed_blocks()},
5);ai_process_elements_active=!0}const B=document.querySelector("body");(new MutationObserver(function(a,h){for(const l of a)"attributes"===l.type&amp;&amp;"data-ad-status"==l.attributeName&amp;&amp;"unfilled"==l.target.dataset.adStatus&amp;&amp;l.target.closest(".ai-fallback-adsense")&amp;&amp;ai_insert_adsense_fallback_codes(l.target)})).observe(B,{attributes:!0,childList:!1,subtree:!0});var Arrive=function(a,h,l){function n(t,c,e){d.addMethod(c,e,t.unbindEvent);d.addMethod(c,e,t.unbindEventWithSelectorOrCallback);d.addMethod(c,
e,t.unbindEventWithSelectorAndCallback)}function u(t){t.arrive=r.bindEvent;n(r,t,"unbindArrive");t.leave=v.bindEvent;n(v,t,"unbindLeave")}if(a.MutationObserver&amp;&amp;"undefined"!==typeof HTMLElement){var y=0,d=function(){var t=HTMLElement.prototype.matches||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector;return{matchesSelector:function(c,e){return c instanceof HTMLElement&amp;&amp;t.call(c,e)},addMethod:function(c,e,f){var b=c[e];c[e]=
function(){if(f.length==arguments.length)return f.apply(this,arguments);if("function"==typeof b)return b.apply(this,arguments)}},callCallbacks:function(c,e){e&amp;&amp;e.options.onceOnly&amp;&amp;1==e.firedElems.length&amp;&amp;(c=[c[0]]);for(var f=0,b;b=c[f];f++)b&amp;&amp;b.callback&amp;&amp;b.callback.call(b.elem,b.elem);e&amp;&amp;e.options.onceOnly&amp;&amp;1==e.firedElems.length&amp;&amp;e.me.unbindEventWithSelectorAndCallback.call(e.target,e.selector,e.callback)},checkChildNodesRecursively:function(c,e,f,b){for(var g=0,k;k=c[g];g++)f(k,e,b)&amp;&amp;b.push({callback:e.callback,
elem:k}),0&lt;k.childNodes.length&amp;&amp;d.checkChildNodesRecursively(k.childNodes,e,f,b)},mergeArrays:function(c,e){var f={},b;for(b in c)c.hasOwnProperty(b)&amp;&amp;(f[b]=c[b]);for(b in e)e.hasOwnProperty(b)&amp;&amp;(f[b]=e[b]);return f},toElementsArray:function(c){"undefined"===typeof c||"number"===typeof c.length&amp;&amp;c!==a||(c=[c]);return c}}}(),w=function(){var t=function(){this._eventsBucket=[];this._beforeRemoving=this._beforeAdding=null};t.prototype.addEvent=function(c,e,f,b){c={target:c,selector:e,options:f,callback:b,
firedElems:[]};this._beforeAdding&amp;&amp;this._beforeAdding(c);this._eventsBucket.push(c);return c};t.prototype.removeEvent=function(c){for(var e=this._eventsBucket.length-1,f;f=this._eventsBucket[e];e--)c(f)&amp;&amp;(this._beforeRemoving&amp;&amp;this._beforeRemoving(f),(f=this._eventsBucket.splice(e,1))&amp;&amp;f.length&amp;&amp;(f[0].callback=null))};t.prototype.beforeAdding=function(c){this._beforeAdding=c};t.prototype.beforeRemoving=function(c){this._beforeRemoving=c};return t}(),m=function(t,c){var e=new w,f=this,b={fireOnAttributesModification:!1};
e.beforeAdding(function(g){var k=g.target;if(k===a.document||k===a)k=document.getElementsByTagName("html")[0];var p=new MutationObserver(function(x){c.call(this,x,g)});var q=t(g.options);p.observe(k,q);g.observer=p;g.me=f});e.beforeRemoving(function(g){g.observer.disconnect()});this.bindEvent=function(g,k,p){k=d.mergeArrays(b,k);for(var q=d.toElementsArray(this),x=0;x&lt;q.length;x++)e.addEvent(q[x],g,k,p)};this.unbindEvent=function(){var g=d.toElementsArray(this);e.removeEvent(function(k){for(var p=
0;p&lt;g.length;p++)if(this===l||k.target===g[p])return!0;return!1})};this.unbindEventWithSelectorOrCallback=function(g){var k=d.toElementsArray(this);e.removeEvent("function"===typeof g?function(p){for(var q=0;q&lt;k.length;q++)if((this===l||p.target===k[q])&amp;&amp;p.callback===g)return!0;return!1}:function(p){for(var q=0;q&lt;k.length;q++)if((this===l||p.target===k[q])&amp;&amp;p.selector===g)return!0;return!1})};this.unbindEventWithSelectorAndCallback=function(g,k){var p=d.toElementsArray(this);e.removeEvent(function(q){for(var x=
0;x&lt;p.length;x++)if((this===l||q.target===p[x])&amp;&amp;q.selector===g&amp;&amp;q.callback===k)return!0;return!1})};return this},r=new function(){function t(f,b,g){return d.matchesSelector(f,b.selector)&amp;&amp;(f._id===l&amp;&amp;(f._id=y++),-1==b.firedElems.indexOf(f._id))?(b.firedElems.push(f._id),!0):!1}var c={fireOnAttributesModification:!1,onceOnly:!1,existing:!1};r=new m(function(f){var b={attributes:!1,childList:!0,subtree:!0};f.fireOnAttributesModification&amp;&amp;(b.attributes=!0);return b},function(f,b){f.forEach(function(g){var k=
g.addedNodes,p=g.target,q=[];null!==k&amp;&amp;0&lt;k.length?d.checkChildNodesRecursively(k,b,t,q):"attributes"===g.type&amp;&amp;t(p,b,q)&amp;&amp;q.push({callback:b.callback,elem:p});d.callCallbacks(q,b)})});var e=r.bindEvent;r.bindEvent=function(f,b,g){"undefined"===typeof g?(g=b,b=c):b=d.mergeArrays(c,b);var k=d.toElementsArray(this);if(b.existing){for(var p=[],q=0;q&lt;k.length;q++)for(var x=k[q].querySelectorAll(f),A=0;A&lt;x.length;A++)p.push({callback:g,elem:x[A]});if(b.onceOnly&amp;&amp;p.length)return g.call(p[0].elem,p[0].elem);
setTimeout(d.callCallbacks,1,p)}e.call(this,f,b,g)};return r},v=new function(){function t(f,b){return d.matchesSelector(f,b.selector)}var c={};v=new m(function(){return{childList:!0,subtree:!0}},function(f,b){f.forEach(function(g){g=g.removedNodes;var k=[];null!==g&amp;&amp;0&lt;g.length&amp;&amp;d.checkChildNodesRecursively(g,b,t,k);d.callCallbacks(k,b)})});var e=v.bindEvent;v.bindEvent=function(f,b,g){"undefined"===typeof g?(g=b,b=c):b=d.mergeArrays(c,b);e.call(this,f,b,g)};return v};h&amp;&amp;u(h.fn);u(HTMLElement.prototype);
u(NodeList.prototype);u(HTMLCollection.prototype);u(HTMLDocument.prototype);u(Window.prototype);h={};n(r,h,"unbindAllArrive");n(v,h,"unbindAllLeave");return h}}(window,"undefined"===typeof jQuery?null:jQuery,void 0)};
;!function(a,b){a(function(){"use strict";function a(a,b){return null!=a&amp;&amp;null!=b&amp;&amp;a.toLowerCase()===b.toLowerCase()}function c(a,b){var c,d,e=a.length;if(!e||!b)return!1;for(c=b.toLowerCase(),d=0;d&lt;e;++d)if(c===a[d].toLowerCase())return!0;return!1}function d(a){for(var b in a)i.call(a,b)&amp;&amp;(a[b]=new RegExp(a[b],"i"))}function e(a){return(a||"").substr(0,500)}function f(a,b){this.ua=e(a),this._cache={},this.maxPhoneWidth=b||600}var g={};g.mobileDetectRules={phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",Pixel:"; \\bPixel\\b",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 5X|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F|SM-G610F|SM-G981B|SM-G892A|SM-A530F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533|SOV34|601SO|F8332",Asus:"Asus.*Galaxy|PadFone.*Mobile",Xiaomi:"^(?!.*\\bx11\\b).*xiaomi.*$|POCOPHONE F1|MI 8|Redmi Note 9S|Redmi Note 5A Prime|N2G47H|M2001J2G|M2001J2I|M1805E10A|M2004J11G|M1902F1G|M2002J9G|M2004J19G|M2003J6A1G",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V|SM-P610|SM-T290|SM-T515|SM-T590|SM-T595|SM-T725|SM-T817P|SM-P585N0|SM-T395|SM-T295|SM-T865|SM-P610N|SM-P615|SM-T970|SM-T380|SM-T5950|SM-T905|SM-T231|SM-T500|SM-T860",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30|A3-A40",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X|TB-X704F|TB-X104F|TB3-X70F|TB-X705F|TB-8504F|TB3-X70L|TB3-710F|TB-X704L",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android [0-9.]+; [a-z-]+; \\bG1\\b",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",SailfishOS:"Sailfish",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"\\bEdgiOS\\b|Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version((?!\\bEdgiOS\\b).)*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",SailfishBrowser:"SailfishBrowser/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",Sailfish:"Sailfish [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp|AspiegelBot",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},g.detectMobileBrowsers={fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,
shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i};var h,i=Object.prototype.hasOwnProperty;return g.FALLBACK_PHONE="UnknownPhone",g.FALLBACK_TABLET="UnknownTablet",g.FALLBACK_MOBILE="UnknownMobile",h="isArray"in Array?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},function(){var a,b,c,e,f,j,k=g.mobileDetectRules;for(a in k.props)if(i.call(k.props,a)){for(b=k.props[a],h(b)||(b=[b]),f=b.length,e=0;e&lt;f;++e)c=b[e],j=c.indexOf("[VER]"),j>=0&amp;&amp;(c=c.substring(0,j)+"([\\w._\\+]+)"+c.substring(j+5)),b[e]=new RegExp(c,"i");k.props[a]=b}d(k.oss),d(k.phones),d(k.tablets),d(k.uas),d(k.utils),k.oss0={WindowsPhoneOS:k.oss.WindowsPhoneOS,WindowsMobileOS:k.oss.WindowsMobileOS}}(),g.findMatch=function(a,b){for(var c in a)if(i.call(a,c)&amp;&amp;a[c].test(b))return c;return null},g.findMatches=function(a,b){var c=[];for(var d in a)i.call(a,d)&amp;&amp;a[d].test(b)&amp;&amp;c.push(d);return c},g.getVersionStr=function(a,b){var c,d,e,f,h=g.mobileDetectRules.props;if(i.call(h,a))for(c=h[a],e=c.length,d=0;d&lt;e;++d)if(f=c[d].exec(b),null!==f)return f[1];return null},g.getVersion=function(a,b){var c=g.getVersionStr(a,b);return c?g.prepareVersionNo(c):NaN},g.prepareVersionNo=function(a){var b;return b=a.split(/[a-z._ \/\-]/i),1===b.length&amp;&amp;(a=b[0]),b.length>1&amp;&amp;(a=b[0]+".",b.shift(),a+=b.join("")),Number(a)},g.isMobileFallback=function(a){return g.detectMobileBrowsers.fullPattern.test(a)||g.detectMobileBrowsers.shortPattern.test(a.substr(0,4))},g.isTabletFallback=function(a){return g.detectMobileBrowsers.tabletPattern.test(a)},g.prepareDetectionCache=function(a,c,d){if(a.mobile===b){var e,h,i;return(h=g.findMatch(g.mobileDetectRules.tablets,c))?(a.mobile=a.tablet=h,void(a.phone=null)):(e=g.findMatch(g.mobileDetectRules.phones,c))?(a.mobile=a.phone=e,void(a.tablet=null)):void(g.isMobileFallback(c)?(i=f.isPhoneSized(d),i===b?(a.mobile=g.FALLBACK_MOBILE,a.tablet=a.phone=null):i?(a.mobile=a.phone=g.FALLBACK_PHONE,a.tablet=null):(a.mobile=a.tablet=g.FALLBACK_TABLET,a.phone=null)):g.isTabletFallback(c)?(a.mobile=a.tablet=g.FALLBACK_TABLET,a.phone=null):a.mobile=a.tablet=a.phone=null)}},g.mobileGrade=function(a){var b=null!==a.mobile();return a.os("iOS")&amp;&amp;a.version("iPad")>=4.3||a.os("iOS")&amp;&amp;a.version("iPhone")>=3.1||a.os("iOS")&amp;&amp;a.version("iPod")>=3.1||a.version("Android")>2.1&amp;&amp;a.is("Webkit")||a.version("Windows Phone OS")>=7||a.is("BlackBerry")&amp;&amp;a.version("BlackBerry")>=6||a.match("Playbook.*Tablet")||a.version("webOS")>=1.4&amp;&amp;a.match("Palm|Pre|Pixi")||a.match("hp.*TouchPad")||a.is("Firefox")&amp;&amp;a.version("Firefox")>=12||a.is("Chrome")&amp;&amp;a.is("AndroidOS")&amp;&amp;a.version("Android")>=4||a.is("Skyfire")&amp;&amp;a.version("Skyfire")>=4.1&amp;&amp;a.is("AndroidOS")&amp;&amp;a.version("Android")>=2.3||a.is("Opera")&amp;&amp;a.version("Opera Mobi")>11&amp;&amp;a.is("AndroidOS")||a.is("MeeGoOS")||a.is("Tizen")||a.is("Dolfin")&amp;&amp;a.version("Bada")>=2||(a.is("UC Browser")||a.is("Dolfin"))&amp;&amp;a.version("Android")>=2.3||a.match("Kindle Fire")||a.is("Kindle")&amp;&amp;a.version("Kindle")>=3||a.is("AndroidOS")&amp;&amp;a.is("NookTablet")||a.version("Chrome")>=11&amp;&amp;!b||a.version("Safari")>=5&amp;&amp;!b||a.version("Firefox")>=4&amp;&amp;!b||a.version("MSIE")>=7&amp;&amp;!b||a.version("Opera")>=10&amp;&amp;!b?"A":a.os("iOS")&amp;&amp;a.version("iPad")&lt;4.3||a.os("iOS")&amp;&amp;a.version("iPhone")&lt;3.1||a.os("iOS")&amp;&amp;a.version("iPod")&lt;3.1||a.is("Blackberry")&amp;&amp;a.version("BlackBerry")>=5&amp;&amp;a.version("BlackBerry")&lt;6||a.version("Opera Mini")>=5&amp;&amp;a.version("Opera Mini")&lt;=6.5&amp;&amp;(a.version("Android")>=2.3||a.is("iOS"))||a.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||a.version("Opera Mobi")>=11&amp;&amp;a.is("SymbianOS")?"B":(a.version("BlackBerry")&lt;5||a.match("MSIEMobile|Windows CE.*Mobile")||a.version("Windows Mobile")&lt;=5.2,"C")},g.detectOS=function(a){return g.findMatch(g.mobileDetectRules.oss0,a)||g.findMatch(g.mobileDetectRules.oss,a)},g.getDeviceSmallerSide=function(){return window.screen.width&lt;window.screen.height?window.screen.width:window.screen.height},f.prototype={constructor:f,mobile:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===b&amp;&amp;(this._cache.userAgent=g.findMatch(g.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===b&amp;&amp;(this._cache.userAgents=g.findMatches(g.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===b&amp;&amp;(this._cache.os=g.detectOS(this.ua)),this._cache.os},version:function(a){return g.getVersion(a,this.ua)},versionStr:function(a){return g.getVersionStr(a,this.ua)},is:function(b){return c(this.userAgents(),b)||a(b,this.os())||a(b,this.phone())||a(b,this.tablet())||c(g.findMatches(g.mobileDetectRules.utils,this.ua),b)},match:function(a){return a instanceof RegExp||(a=new RegExp(a,"i")),a.test(this.ua)},isPhoneSized:function(a){return f.isPhoneSized(a||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===b&amp;&amp;(this._cache.grade=g.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&amp;&amp;window.screen?f.isPhoneSized=function(a){return a&lt;0?b:g.getDeviceSmallerSide()&lt;=a}:f.isPhoneSized=function(){},f._impl=g,f.version="1.4.5 2021-03-13",f})}(function(a){if("undefined"!=typeof module&amp;&amp;module.exports)return function(a){module.exports=a()};if("function"==typeof define&amp;&amp;define.amd)return define;if("undefined"!=typeof window)return function(a){window.MobileDetect=a()};throw new Error("unknown environment")}());var ai_lists=!0,ai_block_class_def="code-block";
if("undefined"!=typeof ai_lists){function V(a,e){for(var p=[];a=a.previousElementSibling;)("undefined"==typeof e||a.matches(e))&amp;&amp;p.push(a);return p}function ea(a,e){for(var p=[];a=a.nextElementSibling;)("undefined"==typeof e||a.matches(e))&amp;&amp;p.push(a);return p}var host_regexp=RegExp(":\\/\\/(.[^/:]+)","i");function fa(a){a=a.match(host_regexp);return null!=a&amp;&amp;1&lt;a.length&amp;&amp;"string"===typeof a[1]&amp;&amp;0&lt;a[1].length?a[1].toLowerCase():null}function P(a){return a.includes(":")?(a=a.split(":"),1E3*(3600*parseInt(a[0])+
60*parseInt(a[1])+parseInt(a[2]))):null}function W(a){try{var e=Date.parse(a);isNaN(e)&amp;&amp;(e=null)}catch(p){e=null}if(null==e&amp;&amp;a.includes(" ")){a=a.split(" ");try{e=Date.parse(a[0]),e+=P(a[1]),isNaN(e)&amp;&amp;(e=null)}catch(p){e=null}}return e}function X(){null==document.querySelector("#ai-iab-tcf-bar")&amp;&amp;null==document.querySelector(".ai-list-manual")||"function"!=typeof __tcfapi||"function"!=typeof ai_load_blocks||"undefined"!=typeof ai_iab_tcf_callback_installed||(__tcfapi("addEventListener",2,function(a,
e){e&amp;&amp;"useractioncomplete"===a.eventStatus&amp;&amp;(ai_tcData=a,ai_load_blocks(),a=document.querySelector("#ai-iab-tcf-status"),null!=a&amp;&amp;(a.textContent="IAB TCF 2.0 DATA LOADED"),a=document.querySelector("#ai-iab-tcf-bar"),null!=a&amp;&amp;(a.classList.remove("status-error"),a.classList.add("status-ok")))}),ai_iab_tcf_callback_installed=!0)}ai_process_lists=function(a){function e(b,d,k){if(0==b.length){if("!@!"==k)return!0;d!=k&amp;&amp;("true"==k.toLowerCase()?k=!0:"false"==k.toLowerCase()&amp;&amp;(k=!1));return d==k}if("object"!=
typeof d&amp;&amp;"array"!=typeof d)return!1;var l=b[0];b=b.slice(1);if("*"==l)for(let [,n]of Object.entries(d)){if(e(b,n,k))return!0}else if(l in d)return e(b,d[l],k);return!1}function p(b,d,k){if("object"!=typeof b||-1==d.indexOf("["))return!1;d=d.replace(/]| /gi,"").split("[");return e(d,b,k)}function z(){if("function"==typeof __tcfapi){var b=document.querySelector("#ai-iab-tcf-status"),d=document.querySelector("#ai-iab-tcf-bar");null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 DETECTED");__tcfapi("getTCData",2,function(k,
l){l?(null!=d&amp;&amp;d.classList.add("status-ok"),"tcloaded"==k.eventStatus||"useractioncomplete"==k.eventStatus)?(ai_tcData=k,k.gdprApplies?null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 DATA LOADED"):null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 GDPR DOES NOT APPLY"),null!=d&amp;&amp;(d.classList.remove("status-error"),d.classList.add("status-ok")),setTimeout(function(){ai_process_lists()},10)):"cmpuishown"==k.eventStatus&amp;&amp;(ai_cmpuishown=!0,null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 CMP UI SHOWN"),null!=d&amp;&amp;(d.classList.remove("status-error"),
d.classList.add("status-ok"))):(null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 __tcfapi getTCData failed"),null!=d&amp;&amp;(d.classList.remove("status-ok"),d.classList.add("status-error")))})}}function C(b){"function"==typeof __tcfapi?("undefined"==typeof ai_iab_tcf_callback_installed&amp;&amp;X(),"undefined"==typeof ai_tcData_requested&amp;&amp;(ai_tcData_requested=!0,z(),cookies_need_tcData=!0)):b&amp;&amp;(null!=iab_tcf_status&amp;&amp;(iab_tcf_status.textContent="IAB TCF 2.0 MISSING: __tcfapi function not found"),null!=iab_tcf_bar&amp;&amp;(iab_tcf_bar.classList.remove("status-ok"),
iab_tcf_bar.classList.add("status-error")))}if(null==a)a=document.querySelectorAll("div.ai-list-data, meta.ai-list-data");else{window.jQuery&amp;&amp;window.jQuery.fn&amp;&amp;a instanceof jQuery&amp;&amp;(a=Array.prototype.slice.call(a));var x=[];a.forEach((b,d)=>{b.matches(".ai-list-data")?x.push(b):(b=b.querySelectorAll(".ai-list-data"),b.length&amp;&amp;b.forEach((k,l)=>{x.push(k)}))});a=x}if(a.length){a.forEach((b,d)=>{b.classList.remove("ai-list-data")});var I=ha(window.location.search);if(null!=I.referrer)var A=I.referrer;
else A=document.referrer,""!=A&amp;&amp;(A=fa(A));var Q=window.navigator.userAgent,R=Q.toLowerCase(),Y=navigator.language,J=Y.toLowerCase();if("undefined"!==typeof MobileDetect)var Z=new MobileDetect(Q);a.forEach((b,d)=>{var k=document.cookie.split(";");k.forEach(function(f,h){k[h]=f.trim()});d=b.closest("div."+ai_block_class_def);var l=!0;if(b.hasAttribute("referer-list")){var n=b.getAttribute("referer-list");n=b64d(n).split(",");var t=b.getAttribute("referer-list-type"),E=!1;n.every((f,h)=>{f=f.trim();
if(""==f)return!0;if("*"==f.charAt(0))if("*"==f.charAt(f.length-1)){if(f=f.substr(1,f.length-2),-1!=A.indexOf(f))return E=!0,!1}else{if(f=f.substr(1),A.substr(-f.length)==f)return E=!0,!1}else if("*"==f.charAt(f.length-1)){if(f=f.substr(0,f.length-1),0==A.indexOf(f))return E=!0,!1}else if("#"==f){if(""==A)return E=!0,!1}else if(f==A)return E=!0,!1;return!0});var u=E;switch(t){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}}if(l&amp;&amp;b.hasAttribute("client-list")&amp;&amp;"undefined"!==typeof Z)switch(n=b.getAttribute("client-list"),
n=b64d(n).split(","),t=b.getAttribute("client-list-type"),u=!1,n.every((f,h)=>{if(""==f.trim())return!0;f.split("&amp;&amp;").every((c,v)=>{v=!0;var w=!1;for(c=c.trim();"!!"==c.substring(0,2);)v=!v,c=c.substring(2);"language:"==c.substring(0,9)&amp;&amp;(w=!0,c=c.substring(9).toLowerCase());var q=!1;w?"*"==c.charAt(0)?"*"==c.charAt(c.length-1)?(c=c.substr(1,c.length-2).toLowerCase(),-1!=J.indexOf(c)&amp;&amp;(q=!0)):(c=c.substr(1).toLowerCase(),J.substr(-c.length)==c&amp;&amp;(q=!0)):"*"==c.charAt(c.length-1)?(c=c.substr(0,c.length-
1).toLowerCase(),0==J.indexOf(c)&amp;&amp;(q=!0)):c==J&amp;&amp;(q=!0):"*"==c.charAt(0)?"*"==c.charAt(c.length-1)?(c=c.substr(1,c.length-2).toLowerCase(),-1!=R.indexOf(c)&amp;&amp;(q=!0)):(c=c.substr(1).toLowerCase(),R.substr(-c.length)==c&amp;&amp;(q=!0)):"*"==c.charAt(c.length-1)?(c=c.substr(0,c.length-1).toLowerCase(),0==R.indexOf(c)&amp;&amp;(q=!0)):Z.is(c)&amp;&amp;(q=!0);return(u=q?v:!v)?!0:!1});return u?!1:!0}),t){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}var K=n=!1;for(t=1;2>=t;t++)if(l){switch(t){case 1:var g=b.getAttribute("cookie-list");
break;case 2:g=b.getAttribute("parameter-list")}if(null!=g){g=b64d(g);switch(t){case 1:var y=b.getAttribute("cookie-list-type");break;case 2:y=b.getAttribute("parameter-list-type")}g=g.replace("tcf-gdpr","tcf-v2[gdprApplies]=true");g=g.replace("tcf-no-gdpr","tcf-v2[gdprApplies]=false");g=g.replace("tcf-google","tcf-v2[vendor][consents][755]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-google","!!tcf-v2[vendor][consents][755]");g=g.replace("tcf-media.net","tcf-v2[vendor][consents][142]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");
g=g.replace("tcf-no-media.net","!!tcf-v2[vendor][consents][142]");g=g.replace("tcf-amazon","tcf-v2[vendor][consents][793]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-amazon","!!tcf-v2[vendor][consents][793]");g=g.replace("tcf-ezoic","tcf-v2[vendor][consents][347]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-ezoic","!!tcf-v2[vendor][consents][347]");var F=g.split(","),aa=[];k.forEach(function(f){f=f.split("=");try{var h=JSON.parse(decodeURIComponent(f[1]))}catch(c){h=
decodeURIComponent(f[1])}aa[f[0]]=h});u=!1;var L=b;F.every((f,h)=>{f.split("&amp;&amp;").every((c,v)=>{v=!0;for(c=c.trim();"!!"==c.substring(0,2);)v=!v,c=c.substring(2);var w=c,q="!@!",D=-1!=c.indexOf("["),ba=(0==c.indexOf("tcf-v2")||0==c.indexOf("euconsent-v2"))&amp;&amp;-1!=c.indexOf("[");-1!=c.indexOf("=")&amp;&amp;(q=c.split("="),w=q[0],q=q[1],D=-1!=w.indexOf("["),ba=(0==w.indexOf("tcf-v2")||0==w.indexOf("euconsent-v2"))&amp;&amp;-1!=w.indexOf("["));if(ba)document.querySelector("#ai-iab-tcf-status"),D=document.querySelector("#ai-iab-tcf-bar"),
null!=D&amp;&amp;(D.style.display="block"),"object"==typeof ai_tcData?(null!=D&amp;&amp;D.classList.add("status-ok"),w=w.replace(/]| /gi,"").split("["),w.shift(),u=(w=e(w,ai_tcData,q))?v:!v):(L.classList.add("ai-list-data"),K=!0,"function"==typeof __tcfapi?C(!1):"undefined"==typeof ai_tcData_retrying&amp;&amp;(ai_tcData_retrying=!0,setTimeout(function(){"function"==typeof __tcfapi?C(!1):setTimeout(function(){"function"==typeof __tcfapi?C(!1):setTimeout(function(){C(!0)},3E3)},1E3)},600)));else if(D)u=(w=p(aa,w,q))?v:!v;
else{var S=!1;"!@!"==q?k.every(function(ia){return ia.split("=")[0]==c?(S=!0,!1):!0}):S=-1!=k.indexOf(c);u=S?v:!v}return u?!0:!1});return u?!1:!0});u&amp;&amp;(K=!1);switch(y){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}}}b.classList.contains("ai-list-manual")&amp;&amp;(l?(L.classList.remove("ai-list-data"),L.classList.remove("ai-list-manual")):(n=!0,L.classList.add("ai-list-data")));(l||!n&amp;&amp;!K)&amp;&amp;b.hasAttribute("data-debug-info")&amp;&amp;(g=document.querySelector("."+b.dataset.debugInfo),null!=g&amp;&amp;(g=g.parentElement,null!=
g&amp;&amp;g.classList.contains("ai-debug-info")&amp;&amp;g.remove()));y=V(b,".ai-debug-bar.ai-debug-lists");var ja=""==A?"#":A;0!=y.length&amp;&amp;y.forEach((f,h)=>{h=f.querySelector(".ai-debug-name.ai-list-info");null!=h&amp;&amp;(h.textContent=ja,h.title=Q+"\n"+Y);h=f.querySelector(".ai-debug-name.ai-list-status");null!=h&amp;&amp;(h.textContent=l?ai_front.visible:ai_front.hidden)});g=!1;if(l&amp;&amp;b.hasAttribute("scheduling-start")&amp;&amp;b.hasAttribute("scheduling-end")&amp;&amp;b.hasAttribute("scheduling-days")){var r=b.getAttribute("scheduling-start");
t=b.getAttribute("scheduling-end");y=b.getAttribute("scheduling-days");g=!0;r=b64d(r);F=b64d(t);var T=parseInt(b.getAttribute("scheduling-fallback")),M=parseInt(b.getAttribute("gmt"));if(r.includes("-")||F.includes("-"))N=W(r)+M,O=W(F)+M;else var N=P(r),O=P(F);var U=b64d(y).split(",");y=b.getAttribute("scheduling-type");var B=(new Date).getTime()+M;t=new Date(B);var G=t.getDay();r.includes("-")||F.includes("-")||(r=(new Date(t.getFullYear(),t.getMonth(),t.getDate())).getTime()+M,B-=r,0>B&amp;&amp;(B+=864E5));
0==G?G=6:G--;r=B>=N&amp;&amp;B&lt;O&amp;&amp;U.includes(G.toString());switch(y){case "B":r=!r}r||(l=!1);var ka=t.toISOString().split(".")[0].replace("T"," ");y=V(b,".ai-debug-bar.ai-debug-scheduling");0!=y.length&amp;&amp;y.forEach((f,h)=>{h=f.querySelector(".ai-debug-name.ai-scheduling-info");null!=h&amp;&amp;(h.textContent=ka+" "+G+" current_time:"+Math.floor(B.toString()/1E3)+"  start_date:"+Math.floor(N/1E3).toString()+" ="+(B>=N).toString()+" end_date:"+Math.floor(O/1E3).toString()+" =:"+(B&lt;O).toString()+" days:"+U.toString()+
" =:"+U.includes(G.toString()).toString());h=f.querySelector(".ai-debug-name.ai-scheduling-status");null!=h&amp;&amp;(h.textContent=l?ai_front.visible:ai_front.hidden);l||0==T||(f.classList.remove("ai-debug-scheduling"),f.classList.add("ai-debug-fallback"),h=f.querySelector(".ai-debug-name.ai-scheduling-status"),null!=h&amp;&amp;(h.textContent=ai_front.fallback+" = "+T))})}if(n||!l&amp;&amp;K)return!0;b.style.visibility="";b.style.position="";b.style.width="";b.style.height="";b.style.zIndex="";if(l){if(null!=d&amp;&amp;(d.style.visibility=
"",d.classList.contains("ai-remove-position")&amp;&amp;(d.style.position="")),b.hasAttribute("data-code")){n=b64d(b.dataset.code);r=document.createRange();g=!0;try{H=r.createContextualFragment(n)}catch(f){g=!1}g&amp;&amp;(null!=b.closest("head")?(b.parentNode.insertBefore(H,b.nextSibling),b.remove()):b.append(H));ca(b)}}else if(g&amp;&amp;!r&amp;&amp;0!=T){null!=d&amp;&amp;(d.style.visibility="",d.classList.contains("ai-remove-position")&amp;&amp;d.css({position:""}));n=ea(b,".ai-fallback");0!=n.length&amp;&amp;n.forEach((f,h)=>{f.classList.remove("ai-fallback")});
if(b.hasAttribute("data-fallback-code")){n=b64d(b.dataset.fallbackCode);r=document.createRange();g=!0;try{var H=r.createContextualFragment(n)}catch(f){g=!1}g&amp;&amp;b.append(H);ca(b)}else b.style.display="none",null!=d&amp;&amp;null==d.querySelector(".ai-debug-block")&amp;&amp;d.hasAttribute("style")&amp;&amp;-1==d.getAttribute("style").indexOf("height:")&amp;&amp;(d.style.display="none");null!=d&amp;&amp;d.hasAttribute("data-ai")&amp;&amp;(d.getAttribute("data-ai"),b.hasAttribute("fallback-tracking")&amp;&amp;(H=b.getAttribute("fallback-tracking"),d.setAttribute("data-ai-"+
b.getAttribute("fallback_level"),H)))}else b.style.display="none",null!=d&amp;&amp;(d.removeAttribute("data-ai"),d.classList.remove("ai-track"),null!=d.querySelector(".ai-debug-block")?(d.style.visibility="",d.classList.remove("ai-close"),d.classList.contains("ai-remove-position")&amp;&amp;(d.style.position="")):d.hasAttribute("style")&amp;&amp;-1==d.getAttribute("style").indexOf("height:")&amp;&amp;(d.style.display="none"));b.setAttribute("data-code","");b.setAttribute("data-fallback-code","");null!=d&amp;&amp;d.classList.remove("ai-list-block")})}};
function da(a){a=`; ${document.cookie}`.split(`; ${a}=`);if(2===a.length)return a.pop().split(";").shift()}function la(a,e,p){da(a)&amp;&amp;(document.cookie=a+"="+(e?";path="+e:"")+(p?";domain="+p:"")+";expires=Thu, 01 Jan 1970 00:00:01 GMT")}function m(a){da(a)&amp;&amp;(la(a,"/",window.location.hostname),document.cookie=a+"=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;")}(function(a){"complete"===document.readyState||"loading"!==document.readyState&amp;&amp;!document.documentElement.doScroll?a():document.addEventListener("DOMContentLoaded",
a)})(function(){setTimeout(function(){ai_process_lists();setTimeout(function(){X();if("function"==typeof ai_load_blocks){document.addEventListener("cmplzEnableScripts",e);document.addEventListener("cmplz_event_marketing",e);function e(p){"cmplzEnableScripts"!=p.type&amp;&amp;"all"!==p.consentLevel||ai_load_blocks()}}},50);var a=document.querySelector(".ai-debug-page-type");null!=a&amp;&amp;a.addEventListener("dblclick",e=>{e=document.querySelector("#ai-iab-tcf-status");null!=e&amp;&amp;(e.textContent="CONSENT COOKIES");
e=document.querySelector("#ai-iab-tcf-bar");null!=e&amp;&amp;(e.style.display="block")});a=document.querySelector("#ai-iab-tcf-bar");null!=a&amp;&amp;a.addEventListener("click",e=>{m("euconsent-v2");m("__lxG__consent__v2");m("__lxG__consent__v2_daisybit");m("__lxG__consent__v2_gdaisybit");m("CookieLawInfoConsent");m("cookielawinfo-checkbox-advertisement");m("cookielawinfo-checkbox-analytics");m("cookielawinfo-checkbox-necessary");m("complianz_policy_id");m("complianz_consent_status");m("cmplz_marketing");m("cmplz_consent_status");
m("cmplz_preferences");m("cmplz_statistics-anonymous");m("cmplz_choice");m("cmplz_banner-status");m("cmplz_functional");m("cmplz_policy_id");m("cmplz_statistics");m("moove_gdpr_popup");m("real_cookie_banner-blog:1-tcf");m("real_cookie_banner-blog:1");e=document.querySelector("#ai-iab-tcf-status");null!=e&amp;&amp;(e.textContent="CONSENT COOKIES DELETED")})},5)});function ca(a){setTimeout(function(){"function"==typeof ai_process_rotations_in_element&amp;&amp;ai_process_rotations_in_element(a);"function"==typeof ai_process_lists&amp;&amp;
ai_process_lists();"function"==typeof ai_process_ip_addresses&amp;&amp;ai_process_ip_addresses();"function"==typeof ai_process_filter_hooks&amp;&amp;ai_process_filter_hooks();"function"==typeof ai_adb_process_blocks&amp;&amp;ai_adb_process_blocks(a);"function"==typeof ai_process_impressions&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_process_impressions();"function"==typeof ai_install_click_trackers&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_install_click_trackers();"function"==typeof ai_install_close_buttons&amp;&amp;ai_install_close_buttons(document)},5)}
function ha(a){var e=a?a.split("?")[1]:window.location.search.slice(1);a={};if(e){e=e.split("#")[0];e=e.split("&amp;");for(var p=0;p&lt;e.length;p++){var z=e[p].split("="),C=void 0,x=z[0].replace(/\[\d*\]/,function(I){C=I.slice(1,-1);return""});z="undefined"===typeof z[1]?"":z[1];x=x.toLowerCase();z=z.toLowerCase();a[x]?("string"===typeof a[x]&amp;&amp;(a[x]=[a[x]]),"undefined"===typeof C?a[x].push(z):a[x][C]=z):a[x]=z}}return a}};
ai_run_933117817398 = function(){
ai_document_write=document.write;document.write=function(a){"interactive"==document.readyState?(console.error("document.write called after page load: ",a),"undefined"!=typeof ai_js_errors&amp;&amp;ai_js_errors.push(["document.write called after page load",a,0])):ai_document_write.call(document,a)};
ai_insert ('prepend', '.type-post', b64d ('PGRpdiBjbGFzcz0nY29kZS1ibG9jayBjb2RlLWJsb2NrLTY0JyBzdHlsZT0nbWFyZ2luOiA4cHggMDsgY2xlYXI6IGJvdGg7Jz4KPGEgaHJlZj0iaHR0cHM6Ly9scC5sb2dyb2NrZXQuY29tL2JsZy9sZWFybi1tb3JlIiBjbGFzcz0iZ3V0dGVyLWxpbmsiPjxkaXYgY2xhc3M9Imd1dHRlci1jb250YWluZXIiPgogIDxpbWcgY2xhc3M9Imd1dHRlci10b3AtcmlnaHQiIHNyYz0iaHR0cHM6Ly9ibG9nLmxvZ3JvY2tldC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjIvMTIvZ3V0dGVyLWltYWdlLnBuZyI+CiAgPHAgY2xhc3M9Imd1dHRlci10b3AiPjxiPkxvZ1JvY2tldDo8L2I+IDxicj4gCiAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXNpemU6MTRweDsiPlNlc3Npb24gUmVwbGF5LCBQcm9kdWN0IEFuYWx5dGljcywgJmFtcDsgRXJyb3IgVHJhY2tpbmc8L3NwYW4+PC9wPgogIDxwIGNsYXNzPSJndXR0ZXItYm90dG9tIj5HRVQgU1RBUlRFRCBGUkVFIOKGkjwvcD4KICA8aW1nIGNsYXNzPSJndXR0ZXItYm90dG9tLXJpZ2h0IiBzcmM9Imh0dHBzOi8vYmxvZy5sb2dyb2NrZXQuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzEyL0dyb3VwLTk0MjgucG5nIj4KPC9kaXY+CjwvYT4KCjxzY3JpcHQ+Cgp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIChldmVudCkgPT4gewpjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJ0aWNsZS1wb3N0Jyk7Cgpjb25zdCBvYnNlcnZlcjIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaGFuZGxlSW50ZXJzZWN0aW9uKTsKb2JzZXJ2ZXIyLm9ic2VydmUodGFyZ2V0KTsKCmZ1bmN0aW9uIGhhbmRsZUludGVyc2VjdGlvbihlbnRyaWVzKSB7CiAgZW50cmllcy5tYXAoKGVudHJ5KSA9PiB7CiAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHsKICAgICAgd2luZG93LmpRdWVyeSgnLmNvZGUtYmxvY2stNjQnKS5mYWRlSW4oMTUwMCk7CiAgICB9IGVsc2UgewogICAgICB3aW5kb3cualF1ZXJ5KCcuY29kZS1ibG9jay02NCcpLmZhZGVPdXQoMTUwMCk7CiAgICB9CiAgfSk7Cn0KCn0pOwo8L3NjcmlwdD4KCgo8c3R5bGU+CkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDEwNjVweCkgewouY29kZS1ibG9jay02NCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7IHZpc2liaWxpdHk6aGlkZGVuOyBoZWlnaHQ6IDFweDsgd2lkdGg6IDFweDt9Cn0KLmNvZGUtYmxvY2stNjQgLmhpZGRlbiB7ZGlzcGxheTpub25lO30KLmd1dHRlci1saW5rIHt0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO30KLmd1dHRlci1saW5rOmhvdmVyIHt0ZXh0LWRlY29yYXRpb246bm9uZTt9Ci5ndXR0ZXItbGluazpob3ZlciAuZ3V0dGVyLWJvdHRvbSB7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTt9Ci5ndXR0ZXItbGluazpob3ZlciAuZ3V0dGVyLXRvcC1yaWdodCB7dHJhbnNmb3JtOiB0cmFuc2xhdGVZKDdweCk7fQoKLmNvZGUtYmxvY2stNjQgeyBwb3NpdGlvbjogZml4ZWQ7IG1hcmdpbi1sZWZ0OiAtMjIwcHggIWltcG9ydGFudDsgdG9wOiAxMjVweDsgZGlzcGxheTpub25lO30KLmd1dHRlci1jb250YWluZXIgeyAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTsKYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KDEyOC40MiUgNDguMzYlIGF0IDcyLjg5JSAyNS44JSwgcmdiYSg4OSwgOTQsIDk0LCAwLjA5KSAwJSwgcmdiYSg4OSwgOTQsIDk0LCAwKSAxMDAlKSAvKiB3YXJuaW5nOiBncmFkaWVudCB1c2VzIGEgcm90YXRpb24gdGhhdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IENTUyBhbmQgbWF5IG5vdCBiZWhhdmUgYXMgZXhwZWN0ZWQgKi8sCmxpbmVhci1ncmFkaWVudCgwZGVnLCByZ2JhKDExOCwgNzQsIDE4OCwgMC4wOSksIHJnYmEoMTE4LCA3NCwgMTg4LCAwLjA5KSksCnJhZGlhbC1ncmFkaWVudCgxMTkuOTklIDM1LjA1JSBhdCA1Ni41OCUgMTAwJSwgcmdiYSgxMTgsIDc0LCAxODgsIDAuMDQpIDAlLCByZ2JhKDExOCwgNzQsIDE4OCwgMCkgMTAwJSkgLyogd2FybmluZzogZ3JhZGllbnQgdXNlcyBhIHJvdGF0aW9uIHRoYXQgaXMgbm90IHN1cHBvcnRlZCBieSBDU1MgYW5kIG1heSBub3QgYmVoYXZlIGFzIGV4cGVjdGVkICovLAogIGxpbmVhci1ncmFkaWVudCgwZGVnLCAjRkZGRkZGLCAjRkZGRkZGKTtib3JkZXI6IDAuNXB4IHNvbGlkIHJnYmEoMTE4LCA3NCwgMTg4LCAwLjA5KTsKYm9yZGVyLXJhZGl1czogMTZweDsKd2lkdGg6IDIwMHB4OwpoZWlnaHQ6IDM2NXB4OwpvdmVyZmxvdzpoaWRkZW47fQoKLmd1dHRlci1jb250YWluZXIgLmd1dHRlci10b3AtcmlnaHQgewp0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlOwogIHJpZ2h0OjBweDsKICB3aWR0aDoyMDBweDsKICBtYXJnaW4tbGVmdDozcHg7CiAgbWFyZ2luLXRvcDozcHg7Cn0KCi5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItYm90dG9tLXJpZ2h0IHtwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMHB4OyByaWdodDogMHB4O30KCi5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItdG9wIHsKZm9udC1zaXplOiAxOHB4OwpsaW5lLWhlaWdodDogMjJweDsKbGV0dGVyLXNwYWNpbmc6IDBlbTsKdGV4dC1hbGlnbjogbGVmdDsKcGFkZGluZzogMHB4IDE2cHg7Cm1hcmdpbi10b3A6IDE2cHg7CmNvbG9yOiAjNzY0QUJDOwp9Ci5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItYm90dG9tIHsKY29sb3I6ICM3NjRBQkMgIWltcG9ydGFudDsKZm9udC1zaXplOiAxNnB4Owpmb250LXdlaWdodDogOTAwOwpsaW5lLWhlaWdodDogMjFweDsKbGV0dGVyLXNwYWNpbmc6IDBlbTsKdGV4dC1hbGlnbjogbGVmdDsKcGFkZGluZzogMHB4IDE2cHg7Cm1hcmdpbi10b3A6IDE0cHg7Cn08L3N0eWxlPgo8L2Rpdj4K'));
ai_insert ('prepend', '.graybg', b64d ('PGRpdiBjbGFzcz0nY29kZS1ibG9jayBjb2RlLWJsb2NrLTUyJyBzdHlsZT0nbWFyZ2luOiA4cHggMDsgY2xlYXI6IGJvdGg7Jz4KPGRpdiBjbGFzcz0iZm9vdGVyLWN0YS1jb250YWluZXIiPgogIDxpbWcgc3JjPSJodHRwczovL2Jsb2cubG9ncm9ja2V0LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wNi9mb290ZXItY3RhLWRvdHMtbGVmdC5wbmciIGNsYXNzPSJmb290ZXItY3RhLWJsIj4KICAgIDxpbWcgc3JjPSJodHRwczovL2Jsb2cubG9ncm9ja2V0LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wNi9mb290ZXItY3RhLWRvdHMtcmlnaHQucG5nIiBjbGFzcz0iZm9vdGVyLWN0YS10ciI+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWN0YS1sb2dvLWNvbnRhaW5lciI+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ibG9nLmxvZ3JvY2tldC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjIvMDkvbG9ncm9ja2V0LWxvZ28tZnJvbnRlbmQtYW5hbHl0aWNzLnBuZyI+CiAgPC9kaXY+CiAgCiAgPGgyPlN0b3AgZ3Vlc3NpbmcgYWJvdXQgeW91ciBkaWdpdGFsIGV4cGVyaWVuY2Ugd2l0aCBMb2dSb2NrZXQ8L2gyPgogIDxhIGhyZWY9Imh0dHBzOi8vbG9ncm9ja2V0LmNvbS9zaWdudXAiPjxkaXYgY2xhc3M9ImZvb3Rlci1jdGEtYnV0dG9uIj5HZXQgc3RhcnRlZCBmb3IgZnJlZTwvZGl2PjwvYT4KICA8L2Rpdj4KCjxzdHlsZT4KQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNzUwcHgpIHsKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXIgIHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9Ci5mb290ZXItY3RhLWNvbnRhaW5lciBoMiB7d2lkdGg6IDkwJSAhaW1wb3J0YW50OyBwYWRkaW5nLXRvcDogNTBweCAhaW1wb3J0YW50O30KLmZvb3Rlci1jdGEtYnV0dG9uIHt3aWR0aDogNDAlICFpbXBvcnRhbnQ7fQp9Ci5mb290ZXItY3RhLWNvbnRhaW5lciB7Ym9yZGVyLXJhZGl1czogMjBweDtiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTAuMzJkZWcsICM4RjAwRkYgMC4yOCUsIHJnYmEoMTQzLCAwLCAyNTUsIDApIDk5LjcyJSksICM3NjRBQkM7CiAgYm94LXNoYWRvdzogMHB4IDY0cHggNzRweCAwcHggIzc2NEFCQzQwOwogIHBhZGRpbmctYm90dG9tOiAzMHB4OwogIHdpZHRoOiA5NSU7IG1hcmdpbjogMCBhdXRvIDYwcHggYXV0bzsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5mb290ZXItY3RhLXRyIHtwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMzBweDsgcmlnaHQ6IDMwcHg7IH0KCi5mb290ZXItY3RhLWJsIHtwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMzBweDsgbGVmdDogMzBweDsgfQoKLmZvb3Rlci1jdGEtYmwge30KCi5mb290ZXItY3RhLWxvZ28tY29udGFpbmVyIHsKCXdpZHRoOiAyMCU7CglwYWRkaW5nOiAxMHB4IDE1cHg7CiAgZGlzcGxheTpibG9jazsKICAgIG1hcmdpbjogMCBhdXRvOwoJcG9zaXRpb246IHJlbGF0aXZlOwoJYmFja2dyb3VuZDogI2ZhZmFmYTsKYm9yZGVyLXJhZGl1czogMCAwIDIwcHggMjBweDsKfQoKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXI6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMHB4OwogIGhlaWdodDogNTBweDsKICBsZWZ0OiAtMjVweDsKICB3aWR0aDogMjVweDsKICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMjVweDsKICBib3gtc2hhZG93OiAwIC0yNXB4IDAgMCAjZmFmYWZhOyAKfQoKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXI6OmFmdGVyIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwcHg7CiAgaGVpZ2h0OiA1MHB4OwogIHJpZ2h0OiAtMjVweDsKICB3aWR0aDogMjVweDsKICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAyNXB4OwogIGJveC1zaGFkb3c6IDAgLTI1cHggMCAwICNmYWZhZmE7IAp9CgouZm9vdGVyLWN0YS1jb250YWluZXIgaDIge2NvbG9yOiAjZmZmZmZmOyB0ZXh0LWFsaWduOiBjZW50ZXI7IHdpZHRoOiA3MCU7IHBvc2l0aW9uOiByZWxhdGl2ZTsgbWFyZ2luOiA0MHB4IGF1dG87fQouZm9vdGVyLWN0YS1jb250YWluZXIgYSB7dGV4dC1kZWNvcmF0aW9uOiBub25lO30KCi5mb290ZXItY3RhLWxvZ28tY29udGFpbmVyIGltZyB7ZGlzcGxheTogYmxvY2s7IG1hcmdpbjogMCBhdXRvOyBwYWRkaW5nOiAxMHB4OyBtYXgtd2lkdGg6IDE1MHB4O30KCi5mb290ZXItY3RhLWJyIHtwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IDVweDsgYm90dG9tOiA1cHg7fQoKLmZvb3Rlci1jdGEtYnV0dG9uIHtwYWRkaW5nOiAxMHB4IDIwcHg7IGJvcmRlcjogMXB4IHNvbGlkICNmZmZmZmY7IHdpZHRoOiAyMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IGNvbG9yOiAjZmZmZmZmOyBwb3NpdGlvbjogcmVsYXRpdmU7IGRpc3BsYXk6YmxvY2s7IG1hcmdpbjogMCBhdXRvIDIwcHggYXV0bzsgdGV4dC1hbGlnbjogY2VudGVyOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7fQo8L3N0eWxlPjwvZGl2Pgo='));
ai_insert ('after', '.site-content', b64d (''));
};
if (document.readyState === 'complete' || (document.readyState !== 'loading' &amp;&amp; !document.documentElement.doScroll)) ai_run_933117817398 (); else document.addEventListener ('DOMContentLoaded', ai_run_933117817398);
ai_js_code = true;
</meta>

</a></code></p></a></li></ul></article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/adding-rss-feed-next-js-app/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Adding login authentication to secure React apps - LogRocket Blog</title>
			<link>https://blog.logrocket.com/adding-login-authentication-secure-react-apps/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/adding-login-authentication-secure-react-apps/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Adding login authentication to secure React apps - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/adding-login-authentication-secure-react-apps/">Adding login authentication to secure React apps - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/dbilgili/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/dogcan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/dogcan.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/dbilgili/">
Doğacan Bilgili <span class="btn follow">Follow</span></a>
<span class="author-description d-block">A software developer who is also into 3D-modeling and animation.</span>
</div>
</div>
<h1 class="posttitle">Adding login authentication to secure React apps</h1>
<p>
<span class="post-date"><time class="post-date">
November 30, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">11 min read</span>
<span class="wordcount">3091</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This React and Express.js login authentication tutorial was last updated on 30 November 2022 to define and evaluate the benefits of server-side login authentication in React apps. This update also includes sections on logging out and how to connect to a MongoDB database. </em></p>
<p>It’s well-known that the client side is unsafe due to its exposed nature. In your web application, you can conditionally render views to show different content to different users. But, if that information is already stored on the client side, it’s no longer secure.</p>
<p>To ensure that only users with a secure login can see the limited content, you should ship the content data from your server upon authentication.</p>
<p>In this tutorial, we’ll show you how to secure your<a href="https://blog.logrocket.com/tag/react/"> React app</a> by implementing basic server-side authentication for an<a href="https://expressjs.com"> Express.js</a> server. Although the client side will be a React app, you can apply it to virtually any other type of client-side application. We’ll also discuss some React authentication best practices for implementing secure login functionality on the server side.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#server-side-login-authentication">What is server-side login authentication?</a></li>
<li><a href="#benefits-using-server-side-login-authentication">Benefits of using server-side login authentication</a></li>
<li><a href="#react-authentication-server-side-setup">React authentication server-side login setup</a></li>
<li><a href="#serving-react-app-express-js-server">Serving the React app from an Express.js server</a>
<ul >
<li><a href="#proxy-react-app">Proxy the React app</a></li>
<li><a href="#serve-build-folder">Serve the <code>build</code> folder</a></li>
<li><a href="#run-express-js-server-locally">Run the Express.js server locally</a></li>
<li><a href="#run-remote-server">How to run on a remote server</a></li>
</ul>
</li>
<li><a href="#basic-authentication-react-express-js">Basic authentication in React and Express.js</a></li>
<li><a href="#react-authentication-http-cookies">React authentication using HTTP cookies</a>
<ul >
<li><a href="#react-httponly-cookie">The React <code>httpOnly</code> cookie</a></li>
<li><a href="#create-user-session-cookies-react">How to create a user session using cookies in React</a></li>
<li><a href="#reading-cookie-server">Reading a cookie from the server</a></li>
<li><a href="#log-out-user">Log out user</a></li>
</ul>
</li>
<li><a href="#practical-react-authentication-example">A practical React authentication example</a></li>
<li><a href="#connecting-mongodb">Connecting to MongoDB</a>
<ul >
<li><a href="#using-mongodb-driver">Using the MongoDB Driver</a></li>
</ul>
</li>
<li><a href="#key-takeaways">Key takeaways</a></li>
</ul>
<h2 id="server-side-login-authentication">What is server-side login authentication?</h2>
<p>Server-side login authentication is a<a href="https://blog.logrocket.com/complete-guide-authentication-with-react-router-v6/"> method of authenticating</a> the identity of a user attempting to log in to a server. This type of authentication typically involves the user providing a username and password, which are then sent to the server for verification. If the credentials are valid, the server allows the user to log in and access the resources on the server.</p>
<h2 id="benefits-using-server-side-login-authentication">Benefits of using server-side login authentication</h2>
<p>There are several uses and benefits to using server-side login authentication. First and foremost, it helps ensure the security of the server and the resources it contains. By requiring users to provide a username and password, the server can verify that the person attempting to log in is authorized to do so.</p>
<p>Another benefit of server-side login authentication is that it can provide a centralized system for managing user accounts. This means that the server administrator can easily add, remove, or update user accounts, and the changes will be immediately reflected across the entire server. This can make it easier to manage user access and ensure that only authorized users have access to the server and its resources.</p>
<p>In addition, server-side login authentication can provide a way for users to securely access resources from any device — as long as they have the necessary credentials. This can be especially useful for organizations with multiple locations or employees needing to access resources remotely.</p>
<p>Overall, server-side login authentication is a useful and important tool for protecting the security of servers and the resources they contain. It can help prevent unauthorized access and provide a centralized system for managing user accounts, making it an essential component of any secure server environment.</p>
<h2 id="react-authentication-server-side-setup">React authentication server-side login setup</h2>
<p>The easiest way to bootstrap a React project is to use the<a href="https://blog.logrocket.com/getting-started-with-create-react-app-d93147444a27/"> Create React App</a> package. When you create a project with this package and run <code>npm start</code>, you essentially start a<a href="https://blog.logrocket.com/changes-coming-to-webpack-in-2021/"> webpack server</a>. This works fine on your local machine, but when you want to deploy it to a remote server, you need your own server to serve your React application. This is basically a package of <a href="https://blog.logrocket.com/type-html-faster-react-emmet-vs-code/">HTML</a>, <a href="https://blog.logrocket.com/tag/vanilla-javascript/">JavaScript</a>, and <a href="https://blog.logrocket.com/tag/css/">CSS</a>.</p>
<p>We’ll refer to the following folder structure for this React authentication example project:</p>
<pre class="language-plaintext hljs">--- Project Folder
 |__ client (React App)
 |__ server.js
 |__ package.json
</pre>
<p>There is a <code>Project Folder</code> and, inside it, a <code>client</code> folder containing the React app. The folder also contains a <code>server.js</code> and <code>package.json</code> files, which you can create by using the following commands on the terminal in the project directory:</p>
<pre class="language-javascript hljs">npm init -y
touch server.js
</pre>
<h2 id="serving-react-app-express-js-server">Serving the React app from an Express.js server</h2>
<h3 id="proxy-react-app">Proxy the React app</h3>
<p>Your deployed React application will be built, and the <code>build</code> folder will be served from an Express.js server. However, when developing your app locally, you shouldn’t be building for production on every single change. To avoid this, you can<a href="https://blog.logrocket.com/why-you-should-use-proxy-server-create-react-app/"> proxy your React app</a> to a specific port.</p>
<p>That way, you’ll be using the built-in webpack server for running the React app locally and will still be able to communicate with your Express.js server.</p>
<p>Add the following line to the <code>package.json</code> of your React app, assuming that the Express server will be serving on <code>port 5000</code>:</p>
<pre class="language-javascript hljs">"proxy": "http://localhost:5000/"
</pre>
<h3 id="serve-build-folder">Serve the <code>build</code> folder</h3>
<p>The Express.js server should serve the <code>build</code> folder, which will be created during the deployment to a remote server.</p>
<p>The following snippet is a basic Express.js server. We’ll add authentication and other things on top of it:</p>
<pre class="language-javascript hljs">const express = require('express');
const path = require('path');
const app = express();

const PORT = process.env.PORT || 5000;

app
  .use(express.static(path.join(__dirname, '/client/build')))
  .listen(PORT, () => console.log(`Listening on ${PORT}`));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '/client/build/index.html'));
});
</pre>
<h3 id="run-express-js-server-locally">Run the Express.js server locally</h3>
<p>As mentioned earlier, the React app will still be using the webpack server as it will proxy to <code>port 5000</code>. However, we still have to run the <a href="https://blog.logrocket.com/organizing-express-js-project-structure-better-productivity/">Express server</a> separately.</p>
<p>The Nodemon package is very handy for running and listening for changes. You can install it globally and then run the server by simply running <code>nodemon server.js</code> in the main directory of the project folder. As for the React app, we only have to run the <code>npm start</code> inside the <code>client</code> folder.</p>
<h3 id="run-remote-server">How to run on a remote server</h3>
<p>Although this is an optional step, it’s important to mention. Let’s assume we want to deploy our application to a<a href="https://www.heroku.com"> Heroku</a> dyno.</p>
<p><a href="https://blog.logrocket.com/deploying-decoupled-monorepo-project-heroku/">Heroku</a> detects a Node.js application, installs dependencies, and runs it automatically. But, you still have to tell it to go into the specific folder, install dependencies, and build the React app for production. In our case, this is going into <code>/client</code> running <code>npm install</code> and then <code>npm run build</code>, respectively.</p>
<p>For this purpose, Heroku has a <code>post-build</code> command: <code>"heroku-postbuild": "cd client &amp;&amp; npm install &amp;&amp; npm run build"</code></p>
<p>Add this under the <code>"scripts"</code> key inside the <code>package.json</code> of the server. Also, make sure your entry point for the Node.js application is <code>server.js</code> in the <code>package.json</code> file.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>This is likely to be <code>index.js</code> if you initialized your npm package with <code>-y</code> flag as <code>npm init -y</code> with <code>"main": "server.js"</code>.</p>
<h2 id="basic-authentication-react-express-js">Basic authentication in React and Express.js</h2>
<p>As the name suggests,<a href="https://www.npmjs.com/package/express-basic-auth"> express-basic-auth</a> is a very convenient and easy-to-use package for basic authentication purposes.</p>
<p>First, install the package and then require it at the top of your <code>server.js</code>. We’ll define the secure login credentials by using the instance of the package:</p>
<pre class="language-javascript hljs">const basicAuth = require('express-basic-auth');

const auth = basicAuth({
  users: {
    admin: '123',
    user: '456',
  },
});
</pre>
<p>Now, when the <code>auth</code> variable is used as a parameter of an endpoint, and the response from this endpoint reaches back to the client if and only if the credentials were sent along with the request match.</p>
<p>In the code below, you’ll see both the <code>/authenticate</code> endpoint on the server side and the <code>GET</code> request sent from the client, along with the <code>auth</code> object, which contains the credentials:</p>
<pre class="language-javascript hljs">// End-point on Server

app.get('/authenticate', auth, (req, res) => {
  if (req.auth.user === 'admin') {
    res.send('admin');
  } else if (req.auth.user === 'user') {
    res.send('user');
  }
});

// Request on Client

const auth = async () => {
  try {
    const res = await axios.get('/authenticate', { auth: { username: 'admin', password: '123' } });
    console.log(res.data);
  } catch (e) {
    console.log(e);
  }
};
</pre>
<p>In the example above, passing the correct credentials sends back either <code>admin</code> or <code>user</code> as a string response, depending on the username used. Wrong login credentials will simply return a response of <code>401 (Unauthorized)</code>.</p>
<h2 id="react-authentication-http-cookies">React authentication using HTTP cookies</h2>
<p>Now that we’ve figured out how to send data from server to client if the credentials are correct, the next step is to persist that authentication through a<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"> cookie session</a>.</p>
<p>Instead of sending a response from the <code>authenticate</code> endpoint, we can set a cookie on the client from the server. By deploying another endpoint, we can check for the cookie and actually send the data to populate the view.</p>
<p>Once the user is authenticated, this information should be stored somewhere on the client side so that the user does not need to authenticate every time. The common practice is to use cookies to store this session information. Cookies are safe as long as the correct flags are set.</p>
<h3 id="react-httponly-cookie">The React <code>httpOnly</code> cookie</h3>
<p>When using a cookie session to persist authentication in React, the <code>httpOnly</code> flag ensures that no client-side script can access the cookie other than the server.</p>
<p>The <code>secure</code> flag ensures that cookie information is sent to the server with an encrypted request over the HTTPS protocol. When using <code>secure</code> flag, you also need a key to sign the cookie. For this purpose, we use <code>cookie-parser</code> middleware for the Express.js server.</p>
<p>A cookie simply has a <code>name</code> and a <code>value</code>. Even with the aforementioned flags, never disclose any vulnerable information within cookie parameters.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h3 id="create-user-session-cookies-react">How to create a user session using cookies in React</h3>
<p>In the code example below, <code>server.js</code> sets a unique cookie upon authentication. As you can see, after setting the cookie, the response is also sending an object with the <code>screen:admin</code> or <code>screen:user</code> key-value pair.</p>
<p>This response will later be utilized in the React application on the client side:</p>
<pre class="language-javascript hljs">const cookieParser = require('cookie-parser');

// A random key for signing the cookie
app.use(cookieParser('82e4e438a0705fabf61f9854e3b575af'));

app.get('/authenticate', auth, (req, res) => {
  const options = {
    httpOnly: true,
    signed: true,
  };

  if (req.auth.user === 'admin') {
    res.cookie('name', 'admin', options).send({ screen: 'admin' });
  } else if (req.auth.user === 'user') {
    res.cookie('name', 'user', options).send({ screen: 'user' });
  }
});
</pre>
<p>Since the cookie has an <code>httpOnly</code> flag, we can neither read nor delete it on the client side. Therefore, we need two more endpoints to read and delete the cookie and send back a response accordingly.</p>
<h3 id="reading-cookie-server">Reading a cookie from the server</h3>
<p>Reading a cookie from a server is quite straightforward, but you should keep in mind that the endpoint for this functionality should not have the <code>auth</code> variable because authentication for this endpoint should not be required.</p>
<p>Below the log out user section, we have two endpoints: <code>/read-cookie</code> and <code>/clear-cookie</code>. The <code>signedCookies</code> object with the <code>res</code> contains the <code>name:value</code> pair that we set for the cookie:</p>
<pre class="language-javascript hljs">res.cookie('name', 'admin', options)
</pre>
<p>Depending on the value of the cookie name, we’ll send a response.</p>
<h3 id="log-out-user">Log out user</h3>
<p>As for the <code>/clear-cookie</code> endpoint, deleting the cookie is done by referring to the name of the cookie, which is <code>name</code>. This, in turn, performs a simple <code>logout</code> functionality, as it clears out the users’ session:</p>
<pre class="language-javascript hljs">app.get('/read-cookie', (req, res) => {
  if (req.signedCookies.name === 'admin') {
    res.send({ screen: 'admin' });
  } else if (req.signedCookies.name === 'user') {
    res.send({ screen: 'user' });
  } else {
    res.send({ screen: 'auth' });
  }
});

app.get('/clear-cookie', (req, res) => {
  res.clearCookie('name').end();
});
</pre>
<p>By following this logic, you can create several endpoints to send different types of data depending on the nature of your application. All you need to do is check the cookie and send the response accordingly.</p>
<p>Below, you can find the complete <code>server.js</code> file, which serves the client-side React application that we’ll cover in the next section:</p>
<pre class="language-javascript hljs">const express = require('express');
const basicAuth = require('express-basic-auth');
const cookieParser = require('cookie-parser');
const path = require('path');

const app = express();

const auth = basicAuth({
  users: {
    admin: '123',
    user: '456',
  },
});

const PORT = process.env.PORT || 5000;

app.use(cookieParser('82e4e438a0705fabf61f9854e3b575af'));

app
  .use(express.static(path.join(__dirname, '/client/build')))
  .listen(PORT, () => console.log(`Listening on ${PORT}`));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '/client/build/index.html'));
});

app.get('/authenticate', auth, (req, res) => {
  const options = {
    httpOnly: true,
    signed: true,
  };

  console.log(req.auth.user);

  if (req.auth.user === 'admin') {
    res.cookie('name', 'admin', options).send({ screen: 'admin' });
  } else if (req.auth.user === 'user') {
    res.cookie('name', 'user', options).send({ screen: 'user' });
  }
});

app.get('/read-cookie', (req, res) => {
  console.log(req.signedCookies);
  if (req.signedCookies.name === 'admin') {
    res.send({ screen: 'admin' });
  } else if (req.signedCookies.name === 'user') {
    res.send({ screen: 'user' });
  } else {
    res.send({ screen: 'auth' });
  }
});

app.get('/clear-cookie', (req, res) => {
  res.clearCookie('name').end();
});

app.get('/get-data', (req, res) => {
  if (req.signedCookies.name === 'admin') {
    res.send('This is admin panel');
  } else if (req.signedCookies.name === 'user') {
    res.send('This is user data');
  } else {
    res.end();
  }
});
</pre>
<h2 id="practical-react-authentication-example">A practical React authentication example</h2>
<p>Assume you have an admin screen and a regular user screen, in which you show different contents on.</p>
<p>The first thing we need is the authentication request, which sent the credentials to the server. We also need another request that we send from the<a href="https://blog.logrocket.com/react-lifecycle-methods-tutorial-examples/#componentDidMount"> <code>componentDidMount</code> lifecycle Hook</a> to check whether there is already a cookie so that we can log in automatically.</p>
<p>Then, we might need some other requests for getting extra data. Eventually, we need to be able to send a request to clear the cookie so that the session does not persist anymore.</p>
<p>You can find the complete client-side code on<a href="https://codesandbox.io/s/basic-auth-example-o73bh?from-embed"> CodeSandbox</a>. However, to get it working, obviously, you should run it alongside the server:</p>
<p><iframe  title="Basic-Auth-Example" src="https://codesandbox.io/embed/basic-auth-example-o73bh?fontsize=14&amp;hidenavigation=1&amp;theme=dark" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"/></p>
<h2 id="connecting-mongodb">Connecting to MongoDB</h2>
<p>To connect a Node.js application to a<a href="https://www.mongodb.com/atlas/database"> MongoDB Atlas database</a>, you will need to perform the following steps:</p>
<p>Install the MongoDB driver for Node.js, which will allow you to connect and interact with a MongoDB database from a Node.js application. You can do this by running <code>npm install mongodb</code> in your terminal.</p>
<p>Create a<a href="https://account.mongodb.com/account/register"> MongoDB Atlas account</a>. This will give you a URL that you can use to connect to your database.</p>
<p>After successfully creating an account, you should see your dashboard like in the image below. Next, to create a database, click the <strong>Build a Database</strong> button:</p>
<p><img             class="aligncenter size-full wp-image-149071 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/05/react-data-base-mongodb.png" alt="Connecting to MongoDB Step One" width="730" height="373"    /><noscript><img               class="aligncenter size-full wp-image-149071" src="https://blog.logrocket.com/wp-content/uploads/2021/05/react-data-base-mongodb.png" alt="Connecting to MongoDB Step One" width="730" height="373"  /></noscript></p>
<p>Select the free <strong>Shared</strong> option:</p>
<p><img             class="aligncenter size-full wp-image-149075 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/05/shared-mongodb-option.png" alt="Connecting to MongoDB Step Two" width="730" height="373"    /><noscript><img               class="aligncenter size-full wp-image-149075" src="https://blog.logrocket.com/wp-content/uploads/2021/05/shared-mongodb-option.png" alt="Connecting to MongoDB Step Two" width="730" height="373"  /></noscript></p>
<p>Then, create a Cluster by clicking the <strong>Create Cluster</strong> button at the bottom of the page. You can also decide to edit and make changes to your Cluster on this page:</p>
<p><img             class="aligncenter size-full wp-image-149077 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/05/create-cluster-mongodb.png" alt="Connecting to MongoDB Step Three" width="730" height="373"    /><noscript><img               class="aligncenter size-full wp-image-149077" src="https://blog.logrocket.com/wp-content/uploads/2021/05/create-cluster-mongodb.png" alt="Connecting to MongoDB Step Three" width="730" height="373"  /></noscript></p>
<p>Next, set a Username and Password for your Cluster. Then, scroll down to the bottom of the page and click <strong>Connect to My Local Environment</strong> and add your IP address:</p>
<p><img             class="aligncenter size-full wp-image-149080 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/05/connect-local-environment-mongodb.png" alt="Connecting to MongoDB Step Four" width="730" height="373"    /><noscript><img               class="aligncenter size-full wp-image-149080" src="https://blog.logrocket.com/wp-content/uploads/2021/05/connect-local-environment-mongodb.png" alt="Connecting to MongoDB Step Four" width="730" height="373"  /></noscript></p>
<p>If you followed the above steps correctly, you should be able to see the page shown in the image below:</p>
<p><img             class="aligncenter size-full wp-image-149082 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2021/05/deploy-react-database-mongodb.png" alt="Connecting to MongoDB Step Five" width="730" height="373"    /><noscript><img               class="aligncenter size-full wp-image-149082" src="https://blog.logrocket.com/wp-content/uploads/2021/05/deploy-react-database-mongodb.png" alt="Connecting to MongoDB Step Five" width="730" height="373"  /></noscript></p>
<p>From there, click the <strong>Menu</strong> button highlighted in red, and then click <strong>Load Sample Dataset</strong>. MongoDB provides us with a mock dataset that we can we quickly use to test the connection from our application to the DB.</p>
<p>Next, select the <strong>Connect</strong> button on the far left, as you can see in the image above. You should see a pop-up modal. Select the <strong>Connect Your Application</strong> option. This will help us connect to our application using one of MongoDB’s Native Drivers, and in our case, it’s the<a href="https://mongodb.github.io/node-mongodb-native/"> Node Native Driver</a>.</p>
<h3 id="using-mongodb-driver">Using the MongoDB Driver</h3>
<p>Copy your connection string from the next pop-up modal that appears on the screen. We’ll add this to our <code>server.js</code> file.</p>
<p>In your Node.js application, use the MongoDB Driver to connect to your database using the URL provided by MongoDB Atlas. You can do this using the following code:</p>
<pre class="language-javascript hljs">const MongoClient = require('mongodb').MongoClient;
const url = 'mongodb+srv://&lt;username>:&lt;password>@cluster0.mongodb.net/test?retryWrites=true&amp;w=majority';

MongoClient.connect(url, { useNewUrlParser: true, useUnifiedTopology: true }, (err, client) => {
  if (err) {
    console.log(err);
  } else {
    console.log('Connected to MongoDB Atlas');
    // do something with your database here
  }
});
</pre>
<p>In this code, you will need to replace <code>&lt;username></code> and <code>&lt;password></code> with your MongoDB Atlas username and password, respectively.</p>
<p>Once your Node.js application is connected to your MongoDB Atlas database, you can use the MongoDB Driver to perform <code>CRUD</code> operations on your database. For example, you can use the <code>insertOne()</code> method to insert a document into a collection or the <code>find()</code> method to retrieve documents from a collection.</p>
<h2 id="key-takeaways">Key takeaways</h2>
<p>Let’s review the most important steps of securing a React app with login authentication.</p>
<p>We have three different state variables: <code>screen</code>, <code>username</code>, <code>password</code>.</p>
<p><code>username</code> and <code>password</code> are for storing the input field data and sending it to the server over the <code>/authenticate</code> endpoint through the <code>auth</code> function. Therefore, the<a href="https://blog.logrocket.com/a-guide-to-react-onclick-event-handlers-d411943b14dd/"> onClick event</a> of the login button calls the <code>auth</code> function. This is only required if the user is authenticating initially.</p>
<p>To check whether the user has already logged in, we use the <code>/read-cookie</code> endpoint in the <code>readCookie</code> function. This function is called only once on <code>component mount</code>. The response from this endpoint sets the <code>screen</code> state to change the view to the <code>admin</code> or <code>user</code> screen.</p>
<p>In this React authentication example, both <code>admin</code> and <code>user</code> screens are the same component. But, since the response from the server changes depending on the authentication, the same component renders different contents.</p>
<p>Additionally, the <code>/get-data</code> endpoint demonstrates another use case for cookie-specific responses from the server.</p>
<p>Lastly, <code>/clear-cookie</code> is used with the <code>onClick</code> event of the logout button to clear the cookie and set the <code>screen</code> state variable back to its initial state.</p>
<h2>Conclusion</h2>
<p>The aim of this tutorial is to give you a foundational understanding of basic server-side React authentication on an Express.js server with the <code>express-basic-auth</code> npm package. The potential use cases for such a simple authentication system range from small personal projects to a secured page for an interface with a fixed number of users.</p>
<p>The need to protect data behind a secure login mechanism is nearly universal. If you know how to implement secure login authentication in React and Express.js, you can achieve the same in virtually any other type of client-side application.</p>
<p>If you’re interested in how to further your web application security in Node.js, check out our guide to<a href="https://blog.logrocket.com/password-hashing-node-js-bcrypt/"> password hashing in Node.js with bcrypt</a>.</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">Cut through the noise of traditional React error reporting with LogRocket
</h2>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" vwo-el-id="19356441070">LogRocket
</a> is a React analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your React applications.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<a href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> automatically aggregates client side errors, React error boundaries, Redux state, slow component load times, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to notify you of the most impactful problems affecting the most users and provides the context you need to fix it.

<p vwo-el-id="28675661060">Focus on the React bugs that matter —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-issue-free" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">try LogRocket today</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-3495" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/adding-login-authentication-secure-react-apps/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/adding-login-authentication-secure-react-apps/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-3495" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/adding-login-authentication-secure-react-apps/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-3495" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/adding-login-authentication-secure-react-apps/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/adding-login-authentication-secure-react-apps/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Advanced guide to Flutter switches and toggles - LogRocket Blog</title>
			<link>https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Advanced guide to Flutter switches and toggles - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/">Advanced guide to Flutter switches and toggles - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/murtazasulaihi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/murtazasulaihi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/murtazasulaihi.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/murtazasulaihi/">
Murtaza Sulaihi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a school professor and I also develop Android applications and Flutter applications.</span>
</div>
</div>
<h1 class="posttitle">Advanced guide to Flutter switches and toggles</h1>
<p>
<span class="post-date"><time class="post-date">
September 12, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2507</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>We are all familiar with home switches to switch on and off our lighting system and other electrical appliances. We are also familiar with toggle buttons; if you have electrical cookware or induction at home, you can toggle between its voltage and cooking functions.</p>
<p>Similarly, our mobile applications have switches and toggles to turn on/off Wi-Fi, Bluetooth, and so on.</p>
<p>Today, we are profoundly diving into understanding the parameters and properties of Flutter switches and toggles.</p>
<h2>Table of contents</h2>
<ul>
<li><a href="#what-is-a-switch-widget">What is a switch widget?</a></li>
<li><a href="#what-is-a-toggle-widget">What is a toggle widget?</a></li>
<li><a href="#the-critical-difference-between-a-switch-and-a-toggle">The critical difference between a switch and a toggle</a></li>
<li><a href="#switch-widget-examples">Switch widget examples</a>
<ul >
<li><a href="#android">Android</a></li>
<li><a href="#ios">iOS</a></li>
<li><a href="#android-switch-with-image">Android switch with image</a></li>
</ul>
</li>
<li><a href="#toggle-widget-examples">Toggle widget examples</a>
<ul >
<li><a href="#single-and-required-toggle-switch">Single and required toggle switch</a></li>
<li><a href="#single-and-not-required-toggle-switch">Single and not required toggle switch</a></li>
<li><a href="#multiple-selections-that-are-required">Multiple selections that are required</a></li>
<li><a href="#multiple-selections-that-are-not-required">Multiple selections that are not required</a></li>
</ul>
</li>
<li><a href="#creating-a-custom-animated-switch-button">Creating a custom animated switch button</a></li>
<li><a href="#popular-flutter-packages-for-switches-and-toggles">Popular Flutter packages for switches and toggles</a></li>
</ul>
<h2 id="what-is-a-switch-widget">What is a switch widget?</h2>
<p>A switch button is a Flutter widget with only two states, either true/false or on/off. Typically,a switch is a button with a thumb slider for the user to drag it from left to right and vice versa to switch between the states. It does not maintain its state on its own. You must call the <code>onChanged</code> property to keep the button on or off.</p>
<p><img             class="aligncenter size-full wp-image-130699 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/button-toggling.gif" alt="Button Toggling" width="446" height="316"  /><noscript><img               class="aligncenter size-full wp-image-130699" src="https://blog.logrocket.com/wp-content/uploads/2022/09/button-toggling.gif" alt="Button Toggling" width="446" height="316"/></noscript></p>
<h2 id="what-is-a-toggle-widget">What is a Toggle widget?</h2>
<p>Similarly, a toggle widget has only two states: true/false or on/off. But a toggle widget creates multiple buttons arranged in rows, allowing users to toggle between them.</p>
<p><img             class="aligncenter size-full wp-image-130701 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/phone-screen-toggle.gif" alt="Phone Screen Toggle" width="446" height="916"  /><noscript><img               class="aligncenter size-full wp-image-130701" src="https://blog.logrocket.com/wp-content/uploads/2022/09/phone-screen-toggle.gif" alt="Phone Screen Toggle" width="446" height="916"/></noscript></p>
<h2 id="the-critical-difference-between-a-switch-and-a-toggle">The critical difference between a switch and a toggle</h2>
<p>It is a matter of use cases in a mobile application. In most cases, these widgets are used on the settings page. If you drag down the notification panel of your mobile application, you will see a grid of toggle buttons. But when you go to the settings page, those buttons are changed to switches.</p>
<p>You must have understood the difference. In your mobile application, if you have a list of controls requiring only two states, you should be using switches. And if you have more than one control in a row or in a grid, you should use toggles.</p>
<h2 id="switch-widget-examples">Switch widget examples</h2>
<p>Flutter provides three types of switch widgets:</p>
<ul>
<li>Switch (Android)</li>
<li>CupertinoSwitch (iOS)</li>
<li><code>Switch.adaptive</code> (it adapts according to platform)</li>
</ul>
<p>Let’s look at the most common properties used to customize the widget:</p>
<h3 id="android"><code>Switch</code> (Android)</h3>
<pre class="language-dart hljs">Switch(
  // thumb color (round icon)
  activeColor: Colors.amber,
  activeTrackColor: Colors.cyan,
  inactiveThumbColor: Colors.blueGrey.shade600,
  inactiveTrackColor: Colors.grey.shade400,
  splashRadius: 50.0,
  // boolean variable value
  value: forAndroid,
  // changes the state of the switch
  onChanged: (value) => setState(() => forAndroid = value),
),</pre>
<p><img             class="aligncenter size-full wp-image-130704 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/android-switch-code.png" alt="Android Switch Code" width="730" height="439"    /><noscript><img               class="aligncenter size-full wp-image-130704" src="https://blog.logrocket.com/wp-content/uploads/2022/09/android-switch-code.png" alt="Android Switch Code" width="730" height="439"  /></noscript></p>
<h3 id="ios"><code>CupertinoSwitch</code> (iOS)</h3>
<pre class="language-dart hljs">CupertinoSwitch(
  // overrides the default green color of the track
  activeColor: Colors.pink.shade200,
  // color of the round icon, which moves from right to left
  thumbColor: Colors.green.shade900,
  // when the switch is off
  trackColor: Colors.black12,
  // boolean variable value
  value: forIos,
  // changes the state of the switch
  onChanged: (value) => setState(() => forIos = value),
),</pre>
<p><img             class="aligncenter size-full wp-image-130707 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/ios-switch-code.png" alt="iOS Switch Code" width="730" height="435"    /><noscript><img               class="aligncenter size-full wp-image-130707" src="https://blog.logrocket.com/wp-content/uploads/2022/09/ios-switch-code.png" alt="iOS Switch Code" width="730" height="435"  /></noscript></p>
<p>There aren’t any unique or different properties for the adaptive switch widget. But the Android <code>Switch</code> widget can be further customized if you want an image or icon instead of the usual thumb color. You need to define the thumb image property with an asset image. Please look at the code below.</p>
<h3 id="android-switch-with-image">Android <code>Switch</code> with Image</h3>
<pre class="language-dart hljs">Switch(
  trackColor: MaterialStateProperty.all(Colors.black38),
  activeColor: Colors.green.withOpacity(0.4),
  inactiveThumbColor: Colors.red.withOpacity(0.4),
// when the switch is on, this image will be displayed
  activeThumbImage: const AssetImage('assets/happy_emoji.png'),
// when the switch is off, this image will be displayed
  inactiveThumbImage: const AssetImage('assets/sad_emoji.png'),
  value: forImage,
  onChanged: (value) => setState(() => forImage = value),
),</pre>
<p><img             class="aligncenter size-full wp-image-130709 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/image-switch.png" alt="Image Switch" width="730" height="439"    /><noscript><img               class="aligncenter size-full wp-image-130709" src="https://blog.logrocket.com/wp-content/uploads/2022/09/image-switch.png" alt="Image Switch" width="730" height="439"  /></noscript></p>
<p>This is how the code looks in action:</p>
<p><img             class="aligncenter size-full wp-image-130712 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/android-switch.gif" alt="Android Switch" width="446" height="836"  /><noscript><img               class="aligncenter size-full wp-image-130712" src="https://blog.logrocket.com/wp-content/uploads/2022/09/android-switch.gif" alt="Android Switch" width="446" height="836"/></noscript></p>
<p>Currently, we are not saving the state of the switch widget; we are only changing it. Next is creating a small application, where we will change the theme from light to dark and vice versa, and when you close the application, its state will be saved.</p>
<p>It is a simple one-page application with a switch button in the <code>appBar</code>, which will change the theme.</p>
<p>I have used <a href="https://blog.logrocket.com/handling-local-data-persistence-flutter-hive/" target="_blank" rel="noopener">Flutter Hive</a> to save the state of the app. You can use <code>SharedPreferences</code>, but I have opted for Hive because it is a fast, lightweight, NoSQL database for Flutter and Dart applications. Hive is helpful if you need a straightforward key-value database without numerous relations. It is effortless to utilize and is an offline database (stores data locally).</p>
<p>Let’s look at the code first…</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>We are using <code>ValueListenableBuilder</code> to update the UI. It builds the particular widget every time the value changes for which it listens. Its values remain synced with listeners; i.e., whenever the values change, the <code>ValueListenable</code> listens to it and updates the UI without using <code>setState()</code> or any other state management technique:</p>
<pre class="language-dart hljs">const themeBox = 'hiveThemeBox';
void main() async {
 await Hive.initFlutter();
 await Hive.openBox(themeBox);
 runApp(const MyApp());
}

class MyApp extends StatelessWidget {
 const MyApp({Key? key}) : super(key: key);

 @override
 Widget build(BuildContext context) {
   //to update the UI without using setState()
   return ValueListenableBuilder(
     valueListenable: Hive.box(themeBox).listenable(),
     builder: (context, box, widget) {
       //saving the value inside the hive box,
       var darkMode = Hive.box(themeBox).get('darkMode', defaultValue: false);
       return MaterialApp(
           debugShowCheckedModeBanner: false,
           //switching between light and dark theme,
           themeMode: darkMode ? ThemeMode.dark : ThemeMode.light,
           title: 'Flutter Demo',
           darkTheme: ThemeData.dark(),
           home: HomePage(
             value: darkMode,
           ));
     },
   );
 }
}

class HomePage extends StatelessWidget {
 final bool value;
 const HomePage({Key? key, required this.value}) : super(key: key);

 @override
 Widget build(BuildContext context) {
   return Scaffold(
     appBar: AppBar(
       title: Text(value ? 'Hive Dark Mode' : 'Hive Light Mode'),
       actions: [
         Switch(
           value: value,
           onChanged: (val) {
             Hive.box(themeBox).put('darkMode', !value);
           },
         ),
       ],
     ),
     body: Padding(
       padding: const EdgeInsets.all(8.0),
       child: Column(
         crossAxisAlignment: CrossAxisAlignment.stretch,
         children: [ ],
       ),
     ),
   );
 }
}</pre>
<p><img             class="aligncenter size-full wp-image-130715 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/dark-mode-switch.gif" alt="Dark Mode Switch" width="446" height="842"  /><noscript><img               class="aligncenter size-full wp-image-130715" src="https://blog.logrocket.com/wp-content/uploads/2022/09/dark-mode-switch.gif" alt="Dark Mode Switch" width="446" height="842"/></noscript></p>
<h2 id="toggle-widget-examples">Toggle widget examples</h2>
<p>Here we will look at four different ways to implement the toggle widget in our application.</p>
<ul>
<li>Single and required: The user has to select at least one option out of two</li>
<li>Single and not required: The user is not required to select any option</li>
<li>Multiple and required: The user must choose at least one of the given options but can also select multiple options</li>
<li>Multiple and not required: The user can select or deselect as per requirement but can also choose multiple options</li>
</ul>
<p>First, let’s look at the standard properties of a toggle widget to customize it, and then we will go through the code for each one, along with its illustrated images:</p>
<pre class="language-dart hljs">ToggleButtons(
  // list of booleans
  isSelected: isSelected,
  // text color of selected toggle
  selectedColor: Colors.white,
  // text color of not selected toggle
  color: Colors.blue,
  // fill color of selected toggle
  fillColor: Colors.lightBlue.shade900,
  // when pressed, splash color is seen
  splashColor: Colors.red,
  // long press to identify highlight color
  highlightColor: Colors.orange,
  // if consistency is needed for all text style
  textStyle: const TextStyle(fontWeight: FontWeight.bold),
  // border properties for each toggle
  renderBorder: true,
  borderColor: Colors.black,
  borderWidth: 1.5,
  borderRadius: BorderRadius.circular(10),
  selectedBorderColor: Colors.pink,
// add widgets for which the users need to toggle
   children: [ ],
// to select or deselect when pressed
  onPressed: (int newIndex) { }
);</pre>
<p><img             class="aligncenter size-full wp-image-130718 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/single-selection-required.png" alt="Single Selection Required" width="730" height="435"    /><noscript><img               class="aligncenter size-full wp-image-130718" src="https://blog.logrocket.com/wp-content/uploads/2022/09/single-selection-required.png" alt="Single Selection Required" width="730" height="435"  /></noscript></p>
<h3 id="single-and-required-toggle-switch">Single and required toggle switch</h3>
<p>First, we must initialize a list of Boolean variables:</p>
<pre class="language-dart hljs">// one must always be true, means selected.
List&lt;bool> isSelected = [true, false, false];</pre>
<p>Since we force the system to have at least one option always selected, we have initialized one value as <code>true</code>.</p>
<p>We have already discussed other properties to customize the toggle widget. Now we add child widgets to its <code>children</code> property.</p>
<p><em>N.B., you have to add the same number of the child widgets as the list of Boolean values. Otherwise, it will throw an error.</em></p>
<pre class="language-dart hljs">// add widgets for which the users need to toggle
children: const [
  Padding(
    padding: EdgeInsets.symmetric(horizontal: 12),
    child: Text('MALE', style: TextStyle(fontSize: 18)),
  ),
  Padding(
    padding: EdgeInsets.symmetric(horizontal: 12),
    child: Text('FEMALE', style: TextStyle(fontSize: 18)),
  ),
  Padding(
    padding: EdgeInsets.symmetric(horizontal: 12),
    child: Text('OTHER', style: TextStyle(fontSize: 18)),
  ),
],</pre>
<p>Next, we have to add logic to the <code>onPressed()</code> property of the toggle widget inside the <code>setState()</code> function.</p>
<ul>
<li>Using the <code>for</code> loop, we will go through the list of Boolean values</li>
<li>Using the <code>if</code> statement, we will check for the <code>index</code> value and always set it to <code>true</code>. Other buttons will be set to <code>false</code>
<pre class="language-dart hljs">onPressed: (int newIndex) {
  setState(() {
    // looping through the list of booleans values
    for (int index = 0; index &lt; isSelected.length; index++) {
      // checking for the index value
      if (index == newIndex) {
        // one button is always set to true
        isSelected[index] = true;
      } else {
        // other two will be set to false and not selected
        isSelected[index] = false;
      }
    }
  });
},</pre>
</li>
</ul>
<p>This is how our final product will look.</p>
<p><img             class="aligncenter size-full wp-image-130721 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/gender-selection.gif" alt="Gender Selection" width="446" height="296"  /><noscript><img               class="aligncenter size-full wp-image-130721" src="https://blog.logrocket.com/wp-content/uploads/2022/09/gender-selection.gif" alt="Gender Selection" width="446" height="296"/></noscript></p>
<h3 id="single-and-not-required-toggle-switch">Single and not required toggle switch</h3>
<p>We need to make only two changes for this to work. The user can select only one out of three options but is not required to choose it.</p>
<p>Values inside the list of Boolean variables are all initialized as false:</p>
<pre class="language-dart hljs">// all values are false
List&lt;bool> isSelected = [false, false, false];</pre>
<p>Inside the <code>if</code> statement in the <code>onPressed()</code> function, we only toggle between buttons to set it to <code>true</code>:</p>
<pre class="language-dart hljs">onPressed: (int newIndex) {
  setState(() {
    // looping through the list of booleans values
    for (int index = 0; index &lt; isSelected.length; index++) {
      if (index == newIndex) {
        // toggling between the button to set it to true
        isSelected[index] = !isSelected[index];
      } else {
        // other two buttons will not be selected and are set to false
        isSelected[index] = false;
      }
    }
  });
},</pre>
<p><img             class="aligncenter size-full wp-image-130723 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/phone-selection.gif" alt="Phone Selection" width="446" height="296"  /><noscript><img               class="aligncenter size-full wp-image-130723" src="https://blog.logrocket.com/wp-content/uploads/2022/09/phone-selection.gif" alt="Phone Selection" width="446" height="296"/></noscript></p>
<h3 id="multiple-selections-that-are-required">Multiple selections that are required</h3>
<p>As mentioned earlier, the user can select multiple options, but the system will keep at least one option always selected.</p>
<p>Yes, you guessed correctly that one of the values in the list of Booleans will be <code>true</code>:</p>
<pre class="language-dart hljs">List&lt;bool> isSelected = [true, false, false];</pre>
<p>Things get a little interesting inside the <code>onPressed</code> function.</p>
<p>First, we add a variable to loop through the list of Booleans and ensure that the value is true; therefore, at least one button is always selected:</p>
<pre class="language-dart hljs">final isOneSelected = isSelected.where((element) => element).length == 1;</pre>
<p>If only one button is selected, the user cannot toggle it to <code>false</code> until another option is selected:</p>
<pre class="language-dart hljs">if (isOneSelected &amp;&amp; isSelected[newIndex]) return;</pre>
<p>Next, inside the <code>setState()</code> function, we loop through our list again, check for the new index value, and toggle between the old and new indexes:</p>
<pre class="language-dart hljs">setState(() {
  // looping through the list of booleans
  for (int index = 0; index &lt; isSelected.length; index++) {
    // checking for the index value
    if (index == newIndex) {
      // toggle between the old index and new index value
      isSelected[index] = !isSelected[index];
    }
  }
});</pre>
<p><img             class="aligncenter size-full wp-image-130726 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/multiple-selection-required.gif" alt="Multiple Selection Required" width="446" height="296"  /><noscript><img               class="aligncenter size-full wp-image-130726" src="https://blog.logrocket.com/wp-content/uploads/2022/09/multiple-selection-required.gif" alt="Multiple Selection Required" width="446" height="296"/></noscript></p>
<h3 id="multiple-selections-that-are-not-required">Multiple selections that are not required</h3>
<p>This is pretty straightforward. I have made a row of text editing options you usually see in any text editor to format the written text. There are four options, so we have four values inside our list, and all are set to <code>false</code>:</p>
<pre class="language-dart hljs">List&lt;bool> isSelected = [false, false, false, false];</pre>
<p>In our <code>onPressed()</code> function, we simply toggle between <code>true</code> and <code>false</code> values:</p>
<pre class="language-dart hljs">onPressed: (int index) {
  setState(() {
    // simply toggling buttons between true and false state
    isSelected[index] = !isSelected[index];
  });</pre>
<p><img             class="aligncenter size-full wp-image-130728 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/format-selection.gif" alt="Format Selection" width="446" height="296"  /><noscript><img               class="aligncenter size-full wp-image-130728" src="https://blog.logrocket.com/wp-content/uploads/2022/09/format-selection.gif" alt="Format Selection" width="446" height="296"/></noscript></p>
<p>We have finished explaining the switch and toggle widget and how to use it the usual way. Now, let’s get into little complex programming by creating a custom animated switch button, which will look something like the image below after implementing the next code set.</p>
<h2 id="creating-a-custom-animated-switch-button">Creating a custom animated switch button</h2>
<p>We have divided this button into two parts. The first is a stateless widget that I have named as <code>CustomAnimatedSwitch</code>. In this stateless widget, we will create the custom switch. Later, we will add it to the stateful widget to use the <code>setState()</code> function to switch on and off.</p>
<p><img             class="aligncenter size-full wp-image-130730 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/custom-animated-switch.gif" alt="Custom Animated Switch" width="446" height="296"  /><noscript><img               class="aligncenter size-full wp-image-130730" src="https://blog.logrocket.com/wp-content/uploads/2022/09/custom-animated-switch.gif" alt="Custom Animated Switch" width="446" height="296"/></noscript></p>
<h3>Step 1: Add dependencies</h3>
<pre class="language-dart hljs">simple_animations: ^5.0.0+2</pre>
<h3>Step 2: Define variables</h3>
<p>First, we will define our named constant variables using an enum and a Boolean:</p>
<pre class="language-dart hljs">enum _CustomSwitchParams { paddingLeft, color, text, rotation }

final bool toggle;</pre>
<p>Secondly, since we are using the simple animation package with the cascade notation (double dot operator), we are calling functions on the <code>MovieTween</code> object we created to access its properties. Basically, we are adding animations to the enums that we added earlier:</p>
<pre class="language-dart hljs">var customTween = MovieTween()
  ..scene(duration: const Duration(seconds: 1))
      .tween(_CustomSwitchParams.paddingLeft, 0.0.tweenTo(60.0))
  ..scene(duration: const Duration(seconds: 1))
      .tween(_CustomSwitchParams.color, Colors.red.tweenTo(Colors.green))
  ..scene(duration: const Duration(milliseconds: 500))
      .tween(_CustomSwitchParams.text, ConstantTween('OFF'))
      .thenTween(_CustomSwitchParams.text, ConstantTween('ON'),
          duration: const Duration(milliseconds: 500))
  ..scene(duration: const Duration(seconds: 1))
      .tween(_CustomSwitchParams.rotation, (-2 * pi).tweenTo(0.0));</pre>
<h3>Step 3: <code>CustomAnimationBuilder</code></h3>
<p>Next, we will build our <code>CustomAnimationBuilder</code> widget and define its required properties to assemble the switch animation:</p>
<pre class="language-dart hljs">CustomAnimationBuilder&lt;Movie>(
   // control of the animation
   control: toggle ? Control.play : Control.playReverse,
   // the relative position where animation will start
   startPosition: toggle ? 1.0 : 0.0,
   // define unique key
   key: const Key('0'),
   duration: customTween.duration * 1.2,
   // movie tween object
   tween: customTween,
   curve: Curves.easeInOut,
   builder: (context, value, child) {
     return Container(
       decoration:
           _outerDecoration(color: value.get(_CustomSwitchParams.color)),
       width: 100.0,
       height: 40.0,
       padding: const EdgeInsets.all(4.0),
       child: Stack(
         children: [
           Positioned(
             child: Padding(
               padding: EdgeInsets.only(
                 left: value.get(_CustomSwitchParams.paddingLeft),
               ),
               child: Transform.rotate(
                 angle: value.get(_CustomSwitchParams.rotation),
                 child: Container(
                   decoration: _innerDecoration(
                     color: value.get(_CustomSwitchParams.color),
                   ),
                   width: 30.0,
                   child: Center(
                     child: Text(
                       value.get(_CustomSwitchParams.text),
                       style: const TextStyle(
                           height: 1.5,
                           fontSize: 12,
                           fontWeight: FontWeight.bold,
                           color: Colors.white),
                     ),
                   ),
                 ),
               ),
             ),
           ),
         ],
       ),
     );
   },
 );
}</pre>
<h3>Step 4: <code>CustomSwitchButton</code> (stateful widget)</h3>
<p>Coming to the second part of creating our custom switch button, we have to add another Dart file containing a stateful widget, which we will call <code>CustomSwitchButton</code>.</p>
<p>First, define a Boolean variable and set its value to <code>false</code>:</p>
<pre class="language-dart hljs">bool _switched = false;</pre>
<p>Secondly, create a method with the <code>setState()</code> function to toggle between <code>true</code> and <code>false</code>:</p>
<pre class="language-dart hljs">void toggleSwitch() {
  setState(() {
    _switched = !_switched;
  });
}</pre>
<p>Lastly, we are adding our <code>CustomAnimatedSwitch</code> to this Dart file wrapped with <code>GestureDetector</code>, adding the <code>toggleSwitch</code> method to the <code>onTap()</code> function.</p>
<p>That’s it! We have our fully functional, custom-made, animated switch button. Please look at the code below and the images along with it:</p>
<pre class="language-dart hljs">@override
 Widget build(BuildContext context) {
   return Scaffold(
     appBar: AppBar(
       title: const Text('Custom Animated Switch'),
     ),
     body: GestureDetector(
       onTap: toggleSwitch,
       child: Center(
         child: Column(
           crossAxisAlignment: CrossAxisAlignment.center,
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
             const Padding(
               padding: EdgeInsets.all(10.0),
               child: Text('Tap to Check Custom Animated Switch'),
             ),
             const SizedBox(
               height: 20.0,
             ),
             CustomAnimatedSwitch(toggle: _switched),
           ],
         ),
       ),
     ),
   );
 }
}</pre>
<h2 id="popular-flutter-packages-for-switches-and-toggles">Popular Flutter packages for switches and toggles</h2>
<p>If you do not want to create your own switch button, you can always use any of the below packages that do the exact same as we did to make our own custom animated switch.</p>
<ol>
<li><code><a href="https://pub.dev/packages/animated_toggle_switch" target="_blank" rel="noopener">AnimatedToggleSwitch</a></code>: Simple and animated toggle switch for multiple choices. It’s a good alternative if you don’t want to use something like a dropdown menu<br/>
<img             class="aligncenter size-full wp-image-130733 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/09/nice-switch.gif" alt="Nice Switch" width="446" height="296"  /><noscript><img               class="aligncenter size-full wp-image-130733" src="https://blog.logrocket.com/wp-content/uploads/2022/09/nice-switch.gif" alt="Nice Switch" width="446" height="296"/></noscript></li>
<li><code><a href="https://pub.dev/packages/flutter_switch" target="_blank" rel="noopener">FlutterSwitch</a></code>: An easy-to-implement custom switch created for Flutter. Give it a custom height and width, border for the switch and toggle, border radius, colors, toggle size, a choice to display an <strong>On</strong> and <strong>Off</strong> text, and be able to add an icon inside the toggle</li>
<li><code><a href="https://pub.dev/packages/toggle_switch" target="_blank" rel="noopener">ToggleSwitch</a></code>: A simple toggle switch widget. It can be fully customized with desired icons, width, colors, text, corner radius, animation, etc. It also maintains a selection state</li>
</ol>
<p>I’m leaving the <a href="https://github.com/timelessfusionapps/toggle_switch_app" target="_blank" rel="noopener">link to the whole project</a> that you can find on my GitHub page. If there are any issues or you can improve the code, let me know, and I will give you access to my project.</p>
<p>Thank you very much and stay safe!</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-130690" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-130690" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-130690" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/advanced-guide-flutter-switches-toggles/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Advanced guide to the CSS toggle() pseudo-class - LogRocket Blog</title>
			<link>https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Advanced guide to the CSS toggle() pseudo-class - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/">Advanced guide to the CSS toggle() pseudo-class - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/kingsleyubah/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/09/Kingsley-Ubah.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/kingsleyubah/">
Kingsley Ubah <span class="btn follow">Follow</span></a>
<span class="author-description d-block">21. Web Developer. Technical Writer. African in Tech.</span>
</div>
</div>
<h1 class="posttitle">Advanced guide to the CSS toggle() pseudo-class</h1>
<p>
<span class="post-date"><time class="post-date">
December 28, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1358</span>
<span class="logrocket_editor">109</span>
</p>
</div>
<article class="article-post">
<p>In mid-April of 2022, Chromium announced that it’ll begin prototyping compatibility with CSS Toggles, a new CSS feature that is currently <a href="https://tabatkins.github.io/css-toggle/">only available as an unofficial draft</a>.</p>
<p>CSS Toggles is a declarative mechanism for associating a “toggleable value” with an element, as well as setting and modifying that value. You can also use CSS Toggles in selectors within CSS to select an element for the purpose of styling or adding interactivity.</p>
<p>Included in the draft is <code>toggle()</code>, a functional pseudo-class that makes it possible to select elements based on a toggle state. In this article, we will explore what is currently known about this upcoming CSS feature, including what makes it exciting and some of its potential use cases.</p>
<p>Jump ahead:</p>
<ul>
<li><a href="#why-css-toggle-exciting-upcoming-feature">Why CSS </a><code><a href="#why-css-toggle-exciting-upcoming-feature">toggle()</a></code><a href="#why-css-toggle-exciting-upcoming-feature"> is an exciting upcoming feature</a></li>
<li><a href="#using-toggle-select-element-toggle-state">Using </a><code><a href="#using-toggle-select-element-toggle-state">toggle()</a></code><a href="#using-toggle-select-element-toggle-state"> to select an element based on its toggle state</a></li>
<li><a href="#using-toggle-visibility-elements">Using </a><code><a href="#using-toggle-visibility-elements">toggle-visibility</a></code><a href="#using-toggle-visibility-elements"> to toggle the visibility of elements</a></li>
<li><a href="#using-toggle-group-exclusive-toggles">Using </a><code><a href="#using-toggle-group-exclusive-toggles">toggle-group</a></code><a href="#using-toggle-group-exclusive-toggles"> to group exclusive toggles</a></li>
<li><a href="#other-features-css-toggle-pseudo-class">Other features of the CSS </a><code><a href="#other-features-css-toggle-pseudo-class">toggle()</a></code><a href="#other-features-css-toggle-pseudo-class"> pseudo-class</a></li>
</ul>
<p>Note that because CSS <code>toggle()</code> is still currently an unofficial draft, what we know about this pseudo-class is subject to change.</p>
<h2 id="why-css-toggle-exciting-upcoming-feature">Why CSS <code>toggle()</code> is an exciting upcoming feature</h2>
<p>Before <code>toggle()</code>, you could only leverage the inbuilt browser states to style elements or add interactivity. For example, the checkbox input has <code>:checked</code>, a built-in browser state related to form inputs that you can use to change the input’s appearance once it’s checked.</p>
<p>With <code>toggle()</code>, you can create your own custom states on any element and define style variations for the different states. The spec also comes with properties such as <code>toggle-visibility</code> and <code>toggle-group</code>, both of which will be particularly useful for building disclosure widgets like tabs and accordions.</p>
<p>Let’s see some examples.</p>
<h2 id="using-toggle-select-element-toggle-state">Using <code>toggle()</code> to select an element based on its toggle state</h2>
<p>You can define an element’s state in CSS with the <code>toggle-root</code> property and describe how the state will change based on user interaction with the <code>toggle-trigger</code> property. Then, you can have the element respond to the state change using the <code>toggle()</code> pseudo-class.</p>
<p>Consider the following button:</p>
<pre class="language-html hljs">&lt;div>
    &lt;button>TOGGLE ME!&lt;/button>
&lt;/div>

&lt;div>
    &lt;p>Demo for &lt;em>&lt;a href="https://blog.logrocket.com" target"_top">https://blog.logrocket.com&lt;/a>&lt;/em>&lt;/p>
&lt;/div>
</pre>
<p>We want the button to have two toggleable states — though you can have more than two. Each state will have a given set of styles associated with it.</p>
<p>The following example shows an easy way to do this using the CSS <code>toggle()</code> pseudo-class. We register the toggle in the HTML root element, define the button as the toggle activator, and then describe what should happen when the toggle switches:</p>
<pre class="language-css hljs">html {
  toggle-root: switch;
}

button {
  toggle-trigger: switch;
  background-color: black;
  color: white;
}

html:toggle(switch) button {
  background-color: white;
  color: black;
}
</pre>
<p>With the above CSS, when the toggle value is changed by clicking the button, we simply change the button’s background and text color to white and black respectively. Below is a demo of this behavior:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="kingsleyubah" data-slug-hash="ExRKGMm" data-pen-title="“Toggle">See the Pen <a href="https://codepen.io/kingsleyubah/pen/ExRKGMm">Toggle button demo</a> by Kingsley Ubah (<a href="https://codepen.io/kingsleyubah">@kingsleyubah</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>If you’d like to make your button more visually dynamic, check out our guide to <a href="https://blog.logrocket.com/css-transitions-animating-hamburger-menu-button/">animating a button in CSS</a>.</p>
<p>Note that an element can be both the toggle root and the toggle trigger. In that case, use the <code>toggle</code> shorthand property. The following example demonstrates this case:</p>
<pre class="language-css hljs">li {
  toggle: check self
}

li:toggle(check) {
  color: silver;
  text-decoration: line-through;
}
</pre>
<p>Here, the list items are both toggle root and trigger. As a result, when an item is clicked, we change the text color to silver and strike a line through it:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="kingsleyubah" data-slug-hash="MWXyKpY" data-pen-title="“Toggle">See the Pen <a href="https://codepen.io/kingsleyubah/pen/MWXyKpY">Toggle list items demo</a> by Kingsley Ubah (<a href="https://codepen.io/kingsleyubah">@kingsleyubah</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>Next, let’s take a look at toggling visibility.</p>
<h2 id="using-toggle-visibility-elements">Using <code>toggle-visibility</code> to toggle the visibility of elements</h2>
<p>With the <code>toggle-visibility</code> property, you can build different kinds of expanders — <a href="https://blog.logrocket.com/create-collapsible-react-components-react-collapsed/">collapsible components such as</a> tabs, accordions, popups, and detail or summary widgets — without having to write a single line of JavaScript code. This property allows an element to automatically tie its display to the state of a particular toggle.</p>
<p>Using <code>toggle-visibility</code> also <a href="https://blog.logrocket.com/a-guide-to-improving-web-accessibility-with-css/">provides extra accessibility benefits</a> by allowing the unrendered content to be accessible when searched or accessed with features like find-in-page, hash-based navigation, or tab order.</p>
<p>Let’s consider the following description list:</p>
<pre class="language-html hljs">&lt;dl class="accordion">
  &lt;dt>What is HTML?
  &lt;dd>Hyper Text Markup Language is the standard markup language for documents intended to be viewed in a web browser
  &lt;dt>What is CSS?
  &lt;dd>
Cascading Style Sheets is used to describe the appearance of a document wtitten in HTML or some other markup language
&lt;/dl>
</pre>
<p>The descriptions <code>&lt;dd></code> are hidden by default. We want to expand the description only when the corresponding title is clicked. Here’s the CSS for adding that effect:</p>
<pre class="language-css hljs">.accordion > dt {
  background-color: black;
  margin-bottom: 10px;
  padding: 5px 5px;
  width: 120px;
  color: white;
  toggle: show;
  }
  .accordion > dd {
    margin-bottom: 10px;
    toggle-visibility: toggle show;
  }
</pre>
<p>And here’s the demo for that behavior:</p>
<p class="codepen"  data-height="500" data-theme-id="0" data-default-tab="result" data-user="kingsleyubah" data-slug-hash="qBKZZrM" data-pen-title="Demo of toggle-visibility effect">See the Pen <a href="https://codepen.io/kingsleyubah/pen/qBKZZrM">Demo of toggle-visibility effect</a> by Kingsley Ubah (<a href="https://codepen.io/kingsleyubah">@kingsleyubah</a>)<br/>
on <a href="https://codepen.io">CodePen</a>.</p>
<p></p>
<p>You can also create toggle groups using this CSS pseudo-class. Let’s look at that next.</p>
<h2 id="using-toggle-group-exclusive-toggles">Using <code>toggle-group</code> to group exclusive toggles</h2>
<p>If you have multiple toggles, you can group them together with the toggle-group property. Keep in mind that only one toggle from the group can be active at a time. This is similar to how HTML radio buttons behave, where two buttons cannot be checked at the same time.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>With that behavior in mind, you could use toggle groups to describe patterns where you have multiple branches of content that are mutually exclusive, meaning only one of them can be shown at a time. Two examples are tabs and <a href="https://blog.logrocket.com/making-dropdown-menus-css/">accordion or dropdown menus</a>.</p>
<p>Consider the following HTML:</p>
<pre class="language-html hljs">&lt;div>
  &lt;button>tab one&lt;/button>
  &lt;p>tab one content&lt;/p>
  &lt;button>tab two&lt;/button>
  &lt;p>tab two content&lt;/p>
  &lt;button>tab three&lt;/button>
  &lt;p>tab three content&lt;/p>
&lt;/div>
</pre>
<p>Given that only one of the three paragraphs is to be shown at a given time, we can define the exclusive or grouped behavior using toggles:</p>
<pre class="language-css hljs">div {
  /* Set group on a common ancestor */
  toggle-group: tab;
}

button {
  /* Creates sticky tabs and declares itself a toggle activator */  
  toggle: tab 1 group sticky;
}

button:first-of-type {
  /* The first tab is active by default */
  toggle: tab 1 at 1 group sticky;
}

button:toggle(tab) {
  /* Specify how you want the active
  tab/button to look */
}

p {
  /* Visibility of paragraph is 
  linked to toggle state */
  toggle-visibility: toggle tab;
}
</pre>
<p>With the above CSS, the visibility of each paragraph is tied to its activator — in this case, its respective button — and only one paragraph can appear at a time. The first paragraph is visible by default.</p>
<h2 id="other-features-css-toggle-pseudo-class">Other features of the CSS <code>toggle()</code> pseudo-class</h2>
<p>There is a lot more to the draft than the basic examples we covered. Here are some other behaviors to keep in mind:</p>
<ul>
<li>A toggle root can contain multiple toggles</li>
<li>It’s possible to have more than one active state in a toggle</li>
<li>The toggle state is set to inactive by default, but this can be overridden</li>
<li>You can also represent states with a set of words, not just numbers</li>
<li>Sticky toggles are always active because there’s always at least one active item</li>
<li>State machines with transitions are being considered</li>
</ul>
<p>Again, keep in mind that CSS <code>toggle()</code> currently remains available as an unofficial draft only. These behaviors may be updated or changed over time.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When fully implemented across web browsers, CSS toggles will be an incredibly useful tool for CSS authors.</p>
<p>It’s quite a powerful feature that’ll no doubt make the process of <a href="https://blog.logrocket.com/web-animation-with-html-css-and-javascript/">adding interactivity to HTML elements</a> much easier. Of course, it’ll take time to properly grasp the whole syntax, but it’ll be time well invested.</p>
<p>Do you have any questions regarding this new feature? Let me know in the comments below.</p><div class="code-block code-block-25" >
<div class="blog-plug inline-plug css-plug"><h2>Is your frontend hogging your users' CPU?</h2>As web frontends get increasingly complex, resource-greedy features demand more and more from the browser. If you’re interested in monitoring and tracking client-side CPU usage, memory usage, and more for all of your users in production, <a target="_blank" href="https://lp.logrocket.com/blg/css-signup">try LogRocket</a>.<a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2019/12/cpu-memory-usage.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">https://logrocket.com/signup/</a><p ><a href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording everything that happens in your web app, mobile app, or website. Instead of guessing why problems happen, you can aggregate and report on key frontend performance metrics, replay user sessions along with application state, log network requests, and automatically surface all errors.</p><p>Modernize how you debug web and mobile apps — <a class="signup" href="https://lp.logrocket.com/blg/css-signup" target="_blank" rel="noopener noreferrer">Start monitoring for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-152098" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-152098" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-152098" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/advanced-guide-css-toggle-pseudo-class/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Advanced page transitions with Next.js and Framer Motion - LogRocket Blog</title>
			<link>https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Advanced page transitions with Next.js and Framer Motion - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/">Advanced page transitions with Next.js and Framer Motion - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/francoisbrill/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/avatar-francois-brill-small.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/avatar-francois-brill-small.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/francoisbrill/">
Francois Brill <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I’m a designer, frontend developer, and product thinker that loves making things.</span>
</div>
</div>
<h1 class="posttitle">Advanced page transitions with Next.js and Framer Motion</h1>
<p>
<span class="post-date"><time class="post-date">
November 28, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">7 min read</span>
<span class="wordcount">2053</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>The web has become increasingly more interactive. Users have come to expect a higher level of interactivity to grab their attention and induce them to engage with the information on the page. A key way to capture attention is to use movement and page transitions. This may sound like a PowerPoint slide deck with inbuilt clipart-type page transitions, but I can assure you that’s not what I’m referring to!</p>
<p>This article will demonstrate how to use Next.js and Framer Motion to apply subtle, elegant page transitions that add personality and style to your site.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#indicating-loading-state">Indicating loading state</a></li>
<li><a href="#determining-when-to-use-page-transitions">Determining when to use page transitions</a></li>
<li><a href="#considering-user-experience">Considering user experience</a></li>
<li><a href="#building-page-transitions">Building page transitions</a></li>
<li><a href="#page-transitions-demo">Page transitions demo</a>
<ul >
<li><a href="#setting-the-scene">Setting the scene</a></li>
<li><a href="#starting-a-new-nextjs-site">Starting a new Next.js site</a></li>
<li><a href="#adding-animatepresence">Adding</a> <code><a href="#adding-animatepresence">AnimatePresence</a></code></li>
<li><a href="#creating-a-shared-layout-component">Creating a shared layout component</a></li>
<li><a href="#using-the-layout-component">Using the layout component</a></li>
<li><a href="#scrolling-back-to-top">Scrolling back to top</a></li>
</ul>
</li>
<li><a href="#bonus-tip-loading-page-transitions">Bonus tip: Loading page transitions</a></li>
</ul>
<h2 id="indicating-loading-state">Indicating a loading state</h2>
<p>Page transitions are just one of several tools in a frontend developer’s toolbox. When used appropriately, page transitions can increase user engagement, even holding a user’s attention during page load.</p>
<p>Webpage content generally content loads quickly, but if you’re dependent on fetching data from a server, a page transition with just the right level of motion applied could help keep the user engaged.</p>
<p>One option is to add a quick loading bar; this provides feedback to a user and informs them to stay put and not navigate away when content takes an extra couple of seconds to load.</p>
<p>Anything faster than 200ms is perceived by the brain to be instant. However, it’s really hard to get a page to load that fast. By adding a .5-2s page transition, you’re essentially buying yourself time to load data and get things ready, so that when the next page is revealed you can just deliver the content that the user requested.</p>
<h2 id="determining-when-to-use-page-transitions">Determining when to use page transitions</h2>
<p>In order to provide the best website UX, you’ll need to put the user at the center of the experience and consider things from their perspective. Consider the context of the user’s needs when visiting your website and use this information to evaluate what level of page transitions are acceptable.</p>
<p>The loading bar mentioned previously could be used on nearly any type of website. The architecture of the loading bar could range from a full-page experience to a slim component that is only visible at the top of the webpage. But, regardless of the loading bar’s appearance, its purpose is to indicate the system status as the next page is loading.</p>
<p>When users visit an information-rich website to consume content, they do not want to be slowed down by page transitions. This is especially true of sites where users browse several pages. So, don’t get too excited and add page transitions to your corporate website! More flamboyant page transitions should be reserved for websites that are more creative in nature since their site visitors likely expect more entertainment.</p>
<h3 id="considering-user-experience">I’ve added some page transitions, am I done?</h3>
<p>In general, animations are most successful when they are subtle, feel natural, and mesh well with the entire overall user experience. Simply adding page transitions would probably feel out of place, and you’d need to consider the overall <a href="https://blog.logrocket.com/react-scroll-animations-framer-motion/">on-page experience</a>. You might want to add some movement to elements to enter the page, interactive hover effects, and so forth to keep the user engaged throughout their visit to your website.</p>
<h2 id="building-page-transitions">Building page transitions</h2>
<p>Page transitions can be built in just about any frontend framework or technology, but in this demonstration, we’ll use <a href="https://nextjs.org/">Next.js</a> to provide the cue for when pages transition to trigger the animation and <a href="https://www.framer.com/motion/">Framer Motion</a> to actually perform the page transitions.</p>
<p>Framer Motion has dubbed itself “the production-ready motion library for React”, and it’s a real treat to use. The thing I like most about this library is its declarative way of achieving animations. With Framer Motion, you declare what you want the start and end to look like, and the library fills in the gaps.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Creating animations from scratch is really difficult. If you’ve ever attempted to use CSS, or almost any other language, to animate something in React, it becomes very tricky. React immediately unmounts the element that is exiting the DOM and, because the element is dropped, you can’t animate it on the way “out”. A page transition would not feel right if there was an abrupt jump when the page changed. This is part of the magic that Framer Motion automatically takes care of for us, although there is a trick to implementing it that I’ll cover below.</p>
<p>OK, let’s jump in and put this all to use!</p>
<h2 id="page-transitions-demo">Page transitions demo</h2>
<p>To demonstrate creating page transitions, we’ll build a Next.js site with Framer Motion. We’ll style the site with my preferred method: Tailwind CSS.</p>
<p>Here’s what we’ll end up with; each photo page is a new (dynamic) page in Next.js and you can see the page transitions as we navigate between the list and detail pages:</p>
<p><img             class="aligncenter wp-image-142809 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/dynamic-pages.gif" alt="Dynamic Page Transitions Example in Next.js" width="730" height="600"  /><noscript><img               class="aligncenter wp-image-142809 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/dynamic-pages.gif" alt="Dynamic Page Transitions Example in Next.js" width="730" height="600"/></noscript></p>
<p>If you’d like, you can also grab the <a href="https://github.com/fbrill/react-page-transitions">source code</a> for the above example to browse and follow along.</p>
<h3 id="setting-the-scene">Setting the scene</h3>
<p>To set up our page transitions demo, we need to understand how the internal workings of Next.js function:</p>
<ul>
<li>First, there is an <code>_app.js</code> file that is persisted between page loads</li>
<li>Second, we need to use the Next.js <code>&lt;Link></code> component to link to pages. With this, Next.js performs a shallow render and essentially mounts the new page component while it unmounts the previous component, giving us an SPA-like feel and the ability to change between pages without having to reload the page. We need this functionality in order to achieve page transitions</li>
<li>As mentioned previously, the most difficult part of trying to animate React components that leave the DOM is that they are simply just gone, making them nearly impossible to animate. Framer Motion solves this with an <code>&lt;AnimatePresence></code> component that does some magic to make it possible to declare an <code>exit</code> state that can be animated</li>
</ul>
<h3 id="starting-a-new-nextjs-site">Starting a new Next.js site</h3>
<p>To showcase how we can achieve animated page transitions, let’s create a <a href="https://tailwindcss.com/docs/guides/nextjs">quick Next.js site</a> with the Tailwind CSS starter to handle our styling.</p>
<p>Next, we’ll need to install Framer Motion, like so:</p>
<pre class="language-javascript hljs">yarn add framer-motion
</pre>
<h3 id="adding-animatepresence">Adding <code>AnimatePresence</code></h3>
<p>Now, we’ll work on setting up the page transitions. First, we add the AnimatePresence to <code>_app.js</code>:</p>
<pre class="language-javascript hljs">// _app.js

import { AnimatePresence } from 'framer-motion'

function MyApp({ Component, pageProps, router }) {
  return (
    &lt;AnimatePresence mode="wait" initial={false}>
      &lt;Component {...pageProps} key={router.asPath} />
    &lt;/AnimatePresence>
  );
}
</pre>
<p>Next, we need to wrap our <code>&lt;Component></code> with <code>&lt;AnimatePresence></code>.</p>
<p>Here are two additional, but optional, settings that I enabled for this demo:</p>
<ol>
<li><code>mode="wait"</code>: This just tells Framer Motion to complete any exit animations (exiting page) before starting a new animation (new page) on the new component.</li>
<li><code>initial</code>: Setting this to <code>false</code> means it’s not going to play the animation on the first page load, which just feels better.</li>
</ol>
<p>One key point here is to make sure your animated elements are direct children of <code>AnimatePresence</code> so that it can take over and animate any exit events before removing the element from the React tree.</p>
<p>Because we’re declaring <code>AnimatePresence</code> in the<code>_app.js</code> and <code>AnimatePresence</code> animates the direct children, we need to provide the <code>&lt;Component></code> that we’re returning a unique key to. Initially, this tripped me up. I resolved this issue by adding the page path as a key to ensure it’s always unique. This way, React will register each page as a different component and can animate the exit before animating the entry of a new component.</p>
<h3 id="creating-a-shared-layout-component">Creating a shared layout component</h3>
<p>Once the wrapper is in place in the <code>_app.js</code>, we’ll need to create the child page element that is actually animated. Instead of doing this on each and every page, we can create a shared <code>&lt;Layout></code> component that can be used to wrap all the pages we want to animate:</p>
<pre class="language-javascript hljs">// components/Layout/index.js

import { motion } from "framer-motion";

const Layout = ({ children }) => (
  &lt;motion.div
    initial={{ x: 300, opacity: 0 }}
    animate={{ x: 0, opacity: 1 }}
    exit={{ x: 300, opacity: 0 }}
    transition={{
      type: "spring",
      stiffness: 260,
      damping: 20,
    }}
  >
    {children}
  &lt;/motion.div>
);
export default Layout;
</pre>
<p>These are some great default settings to start off with, but you can <a href="https://www.framer.com/docs/component/">explore</a> other declarative properties too. For example, you could use <code>initial</code> to specify a transition starting point, where the element should “come from”, while <code>animate</code> would specify the “end state” of where you want things to end up, <code>exit</code> is used to specify the target of where the animated component should end up.</p>
<p>These properties can be used to fine-tune any page transitions, as well as the <code>transition</code> properties itself. If these names sound confusing, you can also define your own <code><a href="https://www.framer.com/docs/component/###variants">variants</a></code> to make it easier to follow.</p>
<h3 id="using-the-layout-component">Using the layout component</h3>
<p>Next, we need to use the layout component on all the pages we want to animate; these could be static pages or dynamic routes – it really does not matter.</p>
<p>Make this is the first component wrapping any child component to ensure it’s a direct descendant of <code>&lt;AnimatePresence></code>:</p>
<pre class="language-javascript hljs">// pages/index.js

import Layout from "../components/Layout";

export default function Home() {
  return (
    &lt;Layout>
        // ....
        // Page content goes here
        // ....
    &lt;/Layout>
  );
}
</pre>
<p>With the above stripped-down markup of the homepage, I’m just showing you what is required to get the page transitions working. Performing this on multiple pages and linking to them will result in a page transition, and any content in the actual component will animate with our page transition.</p>
<h3 id="scrolling-back-to-top">Scrolling back to top</h3>
<p>With my example, it was hard to see if the transitions were working at first as the pages weren’t that long. But in looking at the mobile experience, it is clear what is happening. Once we scroll down and transition to the new page, Next.js persists the position and we land in the middle of the new page. This is clearly not a great user experience:</p>
<p><img             class="aligncenter wp-image-142811 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/scrolling-through-pages.gif" alt="Next.js Page Transitions on Mobile" width="410" height="794"  /><noscript><img               class="aligncenter wp-image-142811 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/scrolling-through-pages.gif" alt="Next.js Page Transitions on Mobile" width="410" height="794"/></noscript></p>
<p>Fixing this issue is easy with the attribute on our root <code>&lt;AnimatePresence></code> where we can add any <code>onExitComplete</code> function. All we have to do is scroll the window back to the top once the exit animation is complete and, regardless of the page length, the new page will start from the top:</p>
<pre class="language-javascript hljs">// _app.js

&lt;AnimatePresence
  mode="wait"
  initial={false}
  onExitComplete={() => window.scrollTo(0, 0)}
>
</pre>
<h2 id="bonus-tip-loading-page-transitions">Bonus tip: Loading page transitions</h2>
<p>As I alluded to in the beginning of this guide, page transitions that also serve as a page loader are helpful for keeping a user’s attention while you’re fetching data.</p>
<p>Next.js makes this easy by providing us with some <code>Router</code> events that we can use to create this:</p>
<pre class="language-javascript hljs">// _app.js

import { useState, useEffect } from "react"
import Router from "next/router"
import PageLoader from "../components/PageLoader"

const App = ({ Component, pageProps }) => {
  const [loading, setLoading] = useState(false)
  useEffect(() => {
    // Used for page transition
    const start = () => {
      setLoading(true)
    }
    const end = () => {
      setLoading(false)
    }
    Router.events.on("routeChangeStart", start)
    Router.events.on("routeChangeComplete", end)
    Router.events.on("routeChangeError", end)
    return () => {
      Router.events.off("routeChangeStart", start)
      Router.events.off("routeChangeComplete", end)
      Router.events.off("routeChangeError", end)
    }
  }, [])

  return loading ? &lt;PageLoader /> : &lt;Component {...pageProps} />
}
export default App
</pre>
<p>We use the Next.js <code>Router</code> events to set a local state variable to indicate the loading state. From there we can decide what to do with that indicator. In this example, there is a different component that will be rendered as a whole page loader, which could be styled and animated separately.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we looked at when and why you may want to consider adding page transitions on your site. We demonstrated how to create and add page transitions using Next.js and Framer Motion. We also looked at a different approach for using a page loader as an interstitial loading state that serves as a page transition. If you try out this approach, use the comments below to let me know how you find it!</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-142800" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-142800" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-142800" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/advanced-page-transitions-next-js-framer-motion/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Advanced uses of Dart mixins: Avoiding duplicate methods - LogRocket Blog</title>
			<link>https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Advanced uses of Dart mixins: Avoiding duplicate methods - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/">Advanced uses of Dart mixins: Avoiding duplicate methods - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/emmanueljohn/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/01/AirBrush_20210107121828.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/emmanueljohn/">
Emmanuel John <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a full-stack software developer, mentor, and writer. I am an open source enthusiast. In my spare time, I enjoy watching sci-fi movies and cheering for Arsenal FC.</span>
</div>
</div>
<h1 class="posttitle">Advanced uses of Dart mixins: Avoiding duplicate methods</h1>
<p>
<span class="post-date"><time class="post-date">
October 24, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">3 min read</span>
<span class="wordcount">1070</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>One of the difficulties I’ve encountered with Dart is the restriction on only inheriting or extending from a single class at a time. You can get around this constraint, especially in more complex architectures, by using Dart mixins to improve class inheritance and code reusability.</p>
<p>When it comes to class reusability, Dart has a lot to offer, most especially since the introduction of mixin keyword in Dart 2.1. Reusing code from any class across multiple class hierarchies is made easy with Dart mixins.</p>
<p>In this tutorial, we’ll learn more about mixins in general, look at Dart mixins, and learn about avoiding duplicate methods in Dart classes.</p>
<p>Here is what we will cover:</p>
<ul>
<li><a href="#what-are-dart-mixins">What are Dart mixins?</a></li>
<li><a href="#avoiding-duplicate-methods-in-dart-classes">Avoiding duplicate methods in Dart classes</a></li>
<li><a href="#creating-mixins-with-dart">Creating mixins with Dart</a></li>
</ul>
<p>To follow along with this article, you should have a basic understanding of Dart. I’ve used <a href="https://dartpad.dev/?" target="_blank" rel="noopener">dartpad.dev</a> to write the example programs in this tutorial.</p>
<h2 id="what-are-dart-mixins">What are Dart mixins?</h2>
<p>Dart mixins are special classes beginning with the keyword <code>mixin</code> that contain a collection of methods that other classes can use. Dart mixins encourage code reuse and help you avoid the limitations that come with multiple inheritance. It allows you to add extra features to classes in a way that standard class inheritance doesn’t allow.</p>
<p>Let consider role assignment in a typical ecommerce application:</p>
<pre class="language-dart hljs">void main() {
  Moderator().viewAllProducts();
}

class User {
  void viewAllProducts() {
    print('Viewed all products');
  }

  void purchaseProduct() {
    print('Purchased a designer bag');
  }
}

class Vendor {
  void createStore() {
    print('Created EA sports stores');
  }

  void deleteStore() {
    print('Delete EA sports stores');
  }
}

class Moderator {
  void approveStore() {
    print('Approved EA sports stores');
  }

  void viewAllProducts() {
    print('Viewed all products');
  }
}
</pre>
<p>The methods in each class are pretty self-explanatory. Looking closely at the code snippet, you’ll notice a method duplication (<code>viewAllProducts</code>) in both the <code>User</code> and <code>Moderator</code> classes. Although this works, it isn’t a good practice.</p>
<h2 id="drawbacks-of-dart-mixins">Drawbacks of Dart mixins</h2>
<p>Although Flutter mixins reduce the drawbacks encountered with inheritance, it cannot replace the inheritance because it has its own drawbacks.</p>
<p>The excessive use of mixins such as <code>class Vendor</code> with <code>CanViewAllProducts,CanRemoveProduct,...</code> violates the principle of single responsibility, making it difficult to understand the class purpose. Furthermore, at runtime, code execution tends to jump around in different mixins, making debugging and following the order of execution difficult.</p>
<p>Also, using mixins can result in long compile times. Beware of the risks before using mixins and you’ll be more likely to enjoy their benefits.</p>
<h2 id="avoiding-duplicate-methods-in-dart-classes">Avoiding duplicate methods in Dart classes</h2>
<p>In order to avoid the code duplication, we’d take advantage of Dart class inheritance.</p>
<p>In Dart, inheritance is the process by which one class derives its properties and methods from another class.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Let’s remove the <code>viewAllProducts</code> method duplication and allow the <code>Moderator</code> class to derive the <code>viewAllProducts</code> method from the <code>User</code> class:</p>
<pre class="language-dart hljs">void main() {
  Moderator().viewAllProducts();
}

class User {
  void viewAllProducts() {
    print('Viewed all products');
  }

  void purchaseProduct() {
    print('Purchased a designer bag');
  }
}

class Moderator extends User {
  void approveStore() {
    print('Approved EA sports stores');
  }
}
</pre>
<p>Executing the above snippet on <a href="https://dartpad.dev/?" target="_blank" rel="noopener">dartpad.dev</a>, you should have the same result as the previous snippet with a clean code.</p>
<p>This works fine, but then there is an issue with inheritance that we’ll address moving forward. Have you noticed that our <code>Moderator</code> class also derived the <code>purchaseProduct</code> method from the <code>User</code> class, which is quite unnecessary since we want the <code>Moderator</code> to derive only the <code>viewAllProducts</code> from the <code>User</code> class? This is where Dart mixins come in handy.</p>
<h3 id="multilevel-inheritance-in-dart">Multilevel inheritance in Dart</h3>
<p>Multilevel inheritance occurs when a class inherits another child class. Dart allows a class to inherit methods and properties from another child class.</p>
<p>Let’s consider the following snippet:</p>
<pre class="language-dart hljs">void main() {
  Vendor().viewAllProducts();
  Vendor().purchaseProducts();
  Vendor().approveStore();
  Vendor().createStore();
  Vendor().deleteStore();
}

class User {
  void viewAllProducts() {
    print('Viewed all products');
  }

  void purchaseProducts() {
    print('Purchased 2 designer bags');
  }
}

class Moderator extends User {
  void approveStore() {
    print('Approved EA sports stores');
  }
}

class Vendor extends Moderator {
  void createStore() {
    print('Created EA sports stores');
  }

  void deleteStore() {
    print('Delete EA sports stores');
  }
}
</pre>
<p><img             class="aligncenter size-full wp-image-138248 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/user-moderator-vendor.png" alt="User Moderator Vendor" width="730" height="463"    /><noscript><img               class="aligncenter size-full wp-image-138248" src="https://blog.logrocket.com/wp-content/uploads/2022/10/user-moderator-vendor.png" alt="User Moderator Vendor" width="730" height="463"  /></noscript></p>
<p>Here, the <code>Vendor</code> class inherits the <code>approveStore</code> method from the <code>Moderator</code> class. Since the <code>Moderator</code> class is a child class to the <code>User</code> class, the <code>viewAllProducts</code> and <code>purchaseProducts</code> methods inherited from its parent the <code>User</code> class is passed to the <code>Vendor</code> class (its child class).</p>
<h3 id="multiple-inheritance-in-dart">Multiple inheritance in Dart</h3>
<p>When a class inherits from more than one parent class, this is known as multiple inheritance.</p>
<p>Let’s consider a fourth type of user <code>Admin</code> with the following methods:</p>
<ul>
<li><code>approveStore</code></li>
<li><code>deleteStore</code></li>
<li><code>viewAllProducts</code></li>
</ul>
<p>You may think of avoiding code duplication by allowing the <code>Admin</code> class to inherit the above methods from the <code>Moderator</code> and <code>Vendor</code> classes. Unfortunately, Dart doesn’t support multiple inheritance, which means a class cannot extend more than one class. So, we turn to Dart mixins.</p>
<h2 id="creating-mixins-with-dart">Creating mixins with Dart</h2>
<p>To create a mixin, we’ll take advantage of the <code>mixin</code> keyword:</p>
<pre class="language-dart hljs">mixin MixinName {
  //Define reusable methods
}
</pre>
<p>Let’s address the issue with inheritance we mentioned earlier, where our <code>Moderator</code> class also derived the <code>purchaseProduct</code> method from the <code>User</code> class, but we want the <code>Moderator</code> to derive only the <code>viewAllProducts</code> from the <code>User</code> class:</p>
<pre class="language-dart hljs">mixin CanViewAllProducts {
  void viewAllProducts() {
    print('Viewed all products');
  }
}
</pre>
<p>To use <code>CanViewAllProducts</code> mixins, we’ll take advantage of the <code>with</code> keyword as follows:</p>
<pre class="language-dart hljs">class Moderator with CanViewAllProducts {
  void approveStore() {
    print('Approved EA sports stores');
  }
}
</pre>
<p>Now, our <code>Moderator</code> class can access <code>viewAllProducts</code> method via the <code>canViewAllProducts</code> mixin without inheriting unnecessary methods. <code>CanViewAllProducts</code> mixins can be reused across multiple classes that require its methods.</p>
<p>Dart allows us to combine inheritance with mixins as follows:</p>
<pre class="language-dart hljs">mixin CanViewAllProducts {
  void viewAllProducts() {
    print('Viewed all products');
  }
}

class User {
  void purchaseProducts() {
    print('Purchased 2 designer bags');
  }
}

class Vendor extends User with CanViewAllProducts {
  void createStore() {
    print('Created EA sports stores');
  }
}
</pre>
<p>Dart also allows a class to use more than one mixin by seperating each mixins with comma.</p>
<p>Let’s see an example:</p>
<pre class="language-dart hljs">mixin CanRemoveProduct {
  void removeProduct() {
    print('Remove product');
  }
}
class Vendor extends User with CanViewAllProducts,CanRemoveProduct {
  void createStore() {
    print('Created EA sports stores');
  }
}
</pre>
<h2 id="conclusion">Conclusion</h2>
<p>Dart mixins are useful when developing applications that will likely grow in complexity. When developing complex Dart applications, you may see the need to extend multiple classes at the same time which is not supported in Dart.</p>
<p>Dart mixins can help you overcome the limitations of only inheriting or extending from a single class at a time as well as improve class inheritance and code reusability. For more developer content, you may follow me <a href="https://mobile.twitter.com/5x_dev" target="_blank" rel="noopener">@5x_dev on Twitter</a>.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-138242" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-138242" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-138242" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/advanced-uses-dart-mixins-avoiding-duplicate-methods/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>An intro to routing in Go with Gorilla Mux - LogRocket Blog</title>
			<link>https://blog.logrocket.com/routing-go-gorilla-mux/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/routing-go-gorilla-mux/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>An intro to routing in Go with Gorilla Mux - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/routing-go-gorilla-mux/">An intro to routing in Go with Gorilla Mux - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/paulakinyemi/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/05/profile.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/05/profile.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/paulakinyemi/">
Paul Akinyemi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a fullstack web developer and technical writer with experience in JavaScript and Python. I love bringing pretty and complex user interfaces to life with clean and efficient code.</span>
</div>
</div>
<h1 class="posttitle">An intro to routing in Go with Gorilla Mux</h1>
<p>
<span class="post-date"><time class="post-date">
February 15, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">9 min read</span>
<span class="wordcount">2776</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note:</strong> This post was updated on 15 February 2023 to include information about matching routes, concurrency, as well as HttpRouter.</em></p>
<p>HTTP routers are tools and libraries that help receive and relay network requests to the specified handlers. HTTP routers run on servers, intercept incoming requests, and designate requests to specified handler functions.</p>
<p>Routers vary between backend frameworks; most backend frameworks ship with routers and many other functionalities for building software faster.</p>
<p>The <a href="https://github.com/gorilla/mux">Gorilla Mux</a> package is one of the most popular routers and projects in the Go ecosystem, used in popular projects like <a href="https://blog.logrocket.com/ethereum-development-using-go-ethereum/">Geth</a> because of the package’s diverse features. Gorilla Mux provides functionalities for matching routes, serving static files, serving single-page applications (SPAs), middleware, handling CORS requests, and testing handlers.</p>
<p><em><strong>N.B.,</strong> as of December 2022, the entire <a href="https://github.com/gorilla">Gorilla Web Toolkit</a> was put into archive mode on GitHub. In the words of the project maintainers, this means that:</em></p>
<blockquote><p>“All the repositories have gone into “read-only” mode. Anyone still using them can still clone them, go get them, and continue to build projects against them. In effect, there’s really no change here from the last 12 months, and it won’t break existing projects.<br/>
…What it does signal is that there will be no future development on these libraries.<br/>
…Folks are welcome to (as they always have been) fork them: all of the Gorilla libraries are permissively licensed (MIT, BSD-3, and Apache 2.0).”</p></blockquote>
<p>You can read further details about why the toolkit was archived <a href="https://github.com/gorilla">here</a>.</p>
<p>This tutorial will walk you through using the Gorilla Mux package as a router for your applications. You’ll learn how to work with Gorilla Mux by using it to build a simple API.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#getting-started-gorilla-mux">Getting started with Gorilla Mux</a></li>
<li><a href="#parsing-structs-json-go">Parsing structs into JSON in Go</a></li>
<li><a href="#routing-gorilla-mux-package">Routing with the Gorilla Mux package</a></li>
<li><a href="#matching-routes-gorilla-mux">Matching routes in Gorilla Mux</a></li>
<li><a href="#setting-up-handler-functions">Setting up handler functions</a></li>
<li><a href="#setting-up-server">Setting up a server</a></li>
<li><a href="#gorilla-mux-concurrency">Gorilla Mux and concurrency</a></li>
<li><a href="#gorilla-mux-router-vs-chi-router">Gorilla Mux router vs. Chi router</a></li>
<li><a href="#gorilla-mux-router-vs-httprouter">Gorilla Mux router vs. HttpRouter</a></li>
</ul>
<h2 id="getting-started-gorilla-mux">Getting started with Gorilla Mux</h2>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/gorilla-mux.jpeg" alt="Gorilla Mux" width="730" height="365"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/08/gorilla-mux.jpeg" alt="Gorilla Mux" width="730" height="365"/></noscript></p>
<p>Once you’ve set up your Go workspace, run this command in your working directory to install the Gorilla Mux package:</p>
<pre class="language-go hljs">go get -u github.com/gorilla/mux
</pre>
<p>After installing the Gorilla Mux package, import the packages and modules that you’ll be using in this tutorial at the top of your Go file, like so:</p>
<pre class="language-go hljs">import (
        "encoding/json"
        "github.com/gorilla/mux"
        "log"
        "net/http"
)
</pre>
<p>Gorilla Mux depends on the standard <code>http</code> package, and you’ll use the <code>http</code> package in many parts of this tutorial, including setting up a server. You’ll use the <code>json</code> package to encode and decode structs to JSON and vice versa.</p>
<h2 id="parsing-structs-json-go">Parsing structs into JSON in Go</h2>
<p>Here’s the struct type you’ll use as the data model in this tutorial:</p>
<pre class="language-go hljs">type Bio struct {
        Name string `json:"name"`
        Age  int    `json:"age"`
}
</pre>
<p>Gorilla Mux doesn’t provide functionality for parsing structs to JSON the way frameworks like <a href="https://blog.logrocket.com/building-microservices-go-fiber/">Fiber</a> do. Instead, in this tutorial you’ll be using the <code>json</code> package from the standard library to decode JSON requests and encode structs as JSON responses to clients.</p>
<p>Here’s an example of encoding and decoding with the <code>json</code> package. Start by creating the Go variable you want to decode:</p>
<pre class="language-go hljs">var human Bio
</pre>
<p>The <code>human</code> variable is an instantiation of the <code>Bio</code> struct. You can use the <code>Decode</code> method of the <code>Decoder</code> struct returned by <code>json.NewDecoder</code> to parse the JSON body of an HTTP request into the initialized struct.</p>
<pre class="language-go hljs">err := json.NewDecoder(request.Body).Decode(&amp;human)
if err != nil {
  log.Fatalln("There was an error decoding the request body into the struct")
}
</pre>
<p>Similarly, you can use the <code>Encode</code> method of the <code>Encoder</code> struct returned by <code>NewEncoder</code> to write a struct that will be encoded as JSON to the client.</p>
<pre class="language-go hljs">err = json.NewEncoder(writer).Encode(&amp;human)
if err != nil {
  log.Fatalln("There was an error encoding the initialized struct")
}
</pre>
<p>Now that you’re familiar with the basics of working with JSON, let’s move on to routing.</p>
<h2 id="routing-gorilla-mux-package">Routing with the Gorilla Mux package</h2>
<p>You can create a router instance with the <code>NewRouter</code> method, like so:</p>
<pre class="language-go hljs">router := mux.NewRouter()
</pre>
<p>After declaring a new router instance, you can use the <code>HandleFunc</code> method of your router instance to assign routes to handler functions along with the request type that the handler function handles. Here’s an example:</p>
<pre class="language-go hljs">router.HandleFunc("/api/v1/example", exampleHandler).Methods("GET")
</pre>
<p>The <code>HandleFunc</code> method assigned the <code>api/v1/example</code> route to the <code>exampleHandler</code> handler function to handle <code>GET</code> requests.</p>
<p>These are the router declarations for the endpoints of the CRUD API you’ll be building in this tutorial:</p>
<pre class="language-go hljs">router.HandleFunc("/create", create).Methods("POST")
router.HandleFunc("/read", read).Methods("GET")
router.HandleFunc("/update", update).Methods("PUT")
router.HandleFunc("/delete", delete_).Methods("DELETE")
</pre>
<p>Your next task is to create these handler functions and set up a server.</p>
<h2 id="matching-routes-gorilla-mux">Matching routes in Gorilla Mux</h2>
<p>Before you go ahead to create your handlers, let’s pause and take a closer look at how you can match routes with Gorilla Mux. Right now your routing is based on the root of the application and the HTTP request method. For example, the declaration:</p>
<pre class="language-go hljs"> router.HandleFunc("/create", create).Methods("POST")
</pre>
<p>We’ll call the <code>create</code> handler when a client makes a POST request to the address <code>yourserveraddress.com/create</code>. However, Gorilla Mux offers ways to be even more precise about which routes your endpoints match.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Let’s assume you wanted to ensure your <code>create</code> handler only processed requests made over HTTPS. All you’d need is to chain a scheme match to the route declaration, like so:</p>
<pre class="language-go hljs"> router.HandleFunc("/create", create).Methods("POST").Schemes("https")
</pre>
<p>Gorilla Mux provides matches for several other criteria. For example, you can match routes by host URL, like this: <code>router.HandleFunc("/route",</code> <code>handler).Host("www.yourdomain.com")</code>. This declaration will only process requests to the URL <code>www.yourdomain.com/route</code> .</p>
<p>Mux also allows you to:</p>
<ul>
<li>Match routes by path prefix</li>
<li>Match routes based on the presence of HTTP headers</li>
<li>Match routes based on query parameters in the request</li>
<li>Define custom matching functions for your needs</li>
</ul>
<p>You can find examples using these matches <a href="https://github.com/gorilla/mux#matching-routes">here</a>. A word of warning about matching routes with Mux: if an incoming request matches two or more route declarations (there’s a route conflict), the request will always be processed using the first route declaration.</p>
<p>Because applying the same matches to several different routes is tedious and can make your code harder to read, Gorilla Mux provides a feature called subrouting. This feature allows you to create a router that will apply a set of matches to all routes you register with it. Here’s an example:</p>
<pre class="language-go hljs">router := mux.NewRouter()
s := router.Host("www.yourdomain.com").Headers("Connection", "Keep-Alive").Subrouter()
s.HandleFunc("/create", handler)
s.HanldeFunc("/update", updateHandler)
</pre>
<p>The <code>/create</code> and <code>/update</code> routes will now only be processed if the request has the appropriate <code>Host</code> and <code>Headers</code>. Now that you understand how route matching works, you can move on to creating your handlers.</p>
<h2 id="setting-up-handler-functions">Setting up handler functions</h2>
<p>Your handler functions are where you’ll declare the business logic for your application. Depending on the operation, your handlers will need a <code>writer</code> object (to write a response to the client) and a <code>request</code> object (to obtain information about the incoming request).</p>
<p>These objects will typically be an instance of the <code>http.ResponseWriter</code> and/or <code>*http.Request</code> types, respectively. Here’s a skeletal example of a typical handler function that returns JSON responses to the client:</p>
<pre class="language-go hljs">func example(writer http.ResponseWriter, request *http.Request) {
    writer.Header().Set("Content-Type", "application/json")
}
</pre>
<p>Your next step is to create the data store thatyou’ll use for this tutorial:</p>
<pre class="language-go hljs">var BioData = make([]Bio, 0)
</pre>
<p>The <code>BioData</code> variable above is a slice of the <code>Bio</code> type you defined earlier. This data store is sufficient for this tutorial, but your projects will likely have more sophisticated needs that require you to use a database. If you aren’t familiar with working with databases in Go, you can check out the tutorials on <a href="https://blog.logrocket.com/how-to-use-mongodb-with-go/">MongoDB</a> and the <a href="https://blog.logrocket.com/how-to-build-a-rest-api-with-golang-using-gin-and-gorm/">GORM ORM</a>.</p>
<p>Now that your data store is in place, you can begin creating your <code>request</code> handlers. The <code>create</code> handler function is assigned to process <code>POST</code> requests, so its business logic will save the new JSON object in the <code>request</code> body to the application’s data store. Here’s the code for the <code>create</code> function:</p>
<pre class="language-go hljs">func create(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
        writer.WriteHeader(http.StatusOK)
        var human Bio
        err := json.NewDecoder(request.Body).Decode(&amp;human)
        if err != nil {
            log.Fatalln("There was an error decoding the request body into the struct")
        }
        BioData = append(BioData, human)
        err = json.NewEncoder(writer).Encode(&amp;human)
        if err != nil {
                log.Fatalln("There was an error encoding the initialized struct")
        }
}
</pre>
<p>The <code>create</code> handler function writes the <code>StatusOk</code> header to the client on request receipt, decodes the JSON request body into the <code>human</code> struct instance, saves the <code>human</code> struct to the <code>BioData</code> slice, and ends by writing the <code>human</code> struct as a response to the client.</p>
<p>Next up is the <code>read</code> handler. The <code>read</code> handler function is assigned to <code>GET</code> requests; thus, its business logic will fetch data from the data store and return matching data to the client based on the client’s request:</p>
<pre class="language-go hljs">func read(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
                name := mux.Vars(request)["name"]
        for _, structs := range BioData {
                if structs.Name == name {
                        err := json.NewEncoder(writer).Encode(&amp;structs)
                        if err != nil {
                                log.Fatalln("There was an error encoding the initialized struct")
                        }
                }
        }

}
</pre>
<p>The <code>read</code> function works by reading the <code>name</code> parameter of the request using the <code>Vars</code> method of the <code>mux</code> package. It then loops through the <code>BioData</code> slice you’re using as a data store, and returns the struct that matches the <code>name</code> parameter to the client as JSON.</p>
<p>The <code>update</code> handler function is assigned to <code>PUT</code> requests, so its business logic should update the struct in the <code>BioData</code> data store specified by the request:</p>
<pre class="language-go hljs">func update(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
        var human Bio
        err := json.NewDecoder(request.Body).Decode(&amp;human)
        if err != nil {
                log.Fatalln("There was an error decoding the request body into the struct")
        }
        for index, structs := range BioData {
                if structs.Name == human.Name {
                        BioData = append(BioData[:index], BioData[index+1:]...)
                }
        }
        BioData = append(BioData, human)
        err = json.NewEncoder(writer).Encode(&amp;human)
        if err != nil {
                log.Fatalln("There was an error encoding the initialized struct")
        }
}
</pre>
<p>The <code>update</code> function parses the JSON in the request body into the <code>human</code> variable, loops through the <code>BioData</code> slice, deletes the entry if it exists, and finally appends the <code>human</code> struct from the request body to the <code>BioData</code> slice.</p>
<p>The <code>delete_</code> handler function is assigned to <code>DELETE</code> requests; thus, its business logic will delete a specified struct from the data store:</p>
<pre class="language-go hljs">func delete_(writer http.ResponseWriter, request *http.Request) {
        writer.Header().Set("Content-Type", "application/json")
        name := mux.Vars(request)["name"]
        indexChoice := 0
        for index, structs := range BioData {
                if structs.Name == name {
                        indexChoice = index
                }
        }
        BioData = append(BioData[:indexChoice], BioData[indexChoice+1:]...)
}
</pre>
<p>The <code>delete_</code> function retrieves the name parameter from the request, loops through the <code>BioData</code> data store, and deletes the entry if it exists.</p>
<p>Now that you’ve set up your handler functions, the last step is to set up the server that will listen for requests.</p><div class="code-block code-block-54" >
<hr/>
<h3>More great articles from LogRocket:</h3>
<ul>
<li>Don't miss a moment with <a href="https://lp.logrocket.com/subscribe-thereplay">The Replay</a>, a curated newsletter from LogRocket</li>
<li><a href="https://blog.logrocket.com/rethinking-error-tracking-product-analytics/">Learn</a> how LogRocket's Galileo cuts through the noise to proactively resolve issues in your app
</li>
<li>Use React's useEffect <a href="https://blog.logrocket.com/understanding-react-useeffect-cleanup-function/">to optimize your application's performance</a></li>
<li>Switch between <a href="https://blog.logrocket.com/switching-between-node-versions-during-development/">multiple versions of Node</a></li>
<li><a href="https://blog.logrocket.com/animate-react-app-animxyz/">Discover how to animate</a> your React app with AnimXYZ</li>
<li><a href="https://blog.logrocket.com/rust-solid-js-tauri-desktop-app/">Explore Tauri</a>, a new framework for building binaries</li>
<li>Compare <a href="https://blog.logrocket.com/nestjs-vs-express-js/">NestJS vs. Express.js</a></li>
</ul>
<hr/></div>
<h2 id="setting-up-server">Setting up a server</h2>
<p>You can set up a server using the <code>ListenAndServe</code> method of the <code>http</code> package. The <code>ListenAndServe</code> method takes as arguments the port you want the server to run on and a router instance, if any. Here’s a server for your application:</p>
<pre class="language-go hljs">func RunServer() {
        router := mux.NewRouter()
        router.HandleFunc("/create", create).Methods("POST")
        router.HandleFunc("/read", read).Methods("GET")
        router.HandleFunc("/update", update).Methods("PUT")
        router.HandleFunc("/delete", delete_).Methods("DELETE")

        err := http.ListenAndServe(":8080", router)
        if err != nil {
                log.Fatalln("There's an error with the server," err)
        }

}
</pre>
<p>Calling the <code>RunServer</code> function in the <code>main</code> function of your project should start up a server on the local host port <code>8080</code>.</p>
<p>And, that’s all you need to know to get started building apps with Gorilla Mux!</p>
<h2 id="gorilla-mux-concurrency">Gorilla Mux and concurrency</h2>
<p>Using Gorilla Mux doesn’t have much impact on the concurrency of your application compared to using the standard library’s ServeMux. Each handler function will still be called in a separate goroutine when processing an incoming request.</p>
<p>So what does this mean for you? It means you have to be careful when modifying data that’s shared between handlers, so you avoid race conditions. The easiest way to implement this is usually to avoid having any shared data in the first place and use only local variables. However, if shared data is something you can’t avoid, be sure to guard all access to the data with a <a href="https://pkg.go.dev/sync?utm_source=godoc#Mutex">Mutex</a> or some other synchronization mechanism.</p>
<h2 id="gorilla-mux-router-vs-chi-router">Gorilla Mux router vs. Chi router</h2>
<p><img  class="aligncenter jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/chi-router.jpeg" alt="Chi Router" width="730" height="365"  /><noscript><img    class="aligncenter" src="https://blog.logrocket.com/wp-content/uploads/2022/08/chi-router.jpeg" alt="Chi Router" width="730" height="365"/></noscript></p>
<p>Chi is a lightweight, composable router for building HTTP services in Go. You’ll find the <code>Chi</code> router useful for building large RESTful API services you want to maintain and support over time. Heroku, Cloudflare, and 99designs use the Chi router in production.</p>
<p><code>Chi</code> is built on the <code>context</code> package, making it suitable for handling signaling, cancellation, and request-scoped operations across handler chains. The <code>Chi</code> package also contains sub-packages for middleware and generating documentation, and a rendering package for managing HTTP requests and response payloads.</p>
<p>Here’s a quick example of routing with the Chi router:</p>
<pre class="language-go hljs">import (
        "net/http"
        "github.com/go-chi/chi/v5"
        "github.com/go-chi/chi/v5/middleware"
)

func main() {
        router := chi.NewRouter()
        router.Use(middleware.Logger)
        router.Get("/", func(writer http.ResponseWriter, request *http.Request) {
                writer.Write([]byte("welcome to the chi"))
        })
        http.ListenAndServe(":3000", router)
}
</pre>
<p>The <code>main</code> function starts up a server that listens on port <code>3000</code> and writes a string to the client as a response.</p>
<p>When you start a new project, you might wonder which router to use. Here’s a comparison between the two router packages to help you decide based on what you’re building:</p>
<table>
<thead>
<tr>
<th><strong>Metric</strong></th>
<th><strong>Gorilla Mux</strong></th>
<th><strong>Chi Router</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Speed</strong></td>
<td><strong>Fast,</strong> <a href="https://github.com/julienschmidt/go-http-routing-benchmark"><strong>see benchmarks</strong></a></td>
<td><strong>Fast,</strong> <a href="https://github.com/julienschmidt/go-http-routing-benchmark"><strong>see benchmarks</strong></a></td>
</tr>
<tr>
<td><strong>Documentation Generation</strong></td>
<td><strong>No</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td><strong>Popularity</strong></td>
<td><strong>17k stars, used</strong> <strong>by</strong> <strong>77k projects on GitHub</strong></td>
<td><strong>12k stars, used by 11k projects on GitHub</strong></td>
</tr>
<tr>
<td><strong>Rendering</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td><strong>MiddleWare</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td><strong>WebSockets</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td><strong>Testing</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
</tbody>
</table>
<p>The Gorilla Mux and Chi router are both great at routing, but you’ll find most Go developers use Gorilla Mux because it’s older and because there are more learning resources for Gorilla Mux.</p>
<h2 id="gorilla-mux-router-vs-httprouter">Gorilla Mux router vs. HttpRouter</h2>
<p><img             class="aligncenter wp-image-161726 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/08/httprouter.jpeg" alt="HttpRouter" width="720" height="360"    /><noscript><img               class="aligncenter wp-image-161726 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/08/httprouter.jpeg" alt="HttpRouter" width="720" height="360"  /></noscript></p>
<p><a href="https://github.com/julienschmidt/httprouter">HttpRouter</a> is a fast, minimal router for Go applications that’s been around for a long time. It’s so fast and reliable that it’s used as the router of several Go web frameworks, the most popular of those being Gin. Here’s what <a href="https://github.com/julienschmidt/httprouter">the docs</a> say about HttpRouter:</p>
<blockquote><p>HttpRouter is a lightweight high performance HTTP request router (also called multiplexer or just mux for short) for Go.</p>
<p>In contrast to the <a href="https://golang.org/pkg/net/http/#ServeMux">default mux</a> of Go’s <code>net/http</code> package, this router supports variables in the routing pattern and matches against the request method. It also scales better.</p>
<p>The router is optimized for high performance and a small memory footprint. It scales well even with very long paths and a large number of routes. A compressing dynamic trie (radix tree) structure is used for efficient matching</p></blockquote>
<p>To give you a feel for how it works, here’s a tiny demo of routing with HttpRouter:</p>
<pre class="language-go hljs">import (
   "github.com/julienschmidt/HttpRouter"
   "log"
   "net/http"
)

func main() {
   router := HttpRouter.New()
   router.GET("/", func(w http.ResponseWriter, r *http.Request, _ HttpRouter.Params) {
      w.Write([]byte("Hello from http router"))
   })

   log.Fatal(http.ListenAndServe(":8080", router))
}
</pre>
<p>Just like with Chi, in this demo the <code>main</code> function starts up a server that listens on port <code>8080</code> and writes a hello response to the client. To help you choose the best router for your needs, here’s a comparison between HttpRouter and Mux:</p>
<table>
<thead>
<tr>
<th><strong>Metric</strong></th>
<th><strong>Gorilla Mux</strong></th>
<th><strong>Http<em><em/>R<strong><em>o</em></strong>uter</em>


<tbody>
<tr>
<td><strong>Speed</strong></td>
<td><strong>Fast,</strong> <a href="https://github.com/julienschmidt/go-http-routing-benchmark"><strong>see benchmarks</strong></a></td>
<td><strong>Very fast,</strong> <a href="https://github.com/julienschmidt/go-http-routing-benchmark"><strong>see benchmarks</strong></a></td>
</tr>
<tr>
<td><strong>Documentation Generation</strong></td>
<td><strong>No</strong></td>
<td><strong>No</strong></td>
</tr>
<tr>
<td><strong>Popularity</strong></td>
<td><strong>17k stars, used</strong> <strong>by</strong> <strong>77k projects on GitHub</strong></td>
<td><strong>1<em><em/>5<strong><em>k stars, used</em></strong> <strong>by</strong> 16<strong>k projects on GitHub</strong>

<tr>
<td><strong>Rendering</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td><strong>MiddleWare</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>
<tr>
<td><strong>WebSockets</strong></td>
<td><strong>Yes</strong></td>
<td><strong>No</strong></td>
</tr>
<tr>
<td><strong>Testing</strong></td>
<td><strong>Yes</strong></td>
<td><strong>Yes</strong></td>
</tr>


<p>Gorilla Mux and HttpRouter are both excellent routers. HttpRouter has the advantage of speed and minimalism, but Mux offers more flexibility and functionality.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, you learned about the Gorilla Mux, HttpRouter, and Chi router packages, how to route and build APIs with the Gorilla Mux router, and how to evaluate the three packages to help you make better decisions for your projects.</p>
<p>Check out how these <a href="https://blog.logrocket.com/5-top-go-web-frameworks/">Go frameworks</a> can help you build web applications faster.</p><div class="code-block code-block-2" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-127476" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/routing-go-gorilla-mux/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/routing-go-gorilla-mux/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-127476" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/routing-go-gorilla-mux/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-127476" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/routing-go-gorilla-mux/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>

<div class="clearfix"/>

<div class="row post-top-meta hidden-lg-up">
<div class="col-md-2 col-xs-4">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/05/profile.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/05/profile.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </div>
<div class="col-md-10 col-xs-8">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/paulakinyemi/">
Paul Akinyemi <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a fullstack web developer and technical writer with experience in JavaScript and Python. I love bringing pretty and complex user interfaces to life with clean and efficient code.</span>
</div>
</div>
<div class="after-post-tags">
<ul class="post-categories">
<li><a href="https://blog.logrocket.com/category/uncategorized/" rel="category tag">Uncategorized</a></li></ul> <ul class="post-categories aretags">
<li><a href="https://blog.logrocket.com/tag/go/">#go</a></li> </ul>
</div>
<div class="row mb-5 prevnextlinks justify-content-center align-items-center">
<div class="col-md-6 col-xs-12 rightborder pl-0"><div class="thepostlink">&amp;laquo; <a href="https://blog.logrocket.com/when-how-use-css-will-change/" rel="prev">When and how to use CSS <code>will-change</code></a></div></div>
<div class="col-md-6 col-xs-12 text-right pr-0"><div class="thepostlink"><a href="https://blog.logrocket.com/product-management/software-testing-lifecycle-phases-alpha-beta-general-availability/" rel="next">Software testing lifecycle phases: Alpha, beta, and general availability</a> &amp;raquo;</div></div>
</div>



<div class="hideshare"/>
<div class="graybg">
<div class="container">
<div class="row justify-content-center listrecent listrelated">
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/hybrid-rendering-astro-guide/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/">Hybrid rendering in Astro: A step-by-step guide</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/08/emanuel-suriano.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/emanuelsuriano/">Emanuel Suriano</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">15 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/hybrid-rendering-astro-guide/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/using-modern-decorators-typescript/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/using-modern-decorators-typescript/">Using modern decorators in TypeScript</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/alecbrunelle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/02/alecbrunelle.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/alecbrunelle/">Alec Brunelle</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/using-modern-decorators-typescript/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
<div class="col-lg-4 col-md-4 col-sm-4">
<div class="card post height262">
<a class="thumbimage" href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/" /><div class="card-block d-flex flex-column">
<h2 class="card-title">
<a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/">Using Camome to design highly customizable UIs</a>
</h2>
<div class="metafooter mt-auto">
<div class="wrapfooter">
<span class="meta-footer-thumb">
<a href="https://blog.logrocket.com/author/judemiracle/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo jetpack-lazy-image" height="40" width="40"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/11/mi.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-40 photo" height="40" width="40"/></noscript> </a>
</span>
<span class="author-meta">
<span class="post-name">
<a href="https://blog.logrocket.com/author/judemiracle/">Jude Miracle</a></span><br/>
<span class="post-date">Apr 28, 2023</span>
<span class="dot"/>
<span class="readingtime">11 min read</span>
</span>
<span class="post-read-more">
<a href="https://blog.logrocket.com/using-camome-design-highly-customizable-uis/" title="">
<svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25">
<path d="M19 6c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v14.66h.012c.01.103.045.204.12.285a.5.5 0 0 0 .706.03L12.5 16.85l5.662 4.126a.508.508 0 0 0 .708-.03.5.5 0 0 0 .118-.285H19V6zm-6.838 9.97L7 19.636V6c0-.55.45-1 1-1h9c.55 0 1 .45 1 1v13.637l-5.162-3.668a.49.49 0 0 0-.676 0z" fill-rule="evenodd"/>
</svg>
</a>
</span> </div>
</div>
</div>
</div>
</div>
</div>
<div class="clearfix"/>
<div class="row justify-content-center">
<div class="col-md-8">
<div id="comments" class="comments-area">
<div id="respond" class="comment-respond">
<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/routing-go-gorilla-mux/#respond" >Cancel reply</a></small>
</h3>
<form id="commentform" class="comment-form">
<iframe title="Comment Form" src="https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=127476&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=ffe8328cfd&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=6389d562ef5f2162388d3b8bab72350f7bee6b7e#parent=https%3A%2F%2Fblog.logrocket.com%2Frouting-go-gorilla-mux%2F" name="jetpack_remote_comment"  class="jetpack_remote_comment" id="jetpack_remote_comment" sandbox="allow-same-origin allow-top-navigation allow-scripts allow-forms allow-popups">
									</iframe>
<!--[if !IE]><!-->
<meta>
						document.addEventListener('DOMContentLoaded', function () {
							var commentForms = document.getElementsByClassName('jetpack_remote_comment');
							for (var i = 0; i &lt; commentForms.length; i++) {
								commentForms[i].allowTransparency = false;
								commentForms[i].scrolling = 'no';
							}
						});
					</meta>
<!--<![endif]-->
</form>
</div>
<input type="hidden" name="comment_parent" id="comment_parent" value=""/>
</div>
</div>
</div> </div>
</div>
<div class="alertbar">
<div class="container text-center">
</div>
</div>

<div class="container">
<footer class="footer">
<p class="pull-left"> Does something seem off? Email <a><span class="__cf_email__" data-cfemail="9deee8ededf2efe9ddf1f2faeff2fef6f8e9b3fef2f0">[email protected]</span></a> </p>
<p class="pull-right"> </p>
<div class="clearfix"/>
<form role="search" method="get" class="search-form" action="https://blog.logrocket.com/">
<input type="hidden" name="post_type" value="post"/>
<input type="search" class="search-field" placeholder="Search..." value="" name="s" title="Search for:"/>
<button type="submit" class="search-submit">
<i class="fa fa-search"/>
</button>
</form> <a href="" class="back-to-top hidden-md-down">
<i class="fa fa-angle-up"/>
</a>
</footer>
</div>
<meta>window.onload = function() {
  if (typeof hljs !== 'undefined')
  {
  document.querySelectorAll('pre').forEach((block) => {
    hljs.highlightBlock(block);
  });
  }
if (jQuery(".type-post").length) {
  var localDate = new Date(document.getElementsByTagName('time')[0].innerText);
  var pubDate = new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate()));
  analytics.track('post-info', {
    url: window.location.href.split('?')[0],
    wordCount: jQuery('.wordcount').text(),
    publishDate: pubDate,
    blogtag: jQuery('.aretags li a').text(),
	postAuthor: jQuery("meta[name='twitter:data1']").attr("content"),
	id: jQuery(".mainheading").closest(".col-md-8").attr("id").replace('post-',''),
	lr_editor: jQuery(".logrocket_editor").text()
  });
}
jQuery(".aretags li a:contains('archive')").parent('li').hide();
jQuery(".aretags li a:contains('86919')").parent('li').hide();
jQuery(".aretags li a:contains('72293')").parent('li').hide();
jQuery(".aretags li a:contains('custom-plug')").parent('li').hide();
};</meta> <div >
<div class="grofile-hash-map-14cfa538b106b4dff181820ea97d4de0">
</div>
<div class="grofile-hash-map-de8225213d7b8bc59895625735574f7d">
</div>
<div class="grofile-hash-map-1d70ad5cb2a361e3fdf176f64c042921">
</div>
<div class="grofile-hash-map-73b9bd9514e5a89b137a35b20f810cfa">
</div>
</div>
<div id="jp-carousel-loading-overlay">
<div id="jp-carousel-loading-wrapper">
<span id="jp-carousel-library-loading">&amp;nbsp;</span>
</div>
</div>
<div class="jp-carousel-overlay" >
<div class="jp-carousel-container">

<div class="jp-carousel-wrap swiper-container jp-carousel-swiper-container jp-carousel-transitions" itemscope="itemscope" itemtype="https://schema.org/ImageGallery">
<div class="jp-carousel swiper-wrapper"/>
<div class="jp-swiper-button-prev swiper-button-prev">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskPrev" mask-type="alpha" maskUnits="userSpaceOnUse" x="8" y="6" width="9" height="12">
<path d="M16.2072 16.59L11.6496 12L16.2072 7.41L14.8041 6L8.8335 12L14.8041 18L16.2072 16.59Z" fill="white"/>
</mask>
<g mask="url(#maskPrev)">
<rect x="0.579102" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>
<div class="jp-swiper-button-next swiper-button-next">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskNext" mask-type="alpha" maskUnits="userSpaceOnUse" x="8" y="6" width="8" height="12">
<path d="M8.59814 16.59L13.1557 12L8.59814 7.41L10.0012 6L15.9718 12L10.0012 18L8.59814 16.59Z" fill="white"/>
</mask>
<g mask="url(#maskNext)">
<rect x="0.34375" width="23.8822" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>
</div>

<div class="jp-carousel-close-hint">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskClose" mask-type="alpha" maskUnits="userSpaceOnUse" x="5" y="5" width="15" height="14">
<path d="M19.3166 6.41L17.9135 5L12.3509 10.59L6.78834 5L5.38525 6.41L10.9478 12L5.38525 17.59L6.78834 19L12.3509 13.41L17.9135 19L19.3166 17.59L13.754 12L19.3166 6.41Z" fill="white"/>
</mask>
<g mask="url(#maskClose)">
<rect x="0.409668" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</div>

<div class="jp-carousel-info">
<div class="jp-carousel-info-footer">
<div class="jp-carousel-pagination-container">
<div class="jp-swiper-pagination swiper-pagination"/>
<div class="jp-carousel-pagination"/>
</div>
<div class="jp-carousel-photo-title-container">
<h2 class="jp-carousel-photo-caption"/>
</div>
<div class="jp-carousel-photo-icons-container">
<a href="#" class="jp-carousel-icon-btn jp-carousel-icon-info" aria-label="Toggle photo metadata visibility">
<span class="jp-carousel-icon">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskInfo" mask-type="alpha" maskUnits="userSpaceOnUse" x="2" y="2" width="21" height="20">
<path fill-rule="evenodd" clip-rule="evenodd" d="M12.7537 2C7.26076 2 2.80273 6.48 2.80273 12C2.80273 17.52 7.26076 22 12.7537 22C18.2466 22 22.7046 17.52 22.7046 12C22.7046 6.48 18.2466 2 12.7537 2ZM11.7586 7V9H13.7488V7H11.7586ZM11.7586 11V17H13.7488V11H11.7586ZM4.79292 12C4.79292 16.41 8.36531 20 12.7537 20C17.142 20 20.7144 16.41 20.7144 12C20.7144 7.59 17.142 4 12.7537 4C8.36531 4 4.79292 7.59 4.79292 12Z" fill="white"/>
</mask>
<g mask="url(#maskInfo)">
<rect x="0.8125" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
</span>
</a>
<a href="#" class="jp-carousel-icon-btn jp-carousel-icon-comments" aria-label="Toggle photo comments visibility">
<span class="jp-carousel-icon">
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="maskComments" mask-type="alpha" maskUnits="userSpaceOnUse" x="2" y="2" width="21" height="20">
<path fill-rule="evenodd" clip-rule="evenodd" d="M4.3271 2H20.2486C21.3432 2 22.2388 2.9 22.2388 4V16C22.2388 17.1 21.3432 18 20.2486 18H6.31729L2.33691 22V4C2.33691 2.9 3.2325 2 4.3271 2ZM6.31729 16H20.2486V4H4.3271V18L6.31729 16Z" fill="white"/>
</mask>
<g mask="url(#maskComments)">
<rect x="0.34668" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
<span class="jp-carousel-has-comments-indicator" aria-label="This image has comments."/>
</span>
</a>
</div>
</div>
<div class="jp-carousel-info-extra">
<div class="jp-carousel-info-content-wrapper">
<div class="jp-carousel-photo-title-container">
<h2 class="jp-carousel-photo-title"/>
</div>
<div class="jp-carousel-comments-wrapper">
<div id="jp-carousel-comments-loading">
<span>Loading Comments...</span>
</div>
<div class="jp-carousel-comments"/>
<div id="jp-carousel-comment-form-container">
<span id="jp-carousel-comment-form-spinner">&amp;nbsp;</span>
<div id="jp-carousel-comment-post-results"/>
<form id="jp-carousel-comment-form">
<label for="jp-carousel-comment-form-comment-field" class="screen-reader-text">Write a Comment...</label>
<textarea name="comment" class="jp-carousel-comment-form-field jp-carousel-comment-form-textarea" id="jp-carousel-comment-form-comment-field" placeholder="Write a Comment..."/>
<div id="jp-carousel-comment-form-submit-and-info-wrapper">
<div id="jp-carousel-comment-form-commenting-as">
<fieldset>
<label for="jp-carousel-comment-form-email-field">Email (Required)</label>
<input type="text" name="email" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-email-field"/>
</fieldset>
<fieldset>
<label for="jp-carousel-comment-form-author-field">Name (Required)</label>
<input type="text" name="author" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-author-field"/>
</fieldset>
<fieldset>
<label for="jp-carousel-comment-form-url-field">Website</label>
<input type="text" name="url" class="jp-carousel-comment-form-field jp-carousel-comment-form-text-field" id="jp-carousel-comment-form-url-field"/>
</fieldset>
</div>
<input type="submit" name="submit" class="jp-carousel-comment-form-button" id="jp-carousel-comment-form-button-submit" value="Post Comment"/>
</div>
</form>
</div>
</div>
<div class="jp-carousel-image-meta">
<div class="jp-carousel-title-and-caption">
<div class="jp-carousel-photo-info">
<h3 class="jp-carousel-caption" itemprop="caption description"/>
</div>
<div class="jp-carousel-photo-description"/>
</div>
<ul class="jp-carousel-image-exif" />
<a class="jp-carousel-image-download" target="_blank" >
<svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0" mask-type="alpha" maskUnits="userSpaceOnUse" x="3" y="3" width="19" height="18">
<path fill-rule="evenodd" clip-rule="evenodd" d="M5.84615 5V19H19.7775V12H21.7677V19C21.7677 20.1 20.8721 21 19.7775 21H5.84615C4.74159 21 3.85596 20.1 3.85596 19V5C3.85596 3.9 4.74159 3 5.84615 3H12.8118V5H5.84615ZM14.802 5V3H21.7677V10H19.7775V6.41L9.99569 16.24L8.59261 14.83L18.3744 5H14.802Z" fill="white"/>
</mask>
<g mask="url(#mask0)">
<rect x="0.870605" width="23.8823" height="24" fill="#FFFFFF"/>
</g>
</svg>
<span class="jp-carousel-download-text"/>
</a>
<div class="jp-carousel-image-map" />
</div>
</div>
</div>
</div>
</div>
</div>
<meta>
		window.WPCOM_sharing_counts = {"http:\/\/blog.logrocket.com\/routing-go-gorilla-mux\/":127476};
	</meta>
<link rel="stylesheet" id="all-css-0" href="https://blog.logrocket.com/_static/??-eJytkcFOw0AMRH8IxyQIlAviW5aN27p4vau1rah/T0CECxxaxNWeeTOWcW2QqzqpYwloEkdWwzN5S/kNxmm4x1KXEDLMqdcwErSVG3V4DV2Ehmx2h3/B7Nt98E1izRLLh9QMl2Qn3tg2FNYfYXuSsp4THGovhsmM/MvM1iRdoDZW3hggfDz5rZTDJoO0ktVC17aAEuIMLXX/n0JgfhHCzVzDfz3SvEf26J8veSnP49M8PU4P4zy/A8Motq0=" type="text/css" media="all"/>
<meta>
var codePrettifyLoaderBaseUrl = "https:\/\/blog.logrocket.com\/wp-content\/plugins\/code-prettify\/prettify";
</meta>


<meta>
var WPGroHo = {"my_hash":""};
</meta>
<meta>
var jetpackLazyImagesL10n = {"loading_warning":"Images are still loading. Please cancel your print and try again."};
</meta>
<meta>
var jetpackSwiperLibraryPath = {"url":"https:\/\/blog.logrocket.com\/wp-content\/mu-plugins\/jetpack-12.0\/_inc\/build\/carousel\/swiper-bundle.min.js"};
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","nonce":"84e2b202f1","display_exif":"1","display_comments":"1","single_image_gallery":"1","single_image_gallery_media_file":"","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size &lt;span class=\"photo-size\">{0}&lt;span class=\"photo-size-times\">\u00d7&lt;\/span>{1}&lt;\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","copyright":"Copyright","comment_registration":"0","require_name_email":"1","login_url":"https:\/\/blog.logrocket.com\/wp-login.php?redirect_to=http%3A%2F%2Fblog.logrocket.com%2Frouting-go-gorilla-mux%2F","blog_id":"1","meta_data":["camera","aperture","shutter_speed","focal_length","copyright"]};
</meta>
<meta>
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
var nfi18n = {"ninjaForms":"Ninja Forms","changeEmailErrorMsg":"Please enter a valid email address!","changeDateErrorMsg":"Please enter a valid date!","confirmFieldErrorMsg":"These fields must match!","fieldNumberNumMinError":"Number Min Error","fieldNumberNumMaxError":"Number Max Error","fieldNumberIncrementBy":"Please increment by ","fieldTextareaRTEInsertLink":"Insert Link","fieldTextareaRTEInsertMedia":"Insert Media","fieldTextareaRTESelectAFile":"Select a file","formErrorsCorrectErrors":"Please correct errors before submitting this form.","formHoneypot":"If you are a human seeing this field, please leave it empty.","validateRequiredField":"This is a required field.","honeypotHoneypotError":"Honeypot Error","fileUploadOldCodeFileUploadInProgress":"File Upload in Progress.","fileUploadOldCodeFileUpload":"FILE UPLOAD","currencySymbol":"$","fieldsMarkedRequired":"Fields marked with an &lt;span class=\"ninja-forms-req-symbol\">*&lt;\/span> are required","thousands_sep":",","decimal_point":".","siteLocale":"en_US","dateFormat":"m\/d\/Y","startOfWeek":"1","of":"of","previousMonth":"Previous Month","nextMonth":"Next Month","months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"recaptchaConsentMissing":"reCapctha validation couldn't load.","recaptchaMissingCookie":"reCaptcha v3 validation couldn't load the cookie needed to submit the form.","recaptchaConsentEvent":"Accept reCaptcha cookies before sending the form."};
var nfFrontEnd = {"adminAjax":"https:\/\/blog.logrocket.com\/wp-admin\/admin-ajax.php","ajaxNonce":"c12915f8f5","requireBaseUrl":"https:\/\/blog.logrocket.com\/wp-content\/plugins\/ninja-forms\/assets\/js\/","use_merge_tags":{"user":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"post":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"system":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"fields":{"address":"address","textbox":"textbox","button":"button","checkbox":"checkbox","city":"city","confirm":"confirm","date":"date","email":"email","firstname":"firstname","html":"html","hidden":"hidden","lastname":"lastname","listcheckbox":"listcheckbox","listcountry":"listcountry","listimage":"listimage","listmultiselect":"listmultiselect","listradio":"listradio","listselect":"listselect","liststate":"liststate","note":"note","number":"number","password":"password","passwordconfirm":"passwordconfirm","product":"product","quantity":"quantity","recaptcha":"recaptcha","recaptcha_v3":"recaptcha_v3","repeater":"repeater","shipping":"shipping","spam":"spam","starrating":"starrating","submit":"submit","terms":"terms","textarea":"textarea","total":"total","unknown":"unknown","zip":"zip","hr":"hr"},"calculations":{"html":"html","hidden":"hidden","note":"note","unknown":"unknown"}},"opinionated_styles":"light","filter_esc_status":"false","nf_consent_status_response":[]};
</meta>
<meta>
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
var nfMPSettings = {"prevLabel":"Previous","nextLabel":"Next"};
</meta>
<meta>
var sharing_js_options = {"lang":"en","counts":"1","is_stats_active":"1"};
</meta>

<meta>
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-twitter' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-twitter' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-linkedin' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-linkedin' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches &amp;&amp; el.matches( sel ) ||
						el.msMatchesSelector &amp;&amp; el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-facebook' ) ) {
						el = event.target;
					} else if ( event.target.parentNode &amp;&amp; matches( event.target.parentNode, 'a.share-facebook' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
						return false;
					}
				} );
			} )();
</meta>
<!--[if IE]>
		<meta>
			if ( 0 === window.location.hash.indexOf( '#comment-' ) ) {
				// window.location.reload() doesn't respect the Hash in IE
				window.location.hash = window.location.hash;
			}
		</meta>
		<![endif]-->
<meta>
			(function () {
				var comm_par_el = document.getElementById( 'comment_parent' ),
					comm_par = ( comm_par_el &amp;&amp; comm_par_el.value ) ? comm_par_el.value : '',
					frame = document.getElementById( 'jetpack_remote_comment' ),
					tellFrameNewParent;

				tellFrameNewParent = function () {
					if ( comm_par ) {
						frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=127476&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=ffe8328cfd&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=6389d562ef5f2162388d3b8bab72350f7bee6b7e#parent=https%3A%2F%2Fblog.logrocket.com%2Frouting-go-gorilla-mux%2F" + '&amp;replytocom=' + parseInt( comm_par, 10 ).toString();
					} else {
						frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=217016018&amp;postid=127476&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=mystery&amp;greeting=Leave+a+Reply&amp;jetpack_comments_nonce=ffe8328cfd&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=12.0&amp;show_cookie_consent=10&amp;has_cookie_consent=0&amp;token_key=%3Bnormal%3B&amp;sig=6389d562ef5f2162388d3b8bab72350f7bee6b7e#parent=https%3A%2F%2Fblog.logrocket.com%2Frouting-go-gorilla-mux%2F";
					}
				};

				
				if ( 'undefined' !== typeof addComment ) {
					addComment._Jetpack_moveForm = addComment.moveForm;

					addComment.moveForm = function ( commId, parentId, respondId, postId ) {
						var returnValue = addComment._Jetpack_moveForm( commId, parentId, respondId, postId ),
							cancelClick, cancel;

						if ( false === returnValue ) {
							cancel = document.getElementById( 'cancel-comment-reply-link' );
							cancelClick = cancel.onclick;
							cancel.onclick = function () {
								var cancelReturn = cancelClick.call( this );
								if ( false !== cancelReturn ) {
									return cancelReturn;
								}

								if ( ! comm_par ) {
									return cancelReturn;
								}

								comm_par = 0;

								tellFrameNewParent();

								return cancelReturn;
							};
						}

						if ( comm_par == parentId ) {
							return returnValue;
						}

						comm_par = parentId;

						tellFrameNewParent();

						return returnValue;
					};
				}

				
				// Do the post message bit after the dom has loaded.
				document.addEventListener( 'DOMContentLoaded', function () {
					var iframe_url = "https:\/\/jetpack.wordpress.com";
					if ( window.postMessage ) {
						if ( document.addEventListener ) {
							window.addEventListener( 'message', function ( event ) {
								var origin = event.origin.replace( /^http:\/\//i, 'https://' );
								if ( iframe_url.replace( /^http:\/\//i, 'https://' ) !== origin ) {
									return;
								}
								frame.style.height = event.data + 'px';
							});
						} else if ( document.attachEvent ) {
							window.attachEvent( 'message', function ( event ) {
								var origin = event.origin.replace( /^http:\/\//i, 'https://' );
								if ( iframe_url.replace( /^http:\/\//i, 'https://' ) !== origin ) {
									return;
								}
								frame.style.height = event.data + 'px';
							});
						}
					}
				})

			})();
		</meta>

<meta>
		_stq = window._stq || [];
		_stq.push([ 'view', {v:'ext',blog:'217016018',post:'127476',tz:'-4',srv:'blog.logrocket.com',hp:'vip',j:'1:12.0'} ]);
		_stq.push([ 'clickTrackerInit', '217016018', '127476' ]);
	</meta><meta>
	<span id="nf-form-title-{{{ data.id }}}" class="nf-form-title">
		{{{ ( 1 == data.settings.show_title ) ? '&lt;h' + data.settings.form_title_heading_level + '>' + data.settings.title + '' : '' }}}
	</span>
	<div class="nf-form-wrap ninja-forms-form-wrap">
		<div class="nf-response-msg"/>
		<div class="nf-debug-msg"/>
		<div class="nf-before-form"/>
		<div class="nf-form-layout"/>
		<div class="nf-after-form"/>
	</div>
</meta>
<meta>

</meta>
<meta>
	{{{ data.beforeForm }}}
</meta><meta>
	{{{ data.afterForm }}}
</meta><meta>
    <div class="nf-form-fields-required">{{{ data.renderFieldsMarkedRequired() }}}</div>
    {{{ data.beforeFields }}}
</meta><meta>
    {{{ data.afterFields }}}
    <div id="nf-form-errors-{{{ data.id }}}" class="nf-form-errors" role="alert"/>
    <div class="nf-form-hp"/>
</meta>
<meta>
    {{{ data.beforeField }}}
</meta><meta>
    {{{ data.afterField }}}
</meta><meta>
	<form>
		<div>
			<div class="nf-before-form-content"/>
			<div class="nf-form-content {{{ data.element_class }}}"/>
			<div class="nf-after-form-content"/>
		</div>
	</form>
</meta><meta>
	<label id="nf-label-field-hp-{{{ data.id }}}" for="nf-field-hp-{{{ data.id }}}" >
		{{{ nfi18n.formHoneypot }}}
		<input id="nf-field-hp-{{{ data.id }}}" name="nf-field-hp" class="nf-element nf-field-hp" type="text" value="" aria-labelledby="nf-label-field-hp-{{{ data.id }}}"/>
	</label>
</meta>
<meta>
    <div id="nf-field-{{{ data.id }}}-container" class="nf-field-container {{{ data.type }}}-container {{{ data.renderContainerClass() }}}">
        <div class="nf-before-field"/>
        <div class="nf-field"/>
        <div class="nf-after-field"/>
    </div>
</meta>
<meta>
    {{{ data.beforeField }}}
</meta><meta>
    &lt;#
    /*
     * Render our input limit section if that setting exists.
     */
    #>
    <div class="nf-input-limit"/>
    &lt;#
    /*
     * Render our error section if we have an error.
     */
    #>
    <div id="nf-error-{{{ data.id }}}" class="nf-error-wrap nf-error" role="alert"/>
    &lt;#
    /*
     * Render any custom HTML after our field.
     */
    #>
    {{{ data.afterField }}}
</meta>
<meta>
	<div id="nf-field-{{{ data.id }}}-wrap" class="{{{ data.renderWrapClass() }}}" data-field-id="{{{ data.id }}}">
		&lt;#
		/*
		 * This is our main field template. It's called for every field type.
		 * Note that must have ONE top-level, wrapping element. i.e. a div/span/etc that wraps all of the template.
		 */
        #>
		&lt;#
		/*
		 * Render our label.
		 */
        #>
		{{{ data.renderLabel() }}}
		&lt;#
		/*
		 * Render our field element. Uses the template for the field being rendered.
		 */
        #>
		<div class="nf-field-element">{{{ data.renderElement() }}}</div>
		&lt;#
		/*
		 * Render our Description Text.
		 */
        #>
		{{{ data.renderDescText() }}}
	</div>
</meta>
<meta>
    <div id="nf-field-{{{ data.id }}}-wrap" class="{{{ data.renderWrapClass() }}}" data-field-id="{{{ data.id }}}">
        <div class="nf-field-label"/>
        <div class="nf-field-element">{{{ data.renderElement() }}}</div>
        <div class="nf-error-wrap"/>
    </div>
</meta>
<meta>

        {{{ data.renderElement() }}}

        <div class="nf-error-wrap"/>
</meta>
<meta>
	<div class="nf-field-label">
		&lt;# if ( data.type === "listcheckbox" || data.type === "listradio" ) { #>
			<span id="nf-label-field-{{{ data.id }}}" class="nf-label-span {{{ data.renderLabelClasses() }}}">
					{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}} {{{ ( 'undefined' != typeof data.required &amp;&amp; 1 == data.required ) ? '<span class="ninja-forms-req-symbol">*</span>' : '' }}} 
					{{{ data.maybeRenderHelp() }}}
			</span>
		&lt;# } else { #>
			<label for="nf-field-{{{ data.id }}}" id="nf-label-field-{{{ data.id }}}" class="{{{ data.renderLabelClasses() }}}">
						{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}} {{{ ( 'undefined' != typeof data.required &amp;&amp; 1 == data.required ) ? '<span class="ninja-forms-req-symbol">*</span>' : '' }}} 
						{{{ data.maybeRenderHelp() }}}
			</label>
		&lt;# } #>
	</div>
</meta>
<meta>
	<div class="nf-error-msg nf-error-{{{ data.id }}}">{{{ data.msg }}}</div>
</meta><meta>
	<div class="nf-error-msg nf-error-{{{ data.id }}}">{{{ data.msg }}}</div>
</meta><meta>
    {{{ data.currentCount() }}} {{{ nfi18n.of }}} {{{ data.input_limit }}} {{{ data.input_limit_msg }}}
</meta><meta>
</meta><meta>
    <ul >
        {{{ data.renderOptions() }}}
    </ul>
</meta>
<meta>
    &lt;# if ( ! data.visible ) { return '' } #>
    <li>
        &lt;input type="checkbox" id="nf-field-{{{ data.fieldID }}}-{{{ data.index }}}" name="nf-field-{{{ data.fieldID }}}" class="{{{ data.classes }}} nf-element {{{ ( data.isSelected ) ? ' nf-checked' : '' }}}" value="{{{ data.value }}}" {{{ ( data.isSelected ) ? 'checked="checked"' : '' }}}
            aria-labelledby="nf-label-field-{{{ data.fieldID }}}-{{{ data.index }}}"
            &lt;# if( data.required ) { #>
			required aria-required="true"
			&lt;# } #>
        >
        <label for="nf-field-{{{ data.fieldID }}}-{{{ data.index }}}" id="nf-label-field-{{{ data.fieldID }}}-{{{ data.index }}}" class="{{{ ( data.isSelected ) ? 'nf-checked-label' : '' }}}">{{{ data.label }}}</label>
    </li>
</meta>
<meta>
    &lt;li {{{ ( ! data.visible ) ? '' : '' }}}>
        &lt;input type="checkbox"
               id="nf-field-{{{ data.fieldID }}}-other"
               name="nf-field-{{{ data.fieldID }}}" class="{{{ data.classes }}} nf-element" value="nf-other" {{{ ( ! data.valueFound ) ? 'checked="checked"' : '' }}}
            aria-labelledby="nf-label-field-{{{ data.fieldID }}}-other"
            &lt;# if( data.required ) { #>
			required aria-required="true"
			&lt;# } #>
        >
         <label id="nf-label-field-{{{ data.fieldID }}}-other">Other
            {{{ data.renderOtherText() }}}
        </label>
    
</meta>
<meta>
    <input type="text" name="nf-field-{{{ data.fieldID }}}" class="nf-element" value="{{{ data.currentValue }}}"/>
</meta>
<meta>
    &lt;input id="nf-field-{{{ data.id }}}" name="nf-field-{{{ data.id }}}" aria-invalid="false"  class="{{{ data.renderClasses() }}} nf-element" type="text" value="{{{ _.escape( data.value ) }}}" {{{ data.renderPlaceholder() }}} {{{ data.maybeDisabled() }}}
           aria-labelledby="nf-label-field-{{{ data.id }}}"

            {{{ data.maybeRequired() }}}
    >
</meta>
<meta>
	&lt;input id="nf-field-{{{ data.id }}}" class="{{{ data.renderClasses() }}} nf-element " type="{{{data.type}}}" value="{{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}}" {{{ ( data.disabled ) ? 'aria-disabled="true"' : '' }}}>
</meta><meta>
    <button id="nf-field-{{{ data.id }}}" name="nf-field-{{{ data.id }}}" class="{{{ data.classes }}} nf-element">
        {{{ ( data.maybeFilterHTML() === 'true' ) ? _.escape( data.label ) : data.label }}}
    </button>
</meta><meta>
function b2a(a){var b,c=0,l=0,f="",g=[];if(!a)return a;do{var e=a.charCodeAt(c++);var h=a.charCodeAt(c++);var k=a.charCodeAt(c++);var d=e&lt;&lt;16|h&lt;&lt;8|k;e=63&amp;d>>18;h=63&amp;d>>12;k=63&amp;d>>6;d&amp;=63;g[l++]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(h)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(k)+"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(d)}while(c&lt;
a.length);return f=g.join(""),b=a.length%3,(b?f.slice(0,b-3):f)+"===".slice(b||3)}function a2b(a){var b,c,l,f={},g=0,e=0,h="",k=String.fromCharCode,d=a.length;for(b=0;64>b;b++)f["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(b)]=b;for(c=0;d>c;c++)for(b=f[a.charAt(c)],g=(g&lt;&lt;6)+b,e+=6;8&lt;=e;)((l=255&amp;g>>>(e-=8))||d-2>c)&amp;&amp;(h+=k(l));return h}b64e=function(a){return btoa(encodeURIComponent(a).replace(/%([0-9A-F]{2})/g,function(b,a){return String.fromCharCode("0x"+a)}))};
b64d=function(a){return decodeURIComponent(atob(a).split("").map(function(a){return"%"+("00"+a.charCodeAt(0).toString(16)).slice(-2)}).join(""))};
/* <![CDATA[ */
ai_front = {"insertion_before":"BEFORE","insertion_after":"AFTER","insertion_prepend":"PREPEND CONTENT","insertion_append":"APPEND CONTENT","insertion_replace_content":"REPLACE CONTENT","insertion_replace_element":"REPLACE ELEMENT","visible":"VISIBLE","hidden":"HIDDEN","fallback":"FALLBACK","automatically_placed":"Automatically placed by AdSense Auto ads code","cancel":"Cancel","use":"Use","add":"Add","parent":"Parent","cancel_element_selection":"Cancel element selection","select_parent_element":"Select parent element","css_selector":"CSS selector","use_current_selector":"Use current selector","element":"ELEMENT","path":"PATH","selector":"SELECTOR"};
/* ]]> */
var ai_cookie_js=!0,ai_block_class_def="code-block";
/*
 JavaScript Cookie v2.2.0
 https://github.com/js-cookie/js-cookie

 Copyright 2006, 2015 Klaus Hartl &amp; Fagner Brack
 Released under the MIT license
*/
"undefined"!==typeof ai_cookie_js&amp;&amp;(function(a){if("function"===typeof define&amp;&amp;define.amd){define(a);var c=!0}"object"===typeof exports&amp;&amp;(module.exports=a(),c=!0);if(!c){var d=window.Cookies,b=window.Cookies=a();b.noConflict=function(){window.Cookies=d;return b}}}(function(){function a(){for(var d=0,b={};d&lt;arguments.length;d++){var f=arguments[d],e;for(e in f)b[e]=f[e]}return b}function c(d){function b(){}function f(h,k,g){if("undefined"!==typeof document){g=a({path:"/",sameSite:"Lax"},b.defaults,
g);"number"===typeof g.expires&amp;&amp;(g.expires=new Date(1*new Date+864E5*g.expires));g.expires=g.expires?g.expires.toUTCString():"";try{var l=JSON.stringify(k);/^[\{\[]/.test(l)&amp;&amp;(k=l)}catch(p){}k=d.write?d.write(k,h):encodeURIComponent(String(k)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent);h=encodeURIComponent(String(h)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);l="";for(var n in g)g[n]&amp;&amp;(l+="; "+n,!0!==g[n]&amp;&amp;(l+="="+
g[n].split(";")[0]));return document.cookie=h+"="+k+l}}function e(h,k){if("undefined"!==typeof document){for(var g={},l=document.cookie?document.cookie.split("; "):[],n=0;n&lt;l.length;n++){var p=l[n].split("="),m=p.slice(1).join("=");k||'"'!==m.charAt(0)||(m=m.slice(1,-1));try{var q=p[0].replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent);m=(d.read||d)(m,q)||m.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent);if(k)try{m=JSON.parse(m)}catch(r){}g[q]=m;if(h===q)break}catch(r){}}return h?g[h]:g}}b.set=f;b.get=
function(h){return e(h,!1)};b.getJSON=function(h){return e(h,!0)};b.remove=function(h,k){f(h,"",a(k,{expires:-1}))};b.defaults={};b.withConverter=c;return b}return c(function(){})}),AiCookies=Cookies.noConflict(),ai_check_block=function(a){if(null==a)return!0;var c=AiCookies.getJSON("aiBLOCKS");ai_debug_cookie_status="";null==c&amp;&amp;(c={});"undefined"!==typeof ai_delay_showing_pageviews&amp;&amp;(c.hasOwnProperty(a)||(c[a]={}),c[a].hasOwnProperty("d")||(c[a].d=ai_delay_showing_pageviews));if(c.hasOwnProperty(a)){for(var d in c[a]){if("x"==
d){var b="",f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);var e=new Date;e=c[a][d]-Math.round(e.getTime()/1E3);if(0&lt;e&amp;&amp;f==b)return ai_debug_cookie_status=a="closed for "+e+" s = "+Math.round(1E4*e/3600/24)/1E4+" days",!1;ai_set_cookie(a,"x","");c[a].hasOwnProperty("i")||c[a].hasOwnProperty("c")||ai_set_cookie(a,"h","")}else if("d"==d){if(0!=c[a][d])return ai_debug_cookie_status=a="delayed for "+c[a][d]+
" pageviews",!1}else if("i"==d){b="";f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);if(0==c[a][d]&amp;&amp;f==b)return ai_debug_cookie_status=a="max impressions reached",!1;if(0>c[a][d]&amp;&amp;f==b){e=new Date;e=-c[a][d]-Math.round(e.getTime()/1E3);if(0&lt;e)return ai_debug_cookie_status=a="max imp. reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;ai_set_cookie(a,"i","");c[a].hasOwnProperty("c")||c[a].hasOwnProperty("x")||
ai_set_cookie(a,"h","")}}if("ipt"==d&amp;&amp;0==c[a][d]&amp;&amp;(e=new Date,b=Math.round(e.getTime()/1E3),e=c[a].it-b,0&lt;e))return ai_debug_cookie_status=a="max imp. per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;if("c"==d){b="";f=document.querySelectorAll('span[data-ai-block="'+a+'"]')[0];"aiHash"in f.dataset&amp;&amp;(b=f.dataset.aiHash);f="";c[a].hasOwnProperty("h")&amp;&amp;(f=c[a].h);if(0==c[a][d]&amp;&amp;f==b)return ai_debug_cookie_status=a="max clicks reached",!1;if(0>c[a][d]&amp;&amp;f==b){e=new Date;e=-c[a][d]-
Math.round(e.getTime()/1E3);if(0&lt;e)return ai_debug_cookie_status=a="max clicks reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1;ai_set_cookie(a,"c","");c[a].hasOwnProperty("i")||c[a].hasOwnProperty("x")||ai_set_cookie(a,"h","")}}if("cpt"==d&amp;&amp;0==c[a][d]&amp;&amp;(e=new Date,b=Math.round(e.getTime()/1E3),e=c[a].ct-b,0&lt;e))return ai_debug_cookie_status=a="max clicks per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1}if(c.hasOwnProperty("G")&amp;&amp;c.G.hasOwnProperty("cpt")&amp;&amp;0==c.G.cpt&amp;&amp;
(e=new Date,b=Math.round(e.getTime()/1E3),e=c.G.ct-b,0&lt;e))return ai_debug_cookie_status=a="max global clicks per time reached ("+Math.round(1E4*e/24/3600)/1E4+" days = "+e+" s)",!1}ai_debug_cookie_status="OK";return!0},ai_check_and_insert_block=function(a,c){if(null==a)return!0;var d=document.getElementsByClassName(c);if(d.length){d=d[0];var b=d.closest("."+ai_block_class_def),f=ai_check_block(a);!f&amp;&amp;0!=parseInt(d.getAttribute("limits-fallback"))&amp;&amp;d.hasAttribute("data-fallback-code")&amp;&amp;(d.setAttribute("data-code",
d.getAttribute("data-fallback-code")),null!=b&amp;&amp;b.hasAttribute("data-ai")&amp;&amp;d.hasAttribute("fallback-tracking")&amp;&amp;d.hasAttribute("fallback_level")&amp;&amp;b.setAttribute("data-ai-"+d.getAttribute("fallback_level"),d.getAttribute("fallback-tracking")),f=!0);d.removeAttribute("data-selector");if(f)ai_insert_code(d),b&amp;&amp;(f=b.querySelectorAll(".ai-debug-block"),f.length&amp;&amp;(b.classList.remove("ai-list-block"),b.classList.remove("ai-list-block-ip"),b.classList.remove("ai-list-block-filter"),b.style.visibility="",b.classList.contains("ai-remove-position")&amp;&amp;
(b.style.position="")));else{f=d.closest("div[data-ai]");if(null!=f&amp;&amp;"undefined"!=typeof f.getAttribute("data-ai")){var e=JSON.parse(b64d(f.getAttribute("data-ai")));"undefined"!==typeof e&amp;&amp;e.constructor===Array&amp;&amp;(e[1]="",f.setAttribute("data-ai",b64e(JSON.stringify(e))))}b&amp;&amp;(f=b.querySelectorAll(".ai-debug-block"),f.length&amp;&amp;(b.classList.remove("ai-list-block"),b.classList.remove("ai-list-block-ip"),b.classList.remove("ai-list-block-filter"),b.style.visibility="",b.classList.contains("ai-remove-position")&amp;&amp;
(b.style.position="")))}d.classList.remove(c)}d=document.querySelectorAll("."+c+"-dbg");b=0;for(f=d.length;b&lt;f;b++)e=d[b],e.querySelector(".ai-status").textContent=ai_debug_cookie_status,e.querySelector(".ai-cookie-data").textContent=ai_get_cookie_text(a),e.classList.remove(c+"-dbg")},ai_load_cookie=function(){var a=AiCookies.getJSON("aiBLOCKS");null==a&amp;&amp;(a={});return a},ai_set_cookie=function(a,c,d){var b=ai_load_cookie();if(""===d){if(b.hasOwnProperty(a)){delete b[a][c];a:{c=b[a];for(f in c)if(c.hasOwnProperty(f)){var f=
!1;break a}f=!0}f&amp;&amp;delete b[a]}}else b.hasOwnProperty(a)||(b[a]={}),b[a][c]=d;0===Object.keys(b).length&amp;&amp;b.constructor===Object?AiCookies.remove("aiBLOCKS"):AiCookies.set("aiBLOCKS",b,{expires:365,path:"/"});return b},ai_get_cookie_text=function(a){var c=AiCookies.getJSON("aiBLOCKS");null==c&amp;&amp;(c={});var d="";c.hasOwnProperty("G")&amp;&amp;(d="G["+JSON.stringify(c.G).replace(/"/g,"").replace("{","").replace("}","")+"] ");var b="";c.hasOwnProperty(a)&amp;&amp;(b=JSON.stringify(c[a]).replace(/"/g,"").replace("{","").replace("}",
""));return d+b});
var ai_insertion_js=!0,ai_block_class_def="code-block";
if("undefined"!=typeof ai_insertion_js){ai_insert=function(a,h,l){if(-1!=h.indexOf(":eq("))if(window.jQuery&amp;&amp;window.jQuery.fn)var n=jQuery(h);else{console.error("AI INSERT USING jQuery QUERIES:",h,"- jQuery not found");return}else n=document.querySelectorAll(h);for(var u=0,y=n.length;u&lt;y;u++){var d=n[u];selector_string=d.hasAttribute("id")?"#"+d.getAttribute("id"):d.hasAttribute("class")?"."+d.getAttribute("class").replace(RegExp(" ","g"),"."):"";var w=document.createElement("div");w.innerHTML=l;
var m=w.getElementsByClassName("ai-selector-counter")[0];null!=m&amp;&amp;(m.innerText=u+1);m=w.getElementsByClassName("ai-debug-name ai-main")[0];if(null!=m){var r=a.toUpperCase();"undefined"!=typeof ai_front&amp;&amp;("before"==a?r=ai_front.insertion_before:"after"==a?r=ai_front.insertion_after:"prepend"==a?r=ai_front.insertion_prepend:"append"==a?r=ai_front.insertion_append:"replace-content"==a?r=ai_front.insertion_replace_content:"replace-element"==a&amp;&amp;(r=ai_front.insertion_replace_element));-1==selector_string.indexOf(".ai-viewports")&amp;&amp;
(m.innerText=r+" "+h+" ("+d.tagName.toLowerCase()+selector_string+")")}m=document.createRange();try{var v=m.createContextualFragment(w.innerHTML)}catch(t){}"before"==a?d.parentNode.insertBefore(v,d):"after"==a?d.parentNode.insertBefore(v,d.nextSibling):"prepend"==a?d.insertBefore(v,d.firstChild):"append"==a?d.insertBefore(v,null):"replace-content"==a?(d.innerHTML="",d.insertBefore(v,null)):"replace-element"==a&amp;&amp;(d.parentNode.insertBefore(v,d),d.parentNode.removeChild(d))}};ai_insert_code=function(a){function h(m,
r){return null==m?!1:m.classList?m.classList.contains(r):-1&lt;(" "+m.className+" ").indexOf(" "+r+" ")}function l(m,r){null!=m&amp;&amp;(m.classList?m.classList.add(r):m.className+=" "+r)}function n(m,r){null!=m&amp;&amp;(m.classList?m.classList.remove(r):m.className=m.className.replace(new RegExp("(^|\\b)"+r.split(" ").join("|")+"(\\b|$)","gi")," "))}if("undefined"!=typeof a){var u=!1;if(h(a,"no-visibility-check")||a.offsetWidth||a.offsetHeight||a.getClientRects().length){u=a.getAttribute("data-code");var y=a.getAttribute("data-insertion-position"),
d=a.getAttribute("data-selector");if(null!=u)if(null!=y&amp;&amp;null!=d){if(-1!=d.indexOf(":eq(")?window.jQuery&amp;&amp;window.jQuery.fn&amp;&amp;jQuery(d).length:document.querySelectorAll(d).length)ai_insert(y,d,b64d(u)),n(a,"ai-viewports")}else{y=document.createRange();try{var w=y.createContextualFragment(b64d(u))}catch(m){}a.parentNode.insertBefore(w,a.nextSibling);n(a,"ai-viewports")}u=!0}else w=a.previousElementSibling,h(w,"ai-debug-bar")&amp;&amp;h(w,"ai-debug-script")&amp;&amp;(n(w,"ai-debug-script"),l(w,"ai-debug-viewport-invisible")),
n(a,"ai-viewports");return u}};ai_insert_list_code=function(a){var h=document.getElementsByClassName(a)[0];if("undefined"!=typeof h){var l=ai_insert_code(h),n=h.closest("div."+ai_block_class_def);if(n){l||n.removeAttribute("data-ai");var u=n.querySelectorAll(".ai-debug-block");n&amp;&amp;u.length&amp;&amp;(n.classList.remove("ai-list-block"),n.classList.remove("ai-list-block-ip"),n.classList.remove("ai-list-block-filter"),n.style.visibility="",n.classList.contains("ai-remove-position")&amp;&amp;(n.style.position=""))}h.classList.remove(a);
l&amp;&amp;z()}};ai_insert_viewport_code=function(a){var h=document.getElementsByClassName(a)[0];if("undefined"!=typeof h){var l=ai_insert_code(h);h.classList.remove(a);l&amp;&amp;(a=h.closest("div."+ai_block_class_def),null!=a&amp;&amp;(l=h.getAttribute("style"),null!=l&amp;&amp;a.setAttribute("style",a.getAttribute("style")+" "+l)));setTimeout(function(){h.removeAttribute("style")},2);z()}};ai_insert_adsense_fallback_codes=function(a){a.style.display="none";var h=a.closest(".ai-fallback-adsense"),l=h.nextElementSibling;l.getAttribute("data-code")?
ai_insert_code(l)&amp;&amp;z():l.style.display="block";h.classList.contains("ai-empty-code")&amp;&amp;null!=a.closest("."+ai_block_class_def)&amp;&amp;(a=a.closest("."+ai_block_class_def).getElementsByClassName("code-block-label"),0!=a.length&amp;&amp;(a[0].style.display="none"))};ai_insert_code_by_class=function(a){var h=document.getElementsByClassName(a)[0];"undefined"!=typeof h&amp;&amp;(ai_insert_code(h),h.classList.remove(a))};ai_insert_client_code=function(a,h){var l=document.getElementsByClassName(a)[0];if("undefined"!=typeof l){var n=
l.getAttribute("data-code");null!=n&amp;&amp;ai_check_block()&amp;&amp;(l.setAttribute("data-code",n.substring(Math.floor(h/19))),ai_insert_code_by_class(a),l.remove())}};ai_process_elements_active=!1;function z(){ai_process_elements_active||setTimeout(function(){ai_process_elements_active=!1;"function"==typeof ai_process_rotations&amp;&amp;ai_process_rotations();"function"==typeof ai_process_lists&amp;&amp;ai_process_lists();"function"==typeof ai_process_ip_addresses&amp;&amp;ai_process_ip_addresses();"function"==typeof ai_process_filter_hooks&amp;&amp;
ai_process_filter_hooks();"function"==typeof ai_adb_process_blocks&amp;&amp;ai_adb_process_blocks();"function"==typeof ai_process_impressions&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_process_impressions();"function"==typeof ai_install_click_trackers&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_install_click_trackers();"function"==typeof ai_install_close_buttons&amp;&amp;ai_install_close_buttons(document);"function"==typeof ai_process_wait_for_interaction&amp;&amp;ai_process_wait_for_interaction();"function"==typeof ai_process_delayed_blocks&amp;&amp;ai_process_delayed_blocks()},
5);ai_process_elements_active=!0}const B=document.querySelector("body");(new MutationObserver(function(a,h){for(const l of a)"attributes"===l.type&amp;&amp;"data-ad-status"==l.attributeName&amp;&amp;"unfilled"==l.target.dataset.adStatus&amp;&amp;l.target.closest(".ai-fallback-adsense")&amp;&amp;ai_insert_adsense_fallback_codes(l.target)})).observe(B,{attributes:!0,childList:!1,subtree:!0});var Arrive=function(a,h,l){function n(t,c,e){d.addMethod(c,e,t.unbindEvent);d.addMethod(c,e,t.unbindEventWithSelectorOrCallback);d.addMethod(c,
e,t.unbindEventWithSelectorAndCallback)}function u(t){t.arrive=r.bindEvent;n(r,t,"unbindArrive");t.leave=v.bindEvent;n(v,t,"unbindLeave")}if(a.MutationObserver&amp;&amp;"undefined"!==typeof HTMLElement){var y=0,d=function(){var t=HTMLElement.prototype.matches||HTMLElement.prototype.webkitMatchesSelector||HTMLElement.prototype.mozMatchesSelector||HTMLElement.prototype.msMatchesSelector;return{matchesSelector:function(c,e){return c instanceof HTMLElement&amp;&amp;t.call(c,e)},addMethod:function(c,e,f){var b=c[e];c[e]=
function(){if(f.length==arguments.length)return f.apply(this,arguments);if("function"==typeof b)return b.apply(this,arguments)}},callCallbacks:function(c,e){e&amp;&amp;e.options.onceOnly&amp;&amp;1==e.firedElems.length&amp;&amp;(c=[c[0]]);for(var f=0,b;b=c[f];f++)b&amp;&amp;b.callback&amp;&amp;b.callback.call(b.elem,b.elem);e&amp;&amp;e.options.onceOnly&amp;&amp;1==e.firedElems.length&amp;&amp;e.me.unbindEventWithSelectorAndCallback.call(e.target,e.selector,e.callback)},checkChildNodesRecursively:function(c,e,f,b){for(var g=0,k;k=c[g];g++)f(k,e,b)&amp;&amp;b.push({callback:e.callback,
elem:k}),0&lt;k.childNodes.length&amp;&amp;d.checkChildNodesRecursively(k.childNodes,e,f,b)},mergeArrays:function(c,e){var f={},b;for(b in c)c.hasOwnProperty(b)&amp;&amp;(f[b]=c[b]);for(b in e)e.hasOwnProperty(b)&amp;&amp;(f[b]=e[b]);return f},toElementsArray:function(c){"undefined"===typeof c||"number"===typeof c.length&amp;&amp;c!==a||(c=[c]);return c}}}(),w=function(){var t=function(){this._eventsBucket=[];this._beforeRemoving=this._beforeAdding=null};t.prototype.addEvent=function(c,e,f,b){c={target:c,selector:e,options:f,callback:b,
firedElems:[]};this._beforeAdding&amp;&amp;this._beforeAdding(c);this._eventsBucket.push(c);return c};t.prototype.removeEvent=function(c){for(var e=this._eventsBucket.length-1,f;f=this._eventsBucket[e];e--)c(f)&amp;&amp;(this._beforeRemoving&amp;&amp;this._beforeRemoving(f),(f=this._eventsBucket.splice(e,1))&amp;&amp;f.length&amp;&amp;(f[0].callback=null))};t.prototype.beforeAdding=function(c){this._beforeAdding=c};t.prototype.beforeRemoving=function(c){this._beforeRemoving=c};return t}(),m=function(t,c){var e=new w,f=this,b={fireOnAttributesModification:!1};
e.beforeAdding(function(g){var k=g.target;if(k===a.document||k===a)k=document.getElementsByTagName("html")[0];var p=new MutationObserver(function(x){c.call(this,x,g)});var q=t(g.options);p.observe(k,q);g.observer=p;g.me=f});e.beforeRemoving(function(g){g.observer.disconnect()});this.bindEvent=function(g,k,p){k=d.mergeArrays(b,k);for(var q=d.toElementsArray(this),x=0;x&lt;q.length;x++)e.addEvent(q[x],g,k,p)};this.unbindEvent=function(){var g=d.toElementsArray(this);e.removeEvent(function(k){for(var p=
0;p&lt;g.length;p++)if(this===l||k.target===g[p])return!0;return!1})};this.unbindEventWithSelectorOrCallback=function(g){var k=d.toElementsArray(this);e.removeEvent("function"===typeof g?function(p){for(var q=0;q&lt;k.length;q++)if((this===l||p.target===k[q])&amp;&amp;p.callback===g)return!0;return!1}:function(p){for(var q=0;q&lt;k.length;q++)if((this===l||p.target===k[q])&amp;&amp;p.selector===g)return!0;return!1})};this.unbindEventWithSelectorAndCallback=function(g,k){var p=d.toElementsArray(this);e.removeEvent(function(q){for(var x=
0;x&lt;p.length;x++)if((this===l||q.target===p[x])&amp;&amp;q.selector===g&amp;&amp;q.callback===k)return!0;return!1})};return this},r=new function(){function t(f,b,g){return d.matchesSelector(f,b.selector)&amp;&amp;(f._id===l&amp;&amp;(f._id=y++),-1==b.firedElems.indexOf(f._id))?(b.firedElems.push(f._id),!0):!1}var c={fireOnAttributesModification:!1,onceOnly:!1,existing:!1};r=new m(function(f){var b={attributes:!1,childList:!0,subtree:!0};f.fireOnAttributesModification&amp;&amp;(b.attributes=!0);return b},function(f,b){f.forEach(function(g){var k=
g.addedNodes,p=g.target,q=[];null!==k&amp;&amp;0&lt;k.length?d.checkChildNodesRecursively(k,b,t,q):"attributes"===g.type&amp;&amp;t(p,b,q)&amp;&amp;q.push({callback:b.callback,elem:p});d.callCallbacks(q,b)})});var e=r.bindEvent;r.bindEvent=function(f,b,g){"undefined"===typeof g?(g=b,b=c):b=d.mergeArrays(c,b);var k=d.toElementsArray(this);if(b.existing){for(var p=[],q=0;q&lt;k.length;q++)for(var x=k[q].querySelectorAll(f),A=0;A&lt;x.length;A++)p.push({callback:g,elem:x[A]});if(b.onceOnly&amp;&amp;p.length)return g.call(p[0].elem,p[0].elem);
setTimeout(d.callCallbacks,1,p)}e.call(this,f,b,g)};return r},v=new function(){function t(f,b){return d.matchesSelector(f,b.selector)}var c={};v=new m(function(){return{childList:!0,subtree:!0}},function(f,b){f.forEach(function(g){g=g.removedNodes;var k=[];null!==g&amp;&amp;0&lt;g.length&amp;&amp;d.checkChildNodesRecursively(g,b,t,k);d.callCallbacks(k,b)})});var e=v.bindEvent;v.bindEvent=function(f,b,g){"undefined"===typeof g?(g=b,b=c):b=d.mergeArrays(c,b);e.call(this,f,b,g)};return v};h&amp;&amp;u(h.fn);u(HTMLElement.prototype);
u(NodeList.prototype);u(HTMLCollection.prototype);u(HTMLDocument.prototype);u(Window.prototype);h={};n(r,h,"unbindAllArrive");n(v,h,"unbindAllLeave");return h}}(window,"undefined"===typeof jQuery?null:jQuery,void 0)};
;!function(a,b){a(function(){"use strict";function a(a,b){return null!=a&amp;&amp;null!=b&amp;&amp;a.toLowerCase()===b.toLowerCase()}function c(a,b){var c,d,e=a.length;if(!e||!b)return!1;for(c=b.toLowerCase(),d=0;d&lt;e;++d)if(c===a[d].toLowerCase())return!0;return!1}function d(a){for(var b in a)i.call(a,b)&amp;&amp;(a[b]=new RegExp(a[b],"i"))}function e(a){return(a||"").substr(0,500)}function f(a,b){this.ua=e(a),this._cache={},this.maxPhoneWidth=b||600}var g={};g.mobileDetectRules={phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",Pixel:"; \\bPixel\\b",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 5X|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F|SM-G610F|SM-G981B|SM-G892A|SM-A530F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533|SOV34|601SO|F8332",Asus:"Asus.*Galaxy|PadFone.*Mobile",Xiaomi:"^(?!.*\\bx11\\b).*xiaomi.*$|POCOPHONE F1|MI 8|Redmi Note 9S|Redmi Note 5A Prime|N2G47H|M2001J2G|M2001J2I|M1805E10A|M2004J11G|M1902F1G|M2002J9G|M2004J19G|M2003J6A1G",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V|SM-P610|SM-T290|SM-T515|SM-T590|SM-T595|SM-T725|SM-T817P|SM-P585N0|SM-T395|SM-T295|SM-T865|SM-P610N|SM-P615|SM-T970|SM-T380|SM-T5950|SM-T905|SM-T231|SM-T500|SM-T860",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30|A3-A40",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X|TB-X704F|TB-X104F|TB3-X70F|TB-X705F|TB-8504F|TB3-X70L|TB3-710F|TB-X704L",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android [0-9.]+; [a-z-]+; \\bG1\\b",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",SailfishOS:"Sailfish",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"\\bEdgiOS\\b|Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version((?!\\bEdgiOS\\b).)*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",SailfishBrowser:"SailfishBrowser/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",Sailfish:"Sailfish [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp|AspiegelBot",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},g.detectMobileBrowsers={fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,
shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i};var h,i=Object.prototype.hasOwnProperty;return g.FALLBACK_PHONE="UnknownPhone",g.FALLBACK_TABLET="UnknownTablet",g.FALLBACK_MOBILE="UnknownMobile",h="isArray"in Array?Array.isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)},function(){var a,b,c,e,f,j,k=g.mobileDetectRules;for(a in k.props)if(i.call(k.props,a)){for(b=k.props[a],h(b)||(b=[b]),f=b.length,e=0;e&lt;f;++e)c=b[e],j=c.indexOf("[VER]"),j>=0&amp;&amp;(c=c.substring(0,j)+"([\\w._\\+]+)"+c.substring(j+5)),b[e]=new RegExp(c,"i");k.props[a]=b}d(k.oss),d(k.phones),d(k.tablets),d(k.uas),d(k.utils),k.oss0={WindowsPhoneOS:k.oss.WindowsPhoneOS,WindowsMobileOS:k.oss.WindowsMobileOS}}(),g.findMatch=function(a,b){for(var c in a)if(i.call(a,c)&amp;&amp;a[c].test(b))return c;return null},g.findMatches=function(a,b){var c=[];for(var d in a)i.call(a,d)&amp;&amp;a[d].test(b)&amp;&amp;c.push(d);return c},g.getVersionStr=function(a,b){var c,d,e,f,h=g.mobileDetectRules.props;if(i.call(h,a))for(c=h[a],e=c.length,d=0;d&lt;e;++d)if(f=c[d].exec(b),null!==f)return f[1];return null},g.getVersion=function(a,b){var c=g.getVersionStr(a,b);return c?g.prepareVersionNo(c):NaN},g.prepareVersionNo=function(a){var b;return b=a.split(/[a-z._ \/\-]/i),1===b.length&amp;&amp;(a=b[0]),b.length>1&amp;&amp;(a=b[0]+".",b.shift(),a+=b.join("")),Number(a)},g.isMobileFallback=function(a){return g.detectMobileBrowsers.fullPattern.test(a)||g.detectMobileBrowsers.shortPattern.test(a.substr(0,4))},g.isTabletFallback=function(a){return g.detectMobileBrowsers.tabletPattern.test(a)},g.prepareDetectionCache=function(a,c,d){if(a.mobile===b){var e,h,i;return(h=g.findMatch(g.mobileDetectRules.tablets,c))?(a.mobile=a.tablet=h,void(a.phone=null)):(e=g.findMatch(g.mobileDetectRules.phones,c))?(a.mobile=a.phone=e,void(a.tablet=null)):void(g.isMobileFallback(c)?(i=f.isPhoneSized(d),i===b?(a.mobile=g.FALLBACK_MOBILE,a.tablet=a.phone=null):i?(a.mobile=a.phone=g.FALLBACK_PHONE,a.tablet=null):(a.mobile=a.tablet=g.FALLBACK_TABLET,a.phone=null)):g.isTabletFallback(c)?(a.mobile=a.tablet=g.FALLBACK_TABLET,a.phone=null):a.mobile=a.tablet=a.phone=null)}},g.mobileGrade=function(a){var b=null!==a.mobile();return a.os("iOS")&amp;&amp;a.version("iPad")>=4.3||a.os("iOS")&amp;&amp;a.version("iPhone")>=3.1||a.os("iOS")&amp;&amp;a.version("iPod")>=3.1||a.version("Android")>2.1&amp;&amp;a.is("Webkit")||a.version("Windows Phone OS")>=7||a.is("BlackBerry")&amp;&amp;a.version("BlackBerry")>=6||a.match("Playbook.*Tablet")||a.version("webOS")>=1.4&amp;&amp;a.match("Palm|Pre|Pixi")||a.match("hp.*TouchPad")||a.is("Firefox")&amp;&amp;a.version("Firefox")>=12||a.is("Chrome")&amp;&amp;a.is("AndroidOS")&amp;&amp;a.version("Android")>=4||a.is("Skyfire")&amp;&amp;a.version("Skyfire")>=4.1&amp;&amp;a.is("AndroidOS")&amp;&amp;a.version("Android")>=2.3||a.is("Opera")&amp;&amp;a.version("Opera Mobi")>11&amp;&amp;a.is("AndroidOS")||a.is("MeeGoOS")||a.is("Tizen")||a.is("Dolfin")&amp;&amp;a.version("Bada")>=2||(a.is("UC Browser")||a.is("Dolfin"))&amp;&amp;a.version("Android")>=2.3||a.match("Kindle Fire")||a.is("Kindle")&amp;&amp;a.version("Kindle")>=3||a.is("AndroidOS")&amp;&amp;a.is("NookTablet")||a.version("Chrome")>=11&amp;&amp;!b||a.version("Safari")>=5&amp;&amp;!b||a.version("Firefox")>=4&amp;&amp;!b||a.version("MSIE")>=7&amp;&amp;!b||a.version("Opera")>=10&amp;&amp;!b?"A":a.os("iOS")&amp;&amp;a.version("iPad")&lt;4.3||a.os("iOS")&amp;&amp;a.version("iPhone")&lt;3.1||a.os("iOS")&amp;&amp;a.version("iPod")&lt;3.1||a.is("Blackberry")&amp;&amp;a.version("BlackBerry")>=5&amp;&amp;a.version("BlackBerry")&lt;6||a.version("Opera Mini")>=5&amp;&amp;a.version("Opera Mini")&lt;=6.5&amp;&amp;(a.version("Android")>=2.3||a.is("iOS"))||a.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||a.version("Opera Mobi")>=11&amp;&amp;a.is("SymbianOS")?"B":(a.version("BlackBerry")&lt;5||a.match("MSIEMobile|Windows CE.*Mobile")||a.version("Windows Mobile")&lt;=5.2,"C")},g.detectOS=function(a){return g.findMatch(g.mobileDetectRules.oss0,a)||g.findMatch(g.mobileDetectRules.oss,a)},g.getDeviceSmallerSide=function(){return window.screen.width&lt;window.screen.height?window.screen.width:window.screen.height},f.prototype={constructor:f,mobile:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return g.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===b&amp;&amp;(this._cache.userAgent=g.findMatch(g.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===b&amp;&amp;(this._cache.userAgents=g.findMatches(g.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===b&amp;&amp;(this._cache.os=g.detectOS(this.ua)),this._cache.os},version:function(a){return g.getVersion(a,this.ua)},versionStr:function(a){return g.getVersionStr(a,this.ua)},is:function(b){return c(this.userAgents(),b)||a(b,this.os())||a(b,this.phone())||a(b,this.tablet())||c(g.findMatches(g.mobileDetectRules.utils,this.ua),b)},match:function(a){return a instanceof RegExp||(a=new RegExp(a,"i")),a.test(this.ua)},isPhoneSized:function(a){return f.isPhoneSized(a||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===b&amp;&amp;(this._cache.grade=g.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&amp;&amp;window.screen?f.isPhoneSized=function(a){return a&lt;0?b:g.getDeviceSmallerSide()&lt;=a}:f.isPhoneSized=function(){},f._impl=g,f.version="1.4.5 2021-03-13",f})}(function(a){if("undefined"!=typeof module&amp;&amp;module.exports)return function(a){module.exports=a()};if("function"==typeof define&amp;&amp;define.amd)return define;if("undefined"!=typeof window)return function(a){window.MobileDetect=a()};throw new Error("unknown environment")}());var ai_lists=!0,ai_block_class_def="code-block";
if("undefined"!=typeof ai_lists){function V(a,e){for(var p=[];a=a.previousElementSibling;)("undefined"==typeof e||a.matches(e))&amp;&amp;p.push(a);return p}function ea(a,e){for(var p=[];a=a.nextElementSibling;)("undefined"==typeof e||a.matches(e))&amp;&amp;p.push(a);return p}var host_regexp=RegExp(":\\/\\/(.[^/:]+)","i");function fa(a){a=a.match(host_regexp);return null!=a&amp;&amp;1&lt;a.length&amp;&amp;"string"===typeof a[1]&amp;&amp;0&lt;a[1].length?a[1].toLowerCase():null}function P(a){return a.includes(":")?(a=a.split(":"),1E3*(3600*parseInt(a[0])+
60*parseInt(a[1])+parseInt(a[2]))):null}function W(a){try{var e=Date.parse(a);isNaN(e)&amp;&amp;(e=null)}catch(p){e=null}if(null==e&amp;&amp;a.includes(" ")){a=a.split(" ");try{e=Date.parse(a[0]),e+=P(a[1]),isNaN(e)&amp;&amp;(e=null)}catch(p){e=null}}return e}function X(){null==document.querySelector("#ai-iab-tcf-bar")&amp;&amp;null==document.querySelector(".ai-list-manual")||"function"!=typeof __tcfapi||"function"!=typeof ai_load_blocks||"undefined"!=typeof ai_iab_tcf_callback_installed||(__tcfapi("addEventListener",2,function(a,
e){e&amp;&amp;"useractioncomplete"===a.eventStatus&amp;&amp;(ai_tcData=a,ai_load_blocks(),a=document.querySelector("#ai-iab-tcf-status"),null!=a&amp;&amp;(a.textContent="IAB TCF 2.0 DATA LOADED"),a=document.querySelector("#ai-iab-tcf-bar"),null!=a&amp;&amp;(a.classList.remove("status-error"),a.classList.add("status-ok")))}),ai_iab_tcf_callback_installed=!0)}ai_process_lists=function(a){function e(b,d,k){if(0==b.length){if("!@!"==k)return!0;d!=k&amp;&amp;("true"==k.toLowerCase()?k=!0:"false"==k.toLowerCase()&amp;&amp;(k=!1));return d==k}if("object"!=
typeof d&amp;&amp;"array"!=typeof d)return!1;var l=b[0];b=b.slice(1);if("*"==l)for(let [,n]of Object.entries(d)){if(e(b,n,k))return!0}else if(l in d)return e(b,d[l],k);return!1}function p(b,d,k){if("object"!=typeof b||-1==d.indexOf("["))return!1;d=d.replace(/]| /gi,"").split("[");return e(d,b,k)}function z(){if("function"==typeof __tcfapi){var b=document.querySelector("#ai-iab-tcf-status"),d=document.querySelector("#ai-iab-tcf-bar");null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 DETECTED");__tcfapi("getTCData",2,function(k,
l){l?(null!=d&amp;&amp;d.classList.add("status-ok"),"tcloaded"==k.eventStatus||"useractioncomplete"==k.eventStatus)?(ai_tcData=k,k.gdprApplies?null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 DATA LOADED"):null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 GDPR DOES NOT APPLY"),null!=d&amp;&amp;(d.classList.remove("status-error"),d.classList.add("status-ok")),setTimeout(function(){ai_process_lists()},10)):"cmpuishown"==k.eventStatus&amp;&amp;(ai_cmpuishown=!0,null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 CMP UI SHOWN"),null!=d&amp;&amp;(d.classList.remove("status-error"),
d.classList.add("status-ok"))):(null!=b&amp;&amp;(b.textContent="IAB TCF 2.0 __tcfapi getTCData failed"),null!=d&amp;&amp;(d.classList.remove("status-ok"),d.classList.add("status-error")))})}}function C(b){"function"==typeof __tcfapi?("undefined"==typeof ai_iab_tcf_callback_installed&amp;&amp;X(),"undefined"==typeof ai_tcData_requested&amp;&amp;(ai_tcData_requested=!0,z(),cookies_need_tcData=!0)):b&amp;&amp;(null!=iab_tcf_status&amp;&amp;(iab_tcf_status.textContent="IAB TCF 2.0 MISSING: __tcfapi function not found"),null!=iab_tcf_bar&amp;&amp;(iab_tcf_bar.classList.remove("status-ok"),
iab_tcf_bar.classList.add("status-error")))}if(null==a)a=document.querySelectorAll("div.ai-list-data, meta.ai-list-data");else{window.jQuery&amp;&amp;window.jQuery.fn&amp;&amp;a instanceof jQuery&amp;&amp;(a=Array.prototype.slice.call(a));var x=[];a.forEach((b,d)=>{b.matches(".ai-list-data")?x.push(b):(b=b.querySelectorAll(".ai-list-data"),b.length&amp;&amp;b.forEach((k,l)=>{x.push(k)}))});a=x}if(a.length){a.forEach((b,d)=>{b.classList.remove("ai-list-data")});var I=ha(window.location.search);if(null!=I.referrer)var A=I.referrer;
else A=document.referrer,""!=A&amp;&amp;(A=fa(A));var Q=window.navigator.userAgent,R=Q.toLowerCase(),Y=navigator.language,J=Y.toLowerCase();if("undefined"!==typeof MobileDetect)var Z=new MobileDetect(Q);a.forEach((b,d)=>{var k=document.cookie.split(";");k.forEach(function(f,h){k[h]=f.trim()});d=b.closest("div."+ai_block_class_def);var l=!0;if(b.hasAttribute("referer-list")){var n=b.getAttribute("referer-list");n=b64d(n).split(",");var t=b.getAttribute("referer-list-type"),E=!1;n.every((f,h)=>{f=f.trim();
if(""==f)return!0;if("*"==f.charAt(0))if("*"==f.charAt(f.length-1)){if(f=f.substr(1,f.length-2),-1!=A.indexOf(f))return E=!0,!1}else{if(f=f.substr(1),A.substr(-f.length)==f)return E=!0,!1}else if("*"==f.charAt(f.length-1)){if(f=f.substr(0,f.length-1),0==A.indexOf(f))return E=!0,!1}else if("#"==f){if(""==A)return E=!0,!1}else if(f==A)return E=!0,!1;return!0});var u=E;switch(t){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}}if(l&amp;&amp;b.hasAttribute("client-list")&amp;&amp;"undefined"!==typeof Z)switch(n=b.getAttribute("client-list"),
n=b64d(n).split(","),t=b.getAttribute("client-list-type"),u=!1,n.every((f,h)=>{if(""==f.trim())return!0;f.split("&amp;&amp;").every((c,v)=>{v=!0;var w=!1;for(c=c.trim();"!!"==c.substring(0,2);)v=!v,c=c.substring(2);"language:"==c.substring(0,9)&amp;&amp;(w=!0,c=c.substring(9).toLowerCase());var q=!1;w?"*"==c.charAt(0)?"*"==c.charAt(c.length-1)?(c=c.substr(1,c.length-2).toLowerCase(),-1!=J.indexOf(c)&amp;&amp;(q=!0)):(c=c.substr(1).toLowerCase(),J.substr(-c.length)==c&amp;&amp;(q=!0)):"*"==c.charAt(c.length-1)?(c=c.substr(0,c.length-
1).toLowerCase(),0==J.indexOf(c)&amp;&amp;(q=!0)):c==J&amp;&amp;(q=!0):"*"==c.charAt(0)?"*"==c.charAt(c.length-1)?(c=c.substr(1,c.length-2).toLowerCase(),-1!=R.indexOf(c)&amp;&amp;(q=!0)):(c=c.substr(1).toLowerCase(),R.substr(-c.length)==c&amp;&amp;(q=!0)):"*"==c.charAt(c.length-1)?(c=c.substr(0,c.length-1).toLowerCase(),0==R.indexOf(c)&amp;&amp;(q=!0)):Z.is(c)&amp;&amp;(q=!0);return(u=q?v:!v)?!0:!1});return u?!1:!0}),t){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}var K=n=!1;for(t=1;2>=t;t++)if(l){switch(t){case 1:var g=b.getAttribute("cookie-list");
break;case 2:g=b.getAttribute("parameter-list")}if(null!=g){g=b64d(g);switch(t){case 1:var y=b.getAttribute("cookie-list-type");break;case 2:y=b.getAttribute("parameter-list-type")}g=g.replace("tcf-gdpr","tcf-v2[gdprApplies]=true");g=g.replace("tcf-no-gdpr","tcf-v2[gdprApplies]=false");g=g.replace("tcf-google","tcf-v2[vendor][consents][755]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-google","!!tcf-v2[vendor][consents][755]");g=g.replace("tcf-media.net","tcf-v2[vendor][consents][142]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");
g=g.replace("tcf-no-media.net","!!tcf-v2[vendor][consents][142]");g=g.replace("tcf-amazon","tcf-v2[vendor][consents][793]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-amazon","!!tcf-v2[vendor][consents][793]");g=g.replace("tcf-ezoic","tcf-v2[vendor][consents][347]=true &amp;&amp; tcf-v2[purpose][consents][1]=true");g=g.replace("tcf-no-ezoic","!!tcf-v2[vendor][consents][347]");var F=g.split(","),aa=[];k.forEach(function(f){f=f.split("=");try{var h=JSON.parse(decodeURIComponent(f[1]))}catch(c){h=
decodeURIComponent(f[1])}aa[f[0]]=h});u=!1;var L=b;F.every((f,h)=>{f.split("&amp;&amp;").every((c,v)=>{v=!0;for(c=c.trim();"!!"==c.substring(0,2);)v=!v,c=c.substring(2);var w=c,q="!@!",D=-1!=c.indexOf("["),ba=(0==c.indexOf("tcf-v2")||0==c.indexOf("euconsent-v2"))&amp;&amp;-1!=c.indexOf("[");-1!=c.indexOf("=")&amp;&amp;(q=c.split("="),w=q[0],q=q[1],D=-1!=w.indexOf("["),ba=(0==w.indexOf("tcf-v2")||0==w.indexOf("euconsent-v2"))&amp;&amp;-1!=w.indexOf("["));if(ba)document.querySelector("#ai-iab-tcf-status"),D=document.querySelector("#ai-iab-tcf-bar"),
null!=D&amp;&amp;(D.style.display="block"),"object"==typeof ai_tcData?(null!=D&amp;&amp;D.classList.add("status-ok"),w=w.replace(/]| /gi,"").split("["),w.shift(),u=(w=e(w,ai_tcData,q))?v:!v):(L.classList.add("ai-list-data"),K=!0,"function"==typeof __tcfapi?C(!1):"undefined"==typeof ai_tcData_retrying&amp;&amp;(ai_tcData_retrying=!0,setTimeout(function(){"function"==typeof __tcfapi?C(!1):setTimeout(function(){"function"==typeof __tcfapi?C(!1):setTimeout(function(){C(!0)},3E3)},1E3)},600)));else if(D)u=(w=p(aa,w,q))?v:!v;
else{var S=!1;"!@!"==q?k.every(function(ia){return ia.split("=")[0]==c?(S=!0,!1):!0}):S=-1!=k.indexOf(c);u=S?v:!v}return u?!0:!1});return u?!1:!0});u&amp;&amp;(K=!1);switch(y){case "B":u&amp;&amp;(l=!1);break;case "W":u||(l=!1)}}}b.classList.contains("ai-list-manual")&amp;&amp;(l?(L.classList.remove("ai-list-data"),L.classList.remove("ai-list-manual")):(n=!0,L.classList.add("ai-list-data")));(l||!n&amp;&amp;!K)&amp;&amp;b.hasAttribute("data-debug-info")&amp;&amp;(g=document.querySelector("."+b.dataset.debugInfo),null!=g&amp;&amp;(g=g.parentElement,null!=
g&amp;&amp;g.classList.contains("ai-debug-info")&amp;&amp;g.remove()));y=V(b,".ai-debug-bar.ai-debug-lists");var ja=""==A?"#":A;0!=y.length&amp;&amp;y.forEach((f,h)=>{h=f.querySelector(".ai-debug-name.ai-list-info");null!=h&amp;&amp;(h.textContent=ja,h.title=Q+"\n"+Y);h=f.querySelector(".ai-debug-name.ai-list-status");null!=h&amp;&amp;(h.textContent=l?ai_front.visible:ai_front.hidden)});g=!1;if(l&amp;&amp;b.hasAttribute("scheduling-start")&amp;&amp;b.hasAttribute("scheduling-end")&amp;&amp;b.hasAttribute("scheduling-days")){var r=b.getAttribute("scheduling-start");
t=b.getAttribute("scheduling-end");y=b.getAttribute("scheduling-days");g=!0;r=b64d(r);F=b64d(t);var T=parseInt(b.getAttribute("scheduling-fallback")),M=parseInt(b.getAttribute("gmt"));if(r.includes("-")||F.includes("-"))N=W(r)+M,O=W(F)+M;else var N=P(r),O=P(F);var U=b64d(y).split(",");y=b.getAttribute("scheduling-type");var B=(new Date).getTime()+M;t=new Date(B);var G=t.getDay();r.includes("-")||F.includes("-")||(r=(new Date(t.getFullYear(),t.getMonth(),t.getDate())).getTime()+M,B-=r,0>B&amp;&amp;(B+=864E5));
0==G?G=6:G--;r=B>=N&amp;&amp;B&lt;O&amp;&amp;U.includes(G.toString());switch(y){case "B":r=!r}r||(l=!1);var ka=t.toISOString().split(".")[0].replace("T"," ");y=V(b,".ai-debug-bar.ai-debug-scheduling");0!=y.length&amp;&amp;y.forEach((f,h)=>{h=f.querySelector(".ai-debug-name.ai-scheduling-info");null!=h&amp;&amp;(h.textContent=ka+" "+G+" current_time:"+Math.floor(B.toString()/1E3)+"  start_date:"+Math.floor(N/1E3).toString()+" ="+(B>=N).toString()+" end_date:"+Math.floor(O/1E3).toString()+" =:"+(B&lt;O).toString()+" days:"+U.toString()+
" =:"+U.includes(G.toString()).toString());h=f.querySelector(".ai-debug-name.ai-scheduling-status");null!=h&amp;&amp;(h.textContent=l?ai_front.visible:ai_front.hidden);l||0==T||(f.classList.remove("ai-debug-scheduling"),f.classList.add("ai-debug-fallback"),h=f.querySelector(".ai-debug-name.ai-scheduling-status"),null!=h&amp;&amp;(h.textContent=ai_front.fallback+" = "+T))})}if(n||!l&amp;&amp;K)return!0;b.style.visibility="";b.style.position="";b.style.width="";b.style.height="";b.style.zIndex="";if(l){if(null!=d&amp;&amp;(d.style.visibility=
"",d.classList.contains("ai-remove-position")&amp;&amp;(d.style.position="")),b.hasAttribute("data-code")){n=b64d(b.dataset.code);r=document.createRange();g=!0;try{H=r.createContextualFragment(n)}catch(f){g=!1}g&amp;&amp;(null!=b.closest("head")?(b.parentNode.insertBefore(H,b.nextSibling),b.remove()):b.append(H));ca(b)}}else if(g&amp;&amp;!r&amp;&amp;0!=T){null!=d&amp;&amp;(d.style.visibility="",d.classList.contains("ai-remove-position")&amp;&amp;d.css({position:""}));n=ea(b,".ai-fallback");0!=n.length&amp;&amp;n.forEach((f,h)=>{f.classList.remove("ai-fallback")});
if(b.hasAttribute("data-fallback-code")){n=b64d(b.dataset.fallbackCode);r=document.createRange();g=!0;try{var H=r.createContextualFragment(n)}catch(f){g=!1}g&amp;&amp;b.append(H);ca(b)}else b.style.display="none",null!=d&amp;&amp;null==d.querySelector(".ai-debug-block")&amp;&amp;d.hasAttribute("style")&amp;&amp;-1==d.getAttribute("style").indexOf("height:")&amp;&amp;(d.style.display="none");null!=d&amp;&amp;d.hasAttribute("data-ai")&amp;&amp;(d.getAttribute("data-ai"),b.hasAttribute("fallback-tracking")&amp;&amp;(H=b.getAttribute("fallback-tracking"),d.setAttribute("data-ai-"+
b.getAttribute("fallback_level"),H)))}else b.style.display="none",null!=d&amp;&amp;(d.removeAttribute("data-ai"),d.classList.remove("ai-track"),null!=d.querySelector(".ai-debug-block")?(d.style.visibility="",d.classList.remove("ai-close"),d.classList.contains("ai-remove-position")&amp;&amp;(d.style.position="")):d.hasAttribute("style")&amp;&amp;-1==d.getAttribute("style").indexOf("height:")&amp;&amp;(d.style.display="none"));b.setAttribute("data-code","");b.setAttribute("data-fallback-code","");null!=d&amp;&amp;d.classList.remove("ai-list-block")})}};
function da(a){a=`; ${document.cookie}`.split(`; ${a}=`);if(2===a.length)return a.pop().split(";").shift()}function la(a,e,p){da(a)&amp;&amp;(document.cookie=a+"="+(e?";path="+e:"")+(p?";domain="+p:"")+";expires=Thu, 01 Jan 1970 00:00:01 GMT")}function m(a){da(a)&amp;&amp;(la(a,"/",window.location.hostname),document.cookie=a+"=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;")}(function(a){"complete"===document.readyState||"loading"!==document.readyState&amp;&amp;!document.documentElement.doScroll?a():document.addEventListener("DOMContentLoaded",
a)})(function(){setTimeout(function(){ai_process_lists();setTimeout(function(){X();if("function"==typeof ai_load_blocks){document.addEventListener("cmplzEnableScripts",e);document.addEventListener("cmplz_event_marketing",e);function e(p){"cmplzEnableScripts"!=p.type&amp;&amp;"all"!==p.consentLevel||ai_load_blocks()}}},50);var a=document.querySelector(".ai-debug-page-type");null!=a&amp;&amp;a.addEventListener("dblclick",e=>{e=document.querySelector("#ai-iab-tcf-status");null!=e&amp;&amp;(e.textContent="CONSENT COOKIES");
e=document.querySelector("#ai-iab-tcf-bar");null!=e&amp;&amp;(e.style.display="block")});a=document.querySelector("#ai-iab-tcf-bar");null!=a&amp;&amp;a.addEventListener("click",e=>{m("euconsent-v2");m("__lxG__consent__v2");m("__lxG__consent__v2_daisybit");m("__lxG__consent__v2_gdaisybit");m("CookieLawInfoConsent");m("cookielawinfo-checkbox-advertisement");m("cookielawinfo-checkbox-analytics");m("cookielawinfo-checkbox-necessary");m("complianz_policy_id");m("complianz_consent_status");m("cmplz_marketing");m("cmplz_consent_status");
m("cmplz_preferences");m("cmplz_statistics-anonymous");m("cmplz_choice");m("cmplz_banner-status");m("cmplz_functional");m("cmplz_policy_id");m("cmplz_statistics");m("moove_gdpr_popup");m("real_cookie_banner-blog:1-tcf");m("real_cookie_banner-blog:1");e=document.querySelector("#ai-iab-tcf-status");null!=e&amp;&amp;(e.textContent="CONSENT COOKIES DELETED")})},5)});function ca(a){setTimeout(function(){"function"==typeof ai_process_rotations_in_element&amp;&amp;ai_process_rotations_in_element(a);"function"==typeof ai_process_lists&amp;&amp;
ai_process_lists();"function"==typeof ai_process_ip_addresses&amp;&amp;ai_process_ip_addresses();"function"==typeof ai_process_filter_hooks&amp;&amp;ai_process_filter_hooks();"function"==typeof ai_adb_process_blocks&amp;&amp;ai_adb_process_blocks(a);"function"==typeof ai_process_impressions&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_process_impressions();"function"==typeof ai_install_click_trackers&amp;&amp;1==ai_tracking_finished&amp;&amp;ai_install_click_trackers();"function"==typeof ai_install_close_buttons&amp;&amp;ai_install_close_buttons(document)},5)}
function ha(a){var e=a?a.split("?")[1]:window.location.search.slice(1);a={};if(e){e=e.split("#")[0];e=e.split("&amp;");for(var p=0;p&lt;e.length;p++){var z=e[p].split("="),C=void 0,x=z[0].replace(/\[\d*\]/,function(I){C=I.slice(1,-1);return""});z="undefined"===typeof z[1]?"":z[1];x=x.toLowerCase();z=z.toLowerCase();a[x]?("string"===typeof a[x]&amp;&amp;(a[x]=[a[x]]),"undefined"===typeof C?a[x].push(z):a[x][C]=z):a[x]=z}}return a}};
ai_run_722305733025 = function(){
ai_document_write=document.write;document.write=function(a){"interactive"==document.readyState?(console.error("document.write called after page load: ",a),"undefined"!=typeof ai_js_errors&amp;&amp;ai_js_errors.push(["document.write called after page load",a,0])):ai_document_write.call(document,a)};
ai_insert ('prepend', '.type-post', b64d ('PGRpdiBjbGFzcz0nY29kZS1ibG9jayBjb2RlLWJsb2NrLTY0JyBzdHlsZT0nbWFyZ2luOiA4cHggMDsgY2xlYXI6IGJvdGg7Jz4KPGEgaHJlZj0iaHR0cHM6Ly9scC5sb2dyb2NrZXQuY29tL2JsZy9sZWFybi1tb3JlIiBjbGFzcz0iZ3V0dGVyLWxpbmsiPjxkaXYgY2xhc3M9Imd1dHRlci1jb250YWluZXIiPgogIDxpbWcgY2xhc3M9Imd1dHRlci10b3AtcmlnaHQiIHNyYz0iaHR0cHM6Ly9ibG9nLmxvZ3JvY2tldC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjIvMTIvZ3V0dGVyLWltYWdlLnBuZyI+CiAgPHAgY2xhc3M9Imd1dHRlci10b3AiPjxiPkxvZ1JvY2tldDo8L2I+IDxicj4gCiAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXNpemU6MTRweDsiPlNlc3Npb24gUmVwbGF5LCBQcm9kdWN0IEFuYWx5dGljcywgJmFtcDsgRXJyb3IgVHJhY2tpbmc8L3NwYW4+PC9wPgogIDxwIGNsYXNzPSJndXR0ZXItYm90dG9tIj5HRVQgU1RBUlRFRCBGUkVFIOKGkjwvcD4KICA8aW1nIGNsYXNzPSJndXR0ZXItYm90dG9tLXJpZ2h0IiBzcmM9Imh0dHBzOi8vYmxvZy5sb2dyb2NrZXQuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIyLzEyL0dyb3VwLTk0MjgucG5nIj4KPC9kaXY+CjwvYT4KCjxzY3JpcHQ+Cgp3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibG9hZCIsIChldmVudCkgPT4gewpjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXJ0aWNsZS1wb3N0Jyk7Cgpjb25zdCBvYnNlcnZlcjIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaGFuZGxlSW50ZXJzZWN0aW9uKTsKb2JzZXJ2ZXIyLm9ic2VydmUodGFyZ2V0KTsKCmZ1bmN0aW9uIGhhbmRsZUludGVyc2VjdGlvbihlbnRyaWVzKSB7CiAgZW50cmllcy5tYXAoKGVudHJ5KSA9PiB7CiAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHsKICAgICAgd2luZG93LmpRdWVyeSgnLmNvZGUtYmxvY2stNjQnKS5mYWRlSW4oMTUwMCk7CiAgICB9IGVsc2UgewogICAgICB3aW5kb3cualF1ZXJ5KCcuY29kZS1ibG9jay02NCcpLmZhZGVPdXQoMTUwMCk7CiAgICB9CiAgfSk7Cn0KCn0pOwo8L3NjcmlwdD4KCgo8c3R5bGU+CkBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDEwNjVweCkgewouY29kZS1ibG9jay02NCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7IHZpc2liaWxpdHk6aGlkZGVuOyBoZWlnaHQ6IDFweDsgd2lkdGg6IDFweDt9Cn0KLmNvZGUtYmxvY2stNjQgLmhpZGRlbiB7ZGlzcGxheTpub25lO30KLmd1dHRlci1saW5rIHt0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO30KLmd1dHRlci1saW5rOmhvdmVyIHt0ZXh0LWRlY29yYXRpb246bm9uZTt9Ci5ndXR0ZXItbGluazpob3ZlciAuZ3V0dGVyLWJvdHRvbSB7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTt9Ci5ndXR0ZXItbGluazpob3ZlciAuZ3V0dGVyLXRvcC1yaWdodCB7dHJhbnNmb3JtOiB0cmFuc2xhdGVZKDdweCk7fQoKLmNvZGUtYmxvY2stNjQgeyBwb3NpdGlvbjogZml4ZWQ7IG1hcmdpbi1sZWZ0OiAtMjIwcHggIWltcG9ydGFudDsgdG9wOiAxMjVweDsgZGlzcGxheTpub25lO30KLmd1dHRlci1jb250YWluZXIgeyAgdHJhbnNpdGlvbjogYWxsIDAuNXMgZWFzZTsKYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KDEyOC40MiUgNDguMzYlIGF0IDcyLjg5JSAyNS44JSwgcmdiYSg4OSwgOTQsIDk0LCAwLjA5KSAwJSwgcmdiYSg4OSwgOTQsIDk0LCAwKSAxMDAlKSAvKiB3YXJuaW5nOiBncmFkaWVudCB1c2VzIGEgcm90YXRpb24gdGhhdCBpcyBub3Qgc3VwcG9ydGVkIGJ5IENTUyBhbmQgbWF5IG5vdCBiZWhhdmUgYXMgZXhwZWN0ZWQgKi8sCmxpbmVhci1ncmFkaWVudCgwZGVnLCByZ2JhKDExOCwgNzQsIDE4OCwgMC4wOSksIHJnYmEoMTE4LCA3NCwgMTg4LCAwLjA5KSksCnJhZGlhbC1ncmFkaWVudCgxMTkuOTklIDM1LjA1JSBhdCA1Ni41OCUgMTAwJSwgcmdiYSgxMTgsIDc0LCAxODgsIDAuMDQpIDAlLCByZ2JhKDExOCwgNzQsIDE4OCwgMCkgMTAwJSkgLyogd2FybmluZzogZ3JhZGllbnQgdXNlcyBhIHJvdGF0aW9uIHRoYXQgaXMgbm90IHN1cHBvcnRlZCBieSBDU1MgYW5kIG1heSBub3QgYmVoYXZlIGFzIGV4cGVjdGVkICovLAogIGxpbmVhci1ncmFkaWVudCgwZGVnLCAjRkZGRkZGLCAjRkZGRkZGKTtib3JkZXI6IDAuNXB4IHNvbGlkIHJnYmEoMTE4LCA3NCwgMTg4LCAwLjA5KTsKYm9yZGVyLXJhZGl1czogMTZweDsKd2lkdGg6IDIwMHB4OwpoZWlnaHQ6IDM2NXB4OwpvdmVyZmxvdzpoaWRkZW47fQoKLmd1dHRlci1jb250YWluZXIgLmd1dHRlci10b3AtcmlnaHQgewp0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlOwogIHJpZ2h0OjBweDsKICB3aWR0aDoyMDBweDsKICBtYXJnaW4tbGVmdDozcHg7CiAgbWFyZ2luLXRvcDozcHg7Cn0KCi5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItYm90dG9tLXJpZ2h0IHtwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMHB4OyByaWdodDogMHB4O30KCi5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItdG9wIHsKZm9udC1zaXplOiAxOHB4OwpsaW5lLWhlaWdodDogMjJweDsKbGV0dGVyLXNwYWNpbmc6IDBlbTsKdGV4dC1hbGlnbjogbGVmdDsKcGFkZGluZzogMHB4IDE2cHg7Cm1hcmdpbi10b3A6IDE2cHg7CmNvbG9yOiAjNzY0QUJDOwp9Ci5ndXR0ZXItY29udGFpbmVyIC5ndXR0ZXItYm90dG9tIHsKY29sb3I6ICM3NjRBQkMgIWltcG9ydGFudDsKZm9udC1zaXplOiAxNnB4Owpmb250LXdlaWdodDogOTAwOwpsaW5lLWhlaWdodDogMjFweDsKbGV0dGVyLXNwYWNpbmc6IDBlbTsKdGV4dC1hbGlnbjogbGVmdDsKcGFkZGluZzogMHB4IDE2cHg7Cm1hcmdpbi10b3A6IDE0cHg7Cn08L3N0eWxlPgo8L2Rpdj4K'));
ai_insert ('prepend', '.graybg', b64d ('PGRpdiBjbGFzcz0nY29kZS1ibG9jayBjb2RlLWJsb2NrLTUyJyBzdHlsZT0nbWFyZ2luOiA4cHggMDsgY2xlYXI6IGJvdGg7Jz4KPGRpdiBjbGFzcz0iZm9vdGVyLWN0YS1jb250YWluZXIiPgogIDxpbWcgc3JjPSJodHRwczovL2Jsb2cubG9ncm9ja2V0LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wNi9mb290ZXItY3RhLWRvdHMtbGVmdC5wbmciIGNsYXNzPSJmb290ZXItY3RhLWJsIj4KICAgIDxpbWcgc3JjPSJodHRwczovL2Jsb2cubG9ncm9ja2V0LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMi8wNi9mb290ZXItY3RhLWRvdHMtcmlnaHQucG5nIiBjbGFzcz0iZm9vdGVyLWN0YS10ciI+CiAgPGRpdiBjbGFzcz0iZm9vdGVyLWN0YS1sb2dvLWNvbnRhaW5lciI+CiAgICA8aW1nIHNyYz0iaHR0cHM6Ly9ibG9nLmxvZ3JvY2tldC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjIvMDkvbG9ncm9ja2V0LWxvZ28tZnJvbnRlbmQtYW5hbHl0aWNzLnBuZyI+CiAgPC9kaXY+CiAgCiAgPGgyPlN0b3AgZ3Vlc3NpbmcgYWJvdXQgeW91ciBkaWdpdGFsIGV4cGVyaWVuY2Ugd2l0aCBMb2dSb2NrZXQ8L2gyPgogIDxhIGhyZWY9Imh0dHBzOi8vbG9ncm9ja2V0LmNvbS9zaWdudXAiPjxkaXYgY2xhc3M9ImZvb3Rlci1jdGEtYnV0dG9uIj5HZXQgc3RhcnRlZCBmb3IgZnJlZTwvZGl2PjwvYT4KICA8L2Rpdj4KCjxzdHlsZT4KQG1lZGlhIGFsbCBhbmQgKG1heC13aWR0aDogNzUwcHgpIHsKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXIgIHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9Ci5mb290ZXItY3RhLWNvbnRhaW5lciBoMiB7d2lkdGg6IDkwJSAhaW1wb3J0YW50OyBwYWRkaW5nLXRvcDogNTBweCAhaW1wb3J0YW50O30KLmZvb3Rlci1jdGEtYnV0dG9uIHt3aWR0aDogNDAlICFpbXBvcnRhbnQ7fQp9Ci5mb290ZXItY3RhLWNvbnRhaW5lciB7Ym9yZGVyLXJhZGl1czogMjBweDtiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTAuMzJkZWcsICM4RjAwRkYgMC4yOCUsIHJnYmEoMTQzLCAwLCAyNTUsIDApIDk5LjcyJSksICM3NjRBQkM7CiAgYm94LXNoYWRvdzogMHB4IDY0cHggNzRweCAwcHggIzc2NEFCQzQwOwogIHBhZGRpbmctYm90dG9tOiAzMHB4OwogIHdpZHRoOiA5NSU7IG1hcmdpbjogMCBhdXRvIDYwcHggYXV0bzsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5mb290ZXItY3RhLXRyIHtwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMzBweDsgcmlnaHQ6IDMwcHg7IH0KCi5mb290ZXItY3RhLWJsIHtwb3NpdGlvbjogYWJzb2x1dGU7IGJvdHRvbTogMzBweDsgbGVmdDogMzBweDsgfQoKLmZvb3Rlci1jdGEtYmwge30KCi5mb290ZXItY3RhLWxvZ28tY29udGFpbmVyIHsKCXdpZHRoOiAyMCU7CglwYWRkaW5nOiAxMHB4IDE1cHg7CiAgZGlzcGxheTpibG9jazsKICAgIG1hcmdpbjogMCBhdXRvOwoJcG9zaXRpb246IHJlbGF0aXZlOwoJYmFja2dyb3VuZDogI2ZhZmFmYTsKYm9yZGVyLXJhZGl1czogMCAwIDIwcHggMjBweDsKfQoKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXI6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHRvcDogMHB4OwogIGhlaWdodDogNTBweDsKICBsZWZ0OiAtMjVweDsKICB3aWR0aDogMjVweDsKICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogMjVweDsKICBib3gtc2hhZG93OiAwIC0yNXB4IDAgMCAjZmFmYWZhOyAKfQoKLmZvb3Rlci1jdGEtbG9nby1jb250YWluZXI6OmFmdGVyIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwcHg7CiAgaGVpZ2h0OiA1MHB4OwogIHJpZ2h0OiAtMjVweDsKICB3aWR0aDogMjVweDsKICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAyNXB4OwogIGJveC1zaGFkb3c6IDAgLTI1cHggMCAwICNmYWZhZmE7IAp9CgouZm9vdGVyLWN0YS1jb250YWluZXIgaDIge2NvbG9yOiAjZmZmZmZmOyB0ZXh0LWFsaWduOiBjZW50ZXI7IHdpZHRoOiA3MCU7IHBvc2l0aW9uOiByZWxhdGl2ZTsgbWFyZ2luOiA0MHB4IGF1dG87fQouZm9vdGVyLWN0YS1jb250YWluZXIgYSB7dGV4dC1kZWNvcmF0aW9uOiBub25lO30KCi5mb290ZXItY3RhLWxvZ28tY29udGFpbmVyIGltZyB7ZGlzcGxheTogYmxvY2s7IG1hcmdpbjogMCBhdXRvOyBwYWRkaW5nOiAxMHB4OyBtYXgtd2lkdGg6IDE1MHB4O30KCi5mb290ZXItY3RhLWJyIHtwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6IDVweDsgYm90dG9tOiA1cHg7fQoKLmZvb3Rlci1jdGEtYnV0dG9uIHtwYWRkaW5nOiAxMHB4IDIwcHg7IGJvcmRlcjogMXB4IHNvbGlkICNmZmZmZmY7IHdpZHRoOiAyMCU7IGJvcmRlci1yYWRpdXM6IDIwcHg7IGNvbG9yOiAjZmZmZmZmOyBwb3NpdGlvbjogcmVsYXRpdmU7IGRpc3BsYXk6YmxvY2s7IG1hcmdpbjogMCBhdXRvIDIwcHggYXV0bzsgdGV4dC1hbGlnbjogY2VudGVyOyB0ZXh0LWRlY29yYXRpb246IG5vbmU7fQo8L3N0eWxlPjwvZGl2Pgo='));
ai_insert ('after', '.site-content', b64d ('PGRpdiBjbGFzcz0nY29kZS1ibG9jayBjb2RlLWJsb2NrLTQ5JyBzdHlsZT0nbWFyZ2luOiA4cHggMDsgY2xlYXI6IGJvdGg7Jz4KPGRpdiBjbGFzcz0ibmV3cy1wb3AgbmV3cy1wb3Atb3V0ZXItd3JhcCB0eXBlc2NyaXB0LXBvcHVwIj48ZGl2IGNsYXNzPSJuZXdzLXBvcC13cmFwIj48ZGl2IGNsYXNzPSJuZXdzLWhlYWRlci13cmFwIj48aDIgY2xhc3M9Im5ld3MtaGVhZGVyIj5IZXkgdGhlcmUhIEFyZSB5b3UgaW50ZXJlc3RlZCBpbiBqb2luaW5nIG91ciBsaXZlIGV2ZW50IGFib3V0IGltcGxlbWVudGluZyBhIHVzZXItY2VudHJpYyBhcHByb2FjaCB0byBmcm9udGVuZCBlcnJvciBtb25pdG9yaW5nPwo8L2gyPjxzcGFuIGNsYXNzPSJjbG9zZSIgc3R5bGU9ImZvbnQtd2VpZ2h0OiAxMDA7Ij5YPC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9Im5ld3MtbWFpbi13cmFwIj48ZGl2IGlkPSJzdXJ2ZXktZW1iZWQiPgo8bm9zY3JpcHQgY2xhc3M9Im5pbmphLWZvcm1zLW5vc2NyaXB0LW1lc3NhZ2UiPgoJTm90aWNlOiBKYXZhU2NyaXB0IGlzIHJlcXVpcmVkIGZvciB0aGlzIGNvbnRlbnQuPC9ub3NjcmlwdD4KPGRpdiBpZD0ibmYtZm9ybS01LWNvbnQiIGNsYXNzPSJuZi1mb3JtLWNvbnQiIGFyaWEtbGl2ZT0icG9saXRlIiBhcmlhLWxhYmVsbGVkYnk9Im5mLWZvcm0tdGl0bGUtNSIgYXJpYS1kZXNjcmliZWRieT0ibmYtZm9ybS1lcnJvcnMtNSIgcm9sZT0iZm9ybSI+CgogICAgPGRpdiBjbGFzcz0ibmYtbG9hZGluZy1zcGlubmVyIj48L2Rpdj4KCjwvZGl2PgogICAgICAgIDwhLS0gVE9ETzogTW92ZSB0byBUZW1wbGF0ZSBGaWxlLiAtLT4KICAgICAgICA8c2NyaXB0PnZhciBmb3JtRGlzcGxheT0xO3ZhciBuZkZvcm1zPW5mRm9ybXN8fFtdO3ZhciBmb3JtPVtdO2Zvcm0uaWQ9JzUnO2Zvcm0uc2V0dGluZ3M9eyJvYmplY3RUeXBlIjoiRm9ybSBTZXR0aW5nIiwiZWRpdEFjdGl2ZSI6dHJ1ZSwidGl0bGUiOiJTaW1wbGUgeWVzIG5vIiwiY3JlYXRlZF9hdCI6IjIwMjEtMDgtMTEgMTg6NTE6MzkiLCJkZWZhdWx0X2xhYmVsX3BvcyI6ImFib3ZlIiwic2hvd190aXRsZSI6IjAiLCJjbGVhcl9jb21wbGV0ZSI6IjEiLCJoaWRlX2NvbXBsZXRlIjoiMSIsImxvZ2dlZF9pbiI6IiIsIndyYXBwZXJfY2xhc3MiOiIiLCJlbGVtZW50X2NsYXNzIjoiIiwia2V5IjoiIiwiYWRkX3N1Ym1pdCI6IjEiLCJjdXJyZW5jeSI6IiIsInJlcGVhdGFibGVfZmllbGRzZXRzIjoiIiwidW5pcXVlX2ZpZWxkX2Vycm9yIjoiQSBmb3JtIHdpdGggdGhpcyB2YWx1ZSBoYXMgYWxyZWFkeSBiZWVuIHN1Ym1pdHRlZC4iLCJub3RfbG9nZ2VkX2luX21zZyI6IiIsInN1Yl9saW1pdF9tc2ciOiJUaGUgZm9ybSBoYXMgcmVhY2hlZCBpdHMgc3VibWlzc2lvbiBsaW1pdC4iLCJjYWxjdWxhdGlvbnMiOltdLCJmb3JtQ29udGVudERhdGEiOlsibGlzdGNoZWNrYm94XzE2MTQzNDk1NDI4MDEiLCJzdWJtaXRfMTYxNDM0ODk1NTY1MSJdLCJjaGFuZ2VFbWFpbEVycm9yTXNnIjoiUGxlYXNlIGVudGVyIGEgdmFsaWQgZW1haWwgYWRkcmVzcyEiLCJjaGFuZ2VEYXRlRXJyb3JNc2ciOiJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlISIsImNvbmZpcm1GaWVsZEVycm9yTXNnIjoiVGhlc2UgZmllbGRzIG11c3QgbWF0Y2ghIiwiZmllbGROdW1iZXJOdW1NaW5FcnJvciI6Ik51bWJlciBNaW4gRXJyb3IiLCJmaWVsZE51bWJlck51bU1heEVycm9yIjoiTnVtYmVyIE1heCBFcnJvciIsImZpZWxkTnVtYmVySW5jcmVtZW50QnkiOiJQbGVhc2UgaW5jcmVtZW50IGJ5ICIsImZvcm1FcnJvcnNDb3JyZWN0RXJyb3JzIjoiUGxlYXNlIGNvcnJlY3QgZXJyb3JzIGJlZm9yZSBzdWJtaXR0aW5nIHRoaXMgZm9ybS4iLCJ2YWxpZGF0ZVJlcXVpcmVkRmllbGQiOiJUaGlzIGlzIGEgcmVxdWlyZWQgZmllbGQuIiwiaG9uZXlwb3RIb25leXBvdEVycm9yIjoiSG9uZXlwb3QgRXJyb3IiLCJmaWVsZHNNYXJrZWRSZXF1aXJlZCI6IkZpZWxkcyBtYXJrZWQgd2l0aCBhbiA8c3BhbiBjbGFzcz1cIm5pbmphLWZvcm1zLXJlcS1zeW1ib2xcIj4qPFwvc3Bhbj4gYXJlIHJlcXVpcmVkIiwiZHJhd2VyRGlzYWJsZWQiOmZhbHNlLCJhbGxvd19wdWJsaWNfbGluayI6MCwiZW1iZWRfZm9ybSI6IiIsIm5pbmphRm9ybXMiOiJOaW5qYSBGb3JtcyIsImZpZWxkVGV4dGFyZWFSVEVJbnNlcnRMaW5rIjoiSW5zZXJ0IExpbmsiLCJmaWVsZFRleHRhcmVhUlRFSW5zZXJ0TWVkaWEiOiJJbnNlcnQgTWVkaWEiLCJmaWVsZFRleHRhcmVhUlRFU2VsZWN0QUZpbGUiOiJTZWxlY3QgYSBmaWxlIiwiZm9ybUhvbmV5cG90IjoiSWYgeW91IGFyZSBhIGh1bWFuIHNlZWluZyB0aGlzIGZpZWxkLCBwbGVhc2UgbGVhdmUgaXQgZW1wdHkuIiwiZmlsZVVwbG9hZE9sZENvZGVGaWxlVXBsb2FkSW5Qcm9ncmVzcyI6IkZpbGUgVXBsb2FkIGluIFByb2dyZXNzLiIsImZpbGVVcGxvYWRPbGRDb2RlRmlsZVVwbG9hZCI6IkZJTEUgVVBMT0FEIiwiY3VycmVuY3lTeW1ib2wiOiImIzM2OyIsInRob3VzYW5kc19zZXAiOiIsIiwiZGVjaW1hbF9wb2ludCI6Ii4iLCJzaXRlTG9jYWxlIjoiZW5fVVMiLCJkYXRlRm9ybWF0IjoibVwvZFwvWSIsInN0YXJ0T2ZXZWVrIjoiMSIsIm9mIjoib2YiLCJwcmV2aW91c01vbnRoIjoiUHJldmlvdXMgTW9udGgiLCJuZXh0TW9udGgiOiJOZXh0IE1vbnRoIiwibW9udGhzIjpbIkphbnVhcnkiLCJGZWJydWFyeSIsIk1hcmNoIiwiQXByaWwiLCJNYXkiLCJKdW5lIiwiSnVseSIsIkF1Z3VzdCIsIlNlcHRlbWJlciIsIk9jdG9iZXIiLCJOb3ZlbWJlciIsIkRlY2VtYmVyIl0sIm1vbnRoc1Nob3J0IjpbIkphbiIsIkZlYiIsIk1hciIsIkFwciIsIk1heSIsIkp1biIsIkp1bCIsIkF1ZyIsIlNlcCIsIk9jdCIsIk5vdiIsIkRlYyJdLCJ3ZWVrZGF5cyI6WyJTdW5kYXkiLCJNb25kYXkiLCJUdWVzZGF5IiwiV2VkbmVzZGF5IiwiVGh1cnNkYXkiLCJGcmlkYXkiLCJTYXR1cmRheSJdLCJ3ZWVrZGF5c1Nob3J0IjpbIlN1biIsIk1vbiIsIlR1ZSIsIldlZCIsIlRodSIsIkZyaSIsIlNhdCJdLCJ3ZWVrZGF5c01pbiI6WyJTdSIsIk1vIiwiVHUiLCJXZSIsIlRoIiwiRnIiLCJTYSJdLCJyZWNhcHRjaGFDb25zZW50TWlzc2luZyI6InJlQ2FwY3RoYSB2YWxpZGF0aW9uIGNvdWxkbiYjMDM5O3QgbG9hZC4iLCJyZWNhcHRjaGFNaXNzaW5nQ29va2llIjoicmVDYXB0Y2hhIHYzIHZhbGlkYXRpb24gY291bGRuJiMwMzk7dCBsb2FkIHRoZSBjb29raWUgbmVlZGVkIHRvIHN1Ym1pdCB0aGUgZm9ybS4iLCJyZWNhcHRjaGFDb25zZW50RXZlbnQiOiJBY2NlcHQgcmVDYXB0Y2hhIGNvb2tpZXMgYmVmb3JlIHNlbmRpbmcgdGhlIGZvcm0uIiwiY3VycmVuY3lfc3ltYm9sIjoiIiwiYmVmb3JlRm9ybSI6IiIsImJlZm9yZUZpZWxkcyI6IiIsImFmdGVyRmllbGRzIjoiIiwiYWZ0ZXJGb3JtIjoiIn07Zm9ybS5maWVsZHM9W3sib2JqZWN0VHlwZSI6IkZpZWxkIiwib2JqZWN0RG9tYWluIjoiZmllbGRzIiwiZWRpdEFjdGl2ZSI6ZmFsc2UsIm9yZGVyIjoxLCJpZEF0dHJpYnV0ZSI6ImlkIiwidHlwZSI6Imxpc3RjaGVja2JveCIsImxhYmVsIjoiIiwia2V5IjoibGlzdGNoZWNrYm94XzE2MTQzNDk1NDI4MDEiLCJsYWJlbF9wb3MiOiJhYm92ZSIsInJlcXVpcmVkIjoiIiwib3B0aW9ucyI6W3siZXJyb3JzIjpbXSwibWF4X29wdGlvbnMiOjAsImxhYmVsIjoiWWVhaCIsInZhbHVlIjoieWVhaCIsImNhbGMiOiIiLCJzZWxlY3RlZCI6MCwib3JkZXIiOjAsInNldHRpbmdNb2RlbCI6eyJzZXR0aW5ncyI6ZmFsc2UsImhpZGVfbWVyZ2VfdGFncyI6ZmFsc2UsImVycm9yIjpmYWxzZSwibmFtZSI6Im9wdGlvbnMiLCJ0eXBlIjoib3B0aW9uLXJlcGVhdGVyIiwibGFiZWwiOiJPcHRpb25zIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJuZi1hZGQtbmV3XCI+QWRkIE5ldzxcL2E+IDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJleHRyYSBuZi1vcGVuLWltcG9ydC10b29sdGlwXCI+PGkgY2xhc3M9XCJmYSBmYS1zaWduLWluXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PFwvaT4gSW1wb3J0PFwvYT4iLCJ3aWR0aCI6ImZ1bGwiLCJncm91cCI6IiIsInZhbHVlIjpbeyJsYWJlbCI6Ik9uZSIsInZhbHVlIjoib25lIiwiY2FsYyI6IiIsInNlbGVjdGVkIjowLCJvcmRlciI6MH0seyJsYWJlbCI6IlR3byIsInZhbHVlIjoidHdvIiwiY2FsYyI6IiIsInNlbGVjdGVkIjowLCJvcmRlciI6MX0seyJsYWJlbCI6IlRocmVlIiwidmFsdWUiOiJ0aHJlZSIsImNhbGMiOiIiLCJzZWxlY3RlZCI6MCwib3JkZXIiOjJ9XSwiY29sdW1ucyI6eyJsYWJlbCI6eyJoZWFkZXIiOiJMYWJlbCIsImRlZmF1bHQiOiIifSwidmFsdWUiOnsiaGVhZGVyIjoiVmFsdWUiLCJkZWZhdWx0IjoiIn0sImNhbGMiOnsiaGVhZGVyIjoiQ2FsYyBWYWx1ZSIsImRlZmF1bHQiOiIifSwic2VsZWN0ZWQiOnsiaGVhZGVyIjoiPHNwYW4gY2xhc3M9XCJkYXNoaWNvbnMgZGFzaGljb25zLXllc1wiPjxcL3NwYW4+IiwiZGVmYXVsdCI6MH19fX0seyJlcnJvcnMiOltdLCJtYXhfb3B0aW9ucyI6MCwibGFiZWwiOiJObyIsInZhbHVlIjoibm8iLCJjYWxjIjoiIiwic2VsZWN0ZWQiOjAsIm9yZGVyIjoxLCJzZXR0aW5nTW9kZWwiOnsic2V0dGluZ3MiOmZhbHNlLCJoaWRlX21lcmdlX3RhZ3MiOmZhbHNlLCJlcnJvciI6ZmFsc2UsIm5hbWUiOiJvcHRpb25zIiwidHlwZSI6Im9wdGlvbi1yZXBlYXRlciIsImxhYmVsIjoiT3B0aW9ucyA8YSBocmVmPVwiI1wiIGNsYXNzPVwibmYtYWRkLW5ld1wiPkFkZCBOZXc8XC9hPiA8YSBocmVmPVwiI1wiIGNsYXNzPVwiZXh0cmEgbmYtb3Blbi1pbXBvcnQtdG9vbHRpcFwiPjxpIGNsYXNzPVwiZmEgZmEtc2lnbi1pblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxcL2k+IEltcG9ydDxcL2E+Iiwid2lkdGgiOiJmdWxsIiwiZ3JvdXAiOiIiLCJ2YWx1ZSI6W3sibGFiZWwiOiJPbmUiLCJ2YWx1ZSI6Im9uZSIsImNhbGMiOiIiLCJzZWxlY3RlZCI6MCwib3JkZXIiOjB9LHsibGFiZWwiOiJUd28iLCJ2YWx1ZSI6InR3byIsImNhbGMiOiIiLCJzZWxlY3RlZCI6MCwib3JkZXIiOjF9LHsibGFiZWwiOiJUaHJlZSIsInZhbHVlIjoidGhyZWUiLCJjYWxjIjoiIiwic2VsZWN0ZWQiOjAsIm9yZGVyIjoyfV0sImNvbHVtbnMiOnsibGFiZWwiOnsiaGVhZGVyIjoiTGFiZWwiLCJkZWZhdWx0IjoiIn0sInZhbHVlIjp7ImhlYWRlciI6IlZhbHVlIiwiZGVmYXVsdCI6IiJ9LCJjYWxjIjp7ImhlYWRlciI6IkNhbGMgVmFsdWUiLCJkZWZhdWx0IjoiIn0sInNlbGVjdGVkIjp7ImhlYWRlciI6IjxzcGFuIGNsYXNzPVwiZGFzaGljb25zIGRhc2hpY29ucy15ZXNcIj48XC9zcGFuPiIsImRlZmF1bHQiOjB9fX0sIm1hbnVhbF92YWx1ZSI6dHJ1ZX1dLCJjb250YWluZXJfY2xhc3MiOiIiLCJlbGVtZW50X2NsYXNzIjoiIiwiYWRtaW5fbGFiZWwiOiIiLCJoZWxwX3RleHQiOiIiLCJkcmF3ZXJEaXNhYmxlZCI6ZmFsc2UsImZpZWxkX2xhYmVsIjoiIiwiZmllbGRfa2V5IjoibGlzdGNoZWNrYm94XzE2MTQzNDk1NDI4MDEiLCJpZCI6MTksImJlZm9yZUZpZWxkIjoiIiwiYWZ0ZXJGaWVsZCI6IiIsInZhbHVlIjoiIiwicGFyZW50VHlwZSI6Imxpc3QiLCJlbGVtZW50X3RlbXBsYXRlcyI6WyJsaXN0Y2hlY2tib3giLCJpbnB1dCJdLCJvbGRfY2xhc3NuYW1lIjoibGlzdC1jaGVja2JveCIsIndyYXBfdGVtcGxhdGUiOiJ3cmFwIn0seyJvYmplY3RUeXBlIjoiRmllbGQiLCJvYmplY3REb21haW4iOiJmaWVsZHMiLCJlZGl0QWN0aXZlIjpmYWxzZSwib3JkZXIiOjMsImlkQXR0cmlidXRlIjoiaWQiLCJ0eXBlIjoic3VibWl0IiwibGFiZWwiOiJTdWJtaXQiLCJwcm9jZXNzaW5nX2xhYmVsIjoiUHJvY2Vzc2luZyIsImNvbnRhaW5lcl9jbGFzcyI6IiIsImVsZW1lbnRfY2xhc3MiOiIiLCJrZXkiOiJzdWJtaXRfMTYxNDM0ODk1NTY1MSIsImZpZWxkX2xhYmVsIjoiU3VibWl0IiwiZmllbGRfa2V5Ijoic3VibWl0XzE2MTQzNDg5NTU2NTEiLCJpZCI6MTgsImJlZm9yZUZpZWxkIjoiIiwiYWZ0ZXJGaWVsZCI6IiIsInZhbHVlIjoiIiwibGFiZWxfcG9zIjoiYWJvdmUiLCJwYXJlbnRUeXBlIjoidGV4dGJveCIsImVsZW1lbnRfdGVtcGxhdGVzIjpbInN1Ym1pdCIsImJ1dHRvbiIsImlucHV0Il0sIm9sZF9jbGFzc25hbWUiOiIiLCJ3cmFwX3RlbXBsYXRlIjoid3JhcC1uby1sYWJlbCJ9XTtuZkZvcm1zLnB1c2goZm9ybSk7PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCBpZD0idG1wbC1uZi1tcC1mb3JtLWNvbnRlbnQiIHR5cGU9InRleHQvdGVtcGxhdGUiPgoJPGRpdiBjbGFzcz0ibmYtbXAtaGVhZGVyIj48L2Rpdj4KCTxkaXYgY2xhc3M9Im5mLW1wLWJvZHkiPjwvZGl2PgoJPGRpdiBjbGFzcz0ibmYtbXAtZm9vdGVyIj48L2Rpdj4KPC9zY3JpcHQ+CgoKPHNjcmlwdCBpZD0idG1wbC1uZi1tcC1oZWFkZXIiIHR5cGU9InRleHQvdGVtcGxhdGUiPgoJe3t7IGRhdGEucmVuZGVyUHJvZ3Jlc3NCYXIoKSB9fX0KCXt7eyBkYXRhLnJlbmRlckJyZWFkY3J1bWJzKCkgfX19Cgl7e3sgZGF0YS5yZW5kZXJQYXJ0VGl0bGUoKSB9fX0KPC9zY3JpcHQ+CjxzY3JpcHQgaWQ9InRtcGwtbmYtbXAtcGFydC10aXRsZSIgdHlwZT0idGV4dC90ZW1wbGF0ZSI+Cgk8aDM+CgkJe3t7IGRhdGEudGl0bGUgfX19Cgk8L2gzPgo8L3NjcmlwdD4KCjxzY3JpcHQgaWQ9InRtcGwtbmYtbXAtZm9vdGVyIiB0eXBlPSJ0ZXh0L3RlbXBsYXRlIj4KCXt7eyBkYXRhLnJlbmRlck5leHRQcmV2aW91cygpIH19fQo8L3NjcmlwdD4KCjxzY3JpcHQgaWQ9InRtcGwtbmYtbXAtbmV4dC1wcmV2aW91cyIgdHlwZT0idGV4dC90ZW1wbGF0ZSI+Cgk8dWwgY2xhc3M9Im5mLW5leHQtcHJldmlvdXMiPgoJCTwjIGlmICggZGF0YS5zaG93UHJldmlvdXMgKSB7ICM+CgkJPGxpIGNsYXNzPSJuZi1wcmV2aW91cy1pdGVtIj4KCQkJPGlucHV0IHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5mLXByZXZpb3VzIiB2YWx1ZT0ie3t7IGRhdGEucHJldkxhYmVsIH19fSIgLz4KCQk8L2xpPgoJCTwjIH0gIz4KCgkJPCMgaWYgKCBkYXRhLnNob3dOZXh0ICkgeyAjPgoJCTxsaSBjbGFzcz0ibmYtbmV4dC1pdGVtIj4KCQkJPGlucHV0IHR5cGU9ImJ1dHRvbiIgY2xhc3M9Im5mLW5leHQiIHZhbHVlPSJ7e3sgZGF0YS5uZXh0TGFiZWwgfX19IiAvPgoJCTwvbGk+CgkJPCMgfSAjPgoJPC91bD4KPC9zY3JpcHQ+Cgo8c2NyaXB0IGlkPSJ0bXBsLW5mLW1wLWJyZWFkY3J1bWJzIiB0eXBlPSJ0ZXh0L3RlbXBsYXRlIj4KCTx1bCBjbGFzcz0ibmYtYnJlYWRjcnVtYnMiPgoJCTwjIF8uZWFjaCggZGF0YS5wYXJ0cywgZnVuY3Rpb24oIHBhcnQsIGluZGV4ICkgeyAjPgoJCTxsaSBjbGFzcz0ie3t7ICggZGF0YS5jdXJyZW50SW5kZXggPT0gaW5kZXggKSA/ICdhY3RpdmUnIDogJycgfX19IHt7eyAoIHBhcnQuZXJyb3JzICkgPyAnZXJyb3JzJyA6ICcnIH19fSI+CgkJCTxhIGhyZWY9IiMiIGNsYXNzPSJuZi1icmVhZGNydW1iIiBkYXRhLWluZGV4PSJ7e3sgaW5kZXggfX19Ij57e3sgKCBwYXJ0LmVycm9ycyApID8gJycgOiAnJyB9fX0ge3t7IHBhcnQudGl0bGUgfX19PC9hPgoJCTwvbGk+CgkJPCMgfSApOyAjPgoJPC91bD4KPC9zY3JpcHQ+Cgo8c2NyaXB0IGlkPSJ0bXBsLW5mLW1wLXByb2dyZXNzLWJhciIgdHlwZT0idGV4dC90ZW1wbGF0ZSI+CiAgICA8ZGl2IGNsYXNzPSJuZi1wcm9ncmVzcy1jb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im5mLXByb2dyZXNzIiBzdHlsZT0id2lkdGg6IHt7eyBkYXRhLnBlcmNlbnQgfX19JTsiPjwvZGl2PgogICAgPC9kaXY+Cjwvc2NyaXB0PiAgICAgICAgPHNjcmlwdCBpZD0ibmYtdG1wbC1jZWxsIiB0eXBlPSJ0ZXh0L3RlbXBsYXRlIj4KICAgICAgICAgICAgPG5mLWZpZWxkcz48L25mLWZpZWxkcz4KICAgICAgICA8L3NjcmlwdD4KCiAgICAgICAgPHNjcmlwdCBpZD0ibmYtdG1wbC1yb3ciIHR5cGU9InRleHQvdGVtcGxhdGUiPgogICAgICAgICAgICA8bmYtY2VsbHM+PC9uZi1jZWxscz4KICAgICAgICA8L3NjcmlwdD4KCiAgICAgICAgCQo8YSBjbGFzcz0iYnV0dG9uIGJ1dHRvbi1oaWRlIiBocmVmPSJodHRwczovL2xwLmxvZ3JvY2tldC5jb20vd2ViaW5hci11c2VyLWNlbnRyaWMtZXJyb3ItbW9uaXRvcmluZyIgdGFyZ2V0PSJfYmxhbmsiPlNpZ24gdXAgaGVyZTwvYT4KPC9kaXY+PC9kaXY+CjwvZGl2PjwvZGl2PjwvZGl2PgoKPHN0eWxlPgojbmYtZmllbGQtMThfMi1jb250YWluZXIge2Rpc3BsYXk6bm9uZTt9CgouYnV0dG9uLWhpZGUgewogICAgb3BhY2l0eTowOwogICAgaGVpZ2h0OjFweDsKICAgIGRpc3BsYXk6YmxvY2s7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjNzY0YWJjOwogICAgYm9yZGVyLXJhZGl1czogNXB4OwogICAgbGluZS1oZWlnaHQ6IDEuMjsKICAgIGNvbG9yOiAjMjIyMjIyOwogICAgdGV4dC1hbGlnbjpjZW50ZXI7Cn0KLmNvZGUtYmxvY2stNDkgLmF1dGgwLWxvY2staGVhZGVyIHtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9Ci5jb2RlLWJsb2NrLTQ5IC5hdXRoLWxvY2stc29jaWFsLWJ1dHRvbnMtcGFuZSB7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fQouY29kZS1ibG9jay00OSAjZW1iZWRkZWQtbG9jayAuYXV0aDAtbG9jay1jb250ZW50LXdyYXBwZXIgZGl2Om50aC1jaGlsZCgyKSBzcGFuIGRpdiBkaXYgZGl2IGRpdiBkaXYgZGl2IGRpdiBkaXYgZGl2IGRpdjpudGgtY2hpbGQoMykgcCB7ZGlzcGxheTpub25lICFpbXBvcnRhbnQ7fQouY29kZS1ibG9jay00OSAuYXV0aDAtbG9jay13aWRnZXQge3dpZHRoOiAxMDAlICFpbXBvcnRhbnQ7IG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50O30KLmNvZGUtYmxvY2stNDkgLmF1dGgwLWxvY2suYXV0aDAtbG9jayAuYXV0aDAtbG9jay1mb3JtIHtwYWRkaW5nOiAwcHggMjBweCAyMHB4IDIwcHggIWltcG9ydGFudDt9Ci5jb2RlLWJsb2NrLTQ5ICNuZi1maWVsZC0xOC1jb250YWluZXIge2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O30KCi5jb2RlLWJsb2NrLTQ5ICNlbWJlZGRlZC1sb2NrIHtkaXNwbGF5OiBub25lO30KCi5jb2RlLWJsb2NrLTQ5IC5uZXdzLXN1Yi1oZWFkIHsKICAgIGRpc3BsYXk6bm9uZTsKICAgIH0KCi5jb2RlLWJsb2NrLTQ5e3otaW5kZXg6MTA7ZGlzcGxheTpub25lO21hcmdpbjogMCAhaW1wb3J0YW50OyBwb3NpdGlvbjogZml4ZWQ7IHdpZHRoOiAyMiU7IGJvdHRvbTogMDsgbGVmdDogMDsgYmFja2dyb3VuZDogI2ZmZmZmZjtmaWx0ZXI6IGRyb3Atc2hhZG93KDdweCAwcHggMjBweCAjZDdkN2Q3KTt9IAoKI3dvb3RyaWMtbW9kYWwge2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50O30KCi5jb2RlLWJsb2NrLTQ5IC5mYWRlSW4gewogICAgb3BhY2l0eToxICFpbXBvcnRhbnQ7CiAgICBoZWlnaHQ6YXV0byAhaW1wb3J0YW50Owp9CgouY29kZS1ibG9jay00OSAuZmFkZUluMiB7CiAgICBvcGFjaXR5OjEgIWltcG9ydGFudDsKICAgIGhlaWdodDphdXRvICFpbXBvcnRhbnQ7CiAgICBwYWRkaW5nOiA3cHg7CiAgICBtYXJnaW4tYm90dG9tOjEwcHg7Cn0KCi5jb2RlLWJsb2NrLTQ5IC5mYWRlT3V0IHsKICAgIG9wYWNpdHk6MCAhaW1wb3J0YW50Owp9CgouY29kZS1ibG9jay00OSAjbmYtZmllbGQtNi1jb250YWluZXIgewogICAgb3BhY2l0eTowOwogICAgaGVpZ2h0OiAxcHg7CiAgICB9CiAKLmNvZGUtYmxvY2stNDkgI25mLWZpZWxkLTctY29udGFpbmVyIHsKICAgIG9wYWNpdHk6MDsKICAgIGhlaWdodDogMXB4OwogICAgfSAgICAKICAgIAouY29kZS1ibG9jay00OSAjbmYtZmllbGQtMTktY29udGFpbmVyIC5uZi1maWVsZC1sYWJlbCB7CmRpc3BsYXk6bm9uZTsKICAgIH0gICAgCiAgICAKLmNvZGUtYmxvY2stNDkgLmxpc3RjaGVja2JveC13cmFwIC5uZi1maWVsZC1lbGVtZW50IGxhYmVsOmFmdGVyIHtsZWZ0OiAtMjBweCAhaW1wb3J0YW50O30KLmNvZGUtYmxvY2stNDkgLmxpc3RjaGVja2JveC1jb250YWluZXIgLm5mLWZpZWxkLWVsZW1lbnQgbGFiZWwge21hcmdpbi1sZWZ0OiAyMHB4ICFpbXBvcnRhbnQ7fQoKLmNvZGUtYmxvY2stNDkgLm5mLWZpZWxkLWNvbnRhaW5lciB7bWFyZ2luLWJvdHRvbTogMHB4ICFpbXBvcnRhbnQ7fQouY29kZS1ibG9jay00OSAubmYtZm9ybS1jb250ZW50IHtwYWRkaW5nOiAwcHggIWltcG9ydGFudDt9Ci5jb2RlLWJsb2NrLTQ5IC5uZi1mb3JtLWNvbnRlbnQgaW5wdXRbdHlwZT1idXR0b25dIHtiYWNrZ3JvdW5kOiM0QUJDNzYgIWltcG9ydGFudDsgaGVpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7IHBhZGRpbmc6IDEwcHggMjBweCAhaW1wb3J0YW50O30KLmNvZGUtYmxvY2stNDkgLm5mLWZvcm0tY29udGVudCBpbnB1dFt0eXBlPWJ1dHRvbl06aG92ZXIge2NvbG9yOiAjMDAwMDAwICFpbXBvcnRhbnQ7fQouY29kZS1ibG9jay00OSAubGlzdGNoZWNrYm94LXdyYXAgLm5mLWZpZWxkLWVsZW1lbnQgbGFiZWw6YWZ0ZXIge3dpZHRoOiAxNXB4ICFpbXBvcnRhbnQ7IGhlaWdodDogMTVweCAhaW1wb3J0YW50O30KLmNvZGUtYmxvY2stNDkgLm5mLWZvcm0tY29udGVudCBsYWJlbCB7CiAgICBmb250LXNpemU6IDE2cHggIWltcG9ydGFudDsKICAgIGxpbmUtaGVpZ2h0OiAxOHB4ICFpbXBvcnRhbnQ7CiAgICBtYXJnaW4tYm90dG9tOiAwcHggIWltcG9ydGFudDsKfQouY29kZS1ibG9jay00OSAubmYtZmllbGQtbGFiZWwgbGFiZWwge2ZvbnQtd2VpZ2h0OiBub3JtYWw7fQouY29kZS1ibG9jay00OSAubmYtZm9ybS1jb250ZW50IC5saXN0Y2hlY2tib3gtd3JhcCBsaSB7d2lkdGg6IDQ4JTsgZmxvYXQ6IGxlZnQ7fQouY29kZS1ibG9jay00OSAubmYtZm9ybS10aXRsZSB7ZGlzcGxheTpub25lO30KCi5jb2RlLWJsb2NrLTQ5IC5uZXdzLXBvcC13cmFwIHttYXJnaW46IDAgYXV0bzsgd2lkdGg6IDkwJTt9CgouY29kZS1ibG9jay00OSAubmYtZm9ybS1jb250ZW50IGlucHV0IHttYXgtd2lkdGg6IDk3JTt9CgoKLmNvZGUtYmxvY2stNDkgLm5ld3MtcG9wLW91dGVyLXdyYXA6OmJlZm9yZSB7Y29udGVudDogIiI7CiAgICB3aWR0aDogMDsKICAgIGhlaWdodDogMDsKICAgIGJvcmRlci13aWR0aDogOHB4OwogICAgYm9yZGVyLXRvcDogOHB4IHNvbGlkIHRyYW5zcGFyZW50OwogICAgYm9yZGVyLWJvdHRvbTogOHB4IHNvbGlkIHRyYW5zcGFyZW50OwogICAgYm9yZGVyLWxlZnQ6IDEwcHggc29saWQgI2U2ZGVmMzsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIG1hcmdpbi10b3A6IDJweDsKfQoKLmNvZGUtYmxvY2stNDkgLm5ld3MtaGVhZGVyLXdyYXAgaDIgewogICAgZm9udC1zaXplOiAxNnB4OwogICAgZm9udC1mYW1pbHk6ICdhdmVuaXInLCdoZWx2ZXRpY2EnLHNhbnMtc2VyaWY7CiAgICBjb2xvcjogIzc2NGFiYzsKICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgIG1hcmdpbjogMCBhdXRvO3RleHQtYWxpZ246bGVmdDt9CiAgICAKLmNvZGUtYmxvY2stNDkgLm5ld3MtaGVhZGVyLXdyYXAgcCB7IGRpc3BsYXk6IGJsb2NrOwogICAgbWFyZ2luOiAwIGF1dG87CiAgICBmb250LXNpemU6IDE0cHg7fQogICAgCi5jb2RlLWJsb2NrLTQ5IC5uZXdzLW1haW4td3JhcCB7cG9zaXRpb246IHJlbGF0aXZlOwogICAgZGlzcGxheTogYmxvY2s7CiAgICBtYXJnaW46IDhweCBhdXRvIDBweCBhdXRvO30KCi5jb2RlLWJsb2NrLTQ5IC5uZXdzLXBvcC1vdXRlci13cmFwe3BhZGRpbmc6IDIwcHggMHB4IDVweCAwcHg7fQoKLmNvZGUtYmxvY2stNDkgI3N1cnZleS1lbWJlZCB7CiAgICBtYXJnaW46IDAgYXV0bzsKfQoKCi5jb2RlLWJsb2NrLTQ5IC5jbG9zZSB7cG9zaXRpb246YWJzb2x1dGU7IHRvcDogOHB4OyByaWdodDo4cHg7Zm9udC1zaXplOjE1cHg7IGNvbG9yOiAjYzhjOGM4O30KICAgIAogICAgQG1lZGlhIGFsbCBhbmQgKG1pbi13aWR0aDogMTYwMHB4KXsKICAgIC5jb2RlLWJsb2NrLTQ5IC5uZXdzLWJ1dHRvbiB7d2lkdGg6IDUzJTt9CiAgICB9CiAgICAKICAgIEBtZWRpYSBhbGwgYW5kIChtYXgtd2lkdGg6IDcwMHB4KXsKICAgIC5jb2RlLWJsb2NrLTQ5IHt3aWR0aDogMTAwJTsgbWFyZ2luLWJvdHRvbTogMTVweDt9CiAgICAuY2xvc2Uge21hcmdpbi1sZWZ0OiAzNXB4O30KICAgIC5uZXdzLWJ1dHRvbiB7d2lkdGg6IDIwMHB4OyBtYXJnaW46IDVweCA2NXB4IDE1cHggYXV0bzt9CiAgICAubmV3cy1oZWFkZXItd3JhcCBoMiB7CiAgICBwYWRkaW5nOiAwcHg7CiAgICB3aWR0aDogMTAwJTt9CiAgICB9CiAgICAubmV3cy1tYWluLXdyYXAge21hcmdpbi10b3A6MHB4O30KICAgIAogICAgPC9zdHlsZT4KICAgIAoKCgo8c2NyaXB0PgpqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogIGpRdWVyeSgnLmNvZGUtYmxvY2stNDkgLmNsb3NlJykuY2xpY2soZnVuY3Rpb24oKSB7CiAgICBqUXVlcnkoJy5jb2RlLWJsb2NrLTQ5JykuaGlkZSgpOwogICAgYnVpbGRCbG9ncmVzcG9uc2UoKTsKICB9KTsKICAKICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2Jsb2dQb2xsJykgIT09ICdzcGVlZHdheXEyJykgewogICAgc2V0VGltZW91dCgKICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgalF1ZXJ5KCcuY29kZS1ibG9jay00OScpLnNsaWRlRG93bigxMDAwKTsKICAgICAgfSwgMTUwMDApOwogIAogICAgdmFyIGJ1aWxkQmxvZ3Jlc3BvbnNlID0gZnVuY3Rpb24oKSB7CiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdibG9nUG9sbCcsICdzcGVlZHdheXEyJyk7CiAgICB9OwogIH0KICAvLyBjaGFuZ2UgdGhlIHVuZGVyc2NvcmUgMTlfMi0wLCAjbmYtZmllbGQtMTlfMi1jb250YWluZXIKICAgICAgalF1ZXJ5KCBkb2N1bWVudCApCiAgICAub24oJ2NsaWNrJywgJyNuZi1maWVsZC0xOS0wJywgZnVuY3Rpb24oKSB7CiAgICAgICAgalF1ZXJ5KCcuY29kZS1ibG9jay00OSAjbmYtZmllbGQtMTlfMi1jb250YWluZXInKS5kZWxheSgyMDApLmFkZENsYXNzKCdmYWRlb3V0JykuZGVsYXkoMjAwKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgICAgIGpRdWVyeSgnbmYtZmllbGQnKS5kZWxheSgyMDApLmFkZENsYXNzKCdmYWRlb3V0JykuZGVsYXkoMjAwKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpOwogICAgalF1ZXJ5KCcubmV3cy1oZWFkZXInKS5kZWxheSgyMDApLnJlcGxhY2VXaXRoKCc8aDIgY2xhc3M9Im5ld3MtaGVhZGVyIj5HcmVhdCE8YnIvPkNsaWNrIGJlbG93IHRvIGpvaW4gb3VyIHVwY29taW5nIHdlYmluYXI6PC9oMj4nKTsKICAgIGpRdWVyeSgnLm5ld3Mtc3ViLWhlYWQnKS5kZWxheSg4MDApLnNsaWRlRG93bigxMDAwKTsKICAgIGpRdWVyeSgnLmJ1dHRvbi1oaWRlJykuZGVsYXkoODAwKS5hZGRDbGFzcygnZmFkZUluJykuZGVsYXkoMjAwKS5jc3MoJ2hlaWdodCcsICdhdXRvJykuY3NzKCdwYWRkaW5nJywgJzZweCcpLmNzcygnbWFyZ2luLWJvdHRvbScsICc0cHgnKTsKICAgIH0pOwogIC8vY2hhbmdlIHRoZSAjbmYtZmllbGQtMTlfMi0xCiAgICAgICAgalF1ZXJ5KCBkb2N1bWVudCApLm9uKCdjbGljaycsICcjbmYtZmllbGQtMTlfMi0xJywgZnVuY3Rpb24oKSB7CiAgICAgIGJ1aWxkQmxvZ3Jlc3BvbnNlKCk7CiAgICBqUXVlcnkoJy5jb2RlLWJsb2NrLTQ5JykuaGlkZSgpOwogICAgICB9KTsKICAgICAgICAgIGpRdWVyeSggZG9jdW1lbnQgKS5vbignY2xpY2snLCAnI25mLWZpZWxkLTE5LTEnLCBmdW5jdGlvbigpIHsKICAgICAgYnVpbGRCbG9ncmVzcG9uc2UoKTsKICAgIGpRdWVyeSgnLmNvZGUtYmxvY2stNDknKS5oaWRlKCk7CiAgICAgIH0pOwogICAgCgogIAp9KTsKICAgIAo8L3NjcmlwdD48L2Rpdj4K'));
};
if (document.readyState === 'complete' || (document.readyState !== 'loading' &amp;&amp; !document.documentElement.doScroll)) ai_run_722305733025 (); else document.addEventListener ('DOMContentLoaded', ai_run_722305733025);
ai_js_code = true;
</meta>

</em></strong></td></tr></tbody></strong></th></tr></thead></table></article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/routing-go-gorilla-mux/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Android CI/CD using GitHub Actions - LogRocket Blog</title>
			<link>https://blog.logrocket.com/android-ci-cd-using-github-actions/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/android-ci-cd-using-github-actions/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Android CI/CD using GitHub Actions - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/android-ci-cd-using-github-actions/">Android CI/CD using GitHub Actions - LogRocket Blog</a>
<div class="mainheading">

 <div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/ivangarza/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/05/ivan-garza.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/05/ivan-garza.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/ivangarza/">
Ivan Garza <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Ivan is an Android engineer at Mixhalo, a passionate fútbol fan, and an amateur salsa maker.</span>
</div>
</div>
<h1 class="posttitle">Android CI/CD using GitHub Actions</h1>
<p>
<span class="post-date"><time class="post-date">
March 16, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2370</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<article class="article-post">
 <p>CI/CD is a DevOps practice that allows development teams to push changes that get automatically tested and sent out for delivery and deployment. <a href="https://about.gitlab.com/topics/ci-cd/">According to GitLab</a>, a good CI/CD pipeline can maximize development time by improving an organization’s productivity, increasing efficiency, and streamlining workflows through built-in automation, testing, and collaboration.</p>
<p>Modern software development teams have became increasingly reliant on CI/CD practices — or continuous integration and continuous delivery, to be more precise — as they save developers and testers alike precious time by automating much of the manual labor that is needed to get the code from a development state and into production.</p>
<p>With the increased interest and dependence of software companies on CI/CD tools, many new options have been appearing that offer similar products aimed at facilitating and automating much of the development process for programmers. In this article, I will go over one such tool, GitHub Actions, and its application into modern Android development.</p>
<p><em>Jump ahead</em>:</p>
<ul>
<li><a href="#introduction-github-actions">An introduction to GitHub Actions</a></li>
<li><a href="#why-github-actions">Why GitHub Actions?</a></li>
<li><a href="#advantages">Advantages</a></li>
<li><a href="#disadvantages">Disadvantages</a></li>
<li><a href="#github-actions-android">GitHub Actions for Android</a></li>
<li><a href="#android-specific-actions">Android-specific Actions</a></li>
<li><a href="#advanced-github-actions-topics">Advanced GitHub Actions topics</a></li>
<li><a href="#build-sign-release-build">Build and sign a release build</a></li>
<li><a href="#deploying-into-github-packages">Deploying into GitHub packages</a></li>
</ul>
<h2 id="introduction-github-actions">An introduction to GitHub Actions</h2>
<p>GitHub Actions is GitHub’s answer to the increasing demand for good and simple CI/CD tools. Because of the virtual proximity of the GitHub Actions pipeline to your code, this tool also allows for them to go beyond just DevOps and lets you run workflows when other events happen in your repository. For example, you can run a workflow to automatically add the appropriate labels whenever someone creates a new issue in your repository.</p>
<p>Instead of diving into GitHub Actions’ broad functionality, we’ll instead do a quick comparison with some of its competition, and follow that by showing how to get it set up for Android. For more information about what GitHub Actions are and what they do, check out what my fellow LogRocketeer had to say about the topic <a href="https://blog.logrocket.com/flutter-ci-cd-using-github-actions/">in this article</a>, or go straight to the source and read the <a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">GitHub Actions official documentation</a>.</p>
<h2 id="why-github-actions">Why GitHub Actions?</h2>
<p>Before continuing our exploration into why GitHub Actions is a better option than other CI/CD tools, let’s first make a couple of disclaimers. First, for the purpose of this exploration, I have briefly researched alternative tools like <a href="https://bitrise.io/">Bitrise</a>, <a href="https://circleci.com/">CircleCI,</a> and <a href="https://www.jetbrains.com/teamcity/">TeamCity by JetBrains</a>. Second, while the pricing of these tools varies greatly for many different factors, the considerations that we have taken will be from the perspective of an independent developer with a codebase hosted as a public GitHub repository.</p>
<h2 id="advantages">Advantages</h2>
<p>There are two main reasons why GitHub Actions is a better option over more traditional tools like Bitrise, CircleCI, and TeamCity.</p>
<p><strong>Price</strong> – We’ll start with the most common concern for teams of all sizes. While most competitors do offer free version of their software and only charge clients after a certain threshold, GitHub Actions goes one step further to facilitate this.</p>
<p>GitHub Actions is free for all standard GitHub-hosted runners in public repositories, and for self-hosted runners, according to it’s <a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">official documentation</a>. For private repositories, each GitHub account receives a certain amount of free minutes and storage for use with GitHub-hosted runners.</p>
<p><strong>Seamlessness</strong> – Did I mention that GitHub Actions lives one server down from your code repositories? The biggest advantage that GitHub Actions has over its competition is the fact that this tool is already integrated with your GitHub project and account(s). While traditional CI/CD tools require you to link your same GitHub account to their servers, GitHub Actions comes almost included with your repository already, and it is readily available with the click of a button.</p>
<h2 id="disadvantages">Disadvantages</h2>
<p>Using GitHub Actions is not always perfect. Let’s go over the biggest disadvantage that using GitHub Actions may bring upon in contrast to its competition.</p>
<p><strong>Youth</strong> – Differently to all of the tools that we’re comparing it to, GitHub Actions is by far the youngest CI/CD tool that we’ve mentioned today. This is a very clear disadvantage due to the fact that older platforms like TeamCity and CircleCI would have not only gone through some similar problems as GitHub Actions may have, but they’ve had more time to harden their tech, as well as to create more integrations and support for their users.</p>
<h2 id="github-actions-android">GitHub Actions for Android</h2>
<p>Now that we’re all convinced that GitHub Actions may be the most advantageous choice for a CI/CD tool, let’s grab a ride back with the Droid, and get our pipeline integration started through a simple Actions script.</p>
<p>GitHub Actions uses YAML script files for each workflow, where a workflow is a configurable automated process that will run one or more jobs, according to the <a href="https://docs.github.com/en/billing/managing-billing-for-github-actions/about-billing-for-github-actions">GitHub docs</a>, and these may run sequentially or in parallel. Workflows are generally triggered by events, such as a pull request being created, or a new tag being pushed, but workflows may also be triggered manually at any time.</p>
<p>Workflow scripts live in the <code>.github/workflows/</code> location from the root directory of your repo. Where a <code>push.yaml</code> file’s full path would be <code>.github/workflows/push.yaml</code>. The following snippet of the top part of <code>push.yml</code> will show the basic setup of a simple workflow that runs after every push to <code>master</code> or <code>develop</code>:</p>
<pre class="language-yaml hljs">name: Push

on:
  push:
    branches: [ "develop", "master" ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
        - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
</pre>
<p>Let’s go over each of these fields before we get into the <code>steps</code> section:</p>
<p><code>name</code>: The name of the workflow as it will be displayed in the GitHub Actions page</p>
<p><code>on</code>: This is where you specify the kind of events <strong><em><em/><em/></em><em><em/></em></strong>that may trigger this workflow. In this case, it will be triggered for every <code>push</code> coming into either <code>master</code> or <code>develop</code></p>
<p><code>workflow_dispatch</code>: This flag lets the system know that you want to trigger this workflow manually from the interface</p>
<p><code>jobs</code>: Workflows may have one or more jobs, which run in parallel by default but may be run sequentially instead. In this example, we only have one <code>job</code> called <code>build</code> with a <code>name</code> parameter of value <code>Build</code></p>
<p><code>runs-on</code>: Indicates the kind of machine this job is going to run inside of</p>
<p><code>steps</code>: Each job has a series of <code>steps</code> that may contain either a shell command or a public action from the GitHub marketplace to be run. In this example, the single step shown is a simple <code>echo</code> command with a message containing the name of the event that triggered this workflow</p>
<h2 id="android-specific-actions">Android-specific Actions</h2>
<p>There are many different <code>steps</code> that can be taken for any given GitHub Action. For the purpose of this article, we’ll go over some of the most conventional steps used for the Android development ecosystem.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.59.51-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The next example will show the bottom part of the <code>push.yml</code> file with all the steps needed to build the project after every push event:</p>
<pre class="language-yaml hljs">jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
        - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
        - run: echo "This job is running on a ${{ runner.os }} server hosted by GitHub!"
    - uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2c4f44494f474359586c5a1f">[email protected]</a>
    - run: echo "The ${{ github.repository }} repository has been cloned."
    - run: echo "Setting up JDK" 
    - name: set up JDK 11
      uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cebdabbabbbee3a4afb8af8eb8fd">[email protected]</a>
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    - run: echo "The workflow is now ready to test your code."
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - run: echo "Building Debug APK."  
    - name: Build with Gradle
      run: ./gradlew build
    - run: echo "Build status report=${{ job.status }}."
</pre>
<p>There’s quite a lot of noise through <code>echo</code> commands on this example, but let’s go over all functions of type <code>run</code> that don’t print to the screen, as well as <code>uses</code> commands.</p>
<p>The first such example is our third step, <code>uses: actions/checkout#v3</code>. This action is simply checking out the repository into the machine where this job is running.</p>
<p>Followed by two more prints commands, the next action has a particular <code>name</code> field that explains what the <code>uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5023352425207d3a312631102663">[email protected]</a></code> action is doing. This same action is followed by some metadata inside the <code>with</code> tag, which is specifying the Java version and the build tool being used; in this case, it is Gradle.</p>
<p>We have a few more messages printed as well as some permissions refactor, but on one of the last lines, we find our last command <code>run: .gradlew build</code>, which simply builds the debug version of project. This command is followed by a print reporting the status of the build.</p>
<h2 id="advanced-github-actions-topics">Advanced GitHub Actions topics</h2>
<p>Before we move on to more advanced scripts, let’s take a step back and look at the topic of secrets. GitHub secrets is a safe place to hide confidential data, like signing or API keys. GitHub Actions may then take these secrets and use them as part of its actions and commands.</p>
<p>For more information about how to create GitHub secrets, their relationship to the Android ecosystem, and how to use them within GitHub Actions, check out <a href="https://blog.jakelee.co.uk/accessing-android-app-secret-from-github-actions-using-gradle/">this article</a>.</p>
<h2 id="build-sign-release-build">Build and sign a release build</h2>
<p>For our next example, we’ll go over a <code>job</code> that builds the <code>release</code> build of our project, and signs it using a keystore found inside GitHub secrets:</p>
<pre class="language-yaml hljs">jobs:
  build:
    name: Generate App Bundle
    runs-on: ubuntu-latest
    steps:
    - uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bad9d2dfd9d1d5cfcefacc89">[email protected]</a>
    - name: set up JDK 11
      uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0370667776732e69627562437530">[email protected]</a>
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle
    - name: run: chmod +x gradlew
    - name: Bundle 'release' with Gradle
      run: ./gradlew bundleRelease
    - name: Sign AAB
      id: sign_aab
      uses: r0adkll/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ddaeb4bab3f0bcb3b9afb2b4b9f0afb8b1b8bcaeb89dabec">[email protected]</a>
      with:
        releaseDirectory: app/build/outputs/bundle/release
        signingKeyBase64: ${{ secrets.SIGNING_KEYSTORE }}
        alias: ${{ secrets.SIGNING_ALIAS }}
        keyStorePassword: ${{ secrets.SIGNING_KEYSTORE_PASSWORD }}
        keyPassword: ${{ secrets.SIGNING_ALIAS_PASSWORD }}  
    - run: echo "Build status report=${{ job.status }}."
    - name: Upload App Bundle
      uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="255055494a4441084457514c43444651655314">[email protected]</a>
      with:
        name: aab
        path: ${{steps.sign_aab.outputs.signedReleaseFile}}
</pre>
<p>Skipping right into the new commands only from the example above, we first find <code>run: ./gradlew bundleRelease</code>, which, differently to the build command from our first example, triggers a build with the <code>release</code> build variant, and makes an App Bundle <code>.aab</code> file instead of the regular <code>.apk</code> file. To generate an APK instead, a simple call of <code>./gradlew buildRelease</code> will get the job done.</p>
<p>The next new command we’ve got is <code>uses: r0adkill/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="88fbe1efe6a5e9e6ecfae7e1eca5faede4ede9fbedc8feb9">[email protected]</a></code>. This action was create by the community. It simply takes the freshly generated build file, in this case in the form of an AAB, and signs it using the certificate and variables found inside the nested <code>with:</code> container. As we can see, we’re using our GitHub secrets as part of the command mentioned before.</p>
<p>The last new command we have in this second example is <code>uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="295c594546484d04485b5d404f484a5d695f18">[email protected]</a></code>. This action simply takes a variable under the given <code>path</code>, and saves it using the given <code>name</code> for later use within the same workflow. More on that on the next and final example.</p>
<h2 id="deploying-into-github-packages">Deploying into GitHub packages</h2>
<p>For our last example, we’ll go over one last job that uses the job from above to get a resulting AAB, and upload that into a GitHub Release for the given repository:</p>
<pre class="language-yaml hljs">jobs:
  release:
   name: Release App Bundle
   needs: build
   runs-on: ubuntu-latest
   steps:
     - name: Download AAB from build
       uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4c28233b2220232d28612d3e38252a2d2f380c3a7d">[email protected]</a>
       with:
         name: aab
     - name: Create Release
       id: create_release
       uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="fd9e8f989c8998d08f9891989c8e98bd8bcc">[email protected]</a>
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         tag_name: Tag Name
         release_name: Release Name
     - name: Upload Release AAB
       id: upload_release_asset
       uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="443134282b252069362128212537216925373721300432756a746a75">[email protected]</a>
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       with:
         upload_url: ${{ steps.create_release.outputs.upload_url }}
         asset_path: aab/app-release.aab
         asset_name: ${{ github.event.repository.name }}.aab
         asset_content_type: application/zip
     - run: echo "Upload returned with status=${{ job.status }}."
</pre>
<p>There are three main functions here, with a final print indicating the status of final upload job. Before we look at each command one by one, first we should address the new field we added into this workflow. The field <code>needs</code> presupposes that there’s another job with the <code>build</code> name that this job will execute, and potentially utilize any assets the preceding job might upload.</p>
<p>Returning to the commands, we start with <code>uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3d59524a5351525c59105c4f49545b5c5e497d4b0c">[email protected]</a></code> , which downloads an asset of name <code>aab</code>, the same asset our last example uploaded. This means that this first command assumes that a job like the one from our last example is ran beforehand in order to find the required artifacts.</p>
<p>Moving on to the next action, <code>uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="70141f071e1c1f11145d1102041916111304300641">[email protected]</a></code> attempts to create a new GitHub release for the given repository, using the GitHub token found in the secrets to identify the environment. Additionally, this function takes both a <code>tag_name</code> and <code>release_name</code> in which we’ve added placeholders in order to keep the example a bit simpler.</p>
<p>The last function that we haven’t seen before in this last example is <code>uses: actions/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f48184989b9590d986919891958791d99587879180b4c5dac4dac5">[email protected]</a></code>. This action is taking the <code>.aab</code> file inside our asset through the <code>asset_path</code>, defined by the <code>asset_content_type</code> variable and having the name from <code>asset_name</code>. This asset is then attempted to upload into the <code>upload_url</code> path. The action emits a success result status at the end, which we print out in the next and last <code>echo</code> command right after.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Evidently, there are a lot more acts that can be done as part of the CI/CD pipeline using GitHub Actions. These include steps as fundamental as testing your code, to automating complex flows that span multiple jobs and chain multiple workflows.</p>
<p>My hope is that this guide serves as a starting point for the readers to quickly get GitHub Actions up and running, and that they’re able to expand on this basis to cover their particular CI/CD needs. With the help of the GitHub community, finding new and useful actions to everyone’s respective needs shouldn’t be a tall order, and we’ve all got to start somewhere!</p><div class="code-block code-block-32" >
<div class="blog-plug inline-plug kotlin-plug"><h2><a href="https://lp.logrocket.com/blg/kotlin-signup">LogRocket</a>: Instantly recreate issues in your Android apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is an Android monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your Android apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your Android apps — <a class="signup" href="hhttps://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-163158" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/android-ci-cd-using-github-actions/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/android-ci-cd-using-github-actions/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-163158" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/android-ci-cd-using-github-actions/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-163158" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/android-ci-cd-using-github-actions/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/android-ci-cd-using-github-actions/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Angular unit testing tutorial with examples - LogRocket Blog</title>
			<link>https://blog.logrocket.com/angular-unit-testing-tutorial/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/angular-unit-testing-tutorial/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Angular unit testing tutorial with examples - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/angular-unit-testing-tutorial/">Angular unit testing tutorial with examples - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/meshseun/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/04/meshseun.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/04/meshseun.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/meshseun/">
Mesh Seun <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Software engineer.</span>
</div>
</div>
<h1 class="posttitle">Angular unit testing tutorial with examples</h1>
<p>
<span class="post-date"><time class="post-date">
November 23, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">10 min read</span>
<span class="wordcount">2855</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><strong><em>Editor’s note:</em></strong> <em>This tutorial was last updated on 7 December 2022 to ensure that it is compatible with the latest version of Angular, (v15 at the time of writing) and to add a section on how to generate an Angular unit test automatically. Check out these articles if you are interested in unit testing in</em> <a href="https://blog.logrocket.com/unit-testing-react-native/"><em>React Native</em></a> <em>or</em> <a href="https://blog.logrocket.com/unit-testing-react-cypress/"><em>React and Cypress</em></a>.</p>
<p>In this Angular unit testing tutorial, we’ll demonstrate how to build a simple Angular app and then walk through the unit testing process step by step with examples.</p>
<p>We’ll cover the following in detail:</p>
<ul>
<li><a href="#what-angular-testing">What is Angular testing?</a></li>
<li><a href="#what-angular-unit-testing">What is Angular unit testing?</a></li>
<li><a href="#why-you-should-unit-test-angular-apps">Why you should unit test Angular apps</a></li>
<li><a href="#how-do-you-write-angular-test">How do you write an Angular test?</a></li>
<li><a href="#what-is-karma-angular">What is Karma in Angular?</a></li>
<li><a href="#how-to-write-unit-test-angular">How to write a unit test in Angular</a></li>
<li><a href="#how-to-test-angular-service">How to test an Angular service</a></li>
<li><a href="#how-to-test-angular-component">How to test an Angular component</a></li>
<li><a href="#how-to-test-async-operation-angular">How to test an async operation in Angular</a></li>
<li><a href="#how-to-automatically-generate-angular-unit-test">How to automatically generate an Angular unit test</a></li>
<li><a href="#how-ngentest-works">How <code>ngentest</code> works</a></li>
</ul>
<p>To follow along with this tutorial, you should have a basic understanding of how to use <a href="https://angular.io/guide/testing-services">Angular</a>.</p>
<h2 id="what-angular-testing">What is Angular testing?</h2>
<p><a href="https://angular.io/guide/testing">Angular testing</a> is a core feature available in every project set up with the <a href="https://angular.io/cli">Angular CLI</a>.</p>
<p>To stay synchronized with the JavaScript ecosystem, the Angular team makes a point to release two major <a href="https://blog.logrocket.com/angular-10-is-now-available-heres-what-you-need-to-know/">Angular versions</a> each year. Since its inception through to its most recent release, <a href="https://blog.angular.io/angular-v15-is-now-available-df7be7f2f4c8">Angular 15</a>, Angular has been designed with testability in mind.</p>
<p>There are two types of Angular testing:</p>
<ol>
<li><strong>Unit testing</strong> is the process of testing small, isolated pieces of code. Also known as isolated testing, unit tests do not use external resources, such as the network or a database</li>
<li><strong>Functional testing</strong> refers to testing the functionality of your Angular app from a user experience perspective — i.e., interacting with your app as it’s running in a browser just as a user would</li>
</ol>
<p><iframe  src="https://www.youtube.com/embed/BumgayeUC08" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"/></p>
<h2 id="what-angular-unit-testing">What is Angular unit testing?</h2>
<p><a href="https://docs.angularjs.org/guide/unit-testing">Unit testing in Angular</a> refers to the process of testing individual units of code.</p>
<p>An Angular unit test aims to uncover issues such as incorrect logic, misbehaving functions, etc. by isolating pieces of code. This is sometimes more difficult than it sounds, especially for complex projects with poor separation of concerns. Angular is designed to help you write code in such a way that enables you to test your app’s functions individually in isolation.</p>
<h2 id="why-you-should-unit-test-angular-apps">Why you should unit test Angular apps</h2>
<p>Angular unit testing enables you to test your app based on user behavior. While testing each possible behavior would be tedious, inefficient, and ineffective, writing tests for each coupling block in your application can help demonstrate how these blocks behave.</p>
<p>One of the easiest ways to test the strengths of these blocks is to write a test for each one. You don’t necessarily need to wait until your users complain about how the input field behaves when the button is clicked. By writing a unit test for your blocks (components, services, etc.), you can easily detect when there is a break.</p>
<p>Our example Angular app has a service, a component, and an async task to simulate data being fetched from the server:</p>
<p><img             class="aligncenter size-full wp-image-145592 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-unit-testing.gif" alt="Angular Unit Testing Example" width="720" height="375"  /><noscript><img               class="aligncenter size-full wp-image-145592" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-unit-testing.gif" alt="Angular Unit Testing Example" width="720" height="375"/></noscript></p>
<h2 id="how-write-angular-test">How do you write an Angular test?</h2>
<p>When you create a new project with the Angular CLI (<code>ng new appName</code>), a default component and test file are added. Also — if, like me, you’re always looking for a shortcut — a test script is always created alongside any component module (service, component) you create using the Angular CLI.</p>
<p>This test script, which ends with <code>.spec.ts</code>, is always added. Let’s take a look at the initial test script file, which is the <code>app.component.spec.ts</code>:</p>
<pre class="language-typescript hljs">import { TestBed, async } from '@angular/core/testing';
import { AppComponent } from './app.component';
describe('AppComponent', () => {
  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [
        AppComponent
      ],
    }).compileComponents();
  }));
  it('should create the app', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app).toBeTruthy();
  }));
  it(`should have as title 'angular-unit-test'`, async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app.title).toEqual('angular-unit-test');
  }));
  it('should render title in a h1 tag', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.debugElement.nativeElement;
    expect(compiled.querySelector('h1').textContent).toContain('Welcome to angular-unit-test!');
  }));
});
</pre>
<p>Let’s run our first test to make sure nothing has broken yet:</p>
<pre class="language-typescript hljs">ng test
</pre>
<p>You might be wondering, how can we simulate a user behavior by simply writing a test, even though the project is being rendered in a browser? As we proceed, I’ll demonstrate how to simulate an Angular app running on a browser.</p>
<h2 id="what-karma-angular">What is Karma in Angular?</h2>
<p><a href="https://karma-runner.github.io/latest/index.html">Karma</a> is a JavaScript test runner that runs the unit test snippet in Angular. Karma also ensures the result of the test is printed out either in the console or in the file log.</p>
<p>By default, Angular runs on Karma. Other test runners include <a href="https://blog.logrocket.com/a-quick-and-complete-guide-to-mocha-testing-d0e0ea09f09d/">Mocha</a> and <a href="https://jasmine.github.io/">Jasmine</a>. Karma provides tools that make it easier to call Jasmine tests while writing code in Angular.</p>
<h2 id="how-to-write-unit-test-angular">How to write a unit test in Angular</h2>
<p>The Angular testing package includes two utilities called <code>TestBed</code> and <code>async</code>. <code>TestBed</code> is the main Angular utility package.</p>
<p><img             class="aligncenter size-full wp-image-145594 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-unit-testing-example-flow.jpeg" alt="Angular Unit Testing Example Flow" width="461" height="383"    /><noscript><img               class="aligncenter size-full wp-image-145594" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-unit-testing-example-flow.jpeg" alt="Angular Unit Testing Example Flow" width="461" height="383"  /></noscript></p>
<p>The <code>describe</code> container contains different blocks (<code>it</code>, <code>beforeEach</code>, <code>xit</code>, etc.). <code>beforeEach</code> runs before any other block. Other blocks do not depend on each other to run.</p>
<p>From the <code>app.component.spec.ts</code> file, the first block is the <code>beforeEach</code> inside the container (<code>describe</code>). This is the only block that runs before any other block (<code>it</code>). The declaration of the app module in <code>app.module.ts</code> file is simulated (declared) in the <code>beforeEach</code> block. The component (<code>AppComponent</code>) declared in the <code>beforeEach</code> block is the main component we want to have in this testing environment. The same logic applies to other test declaration.</p>
<p>The <code>compileComponents</code> object is called to compile your component’s resources like the template, styles, etc. You might not necessarily compile your component if you are using webpack:</p>
<pre class="language-typescript hljs">beforeEach(async(() => {
   TestBed.configureTestingModule({
      declarations: [
         AppComponent
      ],
   }).compileComponents();
}));
</pre>
<p>Now that the component has been declared in the <code>beforeEach</code> block, let’s check if the component is created.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.50.47-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>The <code>fixture.debugElement.componentInstance</code> creates an instance of the class (<code>AppComponent</code>). We will test to see if the instance of the class is truly created or not using <code>toBeTruthy</code>:</p>
<pre class="language-typescript hljs">it('should create the app', async(() => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.debugElement.componentInstance;
    expect(app).toBeTruthy();
}));
</pre>
<p>The third block demonstrates how you can have access to the properties of the created component (<code>AppComponent</code>). The only property added by default is the title. You can easily check if the title you set has changed or not from the instance of the component (<code>AppComponent</code>) created:</p>
<pre class="language-typescript hljs">it(`should have as title 'angular-unit-test'`, async(() => {
     const fixture = TestBed.createComponent(AppComponent);
     const app = fixture.debugElement.componentInstance;
     expect(app.title).toEqual('angular-unit-test');
}));
</pre>
<p>The fourth block demonstrates how the test behaves in the browser environment. After creating the component, an instance of the created component (<code>detectChanges</code>) to simulate running on the browser environment is called. Now that the component has been rendered, you can have access to its child element by accessing the <code>nativeElelment</code> object of the rendered component (<code>fixture.debugElement.nativeElement</code>):</p>
<pre class="language-typescript hljs">it('should render title in a h1 tag', async(() => {
   const fixture = TestBed.createComponent(AppComponent);
   fixture.detectChanges();
   const compiled = fixture.debugElement.nativeElement;
 expect(compiled.querySelector('h1').textContent).toContain('Welcome to angular-unit-test!');
}));
</pre>
<p>Now that you have familiarized yourself with the basics of testing a component, let’s test our Angular example application:</p>
<p><img             class="aligncenter size-full wp-image-145597 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-unit-testing-example-app-overview.jpeg" alt="Angular Unit Testing Example App Overview" width="299" height="472"    /><noscript><img               class="aligncenter size-full wp-image-145597" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-unit-testing-example-app-overview.jpeg" alt="Angular Unit Testing Example App Overview" width="299" height="472"  /></noscript></p>
<h2 id="how-to-test-angular-service">How to test an Angular service</h2>
<p>Services often depend on other services that Angular injects into the constructor. In many cases, it is easy to create and inject these dependencies by adding <code>providedIn: root</code> to the injectable object, which makes it accessible by any component or service:</p>
<pre class="language-typescript hljs">import { Injectable } from "@angular/core";
import { QuoteModel } from "../model/QuoteModel";

@Injectable({
  providedIn: "root"
})
export class QuoteService {
  public quoteList: QuoteModel[] = [];

  private daysOfTheWeeks = ["Sun", "Mon", "Tue", "Wed", "Thurs", "Fri", "Sat"];

  constructor() {}

  addNewQuote(quote: String) {
    const date = new Date();
    const dayOfTheWeek = this.daysOfTheWeeks[date.getDate()];
    const day = date.getDay();
    const year = date.getFullYear();
    this.quoteList.push(
      new QuoteModel(quote, `${dayOfTheWeek} ${day}, ${year}`)
    );
  }

  getQuote() {
    return this.quoteList;
  }

  removeQuote(index:number) {
    this.quoteList.splice(index, 1);
  }
}
</pre>
<p>Here are a few ways to test the <code>QuoteService</code> class:</p>
<pre class="language-typescript hljs">/* tslint:disable:no-unused-variable */
import { QuoteService } from "./Quote.service";

describe("QuoteService", () => {
  let service: QuoteService;

  beforeEach(() => {
    service = new QuoteService();
  });

  it("should create a post in an array", () => {
    const qouteText = "This is my first post";
    service.addNewQuote(qouteText);
    expect(service.quoteList.length).toBeGreaterThanOrEqual(1);
  });

  it("should remove a created post from the array of posts", () => {
    service.addNewQuote("This is my first post");
    service.removeQuote(0);
    expect(service.quoteList.length).toBeLessThan(1);
  });
});
</pre>
<p>In the first block, <code>beforeEach</code>, an instance of <code>QuoteService</code> is created to ensure it is only created once and to avoid repetition in other blocks except for some exceptional cases:</p>
<pre class="language-typescript hljs">it("should create a post in an array", () => {
    const qouteText = "This is my first post";
    service.addNewQuote(qouteText);
    expect(service.quoteList.length).toBeGreaterThanOrEqual(1);
  });
</pre>
<p>The first block tests if the post model <code>QuoteModel(text, date)</code> is created into an array by checking the length of the array. The length of the <code>quoteList</code> is expected to be <code>1</code>:</p>
<pre class="language-typescript hljs">it("should remove a created post from the array of posts", () => {
    service.addNewQuote("This is my first post");
    service.removeQuote(0);
    expect(service.quoteList.length).toBeLessThan(1);
  });
</pre>
<p>The second block creates a post in an array and removes it immediately by calling <code>removeQuote</code> in the service object. The length of the <code>quoteList</code> is expected to be <code>0</code>.</p>
<h2 id="how-to-test-angular-component">How to test an Angular component</h2>
<p>In our Angular unit testing example app, the <code>service</code> is injected into the <code>QuoteComponent</code> to access its properties, which will be needed by the view:</p>
<pre class="language-typescript hljs">import { Component, OnInit } from '@angular/core';
import { QuoteService } from '../service/Quote.service';
import { QuoteModel } from '../model/QuoteModel';

@Component({
  selector: 'app-Quotes',
  templateUrl: './Quotes.component.html',
  styleUrls: ['./Quotes.component.css']
})
export class QuotesComponent implements OnInit {

  public quoteList: QuoteModel[];
  public quoteText: String ="";

  constructor(private service: QuoteService) { }

  ngOnInit() {
    this.quoteList = this.service.getQuote();
  }

  createNewQuote() {
    this.service.addNewQuote(this.quoteText);
    this.quoteText ="";
  }

  removeQuote(index) {
    this.service.removeQuote(index);
  }
}
&lt;div class="container-fluid">
  &lt;div class="row">
    &lt;div class="col-8 col-sm-8 mb-3 offset-2">
      &lt;div class="card">
        &lt;div class="card-header">
          &lt;h5>What Quote is on your mind ?&lt;/h5>
        &lt;/div>
        &lt;div class="card-body">
          &lt;div role="form">
            &lt;div class="form-group col-8 offset-2">
              &lt;textarea #quote class="form-control" rows="3" cols="8" [(ngModel)]="quoteText" name="quoteText">&lt;/textarea>
            &lt;/div>
            &lt;div class="form-group text-center">
              &lt;button class="btn btn-primary" (click)="createNewQuote()" [disabled]="quoteText == null">Create a new
                quote&lt;/button>
            &lt;/div>
          &lt;/div>
        &lt;/div>
      &lt;/div>
    &lt;/div>
  &lt;/div>

  &lt;div class="row">
    &lt;div class="card mb-3 col-5 list-card" id="quote-cards"  *ngFor="let quote of quoteList; let i = index"
      (click)="removeQuote(i)">
      &lt;div class="card-body">
        &lt;h6>{{ quote.text }}&lt;/h6>
      &lt;/div>
      &lt;div class="card-footer text-muted">
        &lt;small>Created on {{ quote.timeCreated }}&lt;/small>
      &lt;/div>
    &lt;/div>
  &lt;/div>
&lt;/div>
</pre>
<p>The first two blocks in the <code>describe</code> container run consecutively. In the first block, the <code>FormsModule</code> is imported into the configure test. This ensures the form’s related directives, such as <code>ngModel</code>, can be used.</p>
<p>Also, the <code>QuotesComponent</code> is declared in the <code>configTestMod</code> similar to how the components are declared in <code>ngModule</code> residing in the <code>appModule</code> file. The second block <code>creates</code> a <code>QuoteComponent</code> and its <code>instance</code>, which will be used by the other blocks:</p>
<pre class="language-typescript hljs">let component: QuotesComponent;
  let fixture: ComponentFixture&lt;QuotesComponent>;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [FormsModule],
      declarations: [QuotesComponent]
    });
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(QuotesComponent);
    component = fixture.debugElement.componentInstance;
  });
</pre>
<p>This block tests if the instance of the component that is created is defined:</p>
<pre class="language-typescript hljs">it("should create Quote component", () => {
    expect(component).toBeTruthy();
  });
</pre>
<p>The injected service handles the manipulation of all operations (<code>add</code>, <code>remove</code>, <code>fetch</code>). The <code>quoteService</code> variable holds the injected service (<code>QuoteService</code>). At this point, the component is yet to be rendered until the <code>detectChanges</code> method is called:</p>
<pre class="language-typescript hljs">it("should use the quoteList from the service", () => {
    const quoteService = fixture.debugElement.injector.get(QuoteService);
    fixture.detectChanges();
    expect(quoteService.getQuote()).toEqual(component.quoteList);
  });
</pre>
<p>Now let’s test whether we can successfully create a post. The properties of the component can be accessed upon instantiation, so the rendered component detects the new changes when a value is passed into the <code>quoteText</code> model. The <code>nativeElement</code> object gives access to the HTML element rendered, which makes it easier to check if the <code>quote</code> added is part of the texts rendered:</p>
<pre class="language-typescript hljs">it("should create a new post", () => {
    component.quoteText = "I love this test";
    fixture.detectChanges();
    const compiled = fixture.debugElement.nativeElement;
    expect(compiled.innerHTML).toContain("I love this test");
  });
</pre>
<p>Apart from having access to the HTML contents, you can also get an element by its CSS property. When the <code>quoteText</code> model is empty or null, the button is expected to be disabled:</p>
<pre class="language-typescript hljs">it("should disable the button when textArea is empty", () => {
    fixture.detectChanges();
    const button = fixture.debugElement.query(By.css("button"));
    expect(button.nativeElement.disabled).toBeTruthy();
  });
it("should enable button when textArea is not empty", () => {
    component.quoteText = "I love this test";
    fixture.detectChanges();
    const button = fixture.debugElement.query(By.css("button"));
    expect(button.nativeElement.disabled).toBeFalsy();
  });
</pre>
<p>Just like the way we access an element with its CSS property, we can also access an element by its class name. Multiple classes can be accessed at the same time using <code>By e.g By.css(‘.className.className’)</code>.</p>
<p>The button clicks are simulated by calling the <code>triggerEventHandler</code> . The <code>event</code> type must be specified which, in this case, is <code>click</code>. A quote displayed is expected to be deleted from the <code>quoteList</code> when clicked on:</p>
<pre class="language-typescript hljs">it("should remove post upon card click", () => {
    component.quoteText = "This is a fresh post";
    fixture.detectChanges();

    fixture.debugElement
      .query(By.css(".row"))
      .query(By.css(".card"))
      .triggerEventHandler("click", null);
    const compiled = fixture.debugElement.nativeElement;
    expect(compiled.innerHTML).toContain("This is a fresh post");
  });
</pre>
<h2 id="how-to-test-async-operation-angular">How to test an async operation in Angular</h2>
<p>It’s inevitable that you’ll eventually need to fetch data remotely. This operation is best treated as an asynchronous task.</p>
<p><code>fetchQoutesFromServer</code> represents an async task that returns an array of quotes after two seconds:</p>
<pre class="language-typescript hljs">fetchQuotesFromServer(): Promise&lt;QuoteModel[]> {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve([new QuoteModel("I love unit testing", "Mon 4, 2018")]);
      }, 2000);
    });
  }
</pre>
<p><code>spyOn</code> objects simulate how <code>fetchQuotesFromServer</code> method works. It accepts two arguments: <code>quoteService</code>, which is injected into the component, and the <code>fetchQuotesFromServer</code> method.</p>
<p><code>fetchQuotesFromServer</code> is expected to return a promise. <code>spyOn</code> chains the method using <code>and</code> with a fake promise call, which is returned using <code>returnValue</code>. Because we want to emulate how the <code>fetchQuotesFromServer</code> works, we need to pass a <code>promise</code> that will resolve with a list of quotes.</p>
<p>Just as we did before, we’ll call the <code>detectChanges</code> method to get the updated changes. <code>whenStable</code> allows access to results of all <code>async</code> tasks when they are done:</p>
<pre class="language-typescript hljs">it("should fetch data asynchronously", async () => {
    const fakedFetchedList = [
      new QuoteModel("I love unit testing", "Mon 4, 2018")
    ];
    const quoteService = fixture.debugElement.injector.get(QuoteService);
    let spy = spyOn(quoteService, "fetchQuotesFromServer").and.returnValue(
      Promise.resolve(fakedFetchedList)
    );
    fixture.detectChanges();
    fixture.whenStable().then(() => {
      expect(component.fetchedList).toBe(fakedFetchedList);
    });
  });
</pre>
<h2 id="how-to-automatically-generate-angular-unit-test">How to automatically generate an Angular unit test</h2>
<p>When you use the Angular CLI to scaffold a project, it generates unit test specs for the default app component. Following the initial project setup, we’ll need to write test specifications for each component, directive, and more. In most cases, this will be time-consuming because we will have to write these specifications from the ground up. Fortunately, the Angular ecosystem created the <code>ngentest</code> package to automate the generation of test specs for each component, directive, and others.</p>
<p>Assuming you wrote the code for your component and want to write a test for it, you’ll have to install the <code>ngentest</code> package:</p>
<pre class="language-typescript hljs">$ npm install ngentest -g
</pre>
<p>Next, you’ll run the following command to auto-generate the unit test specs for your component:</p>
<pre class="language-typescript hljs">$ gentest component-name.ts
</pre>
<p>We can also auto-generate the unit test specs for directives, pipes, and services:</p>
<pre class="language-typescript hljs">$ gentest directive-name.ts -s # output to directive-name.spec.ts
$ gentest pipe-name.ts # output to pipe-name.test.ts
$ gentest service-name.ts. # output to service-name.test.ts
</pre>
<h2 id="how-ngentest-works">How <code>ngentest</code> works</h2>
<p><code>ngentest</code> parses the file name next to the <code>gentest</code> command and determines the proper file type. In our case, it is <code>component-name.ts</code> as seen in our previous command.</p>
<p>Next, <code>ngentest</code> builds data for a unit test from the parsed TypeScript using the contents of the file, such as:</p>
<ul>
<li>Class</li>
<li>Imports</li>
<li>List of functions to test</li>
<li>Inputs and outputs</li>
<li>Mocks</li>
</ul>
<p>Finally, <code>ngentest</code> generates the unit test.</p>
<p>The <code>gentest</code> package does not generate 100% test coverage, so you’ll need to modify the generated unit test specs in order to achieve that.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Angular ensures that test results are viewed in your browser. This will give a better visualization of the test results:</p>
<p><img             class="aligncenter size-full wp-image-145599 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-visualization-test-results.png" alt="Angular Visualization Test Results" width="730" height="382"    /><noscript><img               class="aligncenter size-full wp-image-145599" src="https://blog.logrocket.com/wp-content/uploads/2020/12/angular-visualization-test-results.png" alt="Angular Visualization Test Results" width="730" height="382"  /></noscript></p>
<p>You can find the source code for this project, built with the most recent Angular version, in this <a href="https://github.com/emmanuelhashy/angular-unit-tests">GitHub repository</a>.</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-3935" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/angular-unit-testing-tutorial/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/angular-unit-testing-tutorial/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-3935" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/angular-unit-testing-tutorial/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-3935" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/angular-unit-testing-tutorial/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/angular-unit-testing-tutorial/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Animate React components with a single line using AutoAnimate - LogRocket Blog</title>
			<link>https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Animate React components with a single line using AutoAnimate - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/">Animate React components with a single line using AutoAnimate - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/nilanthsriram/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/10/nilanth-sriram.webp?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/10/nilanth-sriram.webp?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nilanthsriram/">
Nilanth Sriram <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am a full-stack developer and technical writer who enjoys writing about React, Next.js, and Laravel best practices. Let's make the web faster! 🚀</span>
</div>
</div>
<h1 class="posttitle">Animate React components with a single line using AutoAnimate</h1>
<p>
<span class="post-date"><time class="post-date">
November 25, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">8 min read</span>
<span class="wordcount">2350</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>Animation provides a compelling user experience for modern web apps, bringing them to life and avoiding that dreaded flat look. But, of course, adding animations can be a difficult and time-consuming task, and if your app has multiple components, it gets worse!</p>
<p>In this article, we‘re going to be taking a look at how you can add animation to React components with a single line of code using the AutoAnimate library.</p>
<p>Let’s get straight into it.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#autoanimate">What is AutoAnimate?</a></li>
<li><a href="#other-animation-libraries">Why not use other animation libraries?</a></li>
<li><a href="#alert-message-react-transition-group">Alert message using React Transition Group</a></li>
<li><a href="#alert-message-autoanimate">Alert message using AutoAnimate</a></li>
<li><a href="#how-does-it-work">How does it work?</a></li>
<li><a href="#quick-setup-usage">Quick setup and usage</a></li>
<li><a href="#animate-dynamic-form-component">Animate a dynamic <code>Form</code> component</a></li>
<li><a href="#animate-user-comment-component">Animate a user comment component</a></li>
<li><a href="#customize-animation-duration">Customize the animation duration</a></li>
<li><a href="#enable-disable-animations">Enable and disable animations</a></li>
</ul>
<h2 id="autoanimate">What is AutoAnimate?</h2>
<p>AutoAnimate is an open-source animation utility library with zero configuration that adds smooth transitions to React components while also being very <a href="https://bundlephobia.com/package/@formkit/auto-animate@1.0.0-beta.3">lightweight</a> (2.3KB).</p>
<h2 id="other-animation-libraries">Why not use other animation libraries?</h2>
<p>Most animation libraries require more configuration, and some require changing the existing component structure to apply animations.</p>
<p>AutoAnimate, however, requires only a single line of code to animate components and does not require changing any existing components. It also offers the benefit of being straightforward to integrate with an existing code base.</p>
<p>AutoAnimate makes for a smooth experience when an element changes in the DOM. I would like to compare AutoAnimate with <a href="https://reactcommunity.org/react-transition-group/">React Transition Group</a>, which is a simple transition library for component entering and exiting, but with some additional configurations.</p>
<p>Let’s create an alert message with React Transition Group and AutoAnimate so you can see the difference between the libraries for yourself.</p>
<h2 id="alert-message-react-transition-group">Alert message using React Transition Group</h2>
<p>The following component shows how to add animation <a href="https://blog.logrocket.com/react-transition-group/">using</a> React Transition Group.</p>
<pre class="language-javascript hljs">App.jsx
import React, { useState, useRef } from 'react';
import { createRoot } from 'react-dom/client';
import { Container, Button, Alert } from 'react-bootstrap';
import { CSSTransition } from 'react-transition-group';

import 'bootstrap/dist/css/bootstrap.min.css';
import './styles.css';

function Example() {
  const [showButton, setShowButton] = useState(true);
  const [showMessage, setShowMessage] = useState(false);
  const nodeRef = useRef(null);

  return (
    &lt;Container style={{ paddingTop: '2rem' }}>
      {showButton &amp;&amp; (
        &lt;Button
          onClick={() => setShowMessage(true)}
          size="lg"
        >
          Show Message
        &lt;/Button>
      )}
      &lt;CSSTransition
        in={showMessage}
        nodeRef={nodeRef}
        timeout={300}
        classNames="alert"
        unmountOnExit
        onExited={() => setShowButton(true)}
      >
        &lt;Alert
          ref={nodeRef}
          variant="primary"
          dismissible
          onClose={() => setShowMessage(false)}
        >
          &lt;Alert.Heading>
            Animated alert message
          &lt;/Alert.Heading>
          &lt;p>
            This alert message is being transitioned in and
            out of the DOM.
          &lt;/p>
          &lt;Button
            variant="primary"
            onClick={() => setShowMessage(false)}
          >
            Close
          &lt;/Button>
        &lt;/Alert>
      &lt;/CSSTransition>
    &lt;/Container>
  );
}
const container = document.getElementById('root');
const root = createRoot(container);
root.render(&lt;Example />);
</pre>
<p>Add the following styles to add the transition:</p>
<pre class="language-javascript hljs">//styles.css
.alert-enter {
  opacity: 0;
  transform: scale(0.9);
}
.alert-enter-active {
  opacity: 1;
  transform: translateX(0);
  transition: opacity 300ms, transform 300ms;
}
.alert-exit {
  opacity: 1;
}
.alert-exit-active {
  opacity: 0;
  transform: scale(0.9);
  transition: opacity 300ms, transform 300ms;
}
</pre>
<p>The above code will produce the following output:</p>
<p><img             class="aligncenter wp-image-143651 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/alert-message-react-transition-group.gif" alt="Alert Message React Transition Group." width="730" height="314"  /><noscript><img               class="aligncenter wp-image-143651 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/alert-message-react-transition-group.gif" alt="Alert Message React Transition Group." width="730" height="314"/></noscript></p>
<p>To add this transition, we have added a few lines of CSS and passed a few props to the CSS <code>transition</code> component.</p>
<p>Now, let’s reproduce the same animation using AutoAnimate with zero configuration.</p>
<blockquote><p><strong>N.B.</strong>, you can find the above demo here at <a href="https://codesandbox.io/s/react-transition-group-th033h?file=/index.js">CodeSandbox</a></p></blockquote>
<h2 id="alert-message-autoanimate">Alert message using AutoAnimate</h2>
<p>The following component shows you how to add an animation using AutoAnimate.</p>
<pre class="language-javascript hljs">//App.jsx

import React, { useState, useRef } from 'react';
import { createRoot } from 'react-dom/client';
import { Container, Button, Alert } from 'react-bootstrap';
import { useAutoAnimate } from '@formkit/auto-animate/react';

import 'bootstrap/dist/css/bootstrap.min.css';

function Example() {
//Auto Animate
  const [parent] = useAutoAnimate(/* optional config */);

  const [showButton, setShowButton] = useState(true);
  const [showMessage, setShowMessage] = useState(false);
  const nodeRef = useRef(null);

  return (
    &lt;Container style={{ paddingTop: '2rem' }}>
      {showButton &amp;&amp; (
        &lt;Button
          onClick={() => setShowMessage(true)}
          size="lg"
        >
          Show Message
        &lt;/Button>
      )}
      &lt;div ref={parent}>
        {showMessage &amp;&amp; (
          &lt;Alert
            ref={nodeRef}
            variant="primary"
            dismissible
            onClose={() => setShowMessage(false)}
          >
            &lt;Alert.Heading>
              Animated alert message
            &lt;/Alert.Heading>
            &lt;p>
              This alert message is being transitioned in
              and out of the DOM.
            &lt;/p>
            &lt;Button
              variant="primary"
              onClick={() => setShowMessage(false)}
            >
              Close
            &lt;/Button>
          &lt;/Alert>
        )}
      &lt;/div>
    &lt;/Container>
  );
}
const container = document.getElementById('root');
const root = createRoot(container);
root.render(&lt;Example />);
</pre>
<p>Here, we have used the same code that we used for React Transition Group. We have included the AutoAnimate library and added the <code>useAutoAnimate</code> hook ref to the <code>Alert</code> <code>parent</code> element (<code>&lt;div></code>).</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>That’s all we need to do! It’s not necessary for us to add the CSS or transition duration. Let’s see the output here:</p>
<p><img             class="aligncenter wp-image-143653 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/autoanimate-alert-message.gif" alt="AutoAnimate Alert Message" width="730" height="325"  /><noscript><img               class="aligncenter wp-image-143653 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/autoanimate-alert-message.gif" alt="AutoAnimate Alert Message" width="730" height="325"/></noscript></p>
<p>We can see here that we’ve created the same animation with zero configuration — this is how AutoAnimate differs from other libraries!</p>
<blockquote><p><strong>N.B.</strong>, you can find the above demo here at <a href="https://codesandbox.io/s/auto-animate-dffre9?file=/index.js">CodeSandbox</a></p></blockquote>
<h2 id="how-does-it-work">How does it work?</h2>
<p>AutoAnimate is a single-function utility that accepts a parent element of the component which needs to be animated. The animation is then applied to the immediate child elements of the parent element.</p>
<p>AutoAnimate triggers the animations when the following events occur:</p>
<ul>
<li>A child element is inserted into the DOM</li>
<li>A child element is removed from the DOM</li>
<li>A child element is moved in the DOM</li>
</ul>
<h2 id="quick-setup-usage">Quick setup and usage</h2>
<p>Now, let’s set up AutoAnimate for use in your projects.</p>
<p>Install AutoAnimate using the following command:</p>
<p><code>yarn add @formkit/auto-animate</code></p>
<p>Import the <code>useAutoAnimate</code> hooks into the component which you want to animate, as shown here:</p>
<p><code>import { useAutoAnimate } from '@formkit/auto-animate/react</code></p>
<p>To animate a component, we need to add the reference returned by the <code>useAutoAnimate</code> hook to the parent element, as seen here:</p>
<pre class="language-javascript hljs">//App.jsx

import { useState } from 'react'
import { useAutoAnimate } from '@formkit/auto-animate/react'

const App = function () {
  const [items, setItems] = useState([0, 1, 2])
  const [parent] = useAutoAnimate()
  const add = () => setItems([...items, items.length])
  return 
  &lt;>
  &lt;ul ref={parent}>
    {items.map(
      item => &lt;li key={item}>{ item }&lt;/li>
    )}
  &lt;/ul>
  &lt;button onClick={add}>Add number&lt;/button>
  &lt;/>
}

export default App
</pre>
<p>Here, we have passed the reference of the parent element <code>&lt;ul></code> to <code>useAutoAnimate</code>. When clicking the <strong>Add Number</strong> button, the newly added list will be animated.</p>
<p>Next, we will take a look at some more examples.</p>
<h2 id="animate-dynamic-form-component">Animate a dynamic <code>Form</code> component</h2>
<p>Most apps have dynamic input <code>Form</code> components. Now, we will create a dynamic component, so add the following code:</p>
<blockquote><p><strong>N.B.</strong>, I have used the Ant Design <code>Form</code> for the sake of simplicity for this walkthrough</p></blockquote>
<pre class="language-javascript hljs">//DynamicForm.jsx

import { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';
import { Button, Form, Input, Space } from 'antd';
import React from 'react';

const DynamicForm = () => {
    return (
            &lt;Form name="dynamic_form_nest_item" autoComplete="off" >
                &lt;Form.List name="users">
                    {(fields, { add, remove }) => (
                        &lt;div>
                            {fields.map(({ key, name, ...restField }) => (
                                &lt;Space
                                    key={key}
                                    style={{
                                        display: 'flex',
                                        marginBottom: 8,
                                    }}
                                    align="baseline"
                                >
                                    &lt;Form.Item
                                        {...restField}
                                        name={[name, 'first']}
                                        rules={[
                                            {
                                                required: true,
                                                message: 'Missing first name',
                                            },
                                        ]}
                                    >
                                        &lt;Input placeholder="First Name" />
                                    &lt;/Form.Item>
                                    &lt;Form.Item
                                        {...restField}
                                        name={[name, 'last']}
                                        rules={[
                                            {
                                                required: true,
                                                message: 'Missing last name',
                                            },
                                        ]}
                                    >
                                        &lt;Input placeholder="Last Name" />
                                    &lt;/Form.Item>
                                    &lt;MinusCircleOutlined 
                                      onClick={() => remove(name)} 
                                      />
                                &lt;/Space>
                            ))}
                            &lt;Form.Item>
                                &lt;Button 
                                    type="dashed" 
                                    onClick={() => add()} 
                                    block 
                                    icon={&lt;PlusOutlined/>
                                    }>
                                    Add field
                                &lt;/Button>
                            &lt;/Form.Item>
                        &lt;/div>
                    )}
                &lt;/Form.List>
            &lt;/Form>
    );
};

export default DynamicForm;
</pre>
<p>Now, we will see the following output when we run the component. When we click on <strong>Add field,</strong> the inputs are added in a fraction of a second; it feels like bad UX to me!</p>
<p><img             class="aligncenter wp-image-143655 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-without-autoanimate.gif" alt="React Without AutoAnimate " width="730" height="794"  /><noscript><img               class="aligncenter wp-image-143655 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-without-autoanimate.gif" alt="React Without AutoAnimate " width="730" height="794"/></noscript></p>
<p>Let’s animate the form with AutoAnimate using a single line. Import the AutoAnimate library using the code in the <code>DynamicForm</code> component:</p>
<p><code>import { useAutoAnimate } from '@formkit/auto-animate/react'</code></p>
<p>Next, add the <code>useAutoAnimate</code> hook, as demonstrated here:</p>
<p><code>const [parent] = useAutoAnimate(/* optional config */)</code></p>
<p>Then, pass the reference for the parent element <code>&lt;div></code>, as below:</p>
<p><code>&lt;div ref={parent}></code></p>
<p>Now, run the code again; you can see the magic of AutoAnimate in action!</p>
<p><img             class="aligncenter wp-image-143657 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/auto-animate-examples.gif" alt="AutoAnimate Example" width="730" height="666"  /><noscript><img               class="aligncenter wp-image-143657 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/auto-animate-examples.gif" alt="AutoAnimate Example" width="730" height="666"/></noscript></p>
<h2 id="animate-user-comment-component">Animate a user comment component</h2>
<p>Another use case is to auto-animate the <code>Comments</code> component of an application.</p>
<p>Here, we are developing a <code>Comments</code> component, which is used to add comments to a post. If a new comment is added, it is displayed at the top of a list.</p>
<pre class="language-javascript hljs">//Comments.jsx
import {Avatar, Button, Comment, Form, Input,} from 'antd';
import React, {useState} from 'react';
import {useAutoAnimate} from '@formkit/auto-animate/react'
const {TextArea} = Input;

const Editor = ({onChange, onSubmit, submitting, value}) => (
    &lt;>
        &lt;Form.Item>
            &lt;TextArea rows={4} onChange={onChange} value={value}/>
        &lt;/Form.Item>
        &lt;Form.Item>
            &lt;Button 
                htmlType="submit" 
                loading={submitting} 
                onClick={onSubmit} 
                type="primary"
                >
            Add Comment
            &lt;/Button>
        &lt;/Form.Item>
    &lt;/>
);

const Comments = () => {
    const [comments, setComments] = useState([]);
    const [submitting, setSubmitting] = useState(false);
    const [value, setValue] = useState('');
    const [parent] = useAutoAnimate()
    const handleSubmit = () => {
        if (!value) return;
        setSubmitting(true);
        setTimeout(() => {
            setSubmitting(false);
            setValue('');
            setComments([
                ...comments,
                {
                    author: 'Han Solo',
                    avatar: 'https://joeschmoe.io/api/v1/random',
                    content: &lt;p>{value}&lt;/p>,
                },
            ]);
        }, 500);
    };

    const handleChange = (e) => {
        setValue(e.target.value);
    };

    return (
        &lt;>
            &lt;ul ref={parent}>
                {comments.map((comment) => (
                        &lt;Comment
                            key={comment.content}
                            author={comment.author}
                            avatar={
                                    &lt;Avatar 
                                      src="https://joeschmoe.io/api/v1/random" 
                                      alt="Han Solo"
                                    />
                                    }
                            content={
                                &lt;p>
                                    {comment.content}
                                &lt;/p>
                            }
                        />
                    )
                )}
            &lt;/ul>
            &lt;Comment
                avatar={
                  &lt;Avatar src="https://joeschmoe.io/api/v1/random" alt="Han Solo"/>
                }
                content={
                    &lt;Editor
                        onChange={handleChange}
                        onSubmit={handleSubmit}
                        submitting={submitting}
                        value={value}
                    />
                }
            />
        &lt;/>
    );
};

export default Comments;
</pre>
<p>In the above example, we have a comment input. When the user types a comment and clicks <strong>Add Comment</strong><strong>,</strong> the entered comment is appended at the top with an animation. To animate the list, we have added an AutoAnimate hook reference to the <code>&lt;ul></code> element.</p>
<p>Now, we will see the following output when we run the component:</p>
<p><img             class="aligncenter wp-image-143662 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/user-comment-component.gif" alt="User Comment Component." width="730" height="846"  /><noscript><img               class="aligncenter wp-image-143662 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/user-comment-component.gif" alt="User Comment Component." width="730" height="846"/></noscript></p>
<h2 id="customize-animation-duration">Customize the animation duration</h2>
<p>We can customize the transition time by passing the <code>duration</code> props to <code>useAutoAnimate</code>. Let’s see this in action with a dynamic card as an example.</p>
<p>In this example, we made the transition 500ms long, so when the user clicks <strong>Add Task</strong>, a new card is inserted and all other cards are moved after 500ms.</p>
<pre class="language-javascript hljs">//DynamicComponents.jsx

import React, {useState} from "react";
import {Avatar, Button, Card, Col, Form, Input, Row} from 'antd';
import {useAutoAnimate} from "@formkit/auto-animate/react";

const {Meta} = Card;

export default function DynamicComponents() {

    const [comments, setComments] = useState([]);
    const [parent] = useAutoAnimate({duration: 500});

    const handleSubmit = (values) => {
        if (!values) return;
        setComments((prev) => [{content: values.content}, ...prev]);
    };

    return (
        &lt;>
            &lt;Form
                name="basic"
                onFinish={handleSubmit}
                autoComplete="off"
            >
                &lt;Form.Item
                    name="content"
                >
                   &lt;Input/>
                &lt;/Form.Item>
                &lt;Form.Item>
                    &lt;Button htmlType="submit" type="primary">
                        Add Task
                    &lt;/Button>
                &lt;/Form.Item>
            &lt;/Form>
            &lt;Row gutter={[16, 24]} ref={parent}>
                {comments.map((comment) => (
                    &lt;Col span={6} key={comment.content}>
                        &lt;Card
                            style={{
                                width: 100,
                            }}
                            cover={
                                &lt;img
                                    alt="example"
                                    src="https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png"
                                />
                            }
                        >
                            &lt;Meta
                                avatar={
                                &lt;Avatar src="https://joeschmoe.io/api/v1/random"/>
                                  }
                                description={comment.content}
                            />
                        &lt;/Card>
                    &lt;/Col>
                ))
                }
            &lt;/Row>
        &lt;/>
    );
}
</pre>
<p>Now, we will see the following output when we run the component:</p>
<p><img             class="aligncenter wp-image-143664 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/customize-animation-duration.gif" alt="Customize Animation Duration." width="730" height="809"  /><noscript><img               class="aligncenter wp-image-143664 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/customize-animation-duration.gif" alt="Customize Animation Duration." width="730" height="809"/></noscript></p>
<h2 id="enable-disable-animations">Enable and disable animations</h2>
<p>Sometimes, we are required to disable an animation and use it later. To handle these cases, the AutoAnimate hook <code>useAutoAnimate</code> returns the <strong>Enable</strong> and <strong>Disable</strong> functions, which can be used to enable and disable an animation.</p>
<p>We can see this in the following code block:</p>
<pre class="language-javascript hljs">//DynamicCards.jsx

import React, {useState} from "react";
import {Avatar, Button, Card, Col, Form, Input, Row} from 'antd';
import {useAutoAnimate} from "@formkit/auto-animate/react";

const {Meta} = Card;

export default function DynamicCards() {
    const [comments, setComments] = useState([]);
    const [parent, enable] = useAutoAnimate({duration: 500});
    const [isEnabled, setIsEnabled] = useState(true)

    const handleSubmit = (values) => {
        if (!values) return;
        setComments((prev) => [{content: values.content}, ...prev]);
    };

    function toggle () {
        enable(!isEnabled)
        setIsEnabled(!isEnabled)
    }

    return (
        &lt;>
            &lt;Form
                name="basic"
                onFinish={handleSubmit}
                autoComplete="off"
            >
                &lt;Form.Item
                    name="content"
                >
                    &lt;Input/>
                &lt;/Form.Item>
                &lt;Form.Item>
                    &lt;Button htmlType="submit" type="primary">
                        Add Task
                    &lt;/Button>
                &lt;/Form.Item>
                &lt;Form.Item>
                    &lt;Button onClick={toggle} type="primary">
                        { isEnabled ? "🚫 Disable" : "✅ Enable" } animations
                    &lt;/Button>
                &lt;/Form.Item>
            &lt;/Form>
            &lt;Row gutter={[16, 24]} ref={parent}>
                {comments.map((comment) => (
                    &lt;Col span={6} key={comment.content}>
                        &lt;Card
                            style={{
                                width: 100,
                            }}
                            cover={
                                &lt;img
                                    alt="example"
                                    src="https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png"
                                />
                            }
                        >
                            &lt;Meta
                                avatar={
                                  &lt;Avatar 
                                  src="https://joeschmoe.io/api/v1/random"/>}
                                  description={comment.content}
                            />
                        &lt;/Card>
                    &lt;/Col>
                ))
                }
            &lt;/Row>
        &lt;/>
    );
}
</pre>
<p>Here, we have used our previous example by adding enable and disable options to it. Animation is controlled by the <code>enable</code> boolean prop passed to the <code>useAutoAnimate</code> hook.</p>
<p>Now, we will see the following output when we run the component:</p>
<p><img             class="aligncenter wp-image-143666 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/enable-disable-animations.gif" alt="Enable And Disable Animations " width="730" height="794"  /><noscript><img               class="aligncenter wp-image-143666 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/enable-disable-animations.gif" alt="Enable And Disable Animations " width="730" height="794"/></noscript></p>
<p>AutoAnimate is a zero-config utility that also provides an option to customize the default animation keyframes and use custom animations. However, AutoAnimate’s default animation offerings will typically be enough for most components in my experience.</p>
<blockquote><p><strong>N.B.</strong>, note: You can find the complete code of this tutorial in this <a href="https://codesandbox.io/s/auto-animate-amimation-examples-react-tfk9d2">CodeSandbox</a></p></blockquote>
<h2 id="conclusion">Conclusion</h2>
<p>AutoAnimate makes animation very simple with its zero-config approach, ease of use, and speedy implementation — it helps devs efficiently provide smooth user experiences in their projects.</p>
<p>In addition to the examples we’ve looked at today with React, AutoAnimate also supports Vue, Angular, and Svelte. You can find examples of other JavaScript frameworks in the official <a href="https://auto-animate.formkit.com/#usage-vue">docs</a>.</p>
<p>Let me know of your own experiences using AutoAnimate in the comments below and thanks for reading!</p><div class="code-block code-block-17" >
<div class="blog-plug inline-plug react-plug" vwo-el-id="26283398190">
<h2 vwo-el-id="41600691720">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener">LogRocket</a>: Full visibility into your production React apps
</h2> Debugging React applications can be difficult, especially when users experience issues that are hard to reproduce. If you’re interested in monitoring and tracking Redux state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time,
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" vwo-el-id="19356441070">try LogRocket</a>.
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441380">
<img class="first-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png" vwo-el-id="18272717540" />
</a>
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="19356441690">
<img class="second-react-image alignnone size-full wp-image-46 jetpack-lazy-image jetpack-lazy-image--handled" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677" vwo-el-id="30720362350" />
</a>
<p  vwo-el-id="28675660440" class="">
<a href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="35866400580">LogRocket
</a> combines session replay, product analytics, and error tracking – empowering software teams to create the ideal web and mobile product experience. What does that mean for you?
</p>
<p> Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay problems as if they happened in your own browser to quickly understand what went wrong.
</p>
<p> No more noisy alerting. Smart error tracking lets you triage and categorize issues, then learns from this. Get notified of impactful user issues, not false positives. Less alerts, way more useful signal.
</p>
<p vwo-el-id="28675660750">The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores.
</p>
<p vwo-el-id="28675661060">Modernize how you debug your React apps —
<a class="signup" href="https://lp.logrocket.com/blg/react-signup-general" target="_blank" rel="noopener noreferrer" vwo-el-id="40093418840">start monitoring for free</a>.
</p>
</div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-143647" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-143647" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-143647" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/animate-react-components-single-line-using-autoanimate/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Application state management with Svelte - LogRocket Blog</title>
			<link>https://blog.logrocket.com/application-state-management-svelte/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/application-state-management-svelte/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Application state management with Svelte - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/application-state-management-svelte/">Application state management with Svelte - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/raphaelugwu/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2019/07/raphaelugwu.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2019/07/raphaelugwu.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/raphaelugwu/">
Raphael Ugwu <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Writer, software engineer, and a lifelong student.</span>
</div>
</div>
<h1 class="posttitle">Application state management with Svelte</h1>
<p>
<span class="post-date"><time class="post-date">
November 16, 2022 </time></span>
 <span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1382</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p><em><strong>Editor’s note</strong>: This article was last validated for accuracy 16 November 2022.</em></p>
<p>In early JavaScript frameworks like Angular, it was common to have all the state in your application embedded inside routes, services, controllers, local storage, and session storage. However, as applications grew larger, it became harder to keep track of what was being stored where.</p>
<p>Improvement came in the form of <a href="https://blog.logrocket.com/comparing-redux-vs-vuex/">state management libraries like Redux and Vuex</a>. Newer frameworks like Svelte have taken a more simplistic approach to state management, eliminating the need to install libraries and offering stores that manage state within the framework instead. In this article, we’ll explore how Svelte manages and handles state in an application.</p>
<p><iframe  src="https://embed.podcasts.apple.com/us/podcast/svelte-with-rich-harris/id1539945251?i=1000537608769" height="175" frameborder="0" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation"/></p>
<h2 id="tableofcontents">Table of contents</h2>
<ul >
<li><a href="#context-svelte">Svelte Context API</a></li>
<li><a href="#working-svelte-stores">Working with Svelte stores</a>
<ul >
<li><a href="#writable-stores">Writable stores</a></li>
<li><a href="#readable-stores">Readable stores</a></li>
</ul>
</li>
<li><a href="#building-datasets-svelte-stores">Building datasets with Svelte stores</a></li>
<li><a href="#build-store">Build a Svelte store</a></li>
<li><a href="#creating-components">Creating components</a></li>
</ul>
<h2 id="context-svelte">Svelte Context API</h2>
<p>Svelte’s context API is perfect for cross-component communication without having to complicate your codebase by passing around props. The <a href="https://svelte.dev/tutorial/context-api">context API</a> is enabled by two inbuilt Svelte functions, <code>getContext</code> and <code>setContext</code>. You can make an object or value available anywhere within your app by setting it in the context and associating it with a key, as shown in the code sample below:</p>
<pre>&lt;script>
  import { setContext } from 'svelte'

  const thisObject = {}

  setContext('thisKey', thisObject)
&lt;/script>
</pre>
<p>To make <code>thisKey</code> available in a different component within the app, simply import it using the <code>getContext</code> function:</p>
<pre>&lt;script>
  import { getContext } from 'svelte'

  const thisObject = getContext('thisKey')
&lt;/script>
</pre>
<p>Keep in mind that you can only use <code>getContext</code> to retrieve a key in the component that used <code>setContext</code> or a component within the same component tree. To communicate properties and values across two components within different trees, Svelte uses <a href="https://svelte.dev/docs#svelte_store">stores</a>.</p>
<h2 id="working-svelte-stores">Working with Svelte stores</h2>
<p>As an app increases in size, it tends to increase in complexity. At this point, it’s not a great idea to nest certain parts of the app’s state in the app’s component hierarchy; you’ll have some properties that need to be accessed by different components.</p>
<p>Svelte handles this type of property via stores, which are objects that hold a value and can notify you when that value changes. Svelte has two kinds of stores for handling state in applications, <code>writable</code> and <code>readable</code> stores.</p>
<h3 id="writable-stores">Writable stores</h3>
<p><a href="https://svelte.dev/docs#writable">Writable stores</a> are objects that hold values or properties that can be accessed by different components within an app. Let’s use the writable store to hold a value that we can then alter or pass around our app. To access this value, you would export it from the store and save it as a JavaScript file:</p>
<pre>&lt;!-- location.js -->
&lt;script>
  import writable from 'svelte/store'

  export const city = writable('New York')
&lt;/script>
</pre>
<p>You can then import it into any other component where it’s needed as follows:</p>
<pre>&lt;scipt>
  import { city } from './location.js'
&lt;/script>
</pre>
<p>The value in a writable store can be altered. Should you need to change the value of <code>city</code> in any component where it is imported, you can use the <code>set()</code> method:</p>
<pre>&lt;!-- Map.svelte -->

&lt;script>
  import { city } from './location.js'

  city.set('Washington')

&lt;/script>
</pre>
<p>Or, you can use the <code>update()</code> method to run a callback that passes the current value as an argument:</p>
<pre>&lt;!-- Map.svelte -->

&lt;script>
  import { city } from './location.js'

  const newCity = 'Washington'

  function changeCity() {
    city.update(existing => newCity)
  }

&lt;/script>
</pre>
<p>Alternately, you could have components watch out for changes to the value you set in your store by using Svelte’s <code>subscribe()</code> method:</p>
<pre>&lt;!-- Map.svelte -->

&lt;script>
  import { city } from './location.js'

  const watch = city.subscribe(value => {
    console.log(value);
  });
&lt;/script>
</pre>
<h3 id="readable-stores">Readable stores</h3>
<p>Like writable stores, readable stores hold objects, but they cannot be updated from external components. When using a readable store, you have to set its value when you create it. Readable stores are mostly used to handle data that you need to be immutable. Below is an example of what you might handle using a readable store, a counter:</p>
<pre>&lt;!-- counter.js -->

&lt;script>
  import { readable } from 'svelte/store'

  export const counter = readable(0, set => {
    setTimeout(() => {
     set(1)
    }, 1000)
  })
&lt;/script>
</pre>
<p>The counter above can then be imported into another component as follows:</p>
<pre>&lt;!-- Home.svelte-->

&lt;script>
  import { counter } from './store.js'
&lt;/script>

&lt;h1>You have {$counter} seconds left!&lt;h1>
</pre>
<h2 id="building-datasets-svelte-stores">Building datasets with Svelte stores</h2>
<p>Let’s build an actual app where we’ll manage state in Svelte. Our app will be just a basic updated list. First, <a href="https://blog.logrocket.com/how-to-build-simple-svelte-js-app/">we’ll create a Svelte project</a>. In your terminal, input the following command:</p>
<pre>npm create <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="26504f5243664a4752435552">[email protected]</a> dealership-svelte -- --template svelte
</pre>
<p>Then, navigate to the project directory and install all the dependencies of this project:</p>
<pre>npm install
</pre>
<p>The complete app should have a folder structure similar to the following:</p>
<p><img             class="aligncenter wp-image-144183 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/svelte-folder-structure.png" alt="Svelte Folder Structure" width="235" height="283"  /><noscript><img               class="aligncenter wp-image-144183 size-full" src="https://blog.logrocket.com/wp-content/uploads/2022/11/svelte-folder-structure.png" alt="Svelte Folder Structure" width="235" height="283"/></noscript></p>
<p>Once the app is built, deploy it by running <code>npm run dev</code> in your terminal. This deploys the app on the port <code>localhost:5000</code>.</p>
<h2 id="build-store">Build a Svelte store</h2>
<p>In the <code>src</code> folder in our project, let’s create a <code>store</code> folder, which we’ll use for keeping our stores. Next, we’ll create a file to contain what we need to store, define methods for updating the values of our store, and reset them to their default values. We’ll call this file <code>cars.js</code>:</p>
<pre> // src/store/cars.js

 import { writable } from 'svelte/store';

 const CARS = [
     { make: "Ford", model: "Taurus", year: "2015" },
     { make: "Toyota", model: "Avalon", year: "2013" }
 ];

 const { subscribe, set, update } = writable(CARS);

 const addCar = car => update(cars => {
     return [...cars, car];
 });

 const reset = () => {
     set(CARS);
 };

 export default {
     subscribe,
     addCar,
     reset
 }
</pre>
<p>You can now import the exported methods <code>subscribe</code> , <code>addCar</code>, and <code>reset</code> into any component and use them to subscribe, add new values, and reset our list of cars, respectively.</p>
<h2 id="creating-components">Creating components</h2>
<p>Next, we’ll create components that will receive the methods exported from our store. We’ll create two components, <code>CarPage</code>, which we’ll use when we want to add a new car, and <code>CarList</code>, which will show the list of added cars. <code>CarPage</code> will update all added cars and respond to changes automatically:</p>
<pre>&lt;!-- src/CarPage.svelte -->
&lt;script>
        import cars from "./store/cars";
&lt;/script>

&lt;div id="carPage">
        { #each $cars as car }
                &lt;p>{car.make} {car.model}&lt;/p>
                &lt;p>{car.year}&lt;/p>
                &lt;hr />
        { /each }
&lt;/div>
</pre>
<p>Next, we’ll create <code>CarList</code>, which is a form that lets us update and remove vehicles accordingly:</p>
<pre>&lt;!-- src/CarList.svelte -->
&lt;script>
        import cars from "./store/cars";

        // binding values
        let make = "";
        let model = "";
        let year = "";

        // submit car
        const submitCar = () => {
                cars.addCar({ make, model, year });
                // reset values
                make = model = year = "";
        }
&lt;/script>

&lt;div id="carList">
    &lt;input type="text"  bind:value={make} placeholder="Enter vehicle make" />
    &lt;input type="text"  bind:value={model} placeholder="Enter vehicle model" />
    &lt;input type="year" bind:value={year} placeholder="Enter vehicle year" />
    &lt;input type="submit" on:click={submitCar} value="Include Vehicle" />
    &lt;input type="submit" on:click={cars.reset} value="Reset Vehicle list" />
&lt;/div>
</pre>
<p>Lastly, we’ll import both <code>CarList</code> and <code>CarPage</code> into <code>App.svelte</code>:</p>
<p/>
<pre>&lt;!-- src/App.svelte-->

&lt;script>
    import CarList from "./CarList.svelte";
    import CarPage from "./CarPage.svelte";
&lt;/script>
&lt;main>
    &lt;h1>Car Dealership&lt;/h1>
    &lt;CarList />
    &lt;CarPage />
&lt;/main>
</pre>
<p>At this point, we’ll have an application that shows the rudiments of managing state using Svelte. Our app’s behavior should model the one in the video below:</p>
<p><span class="embed-youtube" ><iframe  class="youtube-player" width="640" height="360" src="https://www.youtube.com/embed/xCP013FPmDE?version=3&amp;rel=1&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;fs=1&amp;hl=en-US&amp;autohide=2&amp;wmode=transparent" allowfullscreen="true"  sandbox="allow-scripts allow-same-origin allow-popups allow-presentation"/></span></p>
<h2 id="conclusion">Conclusion</h2>
<p><a href="https://blog.logrocket.com/svelte-vs-vue-comparing-framework-internals/#reactivity">Svelte’s adaptability makes it a great choice</a> for building small scale apps that require you to manage state. Its offering of customizable stores to choose from is brilliant, allowing you to isolate preferences via stores. Certainly, we should see more promising features and alterations on this with more contributors to the <a href="https://github.com/sveltejs/svelte">Svelte repo</a> on GitHub.</p>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-15942" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/application-state-management-svelte/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/application-state-management-svelte/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-15942" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/application-state-management-svelte/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-15942" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/application-state-management-svelte/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/application-state-management-svelte/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Applying Atomic Design to your Next.js project - LogRocket Blog</title>
			<link>https://blog.logrocket.com/applying-atomic-design-next-js-project/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/applying-atomic-design-next-js-project/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Applying Atomic Design to your Next.js project - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/applying-atomic-design-next-js-project/">Applying Atomic Design to your Next.js project - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/nefejames/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/12/nefe-james.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/nefejames/">
Nefe James <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Nefe is a frontend developer who enjoys learning new things and sharing his knowledge with others.</span>
</div>
</div>
<h1 class="posttitle">Applying Atomic Design to your Next.js project</h1>
<p>
<span class="post-date"><time class="post-date">
October 6, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1682</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>When starting a new project, CSS is easy to write. However, as the project grows in scale and the number of components, style sheets, and lines of code increases, CSS becomes a nightmare to maintain. Luckily, CSS methodologies create guidelines for writing modular, reusable, and scalable code.</p>
<p>There are a few popular methodologies, including Atomic Design, BEM, SMACSS, and OOCSS. In this article, we will focus on Atomic Design, learn its principles, and apply them to create a basic blog page in a <a href="https://blog.logrocket.com/tag/nextjs/" target="_blank" rel="noopener">Next.js</a> application.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#what-atomic-design-css">What is Atomic Design in CSS?</a></li>
<li><a href="#creating-next-js-application">Creating the Next.js application</a></li>
<li><a href="#building-basic-blog-page-next-js-application-atomic-design">Building a basic blog page in a Next.js application with Atomic Design</a>
<ul >
<li><a href="#creating-title-atom">Creating the title atom</a></li>
<li><a href="#setting-up-navbar-molecule">Setting up the navbar molecule</a></li>
<li><a href="#making-table-of-contents-molecule">Making the table of contents molecule</a></li>
<li><a href="#adding-authors-details-molecule">Adding the author’s details molecule</a></li>
<li><a href="#designing-blog-content-molecule">Designing the blog content molecule</a></li>
<li><a href="#building-blog-container-organism">Building the blog container organism</a></li>
</ul>
</li>
<li><a href="#creating-layout-template">Creating the layout template for the blog page</a></li>
<li><a href="#bringing-all-together-page">Bringing it all together on the page</a></li>
</ul>
<h2>Prerequisites</h2>
<p>To follow along with this tutorial, you’ll need knowledge of Next.js, CSS, SCSS, and the <a href="https://blog.logrocket.com/atomic-design-react-native/" target="_blank" rel="noopener">Atomic Design methodology</a>.</p>
<h2 id="what-atomic-design-css">What is Atomic Design in CSS?</h2>
<p>Atomic Design is a CSS methodology created by <a href="https://bradfrost.com/blog/post/atomic-web-design/" target="_blank" rel="noopener">Brad Frost</a>. It provides direction for creating scalable systems, reusable components, and design systems. Atomic Design was inspired by chemistry, which is why the building blocks are called atoms, molecules, organisms, templates, and pages.</p>
<p>Atoms are the smallest building blocks and are composed of HTML tags and HTML elements. Examples of atoms include inputs, buttons, and headings.</p>
<p>Similar to their chemical inspiration, Atomic Design’s molecules are a combination of atoms. For example, a form is a molecule because it combines the label, input, and button elements.</p>
<p>When we combine molecules or atoms, we get organisms. Organisms are groups of molecules and atoms joined to form relatively complex, distinct UI components and sections of an interface.</p>
<p>Continuing with the chemical theme, templates are made up of organisms. They are the structure of the content and are used to create a page’s layouts, blueprints, and wireframes.</p>
<p>Finally, pages are the final product. In the architectural world, for example, a template would be the blueprint of a building, and a page would be the completed building.</p>
<h2 id="creating-next-js-application">Creating a Next.js application</h2>
<p>Now, let’s build the Next.js application.</p>
<p>First, create a new Next.js project by running this command in the terminal:</p>
<pre class="language-shell hljs">npx create-next-app atomic-next-app
</pre>
<p>Next, we navigate into the project directory:</p>
<pre class="language-shell hljs">cd atomic-next-app
</pre>
<p>We will use <a href="https://sass-lang.com/install" target="_blank" rel="noopener">Sass</a> for styling, so install that below:</p>
<pre class="language-shell hljs">npm install --save-dev sass
</pre>
<p>Then, run the command to start the application:</p>
<pre class="language-shell hljs">npm run dev
</pre>
<h2 id="building-basic-blog-page-next-js-application-atomic-design">Using Atomic Design in Next.js</h2>
<p>We will create a basic blog page with a navigation bar, a table of contents, blog content, and the author’s details. Our title will be the only atom we create, while the navbar, table of contents, author’s details, and blog content will be our molecules. The blog container will consist of those molecules and will be our organism. The structure of the blog should look like this:</p>
<p><img             class="aligncenter size-full wp-image-135628 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/next-js-application-atomic-design-blog-example.png" alt="Layout of a blog post in a Next.js application using Atomic Design" width="730" height="411"    /><noscript><img               class="aligncenter size-full wp-image-135628" src="https://blog.logrocket.com/wp-content/uploads/2022/10/next-js-application-atomic-design-blog-example.png" alt="Layout of a blog post in a Next.js application using Atomic Design" width="730" height="411"  /></noscript></p>
<p>The folder structure for the project should look like this:</p>
<p><img             class="aligncenter size-full wp-image-135638 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/next-js-file-structure-atomic-design-project.png" alt="Next.js File Structure in an Atomic Design Project" width="380" height="482"    /><noscript><img               class="aligncenter size-full wp-image-135638" src="https://blog.logrocket.com/wp-content/uploads/2022/10/next-js-file-structure-atomic-design-project.png" alt="Next.js File Structure in an Atomic Design Project" width="380" height="482"  /></noscript></p>
<p>Now that we’ve defined the atoms, molecules, organisms, templates, and pages, let’s create the components. You can use any component library, CSS processor, or tool. For this article, we will use Sass and <a href="https://blog.logrocket.com/a-deep-dive-into-css-modules/" target="_blank" rel="noopener">CSS Modules</a>.</p>
<h2 id="creating-title-atom">Creating the title atom</h2>
<p>We’ll set our blog page title using the title atom. As an atom, it will only have one <code>h1</code> element. To create the title, add a <code>components/Title.js</code> file to the application’s root and paste this code:</p>
<pre class="language-javascript hljs">import styles from "../../styles/title.module.scss";

export default function Title() {
  return (
    &lt;h1 className={styles.blogTitle}>
      How to Monitor Your Frontend and Perform Product Analysis with LogRocket
    &lt;/h1>
  );
}
</pre>
<p>Then, for styling, add a <code>title.module.scss</code> file to the <code>styles</code> folder and enter the styles below:</p>
<pre class="language-css hljs">.blogTitle {
  font-size: 2.5rem;
  font-weight: 500;
  margin-bottom: 1rem;
  display: inline-block;
}
</pre>
<h2 id="setting-up-navbar-molecule">Setting up the navbar molecule</h2>
<p>The navbar molecule comprises the <code>nav</code>, an <code>a</code> HTML element, and Next.js’ <code>Link</code> component.</p>
<p>Create a <code>components/Navbar.js</code> file and paste the code:</p>
<pre class="language-javascript hljs">import styles from "../../styles/navbar.module.scss";
import Link from "next/link";

export default function Navbar() {
  return (
    &lt;nav className={styles.navbarContainer}>
      &lt;Link href="#">
        &lt;a>The Coolest Blog Ever&lt;/a>
      &lt;/Link>
    &lt;/nav>
  );
}
</pre>
<p>To edit the styling, add a <code>navbar.module.scss</code> file to <code>styles</code> and paste the styles below:</p>
<pre class="language-css hljs">.navbarContainer {
  padding: 1.6rem;
  background-color: #8652ff;
  box-shadow: 0 4px 16px 0 rgba(41, 0, 135, 0.12);
  background-image: linear-gradient(150deg, rgba(99, 31, 255, 0.6), #8652ff);

  a {
    color: rgb(241, 235, 255);
    font-size: 2rem;
  }
}
</pre>
<h2 id="making-table-of-contents-molecule">Building the table of contents molecule in Next.js</h2>
<p>Like the navbar molecule, this molecule consists of the <code>nav</code>, <code>ul</code>, the <code>a</code> HTML elements, and <code>Link</code> components.</p>
<p>To set it up, create a <code>components/TableOfContents.js</code> file and paste the code below:</p>
<pre class="language-javascript hljs">import styles from "../../styles/tableOfContents.module.scss";
import Link from "next/link";

const TableofContentRoutes = [
  { label: "Introduction", href: "#" },
  { label: "Getting Started", href: "#" },
  { label: "What is LogRocket", href: "#" },
  { label: "How to Monitor Frontend with LogRocket", href: "#" },
  { label: "How to Perform Product Analysis with LogRocket", href: "#" },
  { label: "Why LogRocket is Awesome", href: "#" },
  { label: "Conclusion", href: "#" },
];

export default function TableOfContents() {
  return (
    &lt;div className={styles.tableOfContentsContainer}>
      &lt;h2>Table of Contents&lt;/h2>
      &lt;nav>
        &lt;ul>
          {TableofContentRoutes.map((route) => (
            &lt;Link href={route.href} key={route.label}>
              &lt;a>{route.label}&lt;/a>
            &lt;/Link>
          ))}
        &lt;/ul>
      &lt;/nav>
    &lt;/div>
  );
}
</pre>
<p>We created a <code>TableofContentRoutes</code> array in the code above with <code>label</code> and <code>href</code>. Then, we mapped through the <code>TableofContentRoutes</code> routes and rendered a link for each one.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Now, for styling, add a <code>tableOfContents.module.scss</code> file to <code>styles</code> and insert the styles:</p>
<pre class="language-css hljs">.tableOfContentsContainer {
  ul {
    display: flex;
    flex-direction: column;
    list-style: none;
    a {
      color: inherit;
      text-decoration: underline;
    }
  }

  @media (min-width: 768px) {
    width: 300px;
  }
}
</pre>
<h2 id="adding-authors-details-molecule">Adding the author’s details molecule</h2>
<p>The author’s molecule will contain the author’s image and name. In this tutorial, we will name our author John Doe. We’ll use the <code>Image</code> component and a <code>span</code> tag to set this up.</p>
<p>First, add an <code>Author.js</code> file to the components folder and insert the following code:</p>
<pre class="language-javascript hljs">import styles from "../../styles/authorDetail.module.scss";
import Image from "next/image";

export default function AuthorDetail() {
  return (
    &lt;div className={styles.authorDetailContainer}>
      &lt;div className="img-box">
        &lt;Image
          alt="Author's avatar"
          src="/author.jpg"
          width="50px"
          height="50px"
        />
      &lt;/div>
      &lt;span>John Doe&lt;/span>
    &lt;/div>
  );
}
</pre>
<p>To edit the styling, add <code>authorDetail.module.scss</code> to <code>styles</code> and paste the styles below:</p>
<pre class="language-css hljs">.authorDetailContainer {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 2rem;

  .img-box {
    position: relative;
    border-radius: 50%;
  }
}
</pre>
<h2 id="designing-blog-content-molecule">Designing the blog content molecule</h2>
<p>Next, we’ll set up the blog content molecule to house the blog’s texts, which are a collection of <code>p</code> tags. For this, add <code>BlogContent.js</code> to the components folder:</p>
<pre class="language-javascript hljs">import styles from "../../styles/blogContent.module.scss";

export default function BlogContent() {
  return (
    &lt;div className={styles.blogContentContainer}>
      &lt;p>
        Eu amet nostrud aliqua in eiusmod consequat amet duis culpa dolor.
        Excepteur commodo proident aliquip aliquip fugiat ex exercitation amet
        velit. Mollit id cupidatat duis incididunt. Excepteur irure deserunt
        fugiat cillum id. Aliquip nulla pariatur sunt ex. Nulla id ut minim
        cupidatat laboris culpa laboris. Anim consectetur veniam ipsum
        exercitation ipsum consequat magna quis pariatur adipisicing.
      &lt;/p>
    &lt;/div>
  );
}
</pre>
<p>Now that we’ve set up the molecule for our text, we need to edit the styling. To do this, add a <code>blogContent.module.scss</code> file to <code>styles</code> and include the following code:</p>
<pre class="language-css hljs">.blogContentContainer {
  p {
    margin-bottom: 1rem;
    font-size: 1rem;
  }
}
</pre>
<h2 id="building-blog-container-organism">Building the blog container</h2>
<p>We set up all of our blog page’s molecules in the steps above. To create the blog container organism, we will combine the <code>Title</code>, <code>Author</code>, and <code>BlogContent</code> components. For this, add a <code>BlogContainer.js</code> file to the components folder:</p>
<pre class="language-javascript hljs">import Title from "../Atoms/Title";
import AuthorDetail from "../Molecules/AuthorDetail";
import BlogContent from "../Molecules/BlogContent";

export default function BlogContainer() {
  return (
    &lt;div className="blog-container">
      &lt;Title />
      &lt;AuthorDetail />
      &lt;BlogContent />
    &lt;/div>
  );
}
</pre>
<p>Here, we imported <code>Title</code>, <code>AuthorDetail</code>, and <code>BlogContent</code> and plugged them into <code>BlogContainer</code>. As you can see, no styling is required for this component. Now, we’ll build the layout template!</p>
<h2 id="creating-layout-template">Creating the layout template with Atomic Design</h2>
<p>The layout template is where we define the positioning of every other component on the page. To set it up, create a <code>Layout.js</code> file in the components folder:</p>
<pre class="language-javascript hljs">import styles from "../styles/layout.module.scss";
import Navbar from "../components/Molecules/Navbar";
import TableOfContents from "../components/Molecules/TableOfContents";
import BlogContainer from "../components/Organisms/BlogContainer";

export default function Layout() {
  return (
    &lt;div className={styles.layoutContainer}>
      &lt;header>
        &lt;Navbar />
      &lt;/header>
      &lt;main>
        &lt;aside>
          &lt;TableOfContents />
        &lt;/aside>
        &lt;article>
          &lt;BlogContainer />
        &lt;/article>
      &lt;/main>
    &lt;/div>
  );
}
</pre>
<p>Here, we imported the <code>Navbar</code>, <code>TableOfContents</code>, and <code>BlogContainer</code> components and plugged them into the <code>Layout</code> component.</p>
<p>Next, for the styling, add a <code>layout.module.scss</code> to <code>styles</code> and paste the styles below:</p>
<pre class="language-css hljs">.layoutContainer {
  main {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 1.6rem;

    @media (min-width: 768px) {
      flex-direction: row;
      justify-content: space-between;
    }
  }
}
</pre>
<h2 id="bringing-all-together-page">Finalizing the Next.js blog project</h2>
<p>To finish up, we will put <code>Layout</code>  into the <code>index.js</code> file to create the page.</p>
<pre class="language-javascript hljs">import Head from "next/head";
import Layout from "../components/Layout";

export default function Home() {
  return (
    &lt;div>
      &lt;Head>
        &lt;title>The Coolest Blog Ever&lt;/title>
      &lt;/Head>
      &lt;Layout />
    &lt;/div>
  );
}
</pre>
<p>With that, we have successfully applied the principles of Atomic Design to create a blog in Next.js. Our blog will look like this:</p>
<p><img             class="aligncenter size-full wp-image-135630 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/final-next-js-blog-atomic-design.png" alt="Basic Blog Page Created Using Atomic Design in a Next.js Project" width="730" height="411"    /><noscript><img               class="aligncenter size-full wp-image-135630" src="https://blog.logrocket.com/wp-content/uploads/2022/10/final-next-js-blog-atomic-design.png" alt="Basic Blog Page Created Using Atomic Design in a Next.js Project" width="730" height="411"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we applied the principles of Atomic Design to create the UI of a Next.js blog. By breaking web pages into separate components, Atomic Design prevents repetition and promotes consistency and scalability.</p>
<p>While we applied Atomic Design to a web development project in this article, its principles can also create design systems for UI/UX design.</p><div class="code-block code-block-30" >
<div class="blog-plug inline-plug next-plug"><h2><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">LogRocket</a>: Full visibility into production Next.js apps</h2> Debugging Next applications can be difficult, especially when users experience issues that are difficult to reproduce. If you’re interested in monitoring and tracking state, automatically surfacing JavaScript errors, and tracking slow network requests and component load time, <a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank">try LogRocket</a>. <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://files.readme.io/27c94e7-Image_2017-06-05_at_9.46.04_PM.png"/></noscript></a><a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is like a DVR for web and mobile apps, recording literally everything that happens on your Next.js app. Instead of guessing why problems happen, you can aggregate and report on what state your application was in when an issue occurred. LogRocket also monitors your app's performance, reporting with metrics like client CPU load, client memory usage, and more.</p><p>The LogRocket Redux middleware package adds an extra layer of visibility into your user sessions. LogRocket logs all actions and state from your Redux stores. </p><p>Modernize how you debug your Next.js apps — <a class="signup" href="https://lp.logrocket.com/blg/nextjs-signup" target="_blank" rel="noopener noreferrer">start monitoring for free</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-135553" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/applying-atomic-design-next-js-project/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/applying-atomic-design-next-js-project/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-135553" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/applying-atomic-design-next-js-project/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-135553" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/applying-atomic-design-next-js-project/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
 <div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/applying-atomic-design-next-js-project/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Applying SOLID principles to TypeScript - LogRocket Blog</title>
			<link>https://blog.logrocket.com/applying-solid-principles-typescript/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/applying-solid-principles-typescript/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Applying SOLID principles to TypeScript - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/applying-solid-principles-typescript/">Applying SOLID principles to TypeScript - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/destinyerhabor/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2023/01/3t1max.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2023/01/3t1max.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/destinyerhabor/">
Destiny Erhabor <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and cloud developer passionate about sharing knowledge through technical writing.</span>
</div>
</div>
<h1 class="posttitle">Applying SOLID principles to TypeScript</h1>
<p>
<span class="post-date"><time class="post-date">
January 13, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1678</span>
<span class="logrocket_editor">104</span>
</p>
</div>
<article class="article-post">
 <p>Defined long ago, the SOLID principles are intended to improve the readability, adaptability, extensibility, and maintainability of object-oriented designs. The five SOLID principles of object-oriented class design facilitate the development of understandable, tested software that many developers can use at any time and place.</p>
<p>We give <a href="https://en.wikipedia.org/wiki/Robert_C._Martin">Robert C. Martin</a>, popularly known as Uncle Bob, credit for this idea in his 2000 work, <em><a href="http://staff.cs.utu.fi/~jounsmed/doos_06/material/DesignPrinciplesAndPatterns.pdf">Design Principles and Design Patterns</a></em>. He’s also known for the best-selling books <em><a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/">Clean Code</a></em> and <em><a href="https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/">Clean Architecture</a></em>. The abbreviation SOLID was later coined by <a href="https://github.com/rafaelfgx/SOLID">Michael Feathers</a> to illustrate the ideas identified by Uncle Bob.</p>
<p>In this article, we’ll go over each of the SOLID principles, providing TypeScript examples to illustrate and understand them. Let’s get started!</p>
<ul>
<li><a href="#single-responsibility-principle">S: Single-responsibility principle</a></li>
<li><a href="#open-closed-principle">O: Open-closed principle</a></li>
<li><a href="#liskov-substitution-principle">L: Liskov substitution principle</a></li>
<li><a href="#interface-segregation-principle">I: Interface segregation principle</a></li>
<li><a href="#dependency-inversion-principle">D: Dependency inversion principle</a></li>
</ul>
<h2 id="single-responsibility-principle">S: Single-responsibility principle</h2>
<p>According to the single-responsibility principle, a class should be responsible for only one activity and only have one cause to change. This rule also includes modules and functions.</p>
<p>Let’s consider the example below:</p>
<pre class="&quot;language-typescript">class Student {
  public createStudentAccount(){
    // some logic
  }

  public calculateStudentGrade(){
    // some logic
  }

  public generateStudentData(){
    // some logic
  }
}
</pre>
<p>The idea of a single duty is broken in the <code>Student</code> class above. As a result, we should divide the <code>Student</code> class into different states of responsibility. According to SOLID, the idea of responsibility is a reason to change.</p>
<p>To pinpoint a reason to change, we need to look into what our program’s responsibilities are. We might change the <code>Student</code> class for three different reasons:</p>
<ul>
<li>The <code>createStudentAccount</code> computation logic changes</li>
<li>The logic for calculating student grades changes</li>
<li>The format of generating and reporting student data changes</li>
</ul>
<p>The single-responsibility principle highlights that the three aspects above put three different responsibilities on the <code>Student</code> class:</p>
<pre class="&quot;language-typescript">class StudentAccount {
  public createStudentAccount(){
    // some logic
  }
}


class StudentGrade {
  public calculateStudentGrade(){
    // some logic
  }
}


class StudentData {
  public generateStudentData(){
    // some logic
  }
}
</pre>
<p>Now that we‘ve divided the classes, each has only one duty, one responsibility, and only one alteration that needs to be made. Now, our code is simpler to explain and comprehend.</p>
<h2 id="open-closed-principle">O: Open-closed principle</h2>
<p>According to the open-closed principle, software entities should be open for extension but closed for modification. The essential concept behind this approach is that we should be able to add new functionality without requiring changes to the existing code:</p>
<pre class="&quot;language-typescript">class Triangle {
  public base: number;
  public height: number;
  constructor(base: number, height: number) {
    this.base = base;
    this.height = height;
  }
}


class Rectangle {
  public width: number;
  public height: number;
  constructor(width: number, height: number) {
    this.width = width;
    this.height = height;
  }
}
</pre>
<p>Let’s imagine that we want to develop a function that calculates the area of a collection of shapes. With our current design, it might appear something like the following:</p>
<pre class="&quot;language-typescript">function computeAreasOfShapes(
  shapes: Array&lt;Rectangle | Triangle>
) {
  return shapes.reduce(
    (computedArea, shape) => {
      if (shape instanceof Rectangle) {
        return computedArea + shape.width * shape.height;
      }
      if (shape instanceof Triangle) {
        return computedArea + shape.base * shape.height * 0.5 ;
      }
    },
    0
  );
}
</pre>
<p>The problem with this method is that every time we add a new shape, we have to change our <code>computeAreasOfShapes</code> function, thereby violating the open-closed concept. To demonstrate this, let’s add another shape called <code>Circle</code>:</p>
<pre class="&quot;language-typescript">class Circle {
  public radius: number;
  constructor(radius: number) {
    this.radius = radius;
  }
}
</pre>
<p>As against the open-closed principle, the <code>computeAreasOfShapes</code> function will have to change to a circle instance:</p>
<pre class="&quot;language-typescript">function computeAreasOfShapes(
  shapes: Array&lt;Rectangle | Triangle | Circle>
) {
  return shapes.reduce(
    (calculatedArea, shape) => {
      if (shape instanceof Rectangle) {
        return computedArea + shape.width * shape.height;
      }
      if (shape instanceof Triangle) {
        return computedArea + shape.base * shape.height * 0.5 ;
      }
      if (shape instanceof Circle) {
        return computedArea + shape.radius * Math.PI;
      }
    },
    0
  );
}
</pre>
<p>We can solve this issue by enforcing that all of our shapes have a method that returns the area:</p>
<pre class="&quot;language-typescript">interface ShapeAreaInterface {
  getArea(): number;
}
</pre>
<p>Now, the <code>shapes</code> class will have to implement our defined <code>interface</code> for <code>ShapeArea</code> to call its <code>getArea()</code> method:</p>
<pre class="&quot;language-typescript">class Triangle implements ShapeAreaInterface {
  public base: number;
  public height: number;
  constructor(base: number, height: number) {
    this.base = base;
    this.height = height;
  }

  public getArea() {
    return this.base * this.height * 0.5
  }
}



class Rectangle implements ShapeAreaInterface {
  public width: number;
  public height: number;
  constructor(width: number, height: number) {
    this.width = width;
    this.height = height;
  }
  public getArea() {
    return this.width * this.height;
  }
}
</pre>
<p>Now that we’re certain that all of our shapes have the <code>getArea</code> method, we can utilize it further. From our <code>computeAreasOfShapes</code> function, let’s update our code as follows:</p>
<pre class="&quot;language-typescript">function computeAreasOfShapes(
  shapes: Shape[]
) {
  return shapes.reduce(
    (computedArea, shape) => {
      return computedArea + shape.getArea();
    },
    0
  );
}
</pre>
<p>Now, we don’t have to change our <code>computeAreasOfShapes</code> function every time we add a new shape. You can test this out with the <code>Circle</code> shape class. We make it open for extension but closed for modification.</p>
<h2 id="liskov-substitution-principle">L: Liskov Substitution Principle</h2>
<p>The Liskov substitution principle, put forth by <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Barbara Liskov</a>, helps to ensure that modifying one aspect of our system does not affect other elements negatively.</p>
<p>According to the Liskov substitution principle, subclasses should be interchangeable with their base classes. This indicates that, assuming that class <code>B</code> is a subclass of class <code>A</code>, we should be able to present an object of class <code>B</code> to any method that expects an object of type <code>A</code> without worrying that the method may produce strange results.</p>
<p>To make it clearer, we‘ll dissect this idea into different components. Let’s use the example of a rectangle and square:</p>
<pre class="&quot;language-typescript">class Rectangle {
    public setWidth(width) {
        this.width = width;
    }
    public setHeight(height) {
        this.height = height;
    }
    public getArea() {
        return this.width * this.height;
    }
}
</pre>
<p>We have a straightforward <code>Rectangle</code> class, and the <code>getArea</code> function returns the rectangle’s area.</p>
<p>Now, we’ll choose to make another class specifically for squares. As you may well know, a square is simply a particular variety of rectangle in which the width and height are equal:</p>
<pre class="&quot;language-typescript">class Square extends Rectangle {

    setWidth(width) {
        this.width = width;
        this.height = width;
    }

    setHeight(height) {
        this.width = height;
        this.height = height;
    }
}
</pre>
<p>The code above runs without errors, as shown below:</p>
<pre class="&quot;language-typescript">let rectangle = new Rectangle();
rectangle.setWidth(100);
rectangle.setHeight(50);
console.log(rectangle.getArea()); // 5000
</pre>
<p>But, we’ll run into problems when we swap out a parent class instance for one of its child classes:</p>
<pre class="&quot;language-typescript">let square = new Square();
square.setWidth(100);
square.setHeight(50);
</pre>
<p>Given that <code>setWidth(100)</code> is expected to set both the width and height to <code>100</code>, you should have <code>10,000</code>. However, this will return <code>2500</code> as a result of the <code>setHeight(50)</code>, breaking the Liskov Substitution Principle.</p>
<p>To remedy this, you should create a general class for all shapes that contains all of the generic methods you want the objects of your subclasses to be able to access. Then, you’ll make a specific class for each unique method, like a rectangle or square.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h2 id="interface-segregation-principle">I: Interface segregation principle</h2>
<p>The interface segregation principle encourages smaller, more targeted interfaces. According to this concept, multiple client-specific interfaces are preferable to a single general-purpose interface.</p>
<p>To see how easy it is to understand and use this simple theory, let’s consider the following scenario:</p>
<pre class="&quot;language-typescript">interface ShapeInterface {
    calculateArea();
    calculateVolume();
}
</pre>
<p>All of the methods must be defined when a class implements this interface, even if you won’t use them, or if they don’t apply to that class:</p>
<pre class="&quot;language-typescript">class Square implements ShapeInterface {
    calculateArea(){
        // some logic
    }
    calculateVolume(){
        // some logic
    }  
}

class Cylinder implements ShapeInterface {
    calculateArea(){
        // some logic
    }
    calculateVolume(){
        // some logic
    }    
}
</pre>
<p>From the example above, you’ll see that you cannot determine the volume of a square or rectangle. You must declare every method, even the ones you won’t use or need because the class implements the interface.</p>
<p>Instead, we might put in place more compact interfaces, sometimes known as role interfaces:</p>
<pre class="&quot;language-typescript">interface AreaInterface {
    calculateArea();
}


interface VolumeInterface {
    calculateVolume();
}
</pre>
<p>We can prevent bloating interfaces and simplify program maintenance by altering the way we think about interfaces:</p>
<pre>class Square implements AreaInterface {
    calculateArea(){
        // some logic
    }
}

class Cylinder implements AreaInterface, VolumeInterface {
    calculateArea(){
        // some logic
    }
    calculateVolume(){
        // some logic
    }    
}
</pre>
<h2 id="dependency-inversion-principle">D: Dependency inversion principle</h2>
<p>According to the dependency inversion concept, high-level modules shouldn’t be dependent on low-level modules. Instead, both should rely on abstractions.</p>
<p>Uncle Bob sums up this rule as follows in his 2000 article, <em>Design Principles and Design Patterns</em>:</p>
<blockquote><p>“If the open-closed principle (OCP) states the goal of object oriented (OO) architecture, the DIP states the primary mechanism”.</p></blockquote>
<p>Simply said, both high-level and low-level modules will depend on abstractions rather than high-level modules dependent on low-level modules. Every dependency in the design should be directed toward an abstract class or interface. No dependency should target a concrete class.</p>
<p>Let’s construct an illustration to further explore this principle. Consider an order service. In this example, we’ll use the <code>OrderService</code> class, which records orders in a database. The low level class <code>MySQLDatabase</code> serves as a direct dependency for the <code>OrderService</code> class.</p>
<p>In this case, we’ve violated the dependency inversion principle. In the future, if we were to switch the database that we’re utilizing, we’d need to modify the <code>OrderService</code> class:</p>
<pre class="&quot;language-typescript">class OrderService {
  database: MySQLDatabase;

  public create(order: Order): void {
    this.database.create(order)
  }

  public update(order: Order): void {
    this.database.update
  }
}


class MySQLDatabase {
  public create(order: Order) {
    // create and insert to database
  }

  public update(order: Order) {
    // update database
  }
}
</pre>
<p>By designing an interface and making the <code>OrderService</code> class dependent on it, we can improve on this situation by reversing the dependency. Now, rather than relying on a low-level class, the high-level class depends on an abstraction.</p>
<p>We create an interface that helps abstract our services as follows:</p>
<pre class="&quot;language-typescript">interface Database {
  create(order: Order): void;
  update(order: Order): void;
}


class OrderService {
  database: Database;

  public create(order: Order): void {
    this.database.create(order);
  }

  public update(order: Order): void {
    this.database.update(order);
  }
}


class MySQLDatabase implements Database {
  public create(order: Order) {
    // create and insert to database
  }

  public update(order: Order) {
    // update database
  }
}
</pre>
<p>Now, without changing the <code>OrderService</code> class, we can add and extend new databases services.</p>
<h2 id="summary">Conclusion</h2>
<p>In this article, we’ve explored every SOLID principle with practical examples using TypeScript. The SOLID principles allow us to improve the readability and maintainability of our code, and they also make it simpler to increase our codebase without compromising other areas of our application.</p>
<p>When writing code, you should keep these guidelines in mind. Be sure to understand what they mean, what they do, and why you need them in addition to object oriented programming (OOP). Happy coding!</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-154713" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/applying-solid-principles-typescript/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/applying-solid-principles-typescript/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-154713" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/applying-solid-principles-typescript/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-154713" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/applying-solid-principles-typescript/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/applying-solid-principles-typescript/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>ArrayList vs. LinkedList for Kotlin data structure - LogRocket Blog</title>
			<link>https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>ArrayList vs. LinkedList for Kotlin data structure - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/">ArrayList vs. LinkedList for Kotlin data structure - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/antonello-zanini/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2021/06/Profile-500x500-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2021/06/Profile-500x500-1.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/antonello-zanini/">
Antonello Zanini <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software engineer, but I prefer to call myself a technology bishop. Spreading knowledge through writing is my mission.</span>
</div>
</div>
<h1 class="posttitle"><code>ArrayList</code> vs. <code>LinkedList</code> for Kotlin data structure</h1>
<p>
<span class="post-date"><time class="post-date">
November 16, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1716</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>Kotlin provides several data collection implementations. Also, thanks to its interoperability with the JVM, you can choose between the many <a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Collections.html">Java collections</a>. Adopting the correct data collection can make all the difference when it comes to performance and resource usage.</p>
<p>This is why you should know the characteristics of each of the most popular data collections offered by the programming language you are using. In detail, <code>ArrayList</code> and <code>LinkedList</code> represent two of the most widely adopted JVM data collection structures.</p>
<p>Here, you will learn how they are implemented behind the scenes in Kotlin, how they work, and what performance benefits they offer. In particular, by the end of this article, you will be able to easily tell when and why it is better to adopt an <code>ArrayList</code> over a <code>LinkedList</code> or vice versa.</p>
<p>Let’s dig into <code>ArrayList</code> and <code>LinkedList</code> in Kotlin!</p>
<p><em>TL;DR:</em> <em>In this post, you’ll find out everything you need to know about</em> <code>ArrayList</code> <em>and</em> <code>LinkedList</code> <em>to learn how to choose the right data collection structure between the two.</em></p>
<ul>
<li><a href="#what-is-an-arraylist-in-kotlin">What is an <code>ArrayList</code> in Kotlin?</a></li>
<li><a href="#what-is-a-linkedlist">What is a <code>LinkedList</code>?</a></li>
<li><a href="#why-kotlin-does-not-provide-a-linkedlist-implementation">Why Kotlin does not provide a <code>LinkedList</code> implementation</a></li>
<li><a href="#when-to-use-an-arraylist-over-a-linkedlist">When to use an <code>ArrayList</code> over a <code>LinkedList</code></a></li>
<li><a href="#when-to-use-a-linkedlist-over-an-arraylist">When to use a <code>LinkedList</code> over an <code>ArrayList</code></a></li>
</ul>
<h2 id="what-is-an-arraylist-in-kotlin">What is an <code>ArrayList</code> in Kotlin?</h2>
<p>In Kotlin, an <code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/">ArrayList</a></code> provides a <code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/index.html#kotlin.collections.MutableList">MutableList</a></code> implementation that uses an array as backing storage. Specifically, when an element is added to an <code>ArrayList</code>, it is inserted into the array. What happens behind the scene is that a new, larger array is created and replaces the old one, which is removed. In other words, an <code>ArrayList</code> allows you to create a dynamic array whose size can be incremented or decremented.</p>
<p><code>ArrayList</code> is a nonsynchronized data collection, which means it is not thread-safe. Also, an <code>ArrayList</code> can contain duplicated elements and provides read and write functionality. Note that you can specify the type of elements that the list can contain through a <a href="https://blog.logrocket.com/understanding-kotlin-generics/">generic</a>.</p>
<p>In detail, the most important methods and properties offered by the <code>ArrayList</code> class are:</p>
<ul>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/add.html">add()</a></code>: adds a new element to the list
<pre class="language-kotlin hljs">// initializing an empty ArrayList
var list = ArrayList&lt;Int>()
// adding 1 to the list
list.add(1)
// adding 2 to the list
list.add(2)
println(list) // [1, 2]

// adding 3 in position 1
list.add(1, 3)
println(list) // [1, 3, 2]</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/add-all.html">addAll()</a></code>: adds all the elements of a specified collection to the current list
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
// adding 1, 2, 3 to the list
list.addAll(listOf(1, 2, 3))
println(list) // [1, 2, 3]</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/get.html">get()</a></code>: returns the element at the specified index or an <code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-index-out-of-bounds-exception/">IndexOutOfBoundsException</a></code>
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
list.addAll(listOf(1, 2, 3))
// getting the element of index 1
println(list.get(1)) // 2</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/set.html">set()</a></code>: replaces the element in the specified position with the element passed as a parameter in the list
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
list.addAll(listOf(1, 2, 3))
// setting 4 in position 1
list.set(1, 4)
println(list) // [1, 4, 3]</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/index-of.html">indexOf()</a></code>: returns the index of the first occurrence of the specified element in the list, or <code>-1</code> if the element is not present
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
list.addAll(listOf(1, 2, 3))
println(list.indexOf(1)) // 0
println(list.indexOf(4)) // -1</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/remove.html">remove()</a></code>: removes the first occurrence of the specific element in the list
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
list.addAll(listOf(1, 2, 3))
// removing the element 2 from the list
list.remove(2)
println(list) // [1, 3]</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/remove-at.html">removeAt()</a></code>: removes the element at the specified index in the list
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
list.addAll(listOf(1, 2, 3))
// removing the element of index 0 from the list
list.removeAt(0)
println(list) // [2, 3]</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/clear.html">clear()</a></code>: removes all the elements in the list
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
list.addAll(listOf(1, 2, 3))
// clearing the list
list.clear()
println(list) // []</pre>
</li>
<li><code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/size.html">size</a></code>: returns the size of the list
<pre class="language-kotlin hljs">var list = ArrayList&lt;Int>()
// adding 1, 2, 3 to the list
list.addAll(listOf(1, 2, 3))
println(list.size) // 3</pre>
</li>
</ul>
<p>Also, you can initialize an <code>ArrayList</code> by passing a collection of elements to its constructor:</p>
<pre class="language-kotlin hljs">// initializing an ArrayList with the [1, 2, 3] list
val list2 = ArrayList&lt;Int>(listOf(1,2,3))
println(list2)
</pre>
<p>This snippet would print:</p>
<pre class="language-kotlin hljs">[1, 2, 3]
</pre>
<p>Otherwise, you can write the <code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/array-list-of.html">arrayListOf()</a></code> Kotlin function to directly get a new <code>ArrayList</code> from a given list of elements:</p>
<pre class="language-kotlin hljs">// getting an ArrayList from the [1, 2, 3] list
val list = arrayListOf(1, 2, 3)
// printing the Class name of list
println(list::class.simpleName) 
println(list)
</pre>
<p>This would return:</p>
<pre class="language-kotlin hljs">ArrayList
[1, 2, 3]
</pre>
<p>Note that in this case, you do not have to explicitly specify the generic type of the <code>ArrayList</code>. This will be inferred automatically from the types of the elements passed as a parameter in <code>arrayListOf()</code>.</p>
<h2 id="what-is-a-linkedlist">What is a <code>LinkedList</code>?</h2>
<p>Kotlin does not provide a <code>LinkedList</code> implementation. However, you can still use <code>LinkedList</code> because of the Kotlin JVM interoperability with Java. This is because <code>LinkedList</code> is a data collection that is part of the JVM implementation. So, let’s understand what a <code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html">LinkedList</a></code> is.</p>
<p>In Java, a <code>LinkedList</code> provides a nonsynchronized data collection structure that is based on pointers. A <code>LinkedList</code> does not use an array as backing storage. This means that all its elements are not stored in a contiguous location. Specifically, a <code>LinkedList</code> is a doubly linked list whose elements are linked with a pair of pointers as below:</p>
<p><figure id="attachment_141879"   class="wp-caption aligncenter"><img             class="size-full wp-image-141879 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/doubly-linked-list.png" alt="Doubly Linked List" width="730" height="235"    /><noscript><img               class="size-full wp-image-141879" src="https://blog.logrocket.com/wp-content/uploads/2022/11/doubly-linked-list.png" alt="Doubly Linked List" width="730" height="235"  /></noscript><figcaption id="caption-attachment-141879" class="wp-caption-text">Doubly linked list [<a href="https://it.m.wikipedia.org/wiki/File:Doubly_linked_list.png">Source</a>]</figcaption></figure>In detail, a <code>LinkedList</code> stores its elements in nodes. Each node has a pointer to the previous node and one to the next node in the list. To add an element to the list, the element is placed into a new node, which is then linked to the two adjacent elements in the list. You can declare the type of node elements through a generic.</p>
<p>The <code>LinkedList</code> class has the same methods as the <code>ArrayList</code> class because they both implement the <code>List</code> interface. However, the <code>LinkedList</code> class also implements the <code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/Deque.html">Deque</a></code> interface, which provides the following methods:</p>
<ul>
<li><code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html#getFirst()">getFirst()</a></code>: returns the element at the beginning of the list</li>
<li><code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html#getLast()">getLast()</a></code>: returns the element at the end of the list</li>
<li><code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html#getLast()">addFirst()</a></code>: adds an element at the beginning of the list</li>
<li><code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html#addLast(E)">addLast()</a></code>: adds an element at the end of the list</li>
<li><code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html#removeFirst()">removeFirst()</a></code>: removes the element at the beginning of the list</li>
<li><code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html#removeLast()">removeLast()</a></code>: removes the element at the end of the list</li>
</ul>
<h2 id="why-kotlin-does-not-provide-a-linkedlist-implementation">Why Kotlin does not provide a <code>LinkedList</code> implementation</h2>
<p>It seems that Kotlin developers <a href="https://discuss.kotlinlang.org/t/why-kotlin-does-not-provide-linkedlist-implementation/15991">decided not to implement</a> <code><a href="https://discuss.kotlinlang.org/t/why-kotlin-does-not-provide-linkedlist-implementation/15991">LinkedList</a></code> because the Java implementation of <code>LinkedList</code> is suboptimal in nearly all cases. Also, considering that originally there was only Kotlin JVM, the Kotlin developers preferred to rely on the Java implementation.</p>
<p>Plus, as you are about to learn, <code>LinkedList</code> gets outperformed by ArrayList in nearly every situation. So, they may have thought there is no real need for a Kotlin implementation of <code>LinkedList</code>.</p>
<h2 id="when-to-use-an-arraylist-over-a-linkedlist">When to use an <code>ArrayList</code> over a <code>LinkedList</code></h2>
<p><code>ArrayList</code> is the more efficient solution when it comes to random read access. This is because you can grab any element in constant time. That happens since there is an array behind the scenes. So, the <code>get()</code> method simply has to return the element specified by the index passed as a parameter. On the contrary, a <code>LinkedList</code> only provides sequential access, which is more expensive in terms of performance.</p>
<p>Plus, the <code>ArrayList</code> data structure does not involve overhead. On the contrary, a <code>LinkedList</code> defines two pointers for each element. Therefore, a <code>LinkedList</code> will occupy more elements than an <code>ArrayList</code>. This may easily become a problem when dealing with large lists.</p>
<p>Also, considering that an <code>ArrayList</code> is based on an array, the elements are stored sequentially in memory. So, <code>ArrayList</code>s can also take advantage of the <a href="https://en.wikipedia.org/wiki/Locality_of_reference">principle of locality</a>. This makes <code>ArrayList</code> more cache-friendly than <code>LinkedList</code>, whose elements are spread all over the RAM.</p>
<p>Thus, with <code>ArrayList</code>s you can experience an additional performance boost when nearby elements are accessed in a short time.</p>
<p>In detail, for an <code>ArrayList&lt;E></code>:</p>
<ul>
<li><code>get(index : Int)</code> is <code>O(1)</code></li>
<li><code>add(element : E)</code> is <code>O(1)</code> <a href="https://en.wikipedia.org/wiki/Amortized_analysis">amortized</a>, but <code>O(n)</code> when the underlying array has to be resized</li>
<li><code>add(index: Int, element : E)</code> is <code>O(n)</code></li>
<li><code>remove(index : Int)</code> is <code>O(n)</code></li>
<li><code>remove()</code> on the corresponding <code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list-iterator/">MutableListIterator</a></code> object is <code>O(n)</code></li>
<li><code>add(element : E)</code> on the corresponding <code>MutableListIterator</code> object is <code>O(n)</code></li>
</ul>
<p>Note the <code>O(1)</code> complexity on the <code>get()</code> method. This is the main benefit of <code>ArrayList</code> over <code>LinkedList</code>. Also, do not forget that you can get the <code>MutableListIterator</code> object from an <code>ArrayList</code> by calling the <code><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/list-iterator.html">listIterator()</a></code> method.</p>
<h2 id="when-to-use-a-linkedlist-over-an-arraylist">When to use a <code>LinkedList</code> over an <code>ArrayList</code></h2>
<p><code>LinkedList</code> allows constant-time insertions or removals when inserting an element at the beginning or end of the list. This is true also when the current node is known. In other words, when using a <code>LinkedList</code> with an <a href="https://kotlinlang.org/docs/iterators.html">iterator</a>, you can insert an element in <code>O(1)</code>. This is the main benefit of <code>LinkedList</code> over an <code>ArrayList</code>.</p>
<p>Also, when using a <code>LinkedList</code>, you can insert elements indefinitely. On the other hand, the array used by an <code>ArrayList</code> will eventually need to be resized. This is an expensive operation that can be avoided in <code>LinkedList</code>. Plus, considering that this operation may not be executed every time a write operation is performed over the <code>ArrayList</code>, the underlying array may become wastefully empty. In this particular scenario, an <code>ArrayList</code> may have more allocated memory than a <code>LinkedList</code>.</p>
<p>In all other scenarios, <code>LinkedList</code> is worse or equal to <code>ArrayList</code>. Specifically, for a <code>LinkedList&lt;E></code></p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2023/04/Screen-Shot-2023-04-05-at-3.19.07-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<ul>
<li><code>get(index : Int)</code> is <code>O(n)</code></li>
<li><code>getFirst()</code> and <code>getLast()</code> are <code>O(1)</code></li>
<li><code>add(index : Int, element : E)</code> is <code>O(n)</code></li>
<li><code>addFirst(element : E)</code> and <code>addLast(element : E)</code> are <code>O(1)</code></li>
<li><code>remove(index : Int)</code> is <code>O(n)</code></li>
<li><code>removeFirst()</code> and <code>removeLast()</code> are <code>O(n)</code></li>
<li><code>remove()</code> on the corresponding <code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/ListIterator.html">ListIterator</a></code> object is <code>O(1)</code></li>
<li><code>add(element : E)</code> on the corresponding <code>ListIterator</code> object is <code>O(1)</code></li>
</ul>
<p>Just as it happens for <code>ArrayList</code>, you can get a <code>ListIterator</code> object by calling the <code><a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/util/LinkedList.html#listIterator(int)">iteratorList()</a></code> method.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, you looked at the main differences between <code>ArrayList</code> and <code>LinkedList</code> in Kotlin. As shown, Kotlin offers an inbuilt implementation for <code>ArrayList</code>, while it relies on the Java <code>LinkedList</code> implementation.</p>
<p>Although they offer similar functionality, <code>ArrayList</code> is generally preferred over <code>LinkedList</code>. Kotlin developers tend to opt for <code>ArrayList</code> because of several reasons, and here you learned why this happens.</p>
<p>In detail, you had a look at what <code>ArrayList</code> and <code>LinkedList</code> are and dig into how the two data collection structures behave in terms of performance and memory usage under different worst-case scenarios.</p>
<p>Thanks for reading! I hope that you found this article helpful. Feel free to reach out to me with any questions, comments, or suggestions.</p><div class="code-block code-block-32" >
<div class="blog-plug inline-plug kotlin-plug"><h2><a href="https://lp.logrocket.com/blg/kotlin-signup">LogRocket</a>: Instantly recreate issues in your Android apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is an Android monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your Android apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your Android apps — <a class="signup" href="hhttps://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-141872" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-141872" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-141872" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/arraylist-vs-linkedlist-kotlin-data-structure/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Assertion functions in TypeScript - LogRocket Blog</title>
			<link>https://blog.logrocket.com/assertion-functions-typescript/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/assertion-functions-typescript/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Assertion functions in TypeScript - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/assertion-functions-typescript/">Assertion functions in TypeScript - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/matteodipirro/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/03/matteo-dipirro.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/03/matteo-dipirro.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/matteodipirro/">
Matteo Di Pirro <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I am an enthusiastic young software engineer who specialized in the theory of programming languages and type safety. I enjoy learning and experimenting with new technologies and languages, looking for effective ways to employ them.</span>
</div>
</div>
<h1 class="posttitle">Assertion functions in TypeScript</h1>
<p>
<span class="post-date"><time class="post-date">
October 3, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1409</span>
<span class="logrocket_editor"/>
</p>
</div>
<article class="article-post">
<p>Assertion functions in TypeScript are a very expressive type of function whose signature states that a given condition is verified if the function itself returns.</p>
<p>In its basic form, a typical <code>assert</code> function just checks a given predicate and throws an error if such a predicate is false. For example, Node.js’s assert throws an <code>AssertionError</code> if the predicate is false.</p>
<p>TypeScript, since its version 3.7, has gone a little beyond that by implementing the support of assertions at the type system level.</p>
<p>In this article, we’re going to explore assertion functions in TypeScript and see how they can be used to express invariants on our variables.</p>
<h2>Table of Contents</h2>
<ul>
<li><a href="#javascript-like-assertions">JavaScript-like assertions</a></li>
<li><a href="#typescript-like-assertions">TypeScript-like assertions</a>
<ul >
<li><a href="#function-declarations-and-expressions">Function declarations and expressions</a></li>
<li><a href="#assertion-functions-and-type-guards">Assertion functions and type guards</a></li>
<li><a href="#assertion-functions-without-a-type-predicate">Assertion functions without a type predicate</a></li>
</ul>
</li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="javascript-like-assertions">JavaScript-like assertions</h2>
<p>Node.js comes with a predefined assert function. As we mentioned in the introduction, it throws an <code>AssertionError</code> if a given predicate is false:</p>
<pre class="language-typescript hljs">const aValue = 10
assert(aValue === 20)</pre>
<p>In JavaScript, this was useful to guard against improper types in a function:</p>
<pre class="language-typescript hljs">function sumNumbers(x, y) {
  assert(typeof x === "number");
  assert(typeof y === "number");
  return x + y;
}</pre>
<p>Unfortunately, the code flow analysis does not take into account those assertions. In fact, they are simply evaluated at runtime and then forgotten.</p>
<p>With its assertion functions, TypeScript’s code flow analysis will be able to use the type of a function (in brief, its signature) to infer some properties of our code. We can use this new feature to make guarantees of our types throughout our code.</p>
<h2 id="typescript-like-assertions">TypeScript-like assertion</h2>
<p>An assertion function specifies, in its signature, the type predicate to evaluate. For instance, the following function ensures a given value be a <code>string</code>:</p>
<pre class="language-typescript hljs">function isString(value: unknown): asserts value is string {
  if (typeof value !== "string") throw new Error("Not a string")
}</pre>
<p>If we invoke the function above with a given parameter, and it returns correctly, TypeScript knows that value has type <code>string</code>. Hence, it will narrow down its type to <code>string</code>:</p>
<pre class="language-typescript hljs">const aValue: string|number = "Hello"
isString(aValue)
// The type of aValue is narrowed to string here</pre>
<p>Of course, nothing prevents us from messing up the assertion. For example, we could have written a (wrong) function as follows:</p>
<pre class="language-typescript hljs">function isString(value: unknown): asserts value is string {
  if (typeof value !== "number") throw new Error("Not a string")
}
</pre>
<p>Note that we’re now checking whether <code>value's</code> type is not <code>number</code>, instead of <code>string</code>. In this case, TypeScript’s code flow analysis will see a <code>Value</code> of type <code>never</code>, instead of <code>string</code> as above.</p>
<p>Assertion functions can be very useful with <a href="https://blog.logrocket.com/writing-readable-code-with-typescript-enums-a84864f340e9/" target="_blank" rel="noopener">enums</a>:</p>
<pre class="language-typescript hljs">type AccessLevel = "r" | "w" | "rw"

const writeOnly = "w"


function allowsReadAccess(level: AccessLevel): asserts level is "r" | "rw" {
    if (!level.includes("r")) throw new Error("Read not allowed")
}

allowsReadAccess(writeOnly)</pre>
<p>In the example above, we first defined a type whose value can only be either <code>"r"</code>, <code>"w"</code>, or <code>"rw"</code>. Let’s assume such a type simply defines the three types of access to a given resource. We then declare an assertion function throwing if its actual parameter does not allow a read operation.</p>
<p>As you can see, we’re narrowing down the type explicitly, stating that, if the function returns, the value must be either <code>"r"</code> or <code>"rw"</code>. If we call <code>allowsReadAccess</code> with <code>writeOnly</code> as the actual parameter, we’ll get an error as expected, stating that <code>"Read access is not allowed"</code>.</p>
<p>Another common use of assertion functions is expressing non-nullability. The following snippet of code shows a way to make sure a value is defined, that is it’s not either <code>null</code> or <code>undefined</code>:</p>
<pre class="language-typescript hljs">function assertIsDefined&lt;T>(value: T): asserts value is NonNullable&lt;T> {
  if (value === undefined || value === null) {
    throw new Error(`${value} is not defined`)
  }
}</pre>
<p>Where <code>NonNullable&lt;T></code> is a TypeScript type that excludes <code>null</code> and <code>undefined</code> from the legit values of the type T.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<h3 id="function-declarations-and-expressions">Function declarations and expressions</h3>
<p>At the time of writing, assertion functions may not be defined as plain function expressions. Generally speaking, function expressions can be seen as anonymous functions; that is, functions without a name:</p>
<pre class="language-typescript hljs">// Function declaration
function fun() { ... }

// Function expression
const fun = function() { ... }</pre>
<p>The main advantage of function declarations is hoisting, which is the possibility of using the function anywhere in the file where it’s defined. On the other hand, function expressions can only be used after they are created.</p>
<p>There is actually a workaround to write assertion functions as function expressions. Instead of defining the function along with its implementation, we’ll have to define its signature as an isolated type:</p>
<pre class="language-typescript hljs">// Wrong
// Error: A type predicate is only allowed in return type position for functions and methods.
// Error: Type '(value: any) => void' is not assignable to type 'void'.
const assertIsNumber: asserts value is number = (value) => {
  if (typeof value !== 'number') throw Error('Not a number')
}

// Correct
type AssertIsNumber = (value: unknown) => asserts value is number
const assertIsNumber: AssertIsNumber = (value) => {
  if (typeof value !== 'number') throw Error('Not a number')
}</pre>
<h3 id="assertion-functions-and-type-guards">Assertion functions and type guards</h3>
<p>Assertion functions in TypeScript are somewhat similar to type guards. Type guards were originally introduced to perform runtime checks to guarantee the type of a value in a given scope.</p>
<p>In particular, a type guard is a function that simply evaluates a type predicate, returning either <code>true</code> or <code>false</code>. This is slightly different from assertion functions, which, as we saw above, are supposed to throw an error instead of returning <code>false</code> if the predicate is not verified.</p>
<pre class="language-typescript hljs">function isString(value: unknown): value is string {
    return typeof value === "string"
}

// Type guards can also be declared as function expression
const isStringExp = (value: unknown): value is string =>
    typeof value === "string"</pre>
<p>There is another big difference though. Assertion functions can also be used without a type predicate, as we’ll see in the following section.</p>
<h3 id="assertion-functions-without-a-type-predicate">Assertion functions without a type predicate</h3>
<p>The assertion functions we’ve seen so far were all checking whether a given value had a given type. Hence, they were all fairly tailored for the target type. Nonetheless, assertion functions give us much more power. In particular, we can write a completely general function asserting a condition that gets input as a parameter:</p>
<pre class="language-typescript hljs">function assert(condition: unknown, msg?: string): asserts condition {
  if (condition === false) throw new Error(msg)
}</pre>
<p>The <code>assert</code> function now inputs a <code>condition</code>, whose type is <code>unknown</code>, and, possibly, a <code>message</code>. Its body simply evaluates such a condition. If it is <code>false</code>, then <code>assert</code> throws an error, as expected.</p>
<p>Note, however, that the signature makes use of the <code>condition</code> parameter after <code>asserts</code>. This way, we’re telling TypeScript code flow analysis that, if the function returns correctly, it can assume that <em>whatever</em> predicate we passed in was, in fact, verified.</p>
<p>TypeScript’s Playground gives us a pretty good visual representation of what the code flow analysis does. Let’s consider the following snippet of code, where we generate a random number and then call <code>assert</code> to make sure the generated number is <code>10</code>:</p>
<pre class="language-typescript hljs">const randomNumber = Math.random()
assert(randomNumber == 10, "The number must be equal to 10")
randomNumber</pre>
<p>If we inspect the inferred properties of <code>randomValue</code> before the call to <code>assert</code>, TypeScript just tells us the type (Figure 1).</p>
<figure id="attachment_134895"   class="wp-caption aligncenter"><img             class="size-full wp-image-134895 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/randomnumber.png" alt="RandomNumber" width="567" height="150"    /><noscript><img               class="size-full wp-image-134895" src="https://blog.logrocket.com/wp-content/uploads/2022/10/randomnumber.png" alt="RandomNumber" width="567" height="150"  /></noscript><figcaption id="caption-attachment-134895" class="wp-caption-text">Figure 1. TypeScript is only able to infer the type of randomNumber before the call to assert.</figcaption></figure>
<p>Then, as soon as we call <code>assert</code>, with the condition <code>randomNumber == 10</code>, TypeScript knows that the value will be <code>10</code> for the rest of the execution (Figure 2).</p>
<figure id="attachment_134897"   class="wp-caption aligncenter"><img             class="size-full wp-image-134897 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/10/randomnumber-set-10.png" alt="RandomNumber set to 10" width="514" height="98"    /><noscript><img               class="size-full wp-image-134897" src="https://blog.logrocket.com/wp-content/uploads/2022/10/randomnumber-set-10.png" alt="RandomNumber set to 10" width="514" height="98"  /></noscript><figcaption id="caption-attachment-134897" class="wp-caption-text">Figure 2. TypeScript now tells us that <code>randomNumber</code> is set to 10.</figcaption></figure>
<p>Lastly, if we attempt to check the equality of <code>randomNumber</code> and another number, TypeScript will be able to evaluate the property without even running the program. For example, the code flow analysis will complain about the following assignment, saying, “This condition will always return ‘false’ since the types ’10’ and ’20’ have no overlap.”:</p>
<pre class="language-typescript hljs">const pred = (randomNumber === 20)</pre>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we dove into what TypeScript assertion functions are and how we can use them to have the code flow analysis infer a set of properties about our values. They are a very nice feature that makes sense considering that TypeScript is transpiled to JavaScript, which gives programmers a lot more flexibility.</p>
<p>In particular, we took a look at a handful of usages, including narrowing types down and expressing conditions on the actual value of our variables. Lastly, we briefly mentioned the differences and similarities with type guards and grasped the syntactic limitations of assertions functions.</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-134888" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/assertion-functions-typescript/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/assertion-functions-typescript/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-134888" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/assertion-functions-typescript/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-134888" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/assertion-functions-typescript/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/assertion-functions-typescript/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Authentication with Phoenix - LogRocket Blog</title>
			<link>https://blog.logrocket.com/phoenix-authentication/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/phoenix-authentication/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Authentication with Phoenix - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/phoenix-authentication/">Authentication with Phoenix - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/alexandergodwin/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/10/IMG_20220809_120947-e1666638768500.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/10/IMG_20220809_120947-e1666638768500.jpg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/alexandergodwin/">
Alexander Godwin <span class="btn follow">Follow</span></a>
<span class="author-description d-block">I'm a software developer and writer that likes to write code and build things. Currently I'm fascinated by distributed systems and cloud computing.</span>
</div>
</div>
<h1 class="posttitle">Authentication with Phoenix</h1>
<p>
<span class="post-date"><time class="post-date">
December 15, 2022 </time></span>
<span class="dot"/>
<span class="readingtime">5 min read</span>
<span class="wordcount">1535</span>
<span class="logrocket_editor">110</span>
</p>
</div>
<article class="article-post">
<p>Phoenix is an Elixir-based web development framework that uses the server-side Model View Controller (MVC) design pattern. Its implementations (components and constructs) are comparable to that of other well-known frameworks, including Ruby on Rails, Node’s Express.js, and Python’s Django. Phoenix leverages well-known web development constructs, making it simple to learn if you’ve already worked in the field.</p>
<p>In this tutorial, we will learn how to add authentication to a Phoenix application using the <code>phx.gen.auth</code> generator. The <code>phx.gen.auth</code> generator is widely used because of its flexibility, security, and its implementation of Elixir’s best practices. <code>Phx.gen.auth</code> is included in the Phoenix framework and is the recommended way to add authentication to Phoenix applications.</p>
<p>We’ll cover:</p>
<ul>
<li><a href="#getting-started-phoenix">Getting started with Phoenix</a></li>
<li><a href="#creating-phoenix-application">Creating a Phoenix application</a></li>
<li><a href="#updating-database-credentials">Updating database credentials</a></li>
<li><a href="#generating-mvc-html-resource-using-phxgenhtml">Generating MVC for an HTML resource using <code>phx.gen.html</code></a></li>
<li><a href="#authentication-phxgenauth">Authentication with <code>phx.gen.auth</code></a></li>
<li><a href="#exploring-files-created-phxgenauth">Exploring the files created by <code>phx.gen.auth</code></a></li>
<li><a href="#adding-authentication-tasks-routes">Adding authentication to our <code>/tasks</code> routes</a></li>
</ul>
<h2>Prerequisites</h2>
<ul>
<li>Elixir</li>
<li>PostgreSQL</li>
</ul>
<p>To install Elixir on your system, visit the <a href="https://elixir-lang.org/install.html">Elixir docs</a> and follow the installation instruction for your operating system.</p>
<h2 id="getting-started-phoenix">Getting started with Phoenix</h2>
<p>Run the following command to install Phoenix on your system:</p>
<pre class="language-elixir hljs">mix archive.install hex phx_new 
</pre>
<p>The command above instructs <a href="https://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html">Mix</a> to install the Phoenix framework. Similar to other mainstream programming languages, Elixir provides the Mix build tool to help with compiling, creating, and testing applications, as well as installing, updating, and uninstalling dependencies. It would be unimaginable to use Elixir without a tool like Mix.</p>
<h2 id="creating-phoenix-application">Creating a Phoenix application</h2>
<p>By providing the <code>--no-ecto</code> flag with the <code>phx.new</code> command, a Phoenix application can be created without a database, but because we need data persistence, we’ll be using a database instead. The database of choice for this lesson is PostgreSQL, the standard selection for Phoenix apps.</p>
<p>To install PostgreSQL, <a href="https://www.enterprisedb.com/downloads/postgres-postgresql-downloads">refer to the docs</a> or you can visit this <a href="https://blog.logrocket.com/build-rest-api-elixir-phoenix/">tutorial</a> to install and run using Docker:</p>
<pre class="language-elixir hljs">mix phx.new todo_app
</pre>
<p>Here, <code>todo</code> is the name of the application we wish to create. When prompted to <code>Fetch and install dependencies? [Yn]</code>, select <strong>yes</strong>. After fetching the dependencies, we still have a couple of steps to get our application up and running.</p>
<p>First of all, we have to enter our newly created app directory:</p>
<pre class="language-elixir hljs">cd todo_app 
</pre>
<h2 id="updating-database-credentials">Updating database credentials</h2>
<p>Next, we have to configure our database, locate the <code>config/dev.exs</code>, and<br/>
update the following line to reflect our Postgres database <code>username</code> and <code>password</code>:</p>
<pre class="language-elixir hljs">username: "postgres",
password: "postgres",
</pre>
<p>Then, run the following command to create your database:</p>
<pre class="language-elixir hljs">mix ecto.create
</pre>
<p>Finally, we can run our server using this command:</p>
<pre class="language-elixir hljs">mix phx.server
</pre>
<p>Visit <code>http://localhost:4000</code> to see your Phoenix application:</p>
<p><img             class="aligncenter size-full wp-image-148709 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-app.png" alt="Phoenix App" width="730" height="331"    /><noscript><img               class="aligncenter size-full wp-image-148709" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-app.png" alt="Phoenix App" width="730" height="331"  /></noscript></p>
<h2 id="generating-mvc-html-resource-using-phxgenhtml">Generating MVC for an HTML resource using <code>phx.gen.html</code></h2>
<p>Phoenix provides a way for us to generate controllers, views, and context for an HTML resource:</p>
<pre class="language-elixir hljs">mix phx.gen.html Todo Task tasks name:string completed:boolean</pre>
<p>We provide a couple of arguments to the <code>phx.gen.html</code> generator, the first of which is the context module, followed by the name of the schema module, and finally, the plural name of the schema (the name to be used as the schema table name). The <code>name:string</code> and <code>completed:boolean</code> are the two fields that will be created in the <code>tasks</code> table.</p>
<p>Looking at the terminal, we can see the instructions provided by Phoenix:</p>
<p>First, we have to copy the <code>resources "/tasks", TaskController</code> into our <code>lib/todo_app_web/router.ex</code> file:</p>
<pre class="language-elixir hljs">defmodule TodoAppWeb.Router do
use TodoAppWeb, :router
...

scope "/", TodoAppWeb do
pipe_through(:browser)
get("/", PageController, :index)
resources "/tasks", TaskController #updated
end
...</pre>
<p>The <code>resources</code> represent different HTTP methods — rather than writing each method out explicitly, Phoenix provides <code>resources</code>.</p>
<p>Then, we have to update our database to update the changes made by <code>phx.gen.html</code>:</p>
<pre class="language-elixir hljs">mix ecto.migrate</pre>
<p>Finally, to access the generated task route, visit <code>http://localhost:4000/tasks</code>:</p>
<p><img             class="aligncenter size-full wp-image-148711 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-framework-tasks.png" alt="Phoenix Framework Tasks" width="730" height="332"    /><noscript><img               class="aligncenter size-full wp-image-148711" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-framework-tasks.png" alt="Phoenix Framework Tasks" width="730" height="332"  /></noscript></p>
<p>In the screenshot above, I added a couple of uncompleted tasks. Feel free to do the same and play around with the application a bit. Phoenix provides CRUD ability out of the box with these generated resources, so without any additional pieces of code, we can create, update, and delete tasks from the database.</p>
<h2 id="authentication-phxgenauth">Authentication with <code>phx.gen.auth</code></h2>
<p>Phoenix provides a very easy way to add authentication to our application using the <code>phx.gen.auth</code> generator. Let’s see how to do that.</p>
<p>In your terminal, run:</p>
<pre class="language-elixir hljs">mix phx.gen.auth Accounts User users</pre>
<p>With this command, an <code>Accounts</code> context is created with a module for the <code>Accounts.User</code> schema. The last argument is the plural form of the schema module, which creates database table names and route helpers. The <code>mix phx.gen.auth</code> generator is comparable to the <code>mix phx.gen.htm``l</code> generator, with the exception that it does not accept a list of extra fields to add to the schema and that it generates a lot more context functions.</p>
<p>Looking at our terminal, we can see that Phoenix has generated a couple of files and also updated existing files. We will look at some of those files in a moment, especially the <code>lib/todo_app_web/router.ex</code> file, but let’s quickly run a couple of commands.</p>
<p>In your terminal, run:</p>
<pre class="language-elixir hljs">mix deps.get</pre>
<p>This command updates your application dependencies. We also need to update our database to reflect the changes made by the <code>phx.gen.auth</code> generator.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-22-at-12.58.05-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<p>Now, run this command:</p>
<pre class="language-elixir hljs">mix ecto.migrate</pre>
<p>If we check our application running in the browser, we can see the <code>Register</code> and <code>Log in</code> generated by the <code>phx.gen.auth</code> generator:</p>
<p><img             class="aligncenter size-full wp-image-148714 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-registration-login.png" alt="Phoenix Registration And Login" width="730" height="335"    /><noscript><img               class="aligncenter size-full wp-image-148714" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-registration-login.png" alt="Phoenix Registration And Login" width="730" height="335"  /></noscript></p>
<p>Register on the application and you should see a “user created successfully” pop-up message.</p>
<h2 id="exploring-files-created-phxgenauth">Exploring the files created by <code>phx.gen.auth</code></h2>
<p>Let’s look at some of the files created by <code>phx.gen.auth</code>.</p>
<p>The router file at <code>lib/todo_app_web/router.ex</code> already existed, the <code>phx.gen.auth</code> generator just added a couple of lines of code to it:</p>
<pre class="language-elixir hljs">...
## Authentication routes
  scope "/", TodoAppWeb do
    pipe_through [:browser, :redirect_if_user_is_authenticated]
    get "/users/register", UserRegistrationController, :new
    post "/users/register", UserRegistrationController, :create
    get "/users/log_in", UserSessionController, :new
    post "/users/log_in", UserSessionController, :create
    get "/users/reset_password", UserResetPasswordController, :new
    post "/users/reset_password", UserResetPasswordController, :create
    get "/users/reset_password/:token", UserResetPasswordController, :edit
    put "/users/reset_password/:token", UserResetPasswordController, :update
  end

  scope "/", TodoAppWeb do
    pipe_through [:browser, :require_authenticated_user]
    get "/users/settings", UserSettingsController, :edit
    put "/users/settings", UserSettingsController, :update
    get "/users/settings/confirm_email/:token", UserSettingsController, :confirm_email
  end

  scope "/", TodoAppWeb do
    pipe_through [:browser]
    delete "/users/log_out", UserSessionController, :delete
    get "/users/confirm", UserConfirmationController, :new
    post "/users/confirm", UserConfirmationController, :create
    get "/users/confirm/:token", UserConfirmationController, :edit
    post "/users/confirm/:token", UserConfirmationController, :update
  end
...
</pre>
<p>The <code>:require_authenticated_user</code> and <code>:redirect_if_user_is_authenticated</code> are called plugs. The routes that occur after adhere to the rules they state.</p>
<p>The <code>:require_authenticated_user</code> plug allows us to protect routes from being accessed by unauthenticated users, while the <code>:redirect_if_user_is_authenticated</code> plug allows us to prevent authenticated users from visiting certain routes.</p>
<p>Both the <code>:require_authenticated_user</code> and <code>:redirect_if_user_is_authenticated</code> plugs are from the <code>lib\todo_app_web\controllers\user_auth.ex</code> controller:</p>
<pre class="language-elixir hljs">def redirect_if_user_is_authenticated(conn, _opts) do
    if conn.assigns[:current_user] do
      conn
      |> redirect(to: signed_in_path(conn))
      |> halt()
    else
      conn
    end
  end
  @doc """
  Used for routes that require the user to be authenticated.
  If you want to enforce the user email is confirmed before
  they use the application at all, here would be a good place.
  """
  def require_authenticated_user(conn, _opts) do
    if conn.assigns[:current_user] do
      conn
    else
      conn
      |> put_flash(:error, "You must log in to access this page.")
      |> maybe_store_return_to()
      |> redirect(to: Routes.user_session_path(conn, :new))
      |> halt()
    end
</pre>
<h2 id="adding-authentication-tasks-routes">Adding authentication to our <code>/tasks</code> routes</h2>
<p>Currently, our <code>/tasks</code> routes do not require users to be authenticated before they can access them. If we want, we can separate our <code>/tasks</code> route into its different HTTP methods. Therefore, the line that has just a single <code>resource</code> to access all methods:</p>
<pre class="language-elixir hljs">resources "/tasks", TaskController</pre>
<p>is the same as:</p>
<pre class="language-elixir hljs">get "/tasks", TaskController, :index
post "/tasks", TaskController, :create
get "/tasks/new", TaskController, :new
get "/tasks/:id", TaskController, :show
get "/tasks/:id/edit", TaskController, :edit
put "/tasks/:id/update", TaskController, :update
delete "/tasks/:id/delete", TaskController, :delete
</pre>
<p>In order to make these routes require user authentication, all we have to do is put the <code>resources</code> behind the <code>:require_authenticated_user</code> plug:</p>
<pre class="language-elixir hljs">scope "/", TodoAppWeb do
    pipe_through [:browser, :require_authenticated_user]
    ...
    resources "/tasks", TaskController
  end
</pre>
<p>Log out of the application, then try to access the <code>http:localhost:4000/tasks</code> routes. You’ll be redirected to the login route with an error message displayed:</p>
<p><img             class="aligncenter size-full wp-image-148716 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-login-error-message.png" alt="Phoenix Login Error Message" width="730" height="316"    /><noscript><img               class="aligncenter size-full wp-image-148716" src="https://blog.logrocket.com/wp-content/uploads/2022/12/phoenix-login-error-message.png" alt="Phoenix Login Error Message" width="730" height="316"  /></noscript></p>
<p>You can only access these routes when you log in. And that’s it! We’ve achieved authentication in our Phoenix app.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, we learned how to implement authentication in Phoenix applications by using the <code>phx.gen.auth</code> generator to generate authentication for our application and understand the middleware it provides to us. Hopefully, with the help of this tutorial, you can achieve much more with Phoenix.</p><div class="code-block code-block-4" >
<div class="blog-plug base-cta"><h2>Cut through the noise of traditional error reporting with <a class="signup" href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a></h2>
<a href="https://lp.logrocket.com/blg/signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://cdn.sanity.io/images/mr2nzgx7/production/98f0057ddf97aa70213cfc8612ca112dfa09d2eb-482x256.svg?w=482&amp;h=256&amp;auto=format" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a digital experience analytics solution that shields you from the hundreds of false-positive errors alerts to just a few truly important items. LogRocket tells you the most impactful bugs and UX issues actually impacting users in your applications.</p>
<p>Then, use session replay with deep technical telemetry to see exactly what the user saw and what caused the problem, as if you were looking over their shoulder.</p>
<p>LogRocket automatically aggregates client side errors, JS exceptions, frontend performance metrics, and user interactions. Then LogRocket uses machine learning to tell you which problems are affecting the most users and provides the context you need to fix it.</p>
<p>Focus on the bugs that matter — <a class="signup" href="https://lp.logrocket.com/blg/signup-issue-free" target="_blank" rel="noopener noreferrer">try LogRocket today</a>.</p></div></div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-148676" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/phoenix-authentication/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/phoenix-authentication/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-148676" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/phoenix-authentication/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-148676" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/phoenix-authentication/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div class="clearfix mb-0"/>
</article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/phoenix-authentication/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

		<item>
			<title>Automate image optimization using the TinyPNG API - LogRocket Blog</title>
			<link>https://blog.logrocket.com/automate-image-optimization-tinypng-api/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/automate-image-optimization-tinypng-api/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>Automate image optimization using the TinyPNG API - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/automate-image-optimization-tinypng-api/">Automate image optimization using the TinyPNG API - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/johnreilly/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2020/01/john-reilly.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2020/01/john-reilly.jpeg?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/johnreilly/">
John Reilly <span class="btn follow">Follow</span></a>
<span class="author-description d-block">MacGyver turned Dev 🌻❤️ TypeScript / ts-loader / fork-ts-checker-webpack-plugin / DefinitelyTyped: The Movie</span>
</div>
</div>
<h1 class="posttitle">Automate image optimization using the TinyPNG API</h1>
<p>
<span class="post-date"><time class="post-date">
January 5, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">4 min read</span>
<span class="wordcount">1363</span>
<span class="logrocket_editor">112</span>
</p>
</div>
<article class="article-post">
<p>If you want to learn about automating image optimization, then you’ve come to the right place, as you can do just that with the TinyPNG API! This post will demonstrate clearly how to do that so you can optimize your images with ease in your projects.</p>
<p><em>Jump ahead:</em></p>
<ul>
<li><a href="#images-and-optimisation">Images and optimization</a></li>
<li><a href="#tiny-png-api">TinyPNG API</a></li>
<li><a href="#making-a-command-line-tool">Making a command line tool</a></li>
<li><a href="#using-the-tool">Using the tool</a></li>
</ul>
<h2 id="images-and-optimisation">Images and optimization</h2>
<p>Images are a big part of the web — they’re also a big part of the web’s payload. If we’re not careful, we can end up with a site that’s slow to load and expensive to host; a really bad combo!</p>
<p>I run <a href="https://developer.chrome.com/docs/lighthouse/overview/">Lighthouse</a> on my blog and I’m always looking for ways to improve the performance of the site; one of the things that Lighthouse flags is image optimization. It’s a good idea to <a href="https://blog.logrocket.com/ux-design/optimizing-images-mobile-browsers-ux-mindset/">optimize our images</a> to make sure they’re not unhelpfully large and hindering the <a href="https://blog.logrocket.com/top-5-web-apis-performance-based-analysis/">performance</a> of our projects.</p>
<p>We can do this manually using tools like <a href="https://tinypng.com/">TinyPNG</a> or <a href="https://squoosh.app/">Squoosh</a>, but it’s also possible to automate this process completely. In this post, I’ll show you how to optimize images automatically using the TinyPNG API.</p>
<h2 id="tiny-png-api">TinyPNG API</h2>
<p>The <a href="https://tinypng.com/developers">TinyPNG API</a> is a paid service. We can get a free API key which allows us to optimize 500 images per month. If we need to optimize more than that, we’ll need to pay for a subscription. I personally rarely find I optimize more than 500 images per month, so I’m happy with the free plan.</p>
<p>It’s worth noting that the name “TinyPNG” is a bit of a misnomer. The API supports a number of image formats including PNG, JPEG, and WebP, so it’s not just for PNGs — in fact, we’ll be using the WebP format in this post.</p>
<p>You can just use the API directly if you like, but I prefer to use a client library — we’ll be using the <a href="https://tinypng.com/developers/reference/nodejs">Node.js</a> library.</p>
<h2 id="making-a-command-line-tool">Making a command line tool</h2>
<p>We’re going to initialize a simple Node.js console application called tinify using <a href="https://www.typescriptlang.org/">TypeScript</a> and <a href="https://typestrong.org/ts-node/"><code>ts-node</code></a>:</p>
<pre class="language-bash hljs">mkdir tinify
cd tinify
npm init -y
npm install @types/node tinify ts-node typescript
npx tsc --init
</pre>
<p>You’ll note that we’re using the <code>tinify</code> npm package <a href="https://github.com/tinify/tinify-nodejs">that is developed here</a>. Handily, this package ships with TypeScript definitions, so we don’t need to install a separate types package.</p>
<p>In our <code>package.json</code> file, we’ll add a <code>start</code> script to run our application:</p>
<pre class="language-json hljs">  "scripts": {
    "start": "ts-node index.ts"
  },
</pre>
<p>In our <code>tsconfig.json</code> file, we’ll also up the <code>target</code> to a new <a href="https://blog.logrocket.com/typescript-4-7-ecmascript-module-support/">ECMAScript</a> emit version to allow us to use some newer language features. We don’t need this for TinyPNG, but it’s nice to use the newer features:</p>
<pre class="language-json hljs">{
  "compilerOptions": {
    "target": "es2021"
  }
}
</pre>
<p>Now, we can create our <code>index.ts</code> file:</p>
<pre class="language-typescript hljs">import fs from 'fs';
import path from 'path';
import tinify from 'tinify';

function setUpTinify() {
  if (!process.env.TINIFY_KEY) {
    console.log(
      'Run with: TINIFY_KEY=$YOUR_API_KEY IMAGE_DIR=$YOUR_IMAGE_DIRECTORY yarn start'
    );
    process.exit(1);
  }

  tinify.key = process.env.TINIFY_KEY;
}

function getImageFilesFromDirectory(dir: string) {
  return fs
    .readdirSync(dir)
    .filter(
      (file) =>
        file.endsWith('.jpg') ||
        file.endsWith('.jpeg') ||
        file.endsWith('.webp') ||
        file.endsWith('.png')
    )
    .map((file) => path.resolve(dir, file))
    .filter((file) => fs.statSync(file).size > 0);
}

async function processImageFiles(imageFiles: string[]) {
  let processed = 0;
  let totalOriginalSizeKb = 0n;
  let totalNewSizeKb = 0n;
  let failed: string[] = [];

  for (const imageFilePath of imageFiles) {
    try {
      console.log(`
🖼️  Processing ${imageFilePath}
`);
      const originalImageFilePrefix = imageFilePath.substring(
        0,
        imageFilePath.lastIndexOf('.')
      );

      const originalStats = await fs.promises.stat(imageFilePath, {
        bigint: true,
      });
      const originalSizeKb = originalStats.size / 1024n;

      const source = tinify.fromFile(imageFilePath);
      const converted = source.convert({ type: ['image/webp', 'image/png'] });
      const convertedExtension = await converted.result().extension();
      const newImageFilePath = `${originalImageFilePrefix}.${convertedExtension}`;
      await converted.toFile(newImageFilePath);

      const newStats = await fs.promises.stat(newImageFilePath, {
        bigint: true,
      });
      const newSizeKb = newStats.size / 1024n;

      const imageFileName = path.basename(imageFilePath);
      const newImageFileName = path.basename(newImageFilePath);

      totalOriginalSizeKb += originalSizeKb;
      totalNewSizeKb += newSizeKb;

      console.log(`- 🔴 ${originalSizeKb}kb - ${imageFileName}
- 🟢 ${newSizeKb}kb - ${newImageFileName}
- 🔽 ${calculatePercentageReduction({ originalSizeKb, newSizeKb }).toFixed(
        2
      )}% reduction

✅ Processed! (${++processed} of ${imageFiles.length})

----------------------`);
    } catch (e) {
      console.log(`\n❌ Failed to process ${imageFilePath}`);
      failed.push(imageFilePath);
    }
  }

  console.log(`
************************************************
* Total savings for ${imageFiles.length} images 
- 🔴 ${totalOriginalSizeKb}kb
- 🟢 ${totalNewSizeKb}kb
- 🔽 ${calculatePercentageReduction({
    originalSizeKb: totalOriginalSizeKb,
    newSizeKb: totalNewSizeKb,
  }).toFixed(2)}% reduction
************************************************
`);

  if (failed.length > 0) console.log('Failed to process', failed);
}

function calculatePercentageReduction({
  originalSizeKb,
  newSizeKb,
}: {
  originalSizeKb: bigint;
  newSizeKb: bigint;
}) {
  return (
    ((Number(originalSizeKb) - Number(newSizeKb)) / Number(originalSizeKb)) *
    100
  );
}

async function run() {
  setUpTinify();

  let directory = process.env.IMAGE_DIR;

  if (!directory) {
    console.log('No directory specified!');
    process.exit(1);
  }

  const imageFiles = getImageFilesFromDirectory(directory);
  console.log(`Found ${imageFiles.length} image files in ${directory}`);
  await processImageFiles(imageFiles);
}

// do it!
run();
</pre>
<p>There are a number of things happening here, so let me walk through it in a little more detail.</p>
<p>Each time we run it, we’re checking that we have a TinyPNG API key and an image directory specified. If not, we’ll exit with an error message.</p>
<p>Then, we’re getting a list of image files from the specified directory. We search for files with the extensions <code>.jpg</code>, <code>.jpeg</code>, <code>.webp</code>, and <code>.png</code> (those formats supported by TinyPNG) and we also filter out any files that are empty.</p>
<p>Next, we’re looping through the image files and processing them one by one. We’re using the <code>tinify</code> package to shrink the image and we say we’ll accept either <code>webp</code> or <code>png</code> as our target format. Tinify will decide which is the most optimal format upon each request and render accordingly.</p>
<p>Finally, we’re saving the new files to the same directory as the original file and we’re calculating the percentage reduction in file size.</p>
<p>To get an idea of what’s happening here, we can look at the code that does the conversion:</p>
<pre class="language-typescript hljs">const source = tinify.fromFile(imageFilePath);
const converted = source.convert({ type: ['image/webp', 'image/png'] });
const convertedExtension = await converted.result().extension();
const newImageFilePath = `${originalImageFilePrefix}.${convertedExtension}`;
await converted.toFile(newImageFilePath);
</pre>
<h2 id="using-the-tool">Using the tool</h2>
<p>With our tool written, we now need to test it out. I have a directory of images that I want to compress:</p>
<p><code>~/code/github/open-graph-sharing-previews/images-to-shrink</code></p>
<p><img             class="aligncenter wp-image-154185 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/screenshot-of-images-before-optimization.png" alt="Screenshot Of Images Before Optimization" width="730" height="320"    /><noscript><img               class="aligncenter wp-image-154185 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/01/screenshot-of-images-before-optimization.png" alt="Screenshot Of Images Before Optimization" width="730" height="320"  /></noscript></p>
<p>Now, let’s run our tool against that directory and see what happens.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<pre class="language-bash hljs">TINIFY_KEY=YOUR_API_KEY_GOES_HERE IMAGE_DIR=~/code/github/open-graph-sharing-previews/images-to-shrink yarn start

yarn run v1.22.18
$ ts-node index.ts
Found 6 image files in /home/john/code/github/open-graph-sharing-previews/images-to-shrink

🖼️  Processing /home/john/code/github/open-graph-sharing-previews/images-to-shrink/screenshot-of-demo-with-devtools-open.png

- 🔴 253kb - screenshot-of-demo-with-devtools-open.png
- 🟢 83kb - screenshot-of-demo-with-devtools-open.png
- 🔽 67.19% reduction

✅ Processed! (1 of 6)

----------------------

🖼️  Processing /home/john/code/github/open-graph-sharing-previews/images-to-shrink/screenshot-of-email-demonstrating-sharing-with-a-non-cropped-image.png

- 🔴 158kb - screenshot-of-email-demonstrating-sharing-with-a-non-cropped-image.png
- 🟢 50kb - screenshot-of-email-demonstrating-sharing-with-a-non-cropped-image.png
- 🔽 68.35% reduction

✅ Processed! (2 of 6)

----------------------

🖼️  Processing /home/john/code/github/open-graph-sharing-previews/images-to-shrink/screenshot-of-tweet-demonstrating-sharing-with-a-cropped-image.png

- 🔴 391kb - screenshot-of-tweet-demonstrating-sharing-with-a-cropped-image.png
- 🟢 64kb - screenshot-of-tweet-demonstrating-sharing-with-a-cropped-image.webp
- 🔽 83.63% reduction

✅ Processed! (3 of 6)

----------------------

🖼️  Processing /home/john/code/github/open-graph-sharing-previews/images-to-shrink/screenshot-of-tweet-demonstrating-sharing.png

- 🔴 407kb - screenshot-of-tweet-demonstrating-sharing.png
- 🟢 78kb - screenshot-of-tweet-demonstrating-sharing.webp
- 🔽 80.84% reduction

✅ Processed! (4 of 6)

----------------------

🖼️  Processing /home/john/code/github/open-graph-sharing-previews/images-to-shrink/screenshot-of-twitter-validator.png

- 🔴 162kb - screenshot-of-twitter-validator.png
- 🟢 49kb - screenshot-of-twitter-validator.webp
- 🔽 69.75% reduction

✅ Processed! (5 of 6)

----------------------

🖼️  Processing /home/john/code/github/open-graph-sharing-previews/images-to-shrink/title-image.png

- 🔴 308kb - title-image.png
- 🟢 49kb - title-image.webp
- 🔽 84.09% reduction

✅ Processed! (6 of 6)

----------------------

************************************************
* Total savings for 6 images
- 🔴 1679kb
- 🟢 373kb
- 🔽 77.78% reduction
************************************************

Done in 25.23s.
</pre>
<p>Isn’t that impressive? We’ve reduced the file size of all of these images by an average amount of 77.78%! That’s a huge saving!</p>
<p>If we look a little closer, we’ll see that on two occasions the format remained a PNG file and the size shrunk. In four cases, the format has changed to a WebP file. When we look at our directory again, we can see that the files have been updated, and some new WebP files have been created:</p>
<p><img             class="aligncenter wp-image-154189 size-full jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/01/images-after-optimization-tinify-tiny-api-reduced-sizes.png" alt="Images After Optimization Tinify Tiny API Reduced Sizes" width="730" height="510"    /><noscript><img               class="aligncenter wp-image-154189 size-full" src="https://blog.logrocket.com/wp-content/uploads/2023/01/images-after-optimization-tinify-tiny-api-reduced-sizes.png" alt="Images After Optimization Tinify Tiny API Reduced Sizes" width="730" height="510"  /></noscript></p>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, we’ve seen how we can use the TinyPNG API to optimize our images. In addition to this, we also demonstrated how you can build a tool that uses the TinyPNG API to automatically optimize the images in a given directory.</p>
<p>It’s all automated, so we can now run this script whenever we want to optimize images in anywhere we want!</p>
<p>If you’re interested in learning other methods of image optimisation, you might find <a href="https://johnnyreilly.com/2022/12/26/docusaurus-image-cloudinary-rehype-plugin">this post on using Cloudinary as your image CDN</a> interesting.</p><div class="code-block code-block-21" >
<div class="blog-plug inline-plug typescript-plug"><h2><a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a>: Full visibility into your web and mobile apps</h2>
<a href="https://lp.logrocket.com/blg/typescript-signup" class="signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner" width="1200" height="677"/></noscript></a>
<p ><a href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and @ngrx/store.</p>
<p>In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page and mobile apps.</p>
<a class="signup" href="https://lp.logrocket.com/blg/typescript-signup" target="_blank" rel="noopener noreferrer">Try it for free</a>.</div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-154183" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/automate-image-optimization-tinypng-api/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/automate-image-optimization-tinypng-api/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-154183" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/automate-image-optimization-tinypng-api/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-154183" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/automate-image-optimization-tinypng-api/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>
<div cl