
  <rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:wfw="http://wellformedweb.org/CommentAPI/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
    xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
    xmlns:georss="http://www.georss.org/georss"
    xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#">
  
    <channel>
      <title>LogRocker Engineering Blog</title>
      <atom:link href="https://raw.githubusercontent.com/SalvaChiLlo/Reporting/main/logrocker.rss.xml" rel="self" type="application/rss+xml" />
      <link>https://LogRocker.engineering/</link>
      <description>The official blog of the LogRocker Engineering team.</description>
      <lastBuildDate>Sat, 29 Apr 2023 21:14:47 +0000</lastBuildDate>
      <language>en-US</language>
      <sy:updatePeriod>hourly</sy:updatePeriod>
      <sy:updateFrequency>
    1	</sy:updateFrequency>
  
  
      <image>
        <url>https://i0.wp.com/LogRocker.engineering/wp-content/uploads/2019/01/cropped-LogRocker_icon.jpg?fit=32%2C32&#038;ssl=1</url>
        <title>LogRocker Engineering Blog</title>
        <link>https://LogRocker.engineering/</link>
        <width>32</width>
        <height>32</height>
      </image>

		<item>
			<title>How to fix a NullPointerException in Android - LogRocket Blog</title>
			<link>https://blog.logrocket.com/fix-nullpointerexception-android/</link>

			<dc:creator><![CDATA[{author}]]></dc:creator>
			<category><![CDATA[{category}]]></category>
			<guid isPermaLink="false">https://blog.logrocket.com/fix-nullpointerexception-android/</guid>

			<description><![CDATA[{description}]]></description>
			<content:encoded><![CDATA[
<h1>How to fix a NullPointerException in Android - LogRocket Blog<h1>
<a href="https://blog.logrocket.com/fix-nullpointerexception-android/">How to fix a NullPointerException in Android - LogRocket Blog</a>
<div class="mainheading">

<div class="row post-top-meta hidden-md-down">
<div class="col-md-2 col-xs-12">
<a href="https://blog.logrocket.com/author/mamtadalal/">
<img alt="alt" src="https://blog.logrocket.com/wp-content/uploads/2022/01/mamta-dalal.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo jetpack-lazy-image" height="72" width="72"  /><noscript><img  alt="" src="https://blog.logrocket.com/wp-content/uploads/2022/01/mamta-dalal.png?w=150&amp;h=150&amp;crop=1" class="avatar avatar-72 photo" height="72" width="72"/></noscript> </a>
</div>
<div class="col-md-10 col-xs-12">
<a class="text-capitalize link-dark" href="https://blog.logrocket.com/author/mamtadalal/">
Mamta Dalal <span class="btn follow">Follow</span></a>
<span class="author-description d-block">Mamta Dalal is a technology enthusiast and freelance writer. She has worked with several different technologies and is always eager to learn newer ones.</span>
</div>
</div>
<h1 class="posttitle">How to fix a <code>NullPointerException</code> in Android</h1>
<p>
<span class="post-date"><time class="post-date">
 April 20, 2023 </time></span>
<span class="dot"/>
<span class="readingtime">6 min read</span>
<span class="wordcount">1816</span>
<span class="logrocket_editor">105</span>
</p>
</div>
<article class="article-post">
<p>You have just finished creating an Android-based application and attempt to execute it. As far as you know, the application is fine, there are no syntax errors and the code should just work fine. But when you run it now, your application quits saying an uncaught <code>RuntimeException</code> was thrown. Attempting to dig up the cause, you find something that gives you a clue: a <code>NullPointerException</code> has occurred.</p>
<p>With this, you begin your journey into the world of exception handling with Android, in particular, handling <code>NullPointerException</code>. In this post, we’ll discuss how to fix <code>NullPointerException</code>s in Android apps.</p>
<p><em>Jump ahead</em>:</p>
<ul>
<li><a href="#what-is-null-pointer-exception">What is a <code>NullPointerException</code>?</a>
<ul >
<li><a href="#why-do-null-pointer-exceptions-occur">Why do <code>NullPointerException</code>s occur?</a></li>
</ul>
</li>
<li><a href="#avoiding-null-pointer-exceptions-java">Avoiding <code>NullPointerException</code>s in Java</a>
<ul >
<li><a href="#using-smartcast">Using SmartCast</a></li>
<li><a href="#using-elvis-operator">Using the Elvis operator</a></li>
</ul>
</li>
<li><a href="#avoiding-null-pointer-exceptions-kotlin">Avoiding <code>NullPointerException</code>s in Kotlin</a></li>
<li><a href="#using-logcat-detect-fix-null-pointer-exception-android-studio">Using <code>logcat</code> to detect and fix a <code>NullPointerException</code> in Android Studio</a></li>
<li><a href="#setting-breakpoints-debug-null-pointer-exceptions">Setting breakpoints to debug <code>NullPointerException</code>s</a></li>
</ul>
<h2 id="what-is-null-pointer-exception">What is a <code>NullPointerException</code>?</h2>
<p>First, let’s quickly refresh ourselves on exceptions. They are events or abnormal conditions in a program that occur during execution and disrupt the normal flow of the program.</p>
<p>An exception can occur for different reasons, such as:</p>
<ul>
<li>A user enters invalid data to a field</li>
<li>A file that must be opened cannot be found</li>
<li>A network connection is lost in the middle of communication</li>
<li>The JVM has run out of memory</li>
</ul>
<p>When an error occurs inside a method, it throws an exception. A <code><a href="https://developer.android.com/reference/java/lang/NullPointerException">NullPointerException</a></code> is one of the most common runtime exceptions.</p>
<p>In Java, <code>null</code> is a special value that represents the absence of a value. When you try to use a <code>null</code> value, you get a <code>NullPointerException</code> because the operation you are trying to perform cannot be completed on a <code>null</code> value.</p>
<p>In Kotlin, <code>null</code> is not a value, but a <a href="https://blog.logrocket.com/complete-guide-null-safety-kotlin/">type of its own called nullable</a>. By default, every object in Kotlin is non-null, which means it cannot have a null value.</p>
<h3 id="why-do-null-pointer-exceptions-occur">Why do <code>NullPointerException</code>s occur?</h3>
<p>You might encounter a <code>NullPointerException</code> when trying to access a view, resource, or data that hasn’t been properly initialized or loaded yet. Some of the situations in which a <code>NullPointerException</code> can occur in Java, according to the <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html">Java Language Specification</a>, include:</p>
<ul>
<li>Attempting to access elements of a <code>null</code> array</li>
<li>Using <code>switch</code> with a null expression</li>
<li>Accessing instance fields of <code>null</code> references</li>
<li>Invoking instance methods of a <code>null</code> reference</li>
<li>Using an integer or floating point operator that has one of its operands as a boxed <code>null</code> reference</li>
<li>Attempting an unboxing conversion with the boxed value as <code>null</code></li>
<li>Calling <code>super</code> on a <code>null</code> reference</li>
</ul>
<h2 id="avoiding-null-pointer-exception-java">Avoiding <code>NullPointerException</code>s in Java</h2>
<p>Below are some best practices to avoid <code>NullPointerException</code>s in Java:</p>
<ul>
<li>String comparison with literals</li>
<li>Avoid returning null from your methods</li>
<li>Keep checking arguments of methods</li>
<li>Use <code>String.valueOf()</code> rather than <code>toString()</code></li>
<li>Using primitives data types as much as possible</li>
<li>Avoid chained method calls</li>
<li>Use ternary operator</li>
</ul>
<p>By contrast, Kotlin is a smarter, more modern language that has been designed to avoid <code>NullPointerException</code>s through several mechanisms, such as:</p>
<ul>
<li>Using nullable and non-nullable types</li>
<li>Using the SmartCast feature</li>
<li>Safe calls</li>
<li>The Elvis operator</li>
</ul>
<p>In Kotlin, all regular types are non-nullable unless you explicitly mark them as nullable with a question mark <code>?</code>, e.g., <code>String?</code>.</p>
<p>Consider the below Kotlin code:</p>
<pre class="language-kotlin hljs">fun getlen(name: String) = name.length
</pre>
<p>The parameter <code>name</code> has a type of <code>String</code>, which means it must always contain a <code>String</code> instance and cannot contain <code>null</code>. This code ensures that a <code>NullPointerException</code> at runtime is unlikely to occur.</p>
<p>Instead, any attempt to pass a <code>null</code> value to the <code>getlen(name: String)</code> function will cause a compile-time error: <code>Null cannot be a value of a non-null type String</code>. This is because the compiler has enforced the rule that arguments of <code>getlen()</code> cannot be null.</p>
<p>Consider the below snippet, in which the code is obvious to us but may not be immediately obvious to the compiler:</p>
<pre class="language-kotlin hljs">class TestNPE {
    companion object {
        @JvmStatic
        fun main(args: Array&lt;String>) {
        var m : String? // here, m is declared as nullable
println("m is : $m")
var x: Int
x = 150
if (x == 150)
    println("Value of m is : $m")
        }
    }
}
</pre>
<p>The compiler raises a compiler error because <code>m</code> is not initialized:</p>
<p><img             class="aligncenter size-full wp-image-167767 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/compiler-error-m-not-initialized.png" alt="A compiler error is raised because m is not initialized" width="730" height="30"    /><noscript><img               class="aligncenter size-full wp-image-167767" src="https://blog.logrocket.com/wp-content/uploads/2023/04/compiler-error-m-not-initialized.png" alt="A compiler error is raised because m is not initialized" width="730" height="30"  /></noscript></p>
<p>Thus, instead of proceeding to runtime and then raising an exception, it stops at the compilation stage with a compiler error.</p>
<h3 id="using-smartcast">Using SmartCast</h3>
<p>In order to use nullable types, Kotlin has an option called <a href="https://blog.logrocket.com/type-casting-kotlin-unsafe-vs-safe/">safe cast, or smart cast</a>. Through this feature, the Kotlin compiler will trace situations inside <code>if</code> and other conditional expressions. So, if the compiler finds a variable belonging to a non-null type, it will allow you to access this variable safely.</p>
<p>In certain cases, it is not possible for the compiler to cast types, in which case it will throw an exception; this is called unsafe casting. Consider a nullable string (<code>String?</code>) which cannot be cast to a non-nullable string (<code>String</code>). It will throw an exception.</p>
<p>Kotlin addresses this by providing a safe cast operator <code>as?</code> to cast safely to another type. If casting is not possible, it returns a <code>null</code> rather than throwing a <code>ClassCastException</code>.</p>
<p>Example:</p>
<pre class="language-kotlin hljs">val aInt: Int? = a as? Int
</pre>
<h3 id="using-elvis-operator">Using the Elvis operator <code>?:</code></h3>
<p>Kotlin also has an advanced operator called the Elvis operator (<code>?:</code>) that returns either a non-null value or the default value, even if the conditional expression is null. It also checks the null safety of values.</p>
<p>Consider an example:</p>
<pre class="language-kotlin hljs">val count = attendance?.length ?: -1
</pre>
<p>This means:</p>
<pre class="language-kotlin hljs">val count: Int = if (attendance != null) attendance.length else -1
</pre>
<p>Despite this, an <code>NullPointerException</code> could still occur in Kotlin-based Android applications.</p>
<p>Consider the earlier example of class <code>TestNPE</code>. Now, the code is modified such that <code>m</code> is initialized but is used with a non-null assertion operator (<code>!!</code>), which converts a given value to a non-null type and throws an exception if the value is <code>null</code>.</p><div class="code-block code-block-57" >
<hr/>
<div >
<a href="https://lp.logrocket.com/blg/learn-more" class="embed-link">
<div class="tweet-embed-container">
<div class="single-tweet">
<img src="https://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"   class=" jetpack-lazy-image"/><noscript><img  src="http://blog.logrocket.com/wp-content/uploads/2022/11/Screen-Shot-2022-09-08-at-6.20.35-PM.png"/></noscript>
</div>
<div class="embed-tweet-right">
<h2>Over 200k developers use LogRocket to create better digital experiences</h2>
<div class="embed-btn"><img src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"   class=" jetpack-lazy-image"/><noscript><img  src="https://blog.logrocket.com/wp-content/uploads/2022/08/rocket-button-icon.png"/></noscript>Learn more →</div>
</div>
</div></a></div>
<hr/>
<meta>
@media all and (max-width: 800px){
    .tweet-embed-container {flex-direction: column !important;}
    .single-tweet, .embed-tweet-right {width: 100% !important;}
}
.embed-link {text-decoration: none;}
.embed-link:hover {text-decoration: none;}
.tweet-embed-container {border-radius: 20px;
  background: radial-gradient(79.69% 102.24% at 100% 100.11%, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0)), radial-gradient(89.7% 115.09% at 3.43% 2.75%, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0)), #764ABC;
background-blend-mode: overlay, overlay, normal;
  box-shadow: 0 4px 0 #d5d5d5;
  width: auto;
  padding: 20px 15px;
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  align-items: center;
  margin: 0 auto;
  gap: 3%;
}
.single-tweet {width: 50%;}
.single-tweet img {max-width: 100%;height: auto; border-radius:7px;}
.embed-tweet-right {width: 46%;}
.embed-tweet-right h2 {font-family: 'Avenir';
font-style: normal;
font-weight: 500;
font-size: 16px;
line-height: 28px;
color: #FFFFFF;}
.embed-btn {
  display: flex;
  flex-direction: row;
  justify-content: left;
  width: 170px;
  gap: 5px;
  align-items: center;
  padding: 0px 10px;
  font-family: 'Avenir';
font-style: normal;
font-weight: 900;
font-size: 16px;
line-height: 16px;
color: #764ABC;
height: 48px;
/* White */
background: #FFFFFF;
mix-blend-mode: normal;
box-shadow: 0px 24px 30px rgba(0, 0, 0, 0.11);
border-radius: 80px;
  border: none;
}<meta></div>
<pre class="language-kotlin hljs">class TestNPE {
    companion object {
        @JvmStatic
        fun main(args: Array&lt;String>) {
            var m: String?=null // here, m is declared
//as nullable
            var x: Int
            x = 150
            if (x == 150)
            println("m is : $m")
            var mlen = m!!.length
            println("length of m is : $mlen")
        }
    }
}
</pre>
<p>In this case, a <code>NullPointerException</code> will be thrown, as shown here:</p>
<p><img             class="aligncenter size-full wp-image-167769 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nullpointerexception-thrown.png" alt="A NullPointerException is thrown" width="730" height="168"    /><noscript><img               class="aligncenter size-full wp-image-167769" src="https://blog.logrocket.com/wp-content/uploads/2023/04/nullpointerexception-thrown.png" alt="A NullPointerException is thrown" width="730" height="168"  /></noscript></p>
<h2 id="avoiding-null-pointer-exceptions-kotlin">Avoiding <code>NullPointerExceptions</code> in Kotlin</h2>
<p>A few causes of a <code>NullPointerException</code> in Kotlin are:</p>
<ul>
<li>Explicitly calling <code>throw NullPointerException()</code></li>
<li>Using the <code>!!</code> operator</li>
<li>Data inconsistency with regard to initialization</li>
<li>Java interoperation</li>
</ul>
<p>To prevent <code>NullPointerException</code>s, you should always ensure that your variables and objects are properly initialized before you use them. You can also use null checks or <code>try … catch</code> blocks to handle possible null values and prevent your app from crashing.</p>
<p>An extremely simplified example of using <code>try … catch</code> is given below:</p>
<pre class="language-kotlin hljs">class TestNPE {
    companion object {
        @JvmStatic
        fun main(args: Array&lt;String>) {
            var m: String?=null // here, m is declared 
//as nullable
           try {
               var x: Int
               x = 150
               if (x == 150)
                   println("m is : $m")
               var mlen = m!!.length
               println("length of m is : $mlen")
           }catch( ne: NullPointerException)
           {
               println("Null Pointer Exception has 
occurred. ")
           }
        }
    }
}
</pre>
<p>The code that is likely to cause a NullPointerException is enclosed in a <code>try … catch</code> block.</p>
<p>The advantage here is that the developer has control over what must be done when the exception is thrown. Here, a simple message is displayed. In practical scenarios, one can close any currently open resources, such as files, before terminating the program.</p>
<h2 id="using-logcat-detect-fix-null-pointer-exception-android-studio">Using <code>logcat</code> to detect and fix a <code>NullPointerException</code> in Android Studio</h2>
<p>Whenever an Android application crashes, a stack trace is written to the console that contains vital information that can help identify and solve the issue. There are two ways to get to this stack trace:</p>
<ol>
<li >
<ol>
<li>Using Google’s <code>adb</code> shell utility to obtain a <code>logcat</code> file, which can help explain why the application crashed:
<pre class="language-kotlin hljs">adb logcat > logcat.txt
</pre>
<p>Open <code>logcat.txt</code> and search for the application name. It will have information on why the application failed along with other details such as line number, class name, and so on
<li>In Android Studio, either press <code>Alt + 6</code>, or click the <strong>Logcat</strong> button in the status bar. Make sure your emulator or device is selected in the <strong>Devices</strong> panel, then locate the stack trace.<img             class="aligncenter size-full wp-image-167772 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/locate-stack-trace-android-studio.jpg" alt="Locate the stack trace in Android Studio" width="730" height="385"    /><noscript><img               class="aligncenter size-full wp-image-167772" src="https://blog.logrocket.com/wp-content/uploads/2023/04/locate-stack-trace-android-studio.jpg" alt="Locate the stack trace in Android Studio" width="730" height="385"  /></noscript></li>



<p>There may be a lot of stuff logged into <code>logcat</code>, so you may need to scroll a bit, or you can clear the <code>logcat</code> through the Recycle Bin option and let the app crash again to bring the most recent stack trace in the log to the top.</p>
<p>An important point of note is that if your app is already live, then you cannot use <code>logcat</code>.</p>
<p><a href="https://developer.android.com/studio/releases#logcat">Android Studio Electric Eel’s latest version</a> has an updated <code>logcat</code>, which facilitates easier parsing, querying, and tracking of logs. The new <code>logcat</code> also:</p>
<ul>
<li>Formats logs for easy scanning for tags, messages, and other useful information</li>
<li>Identifies various types of logs, such as warnings and errors.</li>
<li>Makes it easier to track logs from your app across app crashes and restarts</li>
</ul>
<p>When <code>logcat</code> notices that your app process has stopped and restarted. you’ll see a message in the output similar to below:</p>
<pre class="language-plaintext hljs">PROCESS ENDED</pre>
<p>Or:</p>
<pre class="language-plaintext hljs">PROCESS STARTED</pre>
<p>Developers can fine tune the command to give the message timestamp, for example:</p>
<pre class="language-kotlin hljs">adb logcat -v time
</pre>
<p>Using <code>logcat</code>, you can determine whether a widget or component is declared but not defined yet, or a variable is <code>null</code> and being used. Sometimes, it could happen that a context is <code>null</code> during navigation between screens, and you are attempting to use that context without realizing it’s <code>null</code>.</p>
<h2 id="setting-breakpoints-debug-null-pointer-exceptions">Setting breakpoints to debug <code>NullPointerException</code></h2>
<p>If you have a large application, it can be quite cumbersome to debug it. You can set breakpoints in your code that let you debug your code block by block.</p>
<p>A breakpoint serves as a stop sign for the marked piece of code. When a breakpoint is encountered during application debugging, it will pause execution, thus enabling allowing developers to examine in detail what’s happening and use other debugging tools as required.</p>
<p>To use breakpoints, add a breakpoint by clicking the gutter in the code editor next to the line number where you want execution to pause. A dot will appear next to the line number, and the line will be highlighted. See below; two breakpoints are added:</p>
<p><img             class="aligncenter size-full wp-image-167774 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/two-breakpoints-debugging.png" alt="Two breakpoints were added for debugging" width="730" height="89"    /><noscript><img               class="aligncenter size-full wp-image-167774" src="https://blog.logrocket.com/wp-content/uploads/2023/04/two-breakpoints-debugging.png" alt="Two breakpoints were added for debugging" width="730" height="89"  /></noscript></p>
<p>Click <strong>Run > Debug ‘app’</strong>. The program halts at the first breakpoint and you can examine the values in the Debug window at the bottom of Android Studio:</p>
<p><img             class="aligncenter size-full wp-image-167776 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/debug-window-android-studio.png" alt="The Debug window in Android Studio" width="730" height="165"    /><noscript><img               class="aligncenter size-full wp-image-167776" src="https://blog.logrocket.com/wp-content/uploads/2023/04/debug-window-android-studio.png" alt="The Debug window in Android Studio" width="730" height="165"  /></noscript></p>
<p>There are various buttons such as <strong>Step Over</strong> and <strong>Step Into</strong> that can help you navigate further:</p>
<p><img             class="aligncenter size-full wp-image-167779 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/step-over-step-into-buttons.png" alt="The Step Over and Step Into buttons" width="730" height="166"    /><noscript><img               class="aligncenter size-full wp-image-167779" src="https://blog.logrocket.com/wp-content/uploads/2023/04/step-over-step-into-buttons.png" alt="The Step Over and Step Into buttons" width="730" height="166"  /></noscript></p>
<p>Besides examining the current values of certain operands and expressions, you can also evaluate expressions using the <strong>Evaluate</strong> option.</p>
<p>In the below example, I wanted to know what the value of <code>x</code> added to 100 would be. The window shows me the result based on the current value of <code>x</code>:</p>
<p><img             class="aligncenter size-full wp-image-167782 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2023/04/result-current-value-x.png" alt="Getting the result of the current value of X" width="730" height="551"    /><noscript><img               class="aligncenter size-full wp-image-167782" src="https://blog.logrocket.com/wp-content/uploads/2023/04/result-current-value-x.png" alt="Getting the result of the current value of X" width="730" height="551"  /></noscript></p>
<p>Here is a detailed explanation of various <a href="https://google-developer-training.github.io/android-developer-fundamentals-course-concepts-v2/unit-1-get-started/lesson-3-testing,-debugging,-and-using-support-libraries/3-1-c-the-android-studio-debugger/3-1-c-the-android-studio-debugger.html">terms related to debugging in Android Studio</a>.</p>
<h2>Conclusion</h2>
<p>To conclude, in Android development, there are various mechanisms available with Java and Kotlin that are designed to aid developers in avoiding <code>NullPointerException</code>s. In the cases these exceptions still occur, you should now have a variety of tools that help identify the cause and debug code.</p><div class="code-block code-block-32" >
<div class="blog-plug inline-plug kotlin-plug"><h2><a href="https://lp.logrocket.com/blg/kotlin-signup">LogRocket</a>: Instantly recreate issues in your Android apps.</h2><a class="signup" href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer"><img class="alignnone size-full wp-image-46 jetpack-lazy-image" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"  /><noscript><img  class="alignnone size-full wp-image-46" src="https://blog.logrocket.com/wp-content/uploads/2022/11/react-native-plug_android-1.png"/></noscript></a><p ><a href="https://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">LogRocket</a> is an Android monitoring solution that helps you reproduce issues instantly, prioritize bugs, and understand performance in your Android apps.</p><p>LogRocket also helps you increase conversion rates and product usage by showing you exactly how users are interacting with your app. LogRocket's product analytics features surface the reasons why users don't complete a particular flow or don't adopt a new feature.</p><p>Start proactively monitoring your Android apps — <a class="signup" href="hhttps://lp.logrocket.com/blg/kotlin-signup" target="_blank" rel="noopener noreferrer">try LogRocket for free</a>.</p></div>
</div>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-167762" class="share-twitter sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-167762" class="share-linkedin sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-167762" class="share-facebook sd-button share-icon" href="https://blog.logrocket.com/fix-nullpointerexception-android/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-end"/></ul></div></div></div>


</p></li></ol></li></ol></article>
]]></content:encoded>

			<wfw:commentRss>https://blog.logrocket.com/fix-nullpointerexception-android/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		</item>    

	</channel>
</rss>

